
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_612658 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_612658](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_612658): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_613268 = ref object of OpenApiRestCall_612658
proc url_PostAddClientIDToOpenIDConnectProvider_613270(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_613269(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613271 = query.getOrDefault("Action")
  valid_613271 = validateParameter(valid_613271, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_613271 != nil:
    section.add "Action", valid_613271
  var valid_613272 = query.getOrDefault("Version")
  valid_613272 = validateParameter(valid_613272, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613272 != nil:
    section.add "Version", valid_613272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613273 = header.getOrDefault("X-Amz-Signature")
  valid_613273 = validateParameter(valid_613273, JString, required = false,
                                 default = nil)
  if valid_613273 != nil:
    section.add "X-Amz-Signature", valid_613273
  var valid_613274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613274 = validateParameter(valid_613274, JString, required = false,
                                 default = nil)
  if valid_613274 != nil:
    section.add "X-Amz-Content-Sha256", valid_613274
  var valid_613275 = header.getOrDefault("X-Amz-Date")
  valid_613275 = validateParameter(valid_613275, JString, required = false,
                                 default = nil)
  if valid_613275 != nil:
    section.add "X-Amz-Date", valid_613275
  var valid_613276 = header.getOrDefault("X-Amz-Credential")
  valid_613276 = validateParameter(valid_613276, JString, required = false,
                                 default = nil)
  if valid_613276 != nil:
    section.add "X-Amz-Credential", valid_613276
  var valid_613277 = header.getOrDefault("X-Amz-Security-Token")
  valid_613277 = validateParameter(valid_613277, JString, required = false,
                                 default = nil)
  if valid_613277 != nil:
    section.add "X-Amz-Security-Token", valid_613277
  var valid_613278 = header.getOrDefault("X-Amz-Algorithm")
  valid_613278 = validateParameter(valid_613278, JString, required = false,
                                 default = nil)
  if valid_613278 != nil:
    section.add "X-Amz-Algorithm", valid_613278
  var valid_613279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613279 = validateParameter(valid_613279, JString, required = false,
                                 default = nil)
  if valid_613279 != nil:
    section.add "X-Amz-SignedHeaders", valid_613279
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_613280 = formData.getOrDefault("ClientID")
  valid_613280 = validateParameter(valid_613280, JString, required = true,
                                 default = nil)
  if valid_613280 != nil:
    section.add "ClientID", valid_613280
  var valid_613281 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_613281 = validateParameter(valid_613281, JString, required = true,
                                 default = nil)
  if valid_613281 != nil:
    section.add "OpenIDConnectProviderArn", valid_613281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613282: Call_PostAddClientIDToOpenIDConnectProvider_613268;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_613282.validator(path, query, header, formData, body)
  let scheme = call_613282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613282.url(scheme.get, call_613282.host, call_613282.base,
                         call_613282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613282, url, valid)

proc call*(call_613283: Call_PostAddClientIDToOpenIDConnectProvider_613268;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_613284 = newJObject()
  var formData_613285 = newJObject()
  add(formData_613285, "ClientID", newJString(ClientID))
  add(query_613284, "Action", newJString(Action))
  add(query_613284, "Version", newJString(Version))
  add(formData_613285, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_613283.call(nil, query_613284, nil, formData_613285, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_613268(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_613269, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_613270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_612996 = ref object of OpenApiRestCall_612658
proc url_GetAddClientIDToOpenIDConnectProvider_612998(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_612997(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_613110 = query.getOrDefault("ClientID")
  valid_613110 = validateParameter(valid_613110, JString, required = true,
                                 default = nil)
  if valid_613110 != nil:
    section.add "ClientID", valid_613110
  var valid_613111 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_613111 = validateParameter(valid_613111, JString, required = true,
                                 default = nil)
  if valid_613111 != nil:
    section.add "OpenIDConnectProviderArn", valid_613111
  var valid_613125 = query.getOrDefault("Action")
  valid_613125 = validateParameter(valid_613125, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_613125 != nil:
    section.add "Action", valid_613125
  var valid_613126 = query.getOrDefault("Version")
  valid_613126 = validateParameter(valid_613126, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613126 != nil:
    section.add "Version", valid_613126
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613127 = header.getOrDefault("X-Amz-Signature")
  valid_613127 = validateParameter(valid_613127, JString, required = false,
                                 default = nil)
  if valid_613127 != nil:
    section.add "X-Amz-Signature", valid_613127
  var valid_613128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613128 = validateParameter(valid_613128, JString, required = false,
                                 default = nil)
  if valid_613128 != nil:
    section.add "X-Amz-Content-Sha256", valid_613128
  var valid_613129 = header.getOrDefault("X-Amz-Date")
  valid_613129 = validateParameter(valid_613129, JString, required = false,
                                 default = nil)
  if valid_613129 != nil:
    section.add "X-Amz-Date", valid_613129
  var valid_613130 = header.getOrDefault("X-Amz-Credential")
  valid_613130 = validateParameter(valid_613130, JString, required = false,
                                 default = nil)
  if valid_613130 != nil:
    section.add "X-Amz-Credential", valid_613130
  var valid_613131 = header.getOrDefault("X-Amz-Security-Token")
  valid_613131 = validateParameter(valid_613131, JString, required = false,
                                 default = nil)
  if valid_613131 != nil:
    section.add "X-Amz-Security-Token", valid_613131
  var valid_613132 = header.getOrDefault("X-Amz-Algorithm")
  valid_613132 = validateParameter(valid_613132, JString, required = false,
                                 default = nil)
  if valid_613132 != nil:
    section.add "X-Amz-Algorithm", valid_613132
  var valid_613133 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613133 = validateParameter(valid_613133, JString, required = false,
                                 default = nil)
  if valid_613133 != nil:
    section.add "X-Amz-SignedHeaders", valid_613133
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613156: Call_GetAddClientIDToOpenIDConnectProvider_612996;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_613156.validator(path, query, header, formData, body)
  let scheme = call_613156.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613156.url(scheme.get, call_613156.host, call_613156.base,
                         call_613156.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613156, url, valid)

proc call*(call_613227: Call_GetAddClientIDToOpenIDConnectProvider_612996;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613228 = newJObject()
  add(query_613228, "ClientID", newJString(ClientID))
  add(query_613228, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_613228, "Action", newJString(Action))
  add(query_613228, "Version", newJString(Version))
  result = call_613227.call(nil, query_613228, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_612996(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_612997, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_612998,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_613303 = ref object of OpenApiRestCall_612658
proc url_PostAddRoleToInstanceProfile_613305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToInstanceProfile_613304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613306 = query.getOrDefault("Action")
  valid_613306 = validateParameter(valid_613306, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_613306 != nil:
    section.add "Action", valid_613306
  var valid_613307 = query.getOrDefault("Version")
  valid_613307 = validateParameter(valid_613307, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613307 != nil:
    section.add "Version", valid_613307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613308 = header.getOrDefault("X-Amz-Signature")
  valid_613308 = validateParameter(valid_613308, JString, required = false,
                                 default = nil)
  if valid_613308 != nil:
    section.add "X-Amz-Signature", valid_613308
  var valid_613309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613309 = validateParameter(valid_613309, JString, required = false,
                                 default = nil)
  if valid_613309 != nil:
    section.add "X-Amz-Content-Sha256", valid_613309
  var valid_613310 = header.getOrDefault("X-Amz-Date")
  valid_613310 = validateParameter(valid_613310, JString, required = false,
                                 default = nil)
  if valid_613310 != nil:
    section.add "X-Amz-Date", valid_613310
  var valid_613311 = header.getOrDefault("X-Amz-Credential")
  valid_613311 = validateParameter(valid_613311, JString, required = false,
                                 default = nil)
  if valid_613311 != nil:
    section.add "X-Amz-Credential", valid_613311
  var valid_613312 = header.getOrDefault("X-Amz-Security-Token")
  valid_613312 = validateParameter(valid_613312, JString, required = false,
                                 default = nil)
  if valid_613312 != nil:
    section.add "X-Amz-Security-Token", valid_613312
  var valid_613313 = header.getOrDefault("X-Amz-Algorithm")
  valid_613313 = validateParameter(valid_613313, JString, required = false,
                                 default = nil)
  if valid_613313 != nil:
    section.add "X-Amz-Algorithm", valid_613313
  var valid_613314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613314 = validateParameter(valid_613314, JString, required = false,
                                 default = nil)
  if valid_613314 != nil:
    section.add "X-Amz-SignedHeaders", valid_613314
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613315 = formData.getOrDefault("RoleName")
  valid_613315 = validateParameter(valid_613315, JString, required = true,
                                 default = nil)
  if valid_613315 != nil:
    section.add "RoleName", valid_613315
  var valid_613316 = formData.getOrDefault("InstanceProfileName")
  valid_613316 = validateParameter(valid_613316, JString, required = true,
                                 default = nil)
  if valid_613316 != nil:
    section.add "InstanceProfileName", valid_613316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613317: Call_PostAddRoleToInstanceProfile_613303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_613317.validator(path, query, header, formData, body)
  let scheme = call_613317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613317.url(scheme.get, call_613317.host, call_613317.base,
                         call_613317.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613317, url, valid)

proc call*(call_613318: Call_PostAddRoleToInstanceProfile_613303; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613319 = newJObject()
  var formData_613320 = newJObject()
  add(formData_613320, "RoleName", newJString(RoleName))
  add(query_613319, "Action", newJString(Action))
  add(formData_613320, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613319, "Version", newJString(Version))
  result = call_613318.call(nil, query_613319, nil, formData_613320, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_613303(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_613304, base: "/",
    url: url_PostAddRoleToInstanceProfile_613305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_613286 = ref object of OpenApiRestCall_612658
proc url_GetAddRoleToInstanceProfile_613288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToInstanceProfile_613287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_613289 = query.getOrDefault("RoleName")
  valid_613289 = validateParameter(valid_613289, JString, required = true,
                                 default = nil)
  if valid_613289 != nil:
    section.add "RoleName", valid_613289
  var valid_613290 = query.getOrDefault("Action")
  valid_613290 = validateParameter(valid_613290, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_613290 != nil:
    section.add "Action", valid_613290
  var valid_613291 = query.getOrDefault("InstanceProfileName")
  valid_613291 = validateParameter(valid_613291, JString, required = true,
                                 default = nil)
  if valid_613291 != nil:
    section.add "InstanceProfileName", valid_613291
  var valid_613292 = query.getOrDefault("Version")
  valid_613292 = validateParameter(valid_613292, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613292 != nil:
    section.add "Version", valid_613292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613293 = header.getOrDefault("X-Amz-Signature")
  valid_613293 = validateParameter(valid_613293, JString, required = false,
                                 default = nil)
  if valid_613293 != nil:
    section.add "X-Amz-Signature", valid_613293
  var valid_613294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613294 = validateParameter(valid_613294, JString, required = false,
                                 default = nil)
  if valid_613294 != nil:
    section.add "X-Amz-Content-Sha256", valid_613294
  var valid_613295 = header.getOrDefault("X-Amz-Date")
  valid_613295 = validateParameter(valid_613295, JString, required = false,
                                 default = nil)
  if valid_613295 != nil:
    section.add "X-Amz-Date", valid_613295
  var valid_613296 = header.getOrDefault("X-Amz-Credential")
  valid_613296 = validateParameter(valid_613296, JString, required = false,
                                 default = nil)
  if valid_613296 != nil:
    section.add "X-Amz-Credential", valid_613296
  var valid_613297 = header.getOrDefault("X-Amz-Security-Token")
  valid_613297 = validateParameter(valid_613297, JString, required = false,
                                 default = nil)
  if valid_613297 != nil:
    section.add "X-Amz-Security-Token", valid_613297
  var valid_613298 = header.getOrDefault("X-Amz-Algorithm")
  valid_613298 = validateParameter(valid_613298, JString, required = false,
                                 default = nil)
  if valid_613298 != nil:
    section.add "X-Amz-Algorithm", valid_613298
  var valid_613299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613299 = validateParameter(valid_613299, JString, required = false,
                                 default = nil)
  if valid_613299 != nil:
    section.add "X-Amz-SignedHeaders", valid_613299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613300: Call_GetAddRoleToInstanceProfile_613286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_613300.validator(path, query, header, formData, body)
  let scheme = call_613300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613300.url(scheme.get, call_613300.host, call_613300.base,
                         call_613300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613300, url, valid)

proc call*(call_613301: Call_GetAddRoleToInstanceProfile_613286; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613302 = newJObject()
  add(query_613302, "RoleName", newJString(RoleName))
  add(query_613302, "Action", newJString(Action))
  add(query_613302, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613302, "Version", newJString(Version))
  result = call_613301.call(nil, query_613302, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_613286(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_613287, base: "/",
    url: url_GetAddRoleToInstanceProfile_613288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_613338 = ref object of OpenApiRestCall_612658
proc url_PostAddUserToGroup_613340(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddUserToGroup_613339(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613341 = query.getOrDefault("Action")
  valid_613341 = validateParameter(valid_613341, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_613341 != nil:
    section.add "Action", valid_613341
  var valid_613342 = query.getOrDefault("Version")
  valid_613342 = validateParameter(valid_613342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613342 != nil:
    section.add "Version", valid_613342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613343 = header.getOrDefault("X-Amz-Signature")
  valid_613343 = validateParameter(valid_613343, JString, required = false,
                                 default = nil)
  if valid_613343 != nil:
    section.add "X-Amz-Signature", valid_613343
  var valid_613344 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613344 = validateParameter(valid_613344, JString, required = false,
                                 default = nil)
  if valid_613344 != nil:
    section.add "X-Amz-Content-Sha256", valid_613344
  var valid_613345 = header.getOrDefault("X-Amz-Date")
  valid_613345 = validateParameter(valid_613345, JString, required = false,
                                 default = nil)
  if valid_613345 != nil:
    section.add "X-Amz-Date", valid_613345
  var valid_613346 = header.getOrDefault("X-Amz-Credential")
  valid_613346 = validateParameter(valid_613346, JString, required = false,
                                 default = nil)
  if valid_613346 != nil:
    section.add "X-Amz-Credential", valid_613346
  var valid_613347 = header.getOrDefault("X-Amz-Security-Token")
  valid_613347 = validateParameter(valid_613347, JString, required = false,
                                 default = nil)
  if valid_613347 != nil:
    section.add "X-Amz-Security-Token", valid_613347
  var valid_613348 = header.getOrDefault("X-Amz-Algorithm")
  valid_613348 = validateParameter(valid_613348, JString, required = false,
                                 default = nil)
  if valid_613348 != nil:
    section.add "X-Amz-Algorithm", valid_613348
  var valid_613349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613349 = validateParameter(valid_613349, JString, required = false,
                                 default = nil)
  if valid_613349 != nil:
    section.add "X-Amz-SignedHeaders", valid_613349
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613350 = formData.getOrDefault("GroupName")
  valid_613350 = validateParameter(valid_613350, JString, required = true,
                                 default = nil)
  if valid_613350 != nil:
    section.add "GroupName", valid_613350
  var valid_613351 = formData.getOrDefault("UserName")
  valid_613351 = validateParameter(valid_613351, JString, required = true,
                                 default = nil)
  if valid_613351 != nil:
    section.add "UserName", valid_613351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613352: Call_PostAddUserToGroup_613338; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_613352.validator(path, query, header, formData, body)
  let scheme = call_613352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613352.url(scheme.get, call_613352.host, call_613352.base,
                         call_613352.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613352, url, valid)

proc call*(call_613353: Call_PostAddUserToGroup_613338; GroupName: string;
          UserName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613354 = newJObject()
  var formData_613355 = newJObject()
  add(formData_613355, "GroupName", newJString(GroupName))
  add(formData_613355, "UserName", newJString(UserName))
  add(query_613354, "Action", newJString(Action))
  add(query_613354, "Version", newJString(Version))
  result = call_613353.call(nil, query_613354, nil, formData_613355, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_613338(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_613339, base: "/",
    url: url_PostAddUserToGroup_613340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_613321 = ref object of OpenApiRestCall_612658
proc url_GetAddUserToGroup_613323(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddUserToGroup_613322(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613324 = query.getOrDefault("UserName")
  valid_613324 = validateParameter(valid_613324, JString, required = true,
                                 default = nil)
  if valid_613324 != nil:
    section.add "UserName", valid_613324
  var valid_613325 = query.getOrDefault("GroupName")
  valid_613325 = validateParameter(valid_613325, JString, required = true,
                                 default = nil)
  if valid_613325 != nil:
    section.add "GroupName", valid_613325
  var valid_613326 = query.getOrDefault("Action")
  valid_613326 = validateParameter(valid_613326, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_613326 != nil:
    section.add "Action", valid_613326
  var valid_613327 = query.getOrDefault("Version")
  valid_613327 = validateParameter(valid_613327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613327 != nil:
    section.add "Version", valid_613327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613328 = header.getOrDefault("X-Amz-Signature")
  valid_613328 = validateParameter(valid_613328, JString, required = false,
                                 default = nil)
  if valid_613328 != nil:
    section.add "X-Amz-Signature", valid_613328
  var valid_613329 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613329 = validateParameter(valid_613329, JString, required = false,
                                 default = nil)
  if valid_613329 != nil:
    section.add "X-Amz-Content-Sha256", valid_613329
  var valid_613330 = header.getOrDefault("X-Amz-Date")
  valid_613330 = validateParameter(valid_613330, JString, required = false,
                                 default = nil)
  if valid_613330 != nil:
    section.add "X-Amz-Date", valid_613330
  var valid_613331 = header.getOrDefault("X-Amz-Credential")
  valid_613331 = validateParameter(valid_613331, JString, required = false,
                                 default = nil)
  if valid_613331 != nil:
    section.add "X-Amz-Credential", valid_613331
  var valid_613332 = header.getOrDefault("X-Amz-Security-Token")
  valid_613332 = validateParameter(valid_613332, JString, required = false,
                                 default = nil)
  if valid_613332 != nil:
    section.add "X-Amz-Security-Token", valid_613332
  var valid_613333 = header.getOrDefault("X-Amz-Algorithm")
  valid_613333 = validateParameter(valid_613333, JString, required = false,
                                 default = nil)
  if valid_613333 != nil:
    section.add "X-Amz-Algorithm", valid_613333
  var valid_613334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613334 = validateParameter(valid_613334, JString, required = false,
                                 default = nil)
  if valid_613334 != nil:
    section.add "X-Amz-SignedHeaders", valid_613334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613335: Call_GetAddUserToGroup_613321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_613335.validator(path, query, header, formData, body)
  let scheme = call_613335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613335.url(scheme.get, call_613335.host, call_613335.base,
                         call_613335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613335, url, valid)

proc call*(call_613336: Call_GetAddUserToGroup_613321; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613337 = newJObject()
  add(query_613337, "UserName", newJString(UserName))
  add(query_613337, "GroupName", newJString(GroupName))
  add(query_613337, "Action", newJString(Action))
  add(query_613337, "Version", newJString(Version))
  result = call_613336.call(nil, query_613337, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_613321(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_613322,
    base: "/", url: url_GetAddUserToGroup_613323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_613373 = ref object of OpenApiRestCall_612658
proc url_PostAttachGroupPolicy_613375(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachGroupPolicy_613374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613376 = query.getOrDefault("Action")
  valid_613376 = validateParameter(valid_613376, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_613376 != nil:
    section.add "Action", valid_613376
  var valid_613377 = query.getOrDefault("Version")
  valid_613377 = validateParameter(valid_613377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613377 != nil:
    section.add "Version", valid_613377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613378 = header.getOrDefault("X-Amz-Signature")
  valid_613378 = validateParameter(valid_613378, JString, required = false,
                                 default = nil)
  if valid_613378 != nil:
    section.add "X-Amz-Signature", valid_613378
  var valid_613379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613379 = validateParameter(valid_613379, JString, required = false,
                                 default = nil)
  if valid_613379 != nil:
    section.add "X-Amz-Content-Sha256", valid_613379
  var valid_613380 = header.getOrDefault("X-Amz-Date")
  valid_613380 = validateParameter(valid_613380, JString, required = false,
                                 default = nil)
  if valid_613380 != nil:
    section.add "X-Amz-Date", valid_613380
  var valid_613381 = header.getOrDefault("X-Amz-Credential")
  valid_613381 = validateParameter(valid_613381, JString, required = false,
                                 default = nil)
  if valid_613381 != nil:
    section.add "X-Amz-Credential", valid_613381
  var valid_613382 = header.getOrDefault("X-Amz-Security-Token")
  valid_613382 = validateParameter(valid_613382, JString, required = false,
                                 default = nil)
  if valid_613382 != nil:
    section.add "X-Amz-Security-Token", valid_613382
  var valid_613383 = header.getOrDefault("X-Amz-Algorithm")
  valid_613383 = validateParameter(valid_613383, JString, required = false,
                                 default = nil)
  if valid_613383 != nil:
    section.add "X-Amz-Algorithm", valid_613383
  var valid_613384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613384 = validateParameter(valid_613384, JString, required = false,
                                 default = nil)
  if valid_613384 != nil:
    section.add "X-Amz-SignedHeaders", valid_613384
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613385 = formData.getOrDefault("GroupName")
  valid_613385 = validateParameter(valid_613385, JString, required = true,
                                 default = nil)
  if valid_613385 != nil:
    section.add "GroupName", valid_613385
  var valid_613386 = formData.getOrDefault("PolicyArn")
  valid_613386 = validateParameter(valid_613386, JString, required = true,
                                 default = nil)
  if valid_613386 != nil:
    section.add "PolicyArn", valid_613386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613387: Call_PostAttachGroupPolicy_613373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613387.validator(path, query, header, formData, body)
  let scheme = call_613387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613387.url(scheme.get, call_613387.host, call_613387.base,
                         call_613387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613387, url, valid)

proc call*(call_613388: Call_PostAttachGroupPolicy_613373; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613389 = newJObject()
  var formData_613390 = newJObject()
  add(formData_613390, "GroupName", newJString(GroupName))
  add(formData_613390, "PolicyArn", newJString(PolicyArn))
  add(query_613389, "Action", newJString(Action))
  add(query_613389, "Version", newJString(Version))
  result = call_613388.call(nil, query_613389, nil, formData_613390, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_613373(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_613374, base: "/",
    url: url_PostAttachGroupPolicy_613375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_613356 = ref object of OpenApiRestCall_612658
proc url_GetAttachGroupPolicy_613358(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachGroupPolicy_613357(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613359 = query.getOrDefault("GroupName")
  valid_613359 = validateParameter(valid_613359, JString, required = true,
                                 default = nil)
  if valid_613359 != nil:
    section.add "GroupName", valid_613359
  var valid_613360 = query.getOrDefault("PolicyArn")
  valid_613360 = validateParameter(valid_613360, JString, required = true,
                                 default = nil)
  if valid_613360 != nil:
    section.add "PolicyArn", valid_613360
  var valid_613361 = query.getOrDefault("Action")
  valid_613361 = validateParameter(valid_613361, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_613361 != nil:
    section.add "Action", valid_613361
  var valid_613362 = query.getOrDefault("Version")
  valid_613362 = validateParameter(valid_613362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613362 != nil:
    section.add "Version", valid_613362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613363 = header.getOrDefault("X-Amz-Signature")
  valid_613363 = validateParameter(valid_613363, JString, required = false,
                                 default = nil)
  if valid_613363 != nil:
    section.add "X-Amz-Signature", valid_613363
  var valid_613364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613364 = validateParameter(valid_613364, JString, required = false,
                                 default = nil)
  if valid_613364 != nil:
    section.add "X-Amz-Content-Sha256", valid_613364
  var valid_613365 = header.getOrDefault("X-Amz-Date")
  valid_613365 = validateParameter(valid_613365, JString, required = false,
                                 default = nil)
  if valid_613365 != nil:
    section.add "X-Amz-Date", valid_613365
  var valid_613366 = header.getOrDefault("X-Amz-Credential")
  valid_613366 = validateParameter(valid_613366, JString, required = false,
                                 default = nil)
  if valid_613366 != nil:
    section.add "X-Amz-Credential", valid_613366
  var valid_613367 = header.getOrDefault("X-Amz-Security-Token")
  valid_613367 = validateParameter(valid_613367, JString, required = false,
                                 default = nil)
  if valid_613367 != nil:
    section.add "X-Amz-Security-Token", valid_613367
  var valid_613368 = header.getOrDefault("X-Amz-Algorithm")
  valid_613368 = validateParameter(valid_613368, JString, required = false,
                                 default = nil)
  if valid_613368 != nil:
    section.add "X-Amz-Algorithm", valid_613368
  var valid_613369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613369 = validateParameter(valid_613369, JString, required = false,
                                 default = nil)
  if valid_613369 != nil:
    section.add "X-Amz-SignedHeaders", valid_613369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613370: Call_GetAttachGroupPolicy_613356; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613370.validator(path, query, header, formData, body)
  let scheme = call_613370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613370.url(scheme.get, call_613370.host, call_613370.base,
                         call_613370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613370, url, valid)

proc call*(call_613371: Call_GetAttachGroupPolicy_613356; GroupName: string;
          PolicyArn: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613372 = newJObject()
  add(query_613372, "GroupName", newJString(GroupName))
  add(query_613372, "PolicyArn", newJString(PolicyArn))
  add(query_613372, "Action", newJString(Action))
  add(query_613372, "Version", newJString(Version))
  result = call_613371.call(nil, query_613372, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_613356(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_613357, base: "/",
    url: url_GetAttachGroupPolicy_613358, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_613408 = ref object of OpenApiRestCall_612658
proc url_PostAttachRolePolicy_613410(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachRolePolicy_613409(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613411 = query.getOrDefault("Action")
  valid_613411 = validateParameter(valid_613411, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_613411 != nil:
    section.add "Action", valid_613411
  var valid_613412 = query.getOrDefault("Version")
  valid_613412 = validateParameter(valid_613412, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613412 != nil:
    section.add "Version", valid_613412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613413 = header.getOrDefault("X-Amz-Signature")
  valid_613413 = validateParameter(valid_613413, JString, required = false,
                                 default = nil)
  if valid_613413 != nil:
    section.add "X-Amz-Signature", valid_613413
  var valid_613414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613414 = validateParameter(valid_613414, JString, required = false,
                                 default = nil)
  if valid_613414 != nil:
    section.add "X-Amz-Content-Sha256", valid_613414
  var valid_613415 = header.getOrDefault("X-Amz-Date")
  valid_613415 = validateParameter(valid_613415, JString, required = false,
                                 default = nil)
  if valid_613415 != nil:
    section.add "X-Amz-Date", valid_613415
  var valid_613416 = header.getOrDefault("X-Amz-Credential")
  valid_613416 = validateParameter(valid_613416, JString, required = false,
                                 default = nil)
  if valid_613416 != nil:
    section.add "X-Amz-Credential", valid_613416
  var valid_613417 = header.getOrDefault("X-Amz-Security-Token")
  valid_613417 = validateParameter(valid_613417, JString, required = false,
                                 default = nil)
  if valid_613417 != nil:
    section.add "X-Amz-Security-Token", valid_613417
  var valid_613418 = header.getOrDefault("X-Amz-Algorithm")
  valid_613418 = validateParameter(valid_613418, JString, required = false,
                                 default = nil)
  if valid_613418 != nil:
    section.add "X-Amz-Algorithm", valid_613418
  var valid_613419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613419 = validateParameter(valid_613419, JString, required = false,
                                 default = nil)
  if valid_613419 != nil:
    section.add "X-Amz-SignedHeaders", valid_613419
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613420 = formData.getOrDefault("RoleName")
  valid_613420 = validateParameter(valid_613420, JString, required = true,
                                 default = nil)
  if valid_613420 != nil:
    section.add "RoleName", valid_613420
  var valid_613421 = formData.getOrDefault("PolicyArn")
  valid_613421 = validateParameter(valid_613421, JString, required = true,
                                 default = nil)
  if valid_613421 != nil:
    section.add "PolicyArn", valid_613421
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613422: Call_PostAttachRolePolicy_613408; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613422.validator(path, query, header, formData, body)
  let scheme = call_613422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613422.url(scheme.get, call_613422.host, call_613422.base,
                         call_613422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613422, url, valid)

proc call*(call_613423: Call_PostAttachRolePolicy_613408; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613424 = newJObject()
  var formData_613425 = newJObject()
  add(formData_613425, "RoleName", newJString(RoleName))
  add(formData_613425, "PolicyArn", newJString(PolicyArn))
  add(query_613424, "Action", newJString(Action))
  add(query_613424, "Version", newJString(Version))
  result = call_613423.call(nil, query_613424, nil, formData_613425, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_613408(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_613409, base: "/",
    url: url_PostAttachRolePolicy_613410, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_613391 = ref object of OpenApiRestCall_612658
proc url_GetAttachRolePolicy_613393(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachRolePolicy_613392(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_613394 = query.getOrDefault("PolicyArn")
  valid_613394 = validateParameter(valid_613394, JString, required = true,
                                 default = nil)
  if valid_613394 != nil:
    section.add "PolicyArn", valid_613394
  var valid_613395 = query.getOrDefault("RoleName")
  valid_613395 = validateParameter(valid_613395, JString, required = true,
                                 default = nil)
  if valid_613395 != nil:
    section.add "RoleName", valid_613395
  var valid_613396 = query.getOrDefault("Action")
  valid_613396 = validateParameter(valid_613396, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_613396 != nil:
    section.add "Action", valid_613396
  var valid_613397 = query.getOrDefault("Version")
  valid_613397 = validateParameter(valid_613397, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613397 != nil:
    section.add "Version", valid_613397
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613398 = header.getOrDefault("X-Amz-Signature")
  valid_613398 = validateParameter(valid_613398, JString, required = false,
                                 default = nil)
  if valid_613398 != nil:
    section.add "X-Amz-Signature", valid_613398
  var valid_613399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613399 = validateParameter(valid_613399, JString, required = false,
                                 default = nil)
  if valid_613399 != nil:
    section.add "X-Amz-Content-Sha256", valid_613399
  var valid_613400 = header.getOrDefault("X-Amz-Date")
  valid_613400 = validateParameter(valid_613400, JString, required = false,
                                 default = nil)
  if valid_613400 != nil:
    section.add "X-Amz-Date", valid_613400
  var valid_613401 = header.getOrDefault("X-Amz-Credential")
  valid_613401 = validateParameter(valid_613401, JString, required = false,
                                 default = nil)
  if valid_613401 != nil:
    section.add "X-Amz-Credential", valid_613401
  var valid_613402 = header.getOrDefault("X-Amz-Security-Token")
  valid_613402 = validateParameter(valid_613402, JString, required = false,
                                 default = nil)
  if valid_613402 != nil:
    section.add "X-Amz-Security-Token", valid_613402
  var valid_613403 = header.getOrDefault("X-Amz-Algorithm")
  valid_613403 = validateParameter(valid_613403, JString, required = false,
                                 default = nil)
  if valid_613403 != nil:
    section.add "X-Amz-Algorithm", valid_613403
  var valid_613404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613404 = validateParameter(valid_613404, JString, required = false,
                                 default = nil)
  if valid_613404 != nil:
    section.add "X-Amz-SignedHeaders", valid_613404
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613405: Call_GetAttachRolePolicy_613391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613405.validator(path, query, header, formData, body)
  let scheme = call_613405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613405.url(scheme.get, call_613405.host, call_613405.base,
                         call_613405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613405, url, valid)

proc call*(call_613406: Call_GetAttachRolePolicy_613391; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613407 = newJObject()
  add(query_613407, "PolicyArn", newJString(PolicyArn))
  add(query_613407, "RoleName", newJString(RoleName))
  add(query_613407, "Action", newJString(Action))
  add(query_613407, "Version", newJString(Version))
  result = call_613406.call(nil, query_613407, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_613391(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_613392, base: "/",
    url: url_GetAttachRolePolicy_613393, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_613443 = ref object of OpenApiRestCall_612658
proc url_PostAttachUserPolicy_613445(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAttachUserPolicy_613444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613446 = query.getOrDefault("Action")
  valid_613446 = validateParameter(valid_613446, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_613446 != nil:
    section.add "Action", valid_613446
  var valid_613447 = query.getOrDefault("Version")
  valid_613447 = validateParameter(valid_613447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613447 != nil:
    section.add "Version", valid_613447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613448 = header.getOrDefault("X-Amz-Signature")
  valid_613448 = validateParameter(valid_613448, JString, required = false,
                                 default = nil)
  if valid_613448 != nil:
    section.add "X-Amz-Signature", valid_613448
  var valid_613449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613449 = validateParameter(valid_613449, JString, required = false,
                                 default = nil)
  if valid_613449 != nil:
    section.add "X-Amz-Content-Sha256", valid_613449
  var valid_613450 = header.getOrDefault("X-Amz-Date")
  valid_613450 = validateParameter(valid_613450, JString, required = false,
                                 default = nil)
  if valid_613450 != nil:
    section.add "X-Amz-Date", valid_613450
  var valid_613451 = header.getOrDefault("X-Amz-Credential")
  valid_613451 = validateParameter(valid_613451, JString, required = false,
                                 default = nil)
  if valid_613451 != nil:
    section.add "X-Amz-Credential", valid_613451
  var valid_613452 = header.getOrDefault("X-Amz-Security-Token")
  valid_613452 = validateParameter(valid_613452, JString, required = false,
                                 default = nil)
  if valid_613452 != nil:
    section.add "X-Amz-Security-Token", valid_613452
  var valid_613453 = header.getOrDefault("X-Amz-Algorithm")
  valid_613453 = validateParameter(valid_613453, JString, required = false,
                                 default = nil)
  if valid_613453 != nil:
    section.add "X-Amz-Algorithm", valid_613453
  var valid_613454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613454 = validateParameter(valid_613454, JString, required = false,
                                 default = nil)
  if valid_613454 != nil:
    section.add "X-Amz-SignedHeaders", valid_613454
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_613455 = formData.getOrDefault("PolicyArn")
  valid_613455 = validateParameter(valid_613455, JString, required = true,
                                 default = nil)
  if valid_613455 != nil:
    section.add "PolicyArn", valid_613455
  var valid_613456 = formData.getOrDefault("UserName")
  valid_613456 = validateParameter(valid_613456, JString, required = true,
                                 default = nil)
  if valid_613456 != nil:
    section.add "UserName", valid_613456
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613457: Call_PostAttachUserPolicy_613443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613457.validator(path, query, header, formData, body)
  let scheme = call_613457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613457.url(scheme.get, call_613457.host, call_613457.base,
                         call_613457.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613457, url, valid)

proc call*(call_613458: Call_PostAttachUserPolicy_613443; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613459 = newJObject()
  var formData_613460 = newJObject()
  add(formData_613460, "PolicyArn", newJString(PolicyArn))
  add(formData_613460, "UserName", newJString(UserName))
  add(query_613459, "Action", newJString(Action))
  add(query_613459, "Version", newJString(Version))
  result = call_613458.call(nil, query_613459, nil, formData_613460, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_613443(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_613444, base: "/",
    url: url_PostAttachUserPolicy_613445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_613426 = ref object of OpenApiRestCall_612658
proc url_GetAttachUserPolicy_613428(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAttachUserPolicy_613427(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613429 = query.getOrDefault("UserName")
  valid_613429 = validateParameter(valid_613429, JString, required = true,
                                 default = nil)
  if valid_613429 != nil:
    section.add "UserName", valid_613429
  var valid_613430 = query.getOrDefault("PolicyArn")
  valid_613430 = validateParameter(valid_613430, JString, required = true,
                                 default = nil)
  if valid_613430 != nil:
    section.add "PolicyArn", valid_613430
  var valid_613431 = query.getOrDefault("Action")
  valid_613431 = validateParameter(valid_613431, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_613431 != nil:
    section.add "Action", valid_613431
  var valid_613432 = query.getOrDefault("Version")
  valid_613432 = validateParameter(valid_613432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613432 != nil:
    section.add "Version", valid_613432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613433 = header.getOrDefault("X-Amz-Signature")
  valid_613433 = validateParameter(valid_613433, JString, required = false,
                                 default = nil)
  if valid_613433 != nil:
    section.add "X-Amz-Signature", valid_613433
  var valid_613434 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613434 = validateParameter(valid_613434, JString, required = false,
                                 default = nil)
  if valid_613434 != nil:
    section.add "X-Amz-Content-Sha256", valid_613434
  var valid_613435 = header.getOrDefault("X-Amz-Date")
  valid_613435 = validateParameter(valid_613435, JString, required = false,
                                 default = nil)
  if valid_613435 != nil:
    section.add "X-Amz-Date", valid_613435
  var valid_613436 = header.getOrDefault("X-Amz-Credential")
  valid_613436 = validateParameter(valid_613436, JString, required = false,
                                 default = nil)
  if valid_613436 != nil:
    section.add "X-Amz-Credential", valid_613436
  var valid_613437 = header.getOrDefault("X-Amz-Security-Token")
  valid_613437 = validateParameter(valid_613437, JString, required = false,
                                 default = nil)
  if valid_613437 != nil:
    section.add "X-Amz-Security-Token", valid_613437
  var valid_613438 = header.getOrDefault("X-Amz-Algorithm")
  valid_613438 = validateParameter(valid_613438, JString, required = false,
                                 default = nil)
  if valid_613438 != nil:
    section.add "X-Amz-Algorithm", valid_613438
  var valid_613439 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613439 = validateParameter(valid_613439, JString, required = false,
                                 default = nil)
  if valid_613439 != nil:
    section.add "X-Amz-SignedHeaders", valid_613439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613440: Call_GetAttachUserPolicy_613426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613440.validator(path, query, header, formData, body)
  let scheme = call_613440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613440.url(scheme.get, call_613440.host, call_613440.base,
                         call_613440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613440, url, valid)

proc call*(call_613441: Call_GetAttachUserPolicy_613426; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613442 = newJObject()
  add(query_613442, "UserName", newJString(UserName))
  add(query_613442, "PolicyArn", newJString(PolicyArn))
  add(query_613442, "Action", newJString(Action))
  add(query_613442, "Version", newJString(Version))
  result = call_613441.call(nil, query_613442, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_613426(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_613427, base: "/",
    url: url_GetAttachUserPolicy_613428, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_613478 = ref object of OpenApiRestCall_612658
proc url_PostChangePassword_613480(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostChangePassword_613479(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613481 = query.getOrDefault("Action")
  valid_613481 = validateParameter(valid_613481, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_613481 != nil:
    section.add "Action", valid_613481
  var valid_613482 = query.getOrDefault("Version")
  valid_613482 = validateParameter(valid_613482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613482 != nil:
    section.add "Version", valid_613482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613483 = header.getOrDefault("X-Amz-Signature")
  valid_613483 = validateParameter(valid_613483, JString, required = false,
                                 default = nil)
  if valid_613483 != nil:
    section.add "X-Amz-Signature", valid_613483
  var valid_613484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613484 = validateParameter(valid_613484, JString, required = false,
                                 default = nil)
  if valid_613484 != nil:
    section.add "X-Amz-Content-Sha256", valid_613484
  var valid_613485 = header.getOrDefault("X-Amz-Date")
  valid_613485 = validateParameter(valid_613485, JString, required = false,
                                 default = nil)
  if valid_613485 != nil:
    section.add "X-Amz-Date", valid_613485
  var valid_613486 = header.getOrDefault("X-Amz-Credential")
  valid_613486 = validateParameter(valid_613486, JString, required = false,
                                 default = nil)
  if valid_613486 != nil:
    section.add "X-Amz-Credential", valid_613486
  var valid_613487 = header.getOrDefault("X-Amz-Security-Token")
  valid_613487 = validateParameter(valid_613487, JString, required = false,
                                 default = nil)
  if valid_613487 != nil:
    section.add "X-Amz-Security-Token", valid_613487
  var valid_613488 = header.getOrDefault("X-Amz-Algorithm")
  valid_613488 = validateParameter(valid_613488, JString, required = false,
                                 default = nil)
  if valid_613488 != nil:
    section.add "X-Amz-Algorithm", valid_613488
  var valid_613489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613489 = validateParameter(valid_613489, JString, required = false,
                                 default = nil)
  if valid_613489 != nil:
    section.add "X-Amz-SignedHeaders", valid_613489
  result.add "header", section
  ## parameters in `formData` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `OldPassword` field"
  var valid_613490 = formData.getOrDefault("OldPassword")
  valid_613490 = validateParameter(valid_613490, JString, required = true,
                                 default = nil)
  if valid_613490 != nil:
    section.add "OldPassword", valid_613490
  var valid_613491 = formData.getOrDefault("NewPassword")
  valid_613491 = validateParameter(valid_613491, JString, required = true,
                                 default = nil)
  if valid_613491 != nil:
    section.add "NewPassword", valid_613491
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613492: Call_PostChangePassword_613478; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613492.validator(path, query, header, formData, body)
  let scheme = call_613492.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613492.url(scheme.get, call_613492.host, call_613492.base,
                         call_613492.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613492, url, valid)

proc call*(call_613493: Call_PostChangePassword_613478; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_613494 = newJObject()
  var formData_613495 = newJObject()
  add(formData_613495, "OldPassword", newJString(OldPassword))
  add(query_613494, "Action", newJString(Action))
  add(query_613494, "Version", newJString(Version))
  add(formData_613495, "NewPassword", newJString(NewPassword))
  result = call_613493.call(nil, query_613494, nil, formData_613495, nil)

var postChangePassword* = Call_PostChangePassword_613478(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_613479, base: "/",
    url: url_PostChangePassword_613480, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_613461 = ref object of OpenApiRestCall_612658
proc url_GetChangePassword_613463(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetChangePassword_613462(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Version: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  section = newJObject()
  var valid_613464 = query.getOrDefault("Action")
  valid_613464 = validateParameter(valid_613464, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_613464 != nil:
    section.add "Action", valid_613464
  var valid_613465 = query.getOrDefault("OldPassword")
  valid_613465 = validateParameter(valid_613465, JString, required = true,
                                 default = nil)
  if valid_613465 != nil:
    section.add "OldPassword", valid_613465
  var valid_613466 = query.getOrDefault("Version")
  valid_613466 = validateParameter(valid_613466, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613466 != nil:
    section.add "Version", valid_613466
  var valid_613467 = query.getOrDefault("NewPassword")
  valid_613467 = validateParameter(valid_613467, JString, required = true,
                                 default = nil)
  if valid_613467 != nil:
    section.add "NewPassword", valid_613467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613468 = header.getOrDefault("X-Amz-Signature")
  valid_613468 = validateParameter(valid_613468, JString, required = false,
                                 default = nil)
  if valid_613468 != nil:
    section.add "X-Amz-Signature", valid_613468
  var valid_613469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613469 = validateParameter(valid_613469, JString, required = false,
                                 default = nil)
  if valid_613469 != nil:
    section.add "X-Amz-Content-Sha256", valid_613469
  var valid_613470 = header.getOrDefault("X-Amz-Date")
  valid_613470 = validateParameter(valid_613470, JString, required = false,
                                 default = nil)
  if valid_613470 != nil:
    section.add "X-Amz-Date", valid_613470
  var valid_613471 = header.getOrDefault("X-Amz-Credential")
  valid_613471 = validateParameter(valid_613471, JString, required = false,
                                 default = nil)
  if valid_613471 != nil:
    section.add "X-Amz-Credential", valid_613471
  var valid_613472 = header.getOrDefault("X-Amz-Security-Token")
  valid_613472 = validateParameter(valid_613472, JString, required = false,
                                 default = nil)
  if valid_613472 != nil:
    section.add "X-Amz-Security-Token", valid_613472
  var valid_613473 = header.getOrDefault("X-Amz-Algorithm")
  valid_613473 = validateParameter(valid_613473, JString, required = false,
                                 default = nil)
  if valid_613473 != nil:
    section.add "X-Amz-Algorithm", valid_613473
  var valid_613474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613474 = validateParameter(valid_613474, JString, required = false,
                                 default = nil)
  if valid_613474 != nil:
    section.add "X-Amz-SignedHeaders", valid_613474
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613475: Call_GetChangePassword_613461; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613475.validator(path, query, header, formData, body)
  let scheme = call_613475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613475.url(scheme.get, call_613475.host, call_613475.base,
                         call_613475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613475, url, valid)

proc call*(call_613476: Call_GetChangePassword_613461; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  var query_613477 = newJObject()
  add(query_613477, "Action", newJString(Action))
  add(query_613477, "OldPassword", newJString(OldPassword))
  add(query_613477, "Version", newJString(Version))
  add(query_613477, "NewPassword", newJString(NewPassword))
  result = call_613476.call(nil, query_613477, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_613461(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_613462,
    base: "/", url: url_GetChangePassword_613463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_613512 = ref object of OpenApiRestCall_612658
proc url_PostCreateAccessKey_613514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccessKey_613513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613515 = query.getOrDefault("Action")
  valid_613515 = validateParameter(valid_613515, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_613515 != nil:
    section.add "Action", valid_613515
  var valid_613516 = query.getOrDefault("Version")
  valid_613516 = validateParameter(valid_613516, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613516 != nil:
    section.add "Version", valid_613516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613517 = header.getOrDefault("X-Amz-Signature")
  valid_613517 = validateParameter(valid_613517, JString, required = false,
                                 default = nil)
  if valid_613517 != nil:
    section.add "X-Amz-Signature", valid_613517
  var valid_613518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613518 = validateParameter(valid_613518, JString, required = false,
                                 default = nil)
  if valid_613518 != nil:
    section.add "X-Amz-Content-Sha256", valid_613518
  var valid_613519 = header.getOrDefault("X-Amz-Date")
  valid_613519 = validateParameter(valid_613519, JString, required = false,
                                 default = nil)
  if valid_613519 != nil:
    section.add "X-Amz-Date", valid_613519
  var valid_613520 = header.getOrDefault("X-Amz-Credential")
  valid_613520 = validateParameter(valid_613520, JString, required = false,
                                 default = nil)
  if valid_613520 != nil:
    section.add "X-Amz-Credential", valid_613520
  var valid_613521 = header.getOrDefault("X-Amz-Security-Token")
  valid_613521 = validateParameter(valid_613521, JString, required = false,
                                 default = nil)
  if valid_613521 != nil:
    section.add "X-Amz-Security-Token", valid_613521
  var valid_613522 = header.getOrDefault("X-Amz-Algorithm")
  valid_613522 = validateParameter(valid_613522, JString, required = false,
                                 default = nil)
  if valid_613522 != nil:
    section.add "X-Amz-Algorithm", valid_613522
  var valid_613523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613523 = validateParameter(valid_613523, JString, required = false,
                                 default = nil)
  if valid_613523 != nil:
    section.add "X-Amz-SignedHeaders", valid_613523
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_613524 = formData.getOrDefault("UserName")
  valid_613524 = validateParameter(valid_613524, JString, required = false,
                                 default = nil)
  if valid_613524 != nil:
    section.add "UserName", valid_613524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613525: Call_PostCreateAccessKey_613512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_613525.validator(path, query, header, formData, body)
  let scheme = call_613525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613525.url(scheme.get, call_613525.host, call_613525.base,
                         call_613525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613525, url, valid)

proc call*(call_613526: Call_PostCreateAccessKey_613512; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613527 = newJObject()
  var formData_613528 = newJObject()
  add(formData_613528, "UserName", newJString(UserName))
  add(query_613527, "Action", newJString(Action))
  add(query_613527, "Version", newJString(Version))
  result = call_613526.call(nil, query_613527, nil, formData_613528, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_613512(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_613513, base: "/",
    url: url_PostCreateAccessKey_613514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_613496 = ref object of OpenApiRestCall_612658
proc url_GetCreateAccessKey_613498(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccessKey_613497(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613499 = query.getOrDefault("UserName")
  valid_613499 = validateParameter(valid_613499, JString, required = false,
                                 default = nil)
  if valid_613499 != nil:
    section.add "UserName", valid_613499
  var valid_613500 = query.getOrDefault("Action")
  valid_613500 = validateParameter(valid_613500, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_613500 != nil:
    section.add "Action", valid_613500
  var valid_613501 = query.getOrDefault("Version")
  valid_613501 = validateParameter(valid_613501, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613501 != nil:
    section.add "Version", valid_613501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613502 = header.getOrDefault("X-Amz-Signature")
  valid_613502 = validateParameter(valid_613502, JString, required = false,
                                 default = nil)
  if valid_613502 != nil:
    section.add "X-Amz-Signature", valid_613502
  var valid_613503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613503 = validateParameter(valid_613503, JString, required = false,
                                 default = nil)
  if valid_613503 != nil:
    section.add "X-Amz-Content-Sha256", valid_613503
  var valid_613504 = header.getOrDefault("X-Amz-Date")
  valid_613504 = validateParameter(valid_613504, JString, required = false,
                                 default = nil)
  if valid_613504 != nil:
    section.add "X-Amz-Date", valid_613504
  var valid_613505 = header.getOrDefault("X-Amz-Credential")
  valid_613505 = validateParameter(valid_613505, JString, required = false,
                                 default = nil)
  if valid_613505 != nil:
    section.add "X-Amz-Credential", valid_613505
  var valid_613506 = header.getOrDefault("X-Amz-Security-Token")
  valid_613506 = validateParameter(valid_613506, JString, required = false,
                                 default = nil)
  if valid_613506 != nil:
    section.add "X-Amz-Security-Token", valid_613506
  var valid_613507 = header.getOrDefault("X-Amz-Algorithm")
  valid_613507 = validateParameter(valid_613507, JString, required = false,
                                 default = nil)
  if valid_613507 != nil:
    section.add "X-Amz-Algorithm", valid_613507
  var valid_613508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613508 = validateParameter(valid_613508, JString, required = false,
                                 default = nil)
  if valid_613508 != nil:
    section.add "X-Amz-SignedHeaders", valid_613508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613509: Call_GetCreateAccessKey_613496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_613509.validator(path, query, header, formData, body)
  let scheme = call_613509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613509.url(scheme.get, call_613509.host, call_613509.base,
                         call_613509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613509, url, valid)

proc call*(call_613510: Call_GetCreateAccessKey_613496; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613511 = newJObject()
  add(query_613511, "UserName", newJString(UserName))
  add(query_613511, "Action", newJString(Action))
  add(query_613511, "Version", newJString(Version))
  result = call_613510.call(nil, query_613511, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_613496(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_613497,
    base: "/", url: url_GetCreateAccessKey_613498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_613545 = ref object of OpenApiRestCall_612658
proc url_PostCreateAccountAlias_613547(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateAccountAlias_613546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613548 = query.getOrDefault("Action")
  valid_613548 = validateParameter(valid_613548, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_613548 != nil:
    section.add "Action", valid_613548
  var valid_613549 = query.getOrDefault("Version")
  valid_613549 = validateParameter(valid_613549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613549 != nil:
    section.add "Version", valid_613549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613550 = header.getOrDefault("X-Amz-Signature")
  valid_613550 = validateParameter(valid_613550, JString, required = false,
                                 default = nil)
  if valid_613550 != nil:
    section.add "X-Amz-Signature", valid_613550
  var valid_613551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613551 = validateParameter(valid_613551, JString, required = false,
                                 default = nil)
  if valid_613551 != nil:
    section.add "X-Amz-Content-Sha256", valid_613551
  var valid_613552 = header.getOrDefault("X-Amz-Date")
  valid_613552 = validateParameter(valid_613552, JString, required = false,
                                 default = nil)
  if valid_613552 != nil:
    section.add "X-Amz-Date", valid_613552
  var valid_613553 = header.getOrDefault("X-Amz-Credential")
  valid_613553 = validateParameter(valid_613553, JString, required = false,
                                 default = nil)
  if valid_613553 != nil:
    section.add "X-Amz-Credential", valid_613553
  var valid_613554 = header.getOrDefault("X-Amz-Security-Token")
  valid_613554 = validateParameter(valid_613554, JString, required = false,
                                 default = nil)
  if valid_613554 != nil:
    section.add "X-Amz-Security-Token", valid_613554
  var valid_613555 = header.getOrDefault("X-Amz-Algorithm")
  valid_613555 = validateParameter(valid_613555, JString, required = false,
                                 default = nil)
  if valid_613555 != nil:
    section.add "X-Amz-Algorithm", valid_613555
  var valid_613556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613556 = validateParameter(valid_613556, JString, required = false,
                                 default = nil)
  if valid_613556 != nil:
    section.add "X-Amz-SignedHeaders", valid_613556
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_613557 = formData.getOrDefault("AccountAlias")
  valid_613557 = validateParameter(valid_613557, JString, required = true,
                                 default = nil)
  if valid_613557 != nil:
    section.add "AccountAlias", valid_613557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613558: Call_PostCreateAccountAlias_613545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613558.validator(path, query, header, formData, body)
  let scheme = call_613558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613558.url(scheme.get, call_613558.host, call_613558.base,
                         call_613558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613558, url, valid)

proc call*(call_613559: Call_PostCreateAccountAlias_613545; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_613560 = newJObject()
  var formData_613561 = newJObject()
  add(query_613560, "Action", newJString(Action))
  add(formData_613561, "AccountAlias", newJString(AccountAlias))
  add(query_613560, "Version", newJString(Version))
  result = call_613559.call(nil, query_613560, nil, formData_613561, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_613545(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_613546, base: "/",
    url: url_PostCreateAccountAlias_613547, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_613529 = ref object of OpenApiRestCall_612658
proc url_GetCreateAccountAlias_613531(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateAccountAlias_613530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_613532 = query.getOrDefault("AccountAlias")
  valid_613532 = validateParameter(valid_613532, JString, required = true,
                                 default = nil)
  if valid_613532 != nil:
    section.add "AccountAlias", valid_613532
  var valid_613533 = query.getOrDefault("Action")
  valid_613533 = validateParameter(valid_613533, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_613533 != nil:
    section.add "Action", valid_613533
  var valid_613534 = query.getOrDefault("Version")
  valid_613534 = validateParameter(valid_613534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613534 != nil:
    section.add "Version", valid_613534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613535 = header.getOrDefault("X-Amz-Signature")
  valid_613535 = validateParameter(valid_613535, JString, required = false,
                                 default = nil)
  if valid_613535 != nil:
    section.add "X-Amz-Signature", valid_613535
  var valid_613536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613536 = validateParameter(valid_613536, JString, required = false,
                                 default = nil)
  if valid_613536 != nil:
    section.add "X-Amz-Content-Sha256", valid_613536
  var valid_613537 = header.getOrDefault("X-Amz-Date")
  valid_613537 = validateParameter(valid_613537, JString, required = false,
                                 default = nil)
  if valid_613537 != nil:
    section.add "X-Amz-Date", valid_613537
  var valid_613538 = header.getOrDefault("X-Amz-Credential")
  valid_613538 = validateParameter(valid_613538, JString, required = false,
                                 default = nil)
  if valid_613538 != nil:
    section.add "X-Amz-Credential", valid_613538
  var valid_613539 = header.getOrDefault("X-Amz-Security-Token")
  valid_613539 = validateParameter(valid_613539, JString, required = false,
                                 default = nil)
  if valid_613539 != nil:
    section.add "X-Amz-Security-Token", valid_613539
  var valid_613540 = header.getOrDefault("X-Amz-Algorithm")
  valid_613540 = validateParameter(valid_613540, JString, required = false,
                                 default = nil)
  if valid_613540 != nil:
    section.add "X-Amz-Algorithm", valid_613540
  var valid_613541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613541 = validateParameter(valid_613541, JString, required = false,
                                 default = nil)
  if valid_613541 != nil:
    section.add "X-Amz-SignedHeaders", valid_613541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613542: Call_GetCreateAccountAlias_613529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613542.validator(path, query, header, formData, body)
  let scheme = call_613542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613542.url(scheme.get, call_613542.host, call_613542.base,
                         call_613542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613542, url, valid)

proc call*(call_613543: Call_GetCreateAccountAlias_613529; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613544 = newJObject()
  add(query_613544, "AccountAlias", newJString(AccountAlias))
  add(query_613544, "Action", newJString(Action))
  add(query_613544, "Version", newJString(Version))
  result = call_613543.call(nil, query_613544, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_613529(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_613530, base: "/",
    url: url_GetCreateAccountAlias_613531, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_613579 = ref object of OpenApiRestCall_612658
proc url_PostCreateGroup_613581(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGroup_613580(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613582 = query.getOrDefault("Action")
  valid_613582 = validateParameter(valid_613582, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_613582 != nil:
    section.add "Action", valid_613582
  var valid_613583 = query.getOrDefault("Version")
  valid_613583 = validateParameter(valid_613583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613583 != nil:
    section.add "Version", valid_613583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613584 = header.getOrDefault("X-Amz-Signature")
  valid_613584 = validateParameter(valid_613584, JString, required = false,
                                 default = nil)
  if valid_613584 != nil:
    section.add "X-Amz-Signature", valid_613584
  var valid_613585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613585 = validateParameter(valid_613585, JString, required = false,
                                 default = nil)
  if valid_613585 != nil:
    section.add "X-Amz-Content-Sha256", valid_613585
  var valid_613586 = header.getOrDefault("X-Amz-Date")
  valid_613586 = validateParameter(valid_613586, JString, required = false,
                                 default = nil)
  if valid_613586 != nil:
    section.add "X-Amz-Date", valid_613586
  var valid_613587 = header.getOrDefault("X-Amz-Credential")
  valid_613587 = validateParameter(valid_613587, JString, required = false,
                                 default = nil)
  if valid_613587 != nil:
    section.add "X-Amz-Credential", valid_613587
  var valid_613588 = header.getOrDefault("X-Amz-Security-Token")
  valid_613588 = validateParameter(valid_613588, JString, required = false,
                                 default = nil)
  if valid_613588 != nil:
    section.add "X-Amz-Security-Token", valid_613588
  var valid_613589 = header.getOrDefault("X-Amz-Algorithm")
  valid_613589 = validateParameter(valid_613589, JString, required = false,
                                 default = nil)
  if valid_613589 != nil:
    section.add "X-Amz-Algorithm", valid_613589
  var valid_613590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613590 = validateParameter(valid_613590, JString, required = false,
                                 default = nil)
  if valid_613590 != nil:
    section.add "X-Amz-SignedHeaders", valid_613590
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_613591 = formData.getOrDefault("GroupName")
  valid_613591 = validateParameter(valid_613591, JString, required = true,
                                 default = nil)
  if valid_613591 != nil:
    section.add "GroupName", valid_613591
  var valid_613592 = formData.getOrDefault("Path")
  valid_613592 = validateParameter(valid_613592, JString, required = false,
                                 default = nil)
  if valid_613592 != nil:
    section.add "Path", valid_613592
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613593: Call_PostCreateGroup_613579; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613593.validator(path, query, header, formData, body)
  let scheme = call_613593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613593.url(scheme.get, call_613593.host, call_613593.base,
                         call_613593.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613593, url, valid)

proc call*(call_613594: Call_PostCreateGroup_613579; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613595 = newJObject()
  var formData_613596 = newJObject()
  add(formData_613596, "GroupName", newJString(GroupName))
  add(formData_613596, "Path", newJString(Path))
  add(query_613595, "Action", newJString(Action))
  add(query_613595, "Version", newJString(Version))
  result = call_613594.call(nil, query_613595, nil, formData_613596, nil)

var postCreateGroup* = Call_PostCreateGroup_613579(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_613580,
    base: "/", url: url_PostCreateGroup_613581, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_613562 = ref object of OpenApiRestCall_612658
proc url_GetCreateGroup_613564(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGroup_613563(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_613565 = query.getOrDefault("GroupName")
  valid_613565 = validateParameter(valid_613565, JString, required = true,
                                 default = nil)
  if valid_613565 != nil:
    section.add "GroupName", valid_613565
  var valid_613566 = query.getOrDefault("Path")
  valid_613566 = validateParameter(valid_613566, JString, required = false,
                                 default = nil)
  if valid_613566 != nil:
    section.add "Path", valid_613566
  var valid_613567 = query.getOrDefault("Action")
  valid_613567 = validateParameter(valid_613567, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_613567 != nil:
    section.add "Action", valid_613567
  var valid_613568 = query.getOrDefault("Version")
  valid_613568 = validateParameter(valid_613568, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613568 != nil:
    section.add "Version", valid_613568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613569 = header.getOrDefault("X-Amz-Signature")
  valid_613569 = validateParameter(valid_613569, JString, required = false,
                                 default = nil)
  if valid_613569 != nil:
    section.add "X-Amz-Signature", valid_613569
  var valid_613570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613570 = validateParameter(valid_613570, JString, required = false,
                                 default = nil)
  if valid_613570 != nil:
    section.add "X-Amz-Content-Sha256", valid_613570
  var valid_613571 = header.getOrDefault("X-Amz-Date")
  valid_613571 = validateParameter(valid_613571, JString, required = false,
                                 default = nil)
  if valid_613571 != nil:
    section.add "X-Amz-Date", valid_613571
  var valid_613572 = header.getOrDefault("X-Amz-Credential")
  valid_613572 = validateParameter(valid_613572, JString, required = false,
                                 default = nil)
  if valid_613572 != nil:
    section.add "X-Amz-Credential", valid_613572
  var valid_613573 = header.getOrDefault("X-Amz-Security-Token")
  valid_613573 = validateParameter(valid_613573, JString, required = false,
                                 default = nil)
  if valid_613573 != nil:
    section.add "X-Amz-Security-Token", valid_613573
  var valid_613574 = header.getOrDefault("X-Amz-Algorithm")
  valid_613574 = validateParameter(valid_613574, JString, required = false,
                                 default = nil)
  if valid_613574 != nil:
    section.add "X-Amz-Algorithm", valid_613574
  var valid_613575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613575 = validateParameter(valid_613575, JString, required = false,
                                 default = nil)
  if valid_613575 != nil:
    section.add "X-Amz-SignedHeaders", valid_613575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613576: Call_GetCreateGroup_613562; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613576.validator(path, query, header, formData, body)
  let scheme = call_613576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613576.url(scheme.get, call_613576.host, call_613576.base,
                         call_613576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613576, url, valid)

proc call*(call_613577: Call_GetCreateGroup_613562; GroupName: string;
          Path: string = ""; Action: string = "CreateGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613578 = newJObject()
  add(query_613578, "GroupName", newJString(GroupName))
  add(query_613578, "Path", newJString(Path))
  add(query_613578, "Action", newJString(Action))
  add(query_613578, "Version", newJString(Version))
  result = call_613577.call(nil, query_613578, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_613562(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_613563,
    base: "/", url: url_GetCreateGroup_613564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_613614 = ref object of OpenApiRestCall_612658
proc url_PostCreateInstanceProfile_613616(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateInstanceProfile_613615(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613617 = query.getOrDefault("Action")
  valid_613617 = validateParameter(valid_613617, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_613617 != nil:
    section.add "Action", valid_613617
  var valid_613618 = query.getOrDefault("Version")
  valid_613618 = validateParameter(valid_613618, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613618 != nil:
    section.add "Version", valid_613618
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613619 = header.getOrDefault("X-Amz-Signature")
  valid_613619 = validateParameter(valid_613619, JString, required = false,
                                 default = nil)
  if valid_613619 != nil:
    section.add "X-Amz-Signature", valid_613619
  var valid_613620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613620 = validateParameter(valid_613620, JString, required = false,
                                 default = nil)
  if valid_613620 != nil:
    section.add "X-Amz-Content-Sha256", valid_613620
  var valid_613621 = header.getOrDefault("X-Amz-Date")
  valid_613621 = validateParameter(valid_613621, JString, required = false,
                                 default = nil)
  if valid_613621 != nil:
    section.add "X-Amz-Date", valid_613621
  var valid_613622 = header.getOrDefault("X-Amz-Credential")
  valid_613622 = validateParameter(valid_613622, JString, required = false,
                                 default = nil)
  if valid_613622 != nil:
    section.add "X-Amz-Credential", valid_613622
  var valid_613623 = header.getOrDefault("X-Amz-Security-Token")
  valid_613623 = validateParameter(valid_613623, JString, required = false,
                                 default = nil)
  if valid_613623 != nil:
    section.add "X-Amz-Security-Token", valid_613623
  var valid_613624 = header.getOrDefault("X-Amz-Algorithm")
  valid_613624 = validateParameter(valid_613624, JString, required = false,
                                 default = nil)
  if valid_613624 != nil:
    section.add "X-Amz-Algorithm", valid_613624
  var valid_613625 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613625 = validateParameter(valid_613625, JString, required = false,
                                 default = nil)
  if valid_613625 != nil:
    section.add "X-Amz-SignedHeaders", valid_613625
  result.add "header", section
  ## parameters in `formData` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_613626 = formData.getOrDefault("Path")
  valid_613626 = validateParameter(valid_613626, JString, required = false,
                                 default = nil)
  if valid_613626 != nil:
    section.add "Path", valid_613626
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_613627 = formData.getOrDefault("InstanceProfileName")
  valid_613627 = validateParameter(valid_613627, JString, required = true,
                                 default = nil)
  if valid_613627 != nil:
    section.add "InstanceProfileName", valid_613627
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613628: Call_PostCreateInstanceProfile_613614; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613628.validator(path, query, header, formData, body)
  let scheme = call_613628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613628.url(scheme.get, call_613628.host, call_613628.base,
                         call_613628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613628, url, valid)

proc call*(call_613629: Call_PostCreateInstanceProfile_613614;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613630 = newJObject()
  var formData_613631 = newJObject()
  add(formData_613631, "Path", newJString(Path))
  add(query_613630, "Action", newJString(Action))
  add(formData_613631, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613630, "Version", newJString(Version))
  result = call_613629.call(nil, query_613630, nil, formData_613631, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_613614(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_613615, base: "/",
    url: url_PostCreateInstanceProfile_613616,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_613597 = ref object of OpenApiRestCall_612658
proc url_GetCreateInstanceProfile_613599(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateInstanceProfile_613598(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613600 = query.getOrDefault("Path")
  valid_613600 = validateParameter(valid_613600, JString, required = false,
                                 default = nil)
  if valid_613600 != nil:
    section.add "Path", valid_613600
  var valid_613601 = query.getOrDefault("Action")
  valid_613601 = validateParameter(valid_613601, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_613601 != nil:
    section.add "Action", valid_613601
  var valid_613602 = query.getOrDefault("InstanceProfileName")
  valid_613602 = validateParameter(valid_613602, JString, required = true,
                                 default = nil)
  if valid_613602 != nil:
    section.add "InstanceProfileName", valid_613602
  var valid_613603 = query.getOrDefault("Version")
  valid_613603 = validateParameter(valid_613603, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613603 != nil:
    section.add "Version", valid_613603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613604 = header.getOrDefault("X-Amz-Signature")
  valid_613604 = validateParameter(valid_613604, JString, required = false,
                                 default = nil)
  if valid_613604 != nil:
    section.add "X-Amz-Signature", valid_613604
  var valid_613605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613605 = validateParameter(valid_613605, JString, required = false,
                                 default = nil)
  if valid_613605 != nil:
    section.add "X-Amz-Content-Sha256", valid_613605
  var valid_613606 = header.getOrDefault("X-Amz-Date")
  valid_613606 = validateParameter(valid_613606, JString, required = false,
                                 default = nil)
  if valid_613606 != nil:
    section.add "X-Amz-Date", valid_613606
  var valid_613607 = header.getOrDefault("X-Amz-Credential")
  valid_613607 = validateParameter(valid_613607, JString, required = false,
                                 default = nil)
  if valid_613607 != nil:
    section.add "X-Amz-Credential", valid_613607
  var valid_613608 = header.getOrDefault("X-Amz-Security-Token")
  valid_613608 = validateParameter(valid_613608, JString, required = false,
                                 default = nil)
  if valid_613608 != nil:
    section.add "X-Amz-Security-Token", valid_613608
  var valid_613609 = header.getOrDefault("X-Amz-Algorithm")
  valid_613609 = validateParameter(valid_613609, JString, required = false,
                                 default = nil)
  if valid_613609 != nil:
    section.add "X-Amz-Algorithm", valid_613609
  var valid_613610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613610 = validateParameter(valid_613610, JString, required = false,
                                 default = nil)
  if valid_613610 != nil:
    section.add "X-Amz-SignedHeaders", valid_613610
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613611: Call_GetCreateInstanceProfile_613597; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613611.validator(path, query, header, formData, body)
  let scheme = call_613611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613611.url(scheme.get, call_613611.host, call_613611.base,
                         call_613611.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613611, url, valid)

proc call*(call_613612: Call_GetCreateInstanceProfile_613597;
          InstanceProfileName: string; Path: string = "";
          Action: string = "CreateInstanceProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613613 = newJObject()
  add(query_613613, "Path", newJString(Path))
  add(query_613613, "Action", newJString(Action))
  add(query_613613, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_613613, "Version", newJString(Version))
  result = call_613612.call(nil, query_613613, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_613597(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_613598, base: "/",
    url: url_GetCreateInstanceProfile_613599, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_613650 = ref object of OpenApiRestCall_612658
proc url_PostCreateLoginProfile_613652(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateLoginProfile_613651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613653 = query.getOrDefault("Action")
  valid_613653 = validateParameter(valid_613653, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_613653 != nil:
    section.add "Action", valid_613653
  var valid_613654 = query.getOrDefault("Version")
  valid_613654 = validateParameter(valid_613654, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613654 != nil:
    section.add "Version", valid_613654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613655 = header.getOrDefault("X-Amz-Signature")
  valid_613655 = validateParameter(valid_613655, JString, required = false,
                                 default = nil)
  if valid_613655 != nil:
    section.add "X-Amz-Signature", valid_613655
  var valid_613656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613656 = validateParameter(valid_613656, JString, required = false,
                                 default = nil)
  if valid_613656 != nil:
    section.add "X-Amz-Content-Sha256", valid_613656
  var valid_613657 = header.getOrDefault("X-Amz-Date")
  valid_613657 = validateParameter(valid_613657, JString, required = false,
                                 default = nil)
  if valid_613657 != nil:
    section.add "X-Amz-Date", valid_613657
  var valid_613658 = header.getOrDefault("X-Amz-Credential")
  valid_613658 = validateParameter(valid_613658, JString, required = false,
                                 default = nil)
  if valid_613658 != nil:
    section.add "X-Amz-Credential", valid_613658
  var valid_613659 = header.getOrDefault("X-Amz-Security-Token")
  valid_613659 = validateParameter(valid_613659, JString, required = false,
                                 default = nil)
  if valid_613659 != nil:
    section.add "X-Amz-Security-Token", valid_613659
  var valid_613660 = header.getOrDefault("X-Amz-Algorithm")
  valid_613660 = validateParameter(valid_613660, JString, required = false,
                                 default = nil)
  if valid_613660 != nil:
    section.add "X-Amz-Algorithm", valid_613660
  var valid_613661 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613661 = validateParameter(valid_613661, JString, required = false,
                                 default = nil)
  if valid_613661 != nil:
    section.add "X-Amz-SignedHeaders", valid_613661
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Password` field"
  var valid_613662 = formData.getOrDefault("Password")
  valid_613662 = validateParameter(valid_613662, JString, required = true,
                                 default = nil)
  if valid_613662 != nil:
    section.add "Password", valid_613662
  var valid_613663 = formData.getOrDefault("UserName")
  valid_613663 = validateParameter(valid_613663, JString, required = true,
                                 default = nil)
  if valid_613663 != nil:
    section.add "UserName", valid_613663
  var valid_613664 = formData.getOrDefault("PasswordResetRequired")
  valid_613664 = validateParameter(valid_613664, JBool, required = false, default = nil)
  if valid_613664 != nil:
    section.add "PasswordResetRequired", valid_613664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613665: Call_PostCreateLoginProfile_613650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613665.validator(path, query, header, formData, body)
  let scheme = call_613665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613665.url(scheme.get, call_613665.host, call_613665.base,
                         call_613665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613665, url, valid)

proc call*(call_613666: Call_PostCreateLoginProfile_613650; Password: string;
          UserName: string; Action: string = "CreateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Version: string (required)
  var query_613667 = newJObject()
  var formData_613668 = newJObject()
  add(formData_613668, "Password", newJString(Password))
  add(formData_613668, "UserName", newJString(UserName))
  add(query_613667, "Action", newJString(Action))
  add(formData_613668, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_613667, "Version", newJString(Version))
  result = call_613666.call(nil, query_613667, nil, formData_613668, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_613650(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_613651, base: "/",
    url: url_PostCreateLoginProfile_613652, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_613632 = ref object of OpenApiRestCall_612658
proc url_GetCreateLoginProfile_613634(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateLoginProfile_613633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Password` field"
  var valid_613635 = query.getOrDefault("Password")
  valid_613635 = validateParameter(valid_613635, JString, required = true,
                                 default = nil)
  if valid_613635 != nil:
    section.add "Password", valid_613635
  var valid_613636 = query.getOrDefault("UserName")
  valid_613636 = validateParameter(valid_613636, JString, required = true,
                                 default = nil)
  if valid_613636 != nil:
    section.add "UserName", valid_613636
  var valid_613637 = query.getOrDefault("PasswordResetRequired")
  valid_613637 = validateParameter(valid_613637, JBool, required = false, default = nil)
  if valid_613637 != nil:
    section.add "PasswordResetRequired", valid_613637
  var valid_613638 = query.getOrDefault("Action")
  valid_613638 = validateParameter(valid_613638, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_613638 != nil:
    section.add "Action", valid_613638
  var valid_613639 = query.getOrDefault("Version")
  valid_613639 = validateParameter(valid_613639, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613639 != nil:
    section.add "Version", valid_613639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613640 = header.getOrDefault("X-Amz-Signature")
  valid_613640 = validateParameter(valid_613640, JString, required = false,
                                 default = nil)
  if valid_613640 != nil:
    section.add "X-Amz-Signature", valid_613640
  var valid_613641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613641 = validateParameter(valid_613641, JString, required = false,
                                 default = nil)
  if valid_613641 != nil:
    section.add "X-Amz-Content-Sha256", valid_613641
  var valid_613642 = header.getOrDefault("X-Amz-Date")
  valid_613642 = validateParameter(valid_613642, JString, required = false,
                                 default = nil)
  if valid_613642 != nil:
    section.add "X-Amz-Date", valid_613642
  var valid_613643 = header.getOrDefault("X-Amz-Credential")
  valid_613643 = validateParameter(valid_613643, JString, required = false,
                                 default = nil)
  if valid_613643 != nil:
    section.add "X-Amz-Credential", valid_613643
  var valid_613644 = header.getOrDefault("X-Amz-Security-Token")
  valid_613644 = validateParameter(valid_613644, JString, required = false,
                                 default = nil)
  if valid_613644 != nil:
    section.add "X-Amz-Security-Token", valid_613644
  var valid_613645 = header.getOrDefault("X-Amz-Algorithm")
  valid_613645 = validateParameter(valid_613645, JString, required = false,
                                 default = nil)
  if valid_613645 != nil:
    section.add "X-Amz-Algorithm", valid_613645
  var valid_613646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613646 = validateParameter(valid_613646, JString, required = false,
                                 default = nil)
  if valid_613646 != nil:
    section.add "X-Amz-SignedHeaders", valid_613646
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613647: Call_GetCreateLoginProfile_613632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613647.validator(path, query, header, formData, body)
  let scheme = call_613647.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613647.url(scheme.get, call_613647.host, call_613647.base,
                         call_613647.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613647, url, valid)

proc call*(call_613648: Call_GetCreateLoginProfile_613632; Password: string;
          UserName: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613649 = newJObject()
  add(query_613649, "Password", newJString(Password))
  add(query_613649, "UserName", newJString(UserName))
  add(query_613649, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_613649, "Action", newJString(Action))
  add(query_613649, "Version", newJString(Version))
  result = call_613648.call(nil, query_613649, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_613632(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_613633, base: "/",
    url: url_GetCreateLoginProfile_613634, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_613687 = ref object of OpenApiRestCall_612658
proc url_PostCreateOpenIDConnectProvider_613689(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOpenIDConnectProvider_613688(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613690 = query.getOrDefault("Action")
  valid_613690 = validateParameter(valid_613690, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_613690 != nil:
    section.add "Action", valid_613690
  var valid_613691 = query.getOrDefault("Version")
  valid_613691 = validateParameter(valid_613691, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613691 != nil:
    section.add "Version", valid_613691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613692 = header.getOrDefault("X-Amz-Signature")
  valid_613692 = validateParameter(valid_613692, JString, required = false,
                                 default = nil)
  if valid_613692 != nil:
    section.add "X-Amz-Signature", valid_613692
  var valid_613693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613693 = validateParameter(valid_613693, JString, required = false,
                                 default = nil)
  if valid_613693 != nil:
    section.add "X-Amz-Content-Sha256", valid_613693
  var valid_613694 = header.getOrDefault("X-Amz-Date")
  valid_613694 = validateParameter(valid_613694, JString, required = false,
                                 default = nil)
  if valid_613694 != nil:
    section.add "X-Amz-Date", valid_613694
  var valid_613695 = header.getOrDefault("X-Amz-Credential")
  valid_613695 = validateParameter(valid_613695, JString, required = false,
                                 default = nil)
  if valid_613695 != nil:
    section.add "X-Amz-Credential", valid_613695
  var valid_613696 = header.getOrDefault("X-Amz-Security-Token")
  valid_613696 = validateParameter(valid_613696, JString, required = false,
                                 default = nil)
  if valid_613696 != nil:
    section.add "X-Amz-Security-Token", valid_613696
  var valid_613697 = header.getOrDefault("X-Amz-Algorithm")
  valid_613697 = validateParameter(valid_613697, JString, required = false,
                                 default = nil)
  if valid_613697 != nil:
    section.add "X-Amz-Algorithm", valid_613697
  var valid_613698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613698 = validateParameter(valid_613698, JString, required = false,
                                 default = nil)
  if valid_613698 != nil:
    section.add "X-Amz-SignedHeaders", valid_613698
  result.add "header", section
  ## parameters in `formData` object:
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Url` field"
  var valid_613699 = formData.getOrDefault("Url")
  valid_613699 = validateParameter(valid_613699, JString, required = true,
                                 default = nil)
  if valid_613699 != nil:
    section.add "Url", valid_613699
  var valid_613700 = formData.getOrDefault("ClientIDList")
  valid_613700 = validateParameter(valid_613700, JArray, required = false,
                                 default = nil)
  if valid_613700 != nil:
    section.add "ClientIDList", valid_613700
  var valid_613701 = formData.getOrDefault("ThumbprintList")
  valid_613701 = validateParameter(valid_613701, JArray, required = true, default = nil)
  if valid_613701 != nil:
    section.add "ThumbprintList", valid_613701
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613702: Call_PostCreateOpenIDConnectProvider_613687;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_613702.validator(path, query, header, formData, body)
  let scheme = call_613702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613702.url(scheme.get, call_613702.host, call_613702.base,
                         call_613702.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613702, url, valid)

proc call*(call_613703: Call_PostCreateOpenIDConnectProvider_613687; Url: string;
          ThumbprintList: JsonNode; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613704 = newJObject()
  var formData_613705 = newJObject()
  add(formData_613705, "Url", newJString(Url))
  if ClientIDList != nil:
    formData_613705.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_613705.add "ThumbprintList", ThumbprintList
  add(query_613704, "Action", newJString(Action))
  add(query_613704, "Version", newJString(Version))
  result = call_613703.call(nil, query_613704, nil, formData_613705, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_613687(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_613688, base: "/",
    url: url_PostCreateOpenIDConnectProvider_613689,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_613669 = ref object of OpenApiRestCall_612658
proc url_GetCreateOpenIDConnectProvider_613671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOpenIDConnectProvider_613670(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_613672 = query.getOrDefault("ThumbprintList")
  valid_613672 = validateParameter(valid_613672, JArray, required = true, default = nil)
  if valid_613672 != nil:
    section.add "ThumbprintList", valid_613672
  var valid_613673 = query.getOrDefault("Action")
  valid_613673 = validateParameter(valid_613673, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_613673 != nil:
    section.add "Action", valid_613673
  var valid_613674 = query.getOrDefault("Url")
  valid_613674 = validateParameter(valid_613674, JString, required = true,
                                 default = nil)
  if valid_613674 != nil:
    section.add "Url", valid_613674
  var valid_613675 = query.getOrDefault("Version")
  valid_613675 = validateParameter(valid_613675, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613675 != nil:
    section.add "Version", valid_613675
  var valid_613676 = query.getOrDefault("ClientIDList")
  valid_613676 = validateParameter(valid_613676, JArray, required = false,
                                 default = nil)
  if valid_613676 != nil:
    section.add "ClientIDList", valid_613676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613677 = header.getOrDefault("X-Amz-Signature")
  valid_613677 = validateParameter(valid_613677, JString, required = false,
                                 default = nil)
  if valid_613677 != nil:
    section.add "X-Amz-Signature", valid_613677
  var valid_613678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613678 = validateParameter(valid_613678, JString, required = false,
                                 default = nil)
  if valid_613678 != nil:
    section.add "X-Amz-Content-Sha256", valid_613678
  var valid_613679 = header.getOrDefault("X-Amz-Date")
  valid_613679 = validateParameter(valid_613679, JString, required = false,
                                 default = nil)
  if valid_613679 != nil:
    section.add "X-Amz-Date", valid_613679
  var valid_613680 = header.getOrDefault("X-Amz-Credential")
  valid_613680 = validateParameter(valid_613680, JString, required = false,
                                 default = nil)
  if valid_613680 != nil:
    section.add "X-Amz-Credential", valid_613680
  var valid_613681 = header.getOrDefault("X-Amz-Security-Token")
  valid_613681 = validateParameter(valid_613681, JString, required = false,
                                 default = nil)
  if valid_613681 != nil:
    section.add "X-Amz-Security-Token", valid_613681
  var valid_613682 = header.getOrDefault("X-Amz-Algorithm")
  valid_613682 = validateParameter(valid_613682, JString, required = false,
                                 default = nil)
  if valid_613682 != nil:
    section.add "X-Amz-Algorithm", valid_613682
  var valid_613683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613683 = validateParameter(valid_613683, JString, required = false,
                                 default = nil)
  if valid_613683 != nil:
    section.add "X-Amz-SignedHeaders", valid_613683
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613684: Call_GetCreateOpenIDConnectProvider_613669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_613684.validator(path, query, header, formData, body)
  let scheme = call_613684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613684.url(scheme.get, call_613684.host, call_613684.base,
                         call_613684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613684, url, valid)

proc call*(call_613685: Call_GetCreateOpenIDConnectProvider_613669;
          ThumbprintList: JsonNode; Url: string;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"; ClientIDList: JsonNode = nil): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  var query_613686 = newJObject()
  if ThumbprintList != nil:
    query_613686.add "ThumbprintList", ThumbprintList
  add(query_613686, "Action", newJString(Action))
  add(query_613686, "Url", newJString(Url))
  add(query_613686, "Version", newJString(Version))
  if ClientIDList != nil:
    query_613686.add "ClientIDList", ClientIDList
  result = call_613685.call(nil, query_613686, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_613669(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_613670, base: "/",
    url: url_GetCreateOpenIDConnectProvider_613671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_613725 = ref object of OpenApiRestCall_612658
proc url_PostCreatePolicy_613727(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicy_613726(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613728 = query.getOrDefault("Action")
  valid_613728 = validateParameter(valid_613728, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_613728 != nil:
    section.add "Action", valid_613728
  var valid_613729 = query.getOrDefault("Version")
  valid_613729 = validateParameter(valid_613729, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613729 != nil:
    section.add "Version", valid_613729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613730 = header.getOrDefault("X-Amz-Signature")
  valid_613730 = validateParameter(valid_613730, JString, required = false,
                                 default = nil)
  if valid_613730 != nil:
    section.add "X-Amz-Signature", valid_613730
  var valid_613731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613731 = validateParameter(valid_613731, JString, required = false,
                                 default = nil)
  if valid_613731 != nil:
    section.add "X-Amz-Content-Sha256", valid_613731
  var valid_613732 = header.getOrDefault("X-Amz-Date")
  valid_613732 = validateParameter(valid_613732, JString, required = false,
                                 default = nil)
  if valid_613732 != nil:
    section.add "X-Amz-Date", valid_613732
  var valid_613733 = header.getOrDefault("X-Amz-Credential")
  valid_613733 = validateParameter(valid_613733, JString, required = false,
                                 default = nil)
  if valid_613733 != nil:
    section.add "X-Amz-Credential", valid_613733
  var valid_613734 = header.getOrDefault("X-Amz-Security-Token")
  valid_613734 = validateParameter(valid_613734, JString, required = false,
                                 default = nil)
  if valid_613734 != nil:
    section.add "X-Amz-Security-Token", valid_613734
  var valid_613735 = header.getOrDefault("X-Amz-Algorithm")
  valid_613735 = validateParameter(valid_613735, JString, required = false,
                                 default = nil)
  if valid_613735 != nil:
    section.add "X-Amz-Algorithm", valid_613735
  var valid_613736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613736 = validateParameter(valid_613736, JString, required = false,
                                 default = nil)
  if valid_613736 != nil:
    section.add "X-Amz-SignedHeaders", valid_613736
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_613737 = formData.getOrDefault("PolicyDocument")
  valid_613737 = validateParameter(valid_613737, JString, required = true,
                                 default = nil)
  if valid_613737 != nil:
    section.add "PolicyDocument", valid_613737
  var valid_613738 = formData.getOrDefault("Description")
  valid_613738 = validateParameter(valid_613738, JString, required = false,
                                 default = nil)
  if valid_613738 != nil:
    section.add "Description", valid_613738
  var valid_613739 = formData.getOrDefault("Path")
  valid_613739 = validateParameter(valid_613739, JString, required = false,
                                 default = nil)
  if valid_613739 != nil:
    section.add "Path", valid_613739
  var valid_613740 = formData.getOrDefault("PolicyName")
  valid_613740 = validateParameter(valid_613740, JString, required = true,
                                 default = nil)
  if valid_613740 != nil:
    section.add "PolicyName", valid_613740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613741: Call_PostCreatePolicy_613725; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613741.validator(path, query, header, formData, body)
  let scheme = call_613741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613741.url(scheme.get, call_613741.host, call_613741.base,
                         call_613741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613741, url, valid)

proc call*(call_613742: Call_PostCreatePolicy_613725; PolicyDocument: string;
          PolicyName: string; Description: string = ""; Path: string = "";
          Action: string = "CreatePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_613743 = newJObject()
  var formData_613744 = newJObject()
  add(formData_613744, "PolicyDocument", newJString(PolicyDocument))
  add(formData_613744, "Description", newJString(Description))
  add(formData_613744, "Path", newJString(Path))
  add(query_613743, "Action", newJString(Action))
  add(query_613743, "Version", newJString(Version))
  add(formData_613744, "PolicyName", newJString(PolicyName))
  result = call_613742.call(nil, query_613743, nil, formData_613744, nil)

var postCreatePolicy* = Call_PostCreatePolicy_613725(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_613726,
    base: "/", url: url_PostCreatePolicy_613727,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_613706 = ref object of OpenApiRestCall_612658
proc url_GetCreatePolicy_613708(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicy_613707(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_613709 = query.getOrDefault("PolicyName")
  valid_613709 = validateParameter(valid_613709, JString, required = true,
                                 default = nil)
  if valid_613709 != nil:
    section.add "PolicyName", valid_613709
  var valid_613710 = query.getOrDefault("Path")
  valid_613710 = validateParameter(valid_613710, JString, required = false,
                                 default = nil)
  if valid_613710 != nil:
    section.add "Path", valid_613710
  var valid_613711 = query.getOrDefault("PolicyDocument")
  valid_613711 = validateParameter(valid_613711, JString, required = true,
                                 default = nil)
  if valid_613711 != nil:
    section.add "PolicyDocument", valid_613711
  var valid_613712 = query.getOrDefault("Action")
  valid_613712 = validateParameter(valid_613712, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_613712 != nil:
    section.add "Action", valid_613712
  var valid_613713 = query.getOrDefault("Description")
  valid_613713 = validateParameter(valid_613713, JString, required = false,
                                 default = nil)
  if valid_613713 != nil:
    section.add "Description", valid_613713
  var valid_613714 = query.getOrDefault("Version")
  valid_613714 = validateParameter(valid_613714, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613714 != nil:
    section.add "Version", valid_613714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613715 = header.getOrDefault("X-Amz-Signature")
  valid_613715 = validateParameter(valid_613715, JString, required = false,
                                 default = nil)
  if valid_613715 != nil:
    section.add "X-Amz-Signature", valid_613715
  var valid_613716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613716 = validateParameter(valid_613716, JString, required = false,
                                 default = nil)
  if valid_613716 != nil:
    section.add "X-Amz-Content-Sha256", valid_613716
  var valid_613717 = header.getOrDefault("X-Amz-Date")
  valid_613717 = validateParameter(valid_613717, JString, required = false,
                                 default = nil)
  if valid_613717 != nil:
    section.add "X-Amz-Date", valid_613717
  var valid_613718 = header.getOrDefault("X-Amz-Credential")
  valid_613718 = validateParameter(valid_613718, JString, required = false,
                                 default = nil)
  if valid_613718 != nil:
    section.add "X-Amz-Credential", valid_613718
  var valid_613719 = header.getOrDefault("X-Amz-Security-Token")
  valid_613719 = validateParameter(valid_613719, JString, required = false,
                                 default = nil)
  if valid_613719 != nil:
    section.add "X-Amz-Security-Token", valid_613719
  var valid_613720 = header.getOrDefault("X-Amz-Algorithm")
  valid_613720 = validateParameter(valid_613720, JString, required = false,
                                 default = nil)
  if valid_613720 != nil:
    section.add "X-Amz-Algorithm", valid_613720
  var valid_613721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613721 = validateParameter(valid_613721, JString, required = false,
                                 default = nil)
  if valid_613721 != nil:
    section.add "X-Amz-SignedHeaders", valid_613721
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613722: Call_GetCreatePolicy_613706; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613722.validator(path, query, header, formData, body)
  let scheme = call_613722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613722.url(scheme.get, call_613722.host, call_613722.base,
                         call_613722.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613722, url, valid)

proc call*(call_613723: Call_GetCreatePolicy_613706; PolicyName: string;
          PolicyDocument: string; Path: string = ""; Action: string = "CreatePolicy";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Version: string (required)
  var query_613724 = newJObject()
  add(query_613724, "PolicyName", newJString(PolicyName))
  add(query_613724, "Path", newJString(Path))
  add(query_613724, "PolicyDocument", newJString(PolicyDocument))
  add(query_613724, "Action", newJString(Action))
  add(query_613724, "Description", newJString(Description))
  add(query_613724, "Version", newJString(Version))
  result = call_613723.call(nil, query_613724, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_613706(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_613707,
    base: "/", url: url_GetCreatePolicy_613708, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_613763 = ref object of OpenApiRestCall_612658
proc url_PostCreatePolicyVersion_613765(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreatePolicyVersion_613764(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613766 = query.getOrDefault("Action")
  valid_613766 = validateParameter(valid_613766, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_613766 != nil:
    section.add "Action", valid_613766
  var valid_613767 = query.getOrDefault("Version")
  valid_613767 = validateParameter(valid_613767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613767 != nil:
    section.add "Version", valid_613767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613768 = header.getOrDefault("X-Amz-Signature")
  valid_613768 = validateParameter(valid_613768, JString, required = false,
                                 default = nil)
  if valid_613768 != nil:
    section.add "X-Amz-Signature", valid_613768
  var valid_613769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613769 = validateParameter(valid_613769, JString, required = false,
                                 default = nil)
  if valid_613769 != nil:
    section.add "X-Amz-Content-Sha256", valid_613769
  var valid_613770 = header.getOrDefault("X-Amz-Date")
  valid_613770 = validateParameter(valid_613770, JString, required = false,
                                 default = nil)
  if valid_613770 != nil:
    section.add "X-Amz-Date", valid_613770
  var valid_613771 = header.getOrDefault("X-Amz-Credential")
  valid_613771 = validateParameter(valid_613771, JString, required = false,
                                 default = nil)
  if valid_613771 != nil:
    section.add "X-Amz-Credential", valid_613771
  var valid_613772 = header.getOrDefault("X-Amz-Security-Token")
  valid_613772 = validateParameter(valid_613772, JString, required = false,
                                 default = nil)
  if valid_613772 != nil:
    section.add "X-Amz-Security-Token", valid_613772
  var valid_613773 = header.getOrDefault("X-Amz-Algorithm")
  valid_613773 = validateParameter(valid_613773, JString, required = false,
                                 default = nil)
  if valid_613773 != nil:
    section.add "X-Amz-Algorithm", valid_613773
  var valid_613774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613774 = validateParameter(valid_613774, JString, required = false,
                                 default = nil)
  if valid_613774 != nil:
    section.add "X-Amz-SignedHeaders", valid_613774
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_613775 = formData.getOrDefault("PolicyDocument")
  valid_613775 = validateParameter(valid_613775, JString, required = true,
                                 default = nil)
  if valid_613775 != nil:
    section.add "PolicyDocument", valid_613775
  var valid_613776 = formData.getOrDefault("SetAsDefault")
  valid_613776 = validateParameter(valid_613776, JBool, required = false, default = nil)
  if valid_613776 != nil:
    section.add "SetAsDefault", valid_613776
  var valid_613777 = formData.getOrDefault("PolicyArn")
  valid_613777 = validateParameter(valid_613777, JString, required = true,
                                 default = nil)
  if valid_613777 != nil:
    section.add "PolicyArn", valid_613777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613778: Call_PostCreatePolicyVersion_613763; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613778.validator(path, query, header, formData, body)
  let scheme = call_613778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613778.url(scheme.get, call_613778.host, call_613778.base,
                         call_613778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613778, url, valid)

proc call*(call_613779: Call_PostCreatePolicyVersion_613763;
          PolicyDocument: string; PolicyArn: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613780 = newJObject()
  var formData_613781 = newJObject()
  add(formData_613781, "PolicyDocument", newJString(PolicyDocument))
  add(formData_613781, "SetAsDefault", newJBool(SetAsDefault))
  add(formData_613781, "PolicyArn", newJString(PolicyArn))
  add(query_613780, "Action", newJString(Action))
  add(query_613780, "Version", newJString(Version))
  result = call_613779.call(nil, query_613780, nil, formData_613781, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_613763(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_613764, base: "/",
    url: url_PostCreatePolicyVersion_613765, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_613745 = ref object of OpenApiRestCall_612658
proc url_GetCreatePolicyVersion_613747(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreatePolicyVersion_613746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_613748 = query.getOrDefault("PolicyArn")
  valid_613748 = validateParameter(valid_613748, JString, required = true,
                                 default = nil)
  if valid_613748 != nil:
    section.add "PolicyArn", valid_613748
  var valid_613749 = query.getOrDefault("SetAsDefault")
  valid_613749 = validateParameter(valid_613749, JBool, required = false, default = nil)
  if valid_613749 != nil:
    section.add "SetAsDefault", valid_613749
  var valid_613750 = query.getOrDefault("PolicyDocument")
  valid_613750 = validateParameter(valid_613750, JString, required = true,
                                 default = nil)
  if valid_613750 != nil:
    section.add "PolicyDocument", valid_613750
  var valid_613751 = query.getOrDefault("Action")
  valid_613751 = validateParameter(valid_613751, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_613751 != nil:
    section.add "Action", valid_613751
  var valid_613752 = query.getOrDefault("Version")
  valid_613752 = validateParameter(valid_613752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613752 != nil:
    section.add "Version", valid_613752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613753 = header.getOrDefault("X-Amz-Signature")
  valid_613753 = validateParameter(valid_613753, JString, required = false,
                                 default = nil)
  if valid_613753 != nil:
    section.add "X-Amz-Signature", valid_613753
  var valid_613754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613754 = validateParameter(valid_613754, JString, required = false,
                                 default = nil)
  if valid_613754 != nil:
    section.add "X-Amz-Content-Sha256", valid_613754
  var valid_613755 = header.getOrDefault("X-Amz-Date")
  valid_613755 = validateParameter(valid_613755, JString, required = false,
                                 default = nil)
  if valid_613755 != nil:
    section.add "X-Amz-Date", valid_613755
  var valid_613756 = header.getOrDefault("X-Amz-Credential")
  valid_613756 = validateParameter(valid_613756, JString, required = false,
                                 default = nil)
  if valid_613756 != nil:
    section.add "X-Amz-Credential", valid_613756
  var valid_613757 = header.getOrDefault("X-Amz-Security-Token")
  valid_613757 = validateParameter(valid_613757, JString, required = false,
                                 default = nil)
  if valid_613757 != nil:
    section.add "X-Amz-Security-Token", valid_613757
  var valid_613758 = header.getOrDefault("X-Amz-Algorithm")
  valid_613758 = validateParameter(valid_613758, JString, required = false,
                                 default = nil)
  if valid_613758 != nil:
    section.add "X-Amz-Algorithm", valid_613758
  var valid_613759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613759 = validateParameter(valid_613759, JString, required = false,
                                 default = nil)
  if valid_613759 != nil:
    section.add "X-Amz-SignedHeaders", valid_613759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613760: Call_GetCreatePolicyVersion_613745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613760.validator(path, query, header, formData, body)
  let scheme = call_613760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613760.url(scheme.get, call_613760.host, call_613760.base,
                         call_613760.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613760, url, valid)

proc call*(call_613761: Call_GetCreatePolicyVersion_613745; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613762 = newJObject()
  add(query_613762, "PolicyArn", newJString(PolicyArn))
  add(query_613762, "SetAsDefault", newJBool(SetAsDefault))
  add(query_613762, "PolicyDocument", newJString(PolicyDocument))
  add(query_613762, "Action", newJString(Action))
  add(query_613762, "Version", newJString(Version))
  result = call_613761.call(nil, query_613762, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_613745(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_613746, base: "/",
    url: url_GetCreatePolicyVersion_613747, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_613804 = ref object of OpenApiRestCall_612658
proc url_PostCreateRole_613806(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateRole_613805(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613807 = query.getOrDefault("Action")
  valid_613807 = validateParameter(valid_613807, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_613807 != nil:
    section.add "Action", valid_613807
  var valid_613808 = query.getOrDefault("Version")
  valid_613808 = validateParameter(valid_613808, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613808 != nil:
    section.add "Version", valid_613808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613809 = header.getOrDefault("X-Amz-Signature")
  valid_613809 = validateParameter(valid_613809, JString, required = false,
                                 default = nil)
  if valid_613809 != nil:
    section.add "X-Amz-Signature", valid_613809
  var valid_613810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613810 = validateParameter(valid_613810, JString, required = false,
                                 default = nil)
  if valid_613810 != nil:
    section.add "X-Amz-Content-Sha256", valid_613810
  var valid_613811 = header.getOrDefault("X-Amz-Date")
  valid_613811 = validateParameter(valid_613811, JString, required = false,
                                 default = nil)
  if valid_613811 != nil:
    section.add "X-Amz-Date", valid_613811
  var valid_613812 = header.getOrDefault("X-Amz-Credential")
  valid_613812 = validateParameter(valid_613812, JString, required = false,
                                 default = nil)
  if valid_613812 != nil:
    section.add "X-Amz-Credential", valid_613812
  var valid_613813 = header.getOrDefault("X-Amz-Security-Token")
  valid_613813 = validateParameter(valid_613813, JString, required = false,
                                 default = nil)
  if valid_613813 != nil:
    section.add "X-Amz-Security-Token", valid_613813
  var valid_613814 = header.getOrDefault("X-Amz-Algorithm")
  valid_613814 = validateParameter(valid_613814, JString, required = false,
                                 default = nil)
  if valid_613814 != nil:
    section.add "X-Amz-Algorithm", valid_613814
  var valid_613815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613815 = validateParameter(valid_613815, JString, required = false,
                                 default = nil)
  if valid_613815 != nil:
    section.add "X-Amz-SignedHeaders", valid_613815
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : A description of the role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  section = newJObject()
  var valid_613816 = formData.getOrDefault("Description")
  valid_613816 = validateParameter(valid_613816, JString, required = false,
                                 default = nil)
  if valid_613816 != nil:
    section.add "Description", valid_613816
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_613817 = formData.getOrDefault("RoleName")
  valid_613817 = validateParameter(valid_613817, JString, required = true,
                                 default = nil)
  if valid_613817 != nil:
    section.add "RoleName", valid_613817
  var valid_613818 = formData.getOrDefault("Path")
  valid_613818 = validateParameter(valid_613818, JString, required = false,
                                 default = nil)
  if valid_613818 != nil:
    section.add "Path", valid_613818
  var valid_613819 = formData.getOrDefault("Tags")
  valid_613819 = validateParameter(valid_613819, JArray, required = false,
                                 default = nil)
  if valid_613819 != nil:
    section.add "Tags", valid_613819
  var valid_613820 = formData.getOrDefault("PermissionsBoundary")
  valid_613820 = validateParameter(valid_613820, JString, required = false,
                                 default = nil)
  if valid_613820 != nil:
    section.add "PermissionsBoundary", valid_613820
  var valid_613821 = formData.getOrDefault("MaxSessionDuration")
  valid_613821 = validateParameter(valid_613821, JInt, required = false, default = nil)
  if valid_613821 != nil:
    section.add "MaxSessionDuration", valid_613821
  var valid_613822 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_613822 = validateParameter(valid_613822, JString, required = true,
                                 default = nil)
  if valid_613822 != nil:
    section.add "AssumeRolePolicyDocument", valid_613822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613823: Call_PostCreateRole_613804; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613823.validator(path, query, header, formData, body)
  let scheme = call_613823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613823.url(scheme.get, call_613823.host, call_613823.base,
                         call_613823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613823, url, valid)

proc call*(call_613824: Call_PostCreateRole_613804; RoleName: string;
          AssumeRolePolicyDocument: string; Description: string = "";
          Path: string = ""; Action: string = "CreateRole"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Description: string
  ##              : A description of the role.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  var query_613825 = newJObject()
  var formData_613826 = newJObject()
  add(formData_613826, "Description", newJString(Description))
  add(formData_613826, "RoleName", newJString(RoleName))
  add(formData_613826, "Path", newJString(Path))
  add(query_613825, "Action", newJString(Action))
  if Tags != nil:
    formData_613826.add "Tags", Tags
  add(formData_613826, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(formData_613826, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_613825, "Version", newJString(Version))
  add(formData_613826, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  result = call_613824.call(nil, query_613825, nil, formData_613826, nil)

var postCreateRole* = Call_PostCreateRole_613804(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_613805,
    base: "/", url: url_PostCreateRole_613806, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_613782 = ref object of OpenApiRestCall_612658
proc url_GetCreateRole_613784(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateRole_613783(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : A description of the role.
  ##   Version: JString (required)
  section = newJObject()
  var valid_613785 = query.getOrDefault("Tags")
  valid_613785 = validateParameter(valid_613785, JArray, required = false,
                                 default = nil)
  if valid_613785 != nil:
    section.add "Tags", valid_613785
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_613786 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_613786 = validateParameter(valid_613786, JString, required = true,
                                 default = nil)
  if valid_613786 != nil:
    section.add "AssumeRolePolicyDocument", valid_613786
  var valid_613787 = query.getOrDefault("PermissionsBoundary")
  valid_613787 = validateParameter(valid_613787, JString, required = false,
                                 default = nil)
  if valid_613787 != nil:
    section.add "PermissionsBoundary", valid_613787
  var valid_613788 = query.getOrDefault("Path")
  valid_613788 = validateParameter(valid_613788, JString, required = false,
                                 default = nil)
  if valid_613788 != nil:
    section.add "Path", valid_613788
  var valid_613789 = query.getOrDefault("RoleName")
  valid_613789 = validateParameter(valid_613789, JString, required = true,
                                 default = nil)
  if valid_613789 != nil:
    section.add "RoleName", valid_613789
  var valid_613790 = query.getOrDefault("MaxSessionDuration")
  valid_613790 = validateParameter(valid_613790, JInt, required = false, default = nil)
  if valid_613790 != nil:
    section.add "MaxSessionDuration", valid_613790
  var valid_613791 = query.getOrDefault("Action")
  valid_613791 = validateParameter(valid_613791, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_613791 != nil:
    section.add "Action", valid_613791
  var valid_613792 = query.getOrDefault("Description")
  valid_613792 = validateParameter(valid_613792, JString, required = false,
                                 default = nil)
  if valid_613792 != nil:
    section.add "Description", valid_613792
  var valid_613793 = query.getOrDefault("Version")
  valid_613793 = validateParameter(valid_613793, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613793 != nil:
    section.add "Version", valid_613793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613794 = header.getOrDefault("X-Amz-Signature")
  valid_613794 = validateParameter(valid_613794, JString, required = false,
                                 default = nil)
  if valid_613794 != nil:
    section.add "X-Amz-Signature", valid_613794
  var valid_613795 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613795 = validateParameter(valid_613795, JString, required = false,
                                 default = nil)
  if valid_613795 != nil:
    section.add "X-Amz-Content-Sha256", valid_613795
  var valid_613796 = header.getOrDefault("X-Amz-Date")
  valid_613796 = validateParameter(valid_613796, JString, required = false,
                                 default = nil)
  if valid_613796 != nil:
    section.add "X-Amz-Date", valid_613796
  var valid_613797 = header.getOrDefault("X-Amz-Credential")
  valid_613797 = validateParameter(valid_613797, JString, required = false,
                                 default = nil)
  if valid_613797 != nil:
    section.add "X-Amz-Credential", valid_613797
  var valid_613798 = header.getOrDefault("X-Amz-Security-Token")
  valid_613798 = validateParameter(valid_613798, JString, required = false,
                                 default = nil)
  if valid_613798 != nil:
    section.add "X-Amz-Security-Token", valid_613798
  var valid_613799 = header.getOrDefault("X-Amz-Algorithm")
  valid_613799 = validateParameter(valid_613799, JString, required = false,
                                 default = nil)
  if valid_613799 != nil:
    section.add "X-Amz-Algorithm", valid_613799
  var valid_613800 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613800 = validateParameter(valid_613800, JString, required = false,
                                 default = nil)
  if valid_613800 != nil:
    section.add "X-Amz-SignedHeaders", valid_613800
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613801: Call_GetCreateRole_613782; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_613801.validator(path, query, header, formData, body)
  let scheme = call_613801.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613801.url(scheme.get, call_613801.host, call_613801.base,
                         call_613801.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613801, url, valid)

proc call*(call_613802: Call_GetCreateRole_613782;
          AssumeRolePolicyDocument: string; RoleName: string; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Path: string = "";
          MaxSessionDuration: int = 0; Action: string = "CreateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Version: string (required)
  var query_613803 = newJObject()
  if Tags != nil:
    query_613803.add "Tags", Tags
  add(query_613803, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_613803, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_613803, "Path", newJString(Path))
  add(query_613803, "RoleName", newJString(RoleName))
  add(query_613803, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_613803, "Action", newJString(Action))
  add(query_613803, "Description", newJString(Description))
  add(query_613803, "Version", newJString(Version))
  result = call_613802.call(nil, query_613803, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_613782(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_613783,
    base: "/", url: url_GetCreateRole_613784, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_613844 = ref object of OpenApiRestCall_612658
proc url_PostCreateSAMLProvider_613846(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSAMLProvider_613845(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613847 = query.getOrDefault("Action")
  valid_613847 = validateParameter(valid_613847, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_613847 != nil:
    section.add "Action", valid_613847
  var valid_613848 = query.getOrDefault("Version")
  valid_613848 = validateParameter(valid_613848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613848 != nil:
    section.add "Version", valid_613848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613849 = header.getOrDefault("X-Amz-Signature")
  valid_613849 = validateParameter(valid_613849, JString, required = false,
                                 default = nil)
  if valid_613849 != nil:
    section.add "X-Amz-Signature", valid_613849
  var valid_613850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613850 = validateParameter(valid_613850, JString, required = false,
                                 default = nil)
  if valid_613850 != nil:
    section.add "X-Amz-Content-Sha256", valid_613850
  var valid_613851 = header.getOrDefault("X-Amz-Date")
  valid_613851 = validateParameter(valid_613851, JString, required = false,
                                 default = nil)
  if valid_613851 != nil:
    section.add "X-Amz-Date", valid_613851
  var valid_613852 = header.getOrDefault("X-Amz-Credential")
  valid_613852 = validateParameter(valid_613852, JString, required = false,
                                 default = nil)
  if valid_613852 != nil:
    section.add "X-Amz-Credential", valid_613852
  var valid_613853 = header.getOrDefault("X-Amz-Security-Token")
  valid_613853 = validateParameter(valid_613853, JString, required = false,
                                 default = nil)
  if valid_613853 != nil:
    section.add "X-Amz-Security-Token", valid_613853
  var valid_613854 = header.getOrDefault("X-Amz-Algorithm")
  valid_613854 = validateParameter(valid_613854, JString, required = false,
                                 default = nil)
  if valid_613854 != nil:
    section.add "X-Amz-Algorithm", valid_613854
  var valid_613855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613855 = validateParameter(valid_613855, JString, required = false,
                                 default = nil)
  if valid_613855 != nil:
    section.add "X-Amz-SignedHeaders", valid_613855
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_613856 = formData.getOrDefault("SAMLMetadataDocument")
  valid_613856 = validateParameter(valid_613856, JString, required = true,
                                 default = nil)
  if valid_613856 != nil:
    section.add "SAMLMetadataDocument", valid_613856
  var valid_613857 = formData.getOrDefault("Name")
  valid_613857 = validateParameter(valid_613857, JString, required = true,
                                 default = nil)
  if valid_613857 != nil:
    section.add "Name", valid_613857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613858: Call_PostCreateSAMLProvider_613844; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613858.validator(path, query, header, formData, body)
  let scheme = call_613858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613858.url(scheme.get, call_613858.host, call_613858.base,
                         call_613858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613858, url, valid)

proc call*(call_613859: Call_PostCreateSAMLProvider_613844;
          SAMLMetadataDocument: string; Name: string;
          Action: string = "CreateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_613860 = newJObject()
  var formData_613861 = newJObject()
  add(formData_613861, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_613860, "Action", newJString(Action))
  add(formData_613861, "Name", newJString(Name))
  add(query_613860, "Version", newJString(Version))
  result = call_613859.call(nil, query_613860, nil, formData_613861, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_613844(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_613845, base: "/",
    url: url_PostCreateSAMLProvider_613846, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_613827 = ref object of OpenApiRestCall_612658
proc url_GetCreateSAMLProvider_613829(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSAMLProvider_613828(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_613830 = query.getOrDefault("Name")
  valid_613830 = validateParameter(valid_613830, JString, required = true,
                                 default = nil)
  if valid_613830 != nil:
    section.add "Name", valid_613830
  var valid_613831 = query.getOrDefault("Action")
  valid_613831 = validateParameter(valid_613831, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_613831 != nil:
    section.add "Action", valid_613831
  var valid_613832 = query.getOrDefault("SAMLMetadataDocument")
  valid_613832 = validateParameter(valid_613832, JString, required = true,
                                 default = nil)
  if valid_613832 != nil:
    section.add "SAMLMetadataDocument", valid_613832
  var valid_613833 = query.getOrDefault("Version")
  valid_613833 = validateParameter(valid_613833, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613833 != nil:
    section.add "Version", valid_613833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613834 = header.getOrDefault("X-Amz-Signature")
  valid_613834 = validateParameter(valid_613834, JString, required = false,
                                 default = nil)
  if valid_613834 != nil:
    section.add "X-Amz-Signature", valid_613834
  var valid_613835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613835 = validateParameter(valid_613835, JString, required = false,
                                 default = nil)
  if valid_613835 != nil:
    section.add "X-Amz-Content-Sha256", valid_613835
  var valid_613836 = header.getOrDefault("X-Amz-Date")
  valid_613836 = validateParameter(valid_613836, JString, required = false,
                                 default = nil)
  if valid_613836 != nil:
    section.add "X-Amz-Date", valid_613836
  var valid_613837 = header.getOrDefault("X-Amz-Credential")
  valid_613837 = validateParameter(valid_613837, JString, required = false,
                                 default = nil)
  if valid_613837 != nil:
    section.add "X-Amz-Credential", valid_613837
  var valid_613838 = header.getOrDefault("X-Amz-Security-Token")
  valid_613838 = validateParameter(valid_613838, JString, required = false,
                                 default = nil)
  if valid_613838 != nil:
    section.add "X-Amz-Security-Token", valid_613838
  var valid_613839 = header.getOrDefault("X-Amz-Algorithm")
  valid_613839 = validateParameter(valid_613839, JString, required = false,
                                 default = nil)
  if valid_613839 != nil:
    section.add "X-Amz-Algorithm", valid_613839
  var valid_613840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613840 = validateParameter(valid_613840, JString, required = false,
                                 default = nil)
  if valid_613840 != nil:
    section.add "X-Amz-SignedHeaders", valid_613840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613841: Call_GetCreateSAMLProvider_613827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613841.validator(path, query, header, formData, body)
  let scheme = call_613841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613841.url(scheme.get, call_613841.host, call_613841.base,
                         call_613841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613841, url, valid)

proc call*(call_613842: Call_GetCreateSAMLProvider_613827; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_613843 = newJObject()
  add(query_613843, "Name", newJString(Name))
  add(query_613843, "Action", newJString(Action))
  add(query_613843, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_613843, "Version", newJString(Version))
  result = call_613842.call(nil, query_613843, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_613827(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_613828, base: "/",
    url: url_GetCreateSAMLProvider_613829, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_613880 = ref object of OpenApiRestCall_612658
proc url_PostCreateServiceLinkedRole_613882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceLinkedRole_613881(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613883 = query.getOrDefault("Action")
  valid_613883 = validateParameter(valid_613883, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_613883 != nil:
    section.add "Action", valid_613883
  var valid_613884 = query.getOrDefault("Version")
  valid_613884 = validateParameter(valid_613884, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613884 != nil:
    section.add "Version", valid_613884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613885 = header.getOrDefault("X-Amz-Signature")
  valid_613885 = validateParameter(valid_613885, JString, required = false,
                                 default = nil)
  if valid_613885 != nil:
    section.add "X-Amz-Signature", valid_613885
  var valid_613886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613886 = validateParameter(valid_613886, JString, required = false,
                                 default = nil)
  if valid_613886 != nil:
    section.add "X-Amz-Content-Sha256", valid_613886
  var valid_613887 = header.getOrDefault("X-Amz-Date")
  valid_613887 = validateParameter(valid_613887, JString, required = false,
                                 default = nil)
  if valid_613887 != nil:
    section.add "X-Amz-Date", valid_613887
  var valid_613888 = header.getOrDefault("X-Amz-Credential")
  valid_613888 = validateParameter(valid_613888, JString, required = false,
                                 default = nil)
  if valid_613888 != nil:
    section.add "X-Amz-Credential", valid_613888
  var valid_613889 = header.getOrDefault("X-Amz-Security-Token")
  valid_613889 = validateParameter(valid_613889, JString, required = false,
                                 default = nil)
  if valid_613889 != nil:
    section.add "X-Amz-Security-Token", valid_613889
  var valid_613890 = header.getOrDefault("X-Amz-Algorithm")
  valid_613890 = validateParameter(valid_613890, JString, required = false,
                                 default = nil)
  if valid_613890 != nil:
    section.add "X-Amz-Algorithm", valid_613890
  var valid_613891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613891 = validateParameter(valid_613891, JString, required = false,
                                 default = nil)
  if valid_613891 != nil:
    section.add "X-Amz-SignedHeaders", valid_613891
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  section = newJObject()
  var valid_613892 = formData.getOrDefault("CustomSuffix")
  valid_613892 = validateParameter(valid_613892, JString, required = false,
                                 default = nil)
  if valid_613892 != nil:
    section.add "CustomSuffix", valid_613892
  var valid_613893 = formData.getOrDefault("Description")
  valid_613893 = validateParameter(valid_613893, JString, required = false,
                                 default = nil)
  if valid_613893 != nil:
    section.add "Description", valid_613893
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_613894 = formData.getOrDefault("AWSServiceName")
  valid_613894 = validateParameter(valid_613894, JString, required = true,
                                 default = nil)
  if valid_613894 != nil:
    section.add "AWSServiceName", valid_613894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613895: Call_PostCreateServiceLinkedRole_613880; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_613895.validator(path, query, header, formData, body)
  let scheme = call_613895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613895.url(scheme.get, call_613895.host, call_613895.base,
                         call_613895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613895, url, valid)

proc call*(call_613896: Call_PostCreateServiceLinkedRole_613880;
          AWSServiceName: string; CustomSuffix: string = ""; Description: string = "";
          Action: string = "CreateServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   Action: string (required)
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_613897 = newJObject()
  var formData_613898 = newJObject()
  add(formData_613898, "CustomSuffix", newJString(CustomSuffix))
  add(formData_613898, "Description", newJString(Description))
  add(query_613897, "Action", newJString(Action))
  add(formData_613898, "AWSServiceName", newJString(AWSServiceName))
  add(query_613897, "Version", newJString(Version))
  result = call_613896.call(nil, query_613897, nil, formData_613898, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_613880(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_613881, base: "/",
    url: url_PostCreateServiceLinkedRole_613882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_613862 = ref object of OpenApiRestCall_612658
proc url_GetCreateServiceLinkedRole_613864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceLinkedRole_613863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_613865 = query.getOrDefault("CustomSuffix")
  valid_613865 = validateParameter(valid_613865, JString, required = false,
                                 default = nil)
  if valid_613865 != nil:
    section.add "CustomSuffix", valid_613865
  var valid_613866 = query.getOrDefault("Action")
  valid_613866 = validateParameter(valid_613866, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_613866 != nil:
    section.add "Action", valid_613866
  var valid_613867 = query.getOrDefault("Description")
  valid_613867 = validateParameter(valid_613867, JString, required = false,
                                 default = nil)
  if valid_613867 != nil:
    section.add "Description", valid_613867
  var valid_613868 = query.getOrDefault("AWSServiceName")
  valid_613868 = validateParameter(valid_613868, JString, required = true,
                                 default = nil)
  if valid_613868 != nil:
    section.add "AWSServiceName", valid_613868
  var valid_613869 = query.getOrDefault("Version")
  valid_613869 = validateParameter(valid_613869, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613869 != nil:
    section.add "Version", valid_613869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613870 = header.getOrDefault("X-Amz-Signature")
  valid_613870 = validateParameter(valid_613870, JString, required = false,
                                 default = nil)
  if valid_613870 != nil:
    section.add "X-Amz-Signature", valid_613870
  var valid_613871 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613871 = validateParameter(valid_613871, JString, required = false,
                                 default = nil)
  if valid_613871 != nil:
    section.add "X-Amz-Content-Sha256", valid_613871
  var valid_613872 = header.getOrDefault("X-Amz-Date")
  valid_613872 = validateParameter(valid_613872, JString, required = false,
                                 default = nil)
  if valid_613872 != nil:
    section.add "X-Amz-Date", valid_613872
  var valid_613873 = header.getOrDefault("X-Amz-Credential")
  valid_613873 = validateParameter(valid_613873, JString, required = false,
                                 default = nil)
  if valid_613873 != nil:
    section.add "X-Amz-Credential", valid_613873
  var valid_613874 = header.getOrDefault("X-Amz-Security-Token")
  valid_613874 = validateParameter(valid_613874, JString, required = false,
                                 default = nil)
  if valid_613874 != nil:
    section.add "X-Amz-Security-Token", valid_613874
  var valid_613875 = header.getOrDefault("X-Amz-Algorithm")
  valid_613875 = validateParameter(valid_613875, JString, required = false,
                                 default = nil)
  if valid_613875 != nil:
    section.add "X-Amz-Algorithm", valid_613875
  var valid_613876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613876 = validateParameter(valid_613876, JString, required = false,
                                 default = nil)
  if valid_613876 != nil:
    section.add "X-Amz-SignedHeaders", valid_613876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613877: Call_GetCreateServiceLinkedRole_613862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_613877.validator(path, query, header, formData, body)
  let scheme = call_613877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613877.url(scheme.get, call_613877.host, call_613877.base,
                         call_613877.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613877, url, valid)

proc call*(call_613878: Call_GetCreateServiceLinkedRole_613862;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole"; Description: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Version: string (required)
  var query_613879 = newJObject()
  add(query_613879, "CustomSuffix", newJString(CustomSuffix))
  add(query_613879, "Action", newJString(Action))
  add(query_613879, "Description", newJString(Description))
  add(query_613879, "AWSServiceName", newJString(AWSServiceName))
  add(query_613879, "Version", newJString(Version))
  result = call_613878.call(nil, query_613879, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_613862(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_613863, base: "/",
    url: url_GetCreateServiceLinkedRole_613864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_613916 = ref object of OpenApiRestCall_612658
proc url_PostCreateServiceSpecificCredential_613918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateServiceSpecificCredential_613917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613919 = query.getOrDefault("Action")
  valid_613919 = validateParameter(valid_613919, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_613919 != nil:
    section.add "Action", valid_613919
  var valid_613920 = query.getOrDefault("Version")
  valid_613920 = validateParameter(valid_613920, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613920 != nil:
    section.add "Version", valid_613920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613921 = header.getOrDefault("X-Amz-Signature")
  valid_613921 = validateParameter(valid_613921, JString, required = false,
                                 default = nil)
  if valid_613921 != nil:
    section.add "X-Amz-Signature", valid_613921
  var valid_613922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613922 = validateParameter(valid_613922, JString, required = false,
                                 default = nil)
  if valid_613922 != nil:
    section.add "X-Amz-Content-Sha256", valid_613922
  var valid_613923 = header.getOrDefault("X-Amz-Date")
  valid_613923 = validateParameter(valid_613923, JString, required = false,
                                 default = nil)
  if valid_613923 != nil:
    section.add "X-Amz-Date", valid_613923
  var valid_613924 = header.getOrDefault("X-Amz-Credential")
  valid_613924 = validateParameter(valid_613924, JString, required = false,
                                 default = nil)
  if valid_613924 != nil:
    section.add "X-Amz-Credential", valid_613924
  var valid_613925 = header.getOrDefault("X-Amz-Security-Token")
  valid_613925 = validateParameter(valid_613925, JString, required = false,
                                 default = nil)
  if valid_613925 != nil:
    section.add "X-Amz-Security-Token", valid_613925
  var valid_613926 = header.getOrDefault("X-Amz-Algorithm")
  valid_613926 = validateParameter(valid_613926, JString, required = false,
                                 default = nil)
  if valid_613926 != nil:
    section.add "X-Amz-Algorithm", valid_613926
  var valid_613927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613927 = validateParameter(valid_613927, JString, required = false,
                                 default = nil)
  if valid_613927 != nil:
    section.add "X-Amz-SignedHeaders", valid_613927
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ServiceName` field"
  var valid_613928 = formData.getOrDefault("ServiceName")
  valid_613928 = validateParameter(valid_613928, JString, required = true,
                                 default = nil)
  if valid_613928 != nil:
    section.add "ServiceName", valid_613928
  var valid_613929 = formData.getOrDefault("UserName")
  valid_613929 = validateParameter(valid_613929, JString, required = true,
                                 default = nil)
  if valid_613929 != nil:
    section.add "UserName", valid_613929
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613930: Call_PostCreateServiceSpecificCredential_613916;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613930.validator(path, query, header, formData, body)
  let scheme = call_613930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613930.url(scheme.get, call_613930.host, call_613930.base,
                         call_613930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613930, url, valid)

proc call*(call_613931: Call_PostCreateServiceSpecificCredential_613916;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613932 = newJObject()
  var formData_613933 = newJObject()
  add(formData_613933, "ServiceName", newJString(ServiceName))
  add(formData_613933, "UserName", newJString(UserName))
  add(query_613932, "Action", newJString(Action))
  add(query_613932, "Version", newJString(Version))
  result = call_613931.call(nil, query_613932, nil, formData_613933, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_613916(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_613917, base: "/",
    url: url_PostCreateServiceSpecificCredential_613918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_613899 = ref object of OpenApiRestCall_612658
proc url_GetCreateServiceSpecificCredential_613901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateServiceSpecificCredential_613900(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613902 = query.getOrDefault("UserName")
  valid_613902 = validateParameter(valid_613902, JString, required = true,
                                 default = nil)
  if valid_613902 != nil:
    section.add "UserName", valid_613902
  var valid_613903 = query.getOrDefault("ServiceName")
  valid_613903 = validateParameter(valid_613903, JString, required = true,
                                 default = nil)
  if valid_613903 != nil:
    section.add "ServiceName", valid_613903
  var valid_613904 = query.getOrDefault("Action")
  valid_613904 = validateParameter(valid_613904, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_613904 != nil:
    section.add "Action", valid_613904
  var valid_613905 = query.getOrDefault("Version")
  valid_613905 = validateParameter(valid_613905, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613905 != nil:
    section.add "Version", valid_613905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613906 = header.getOrDefault("X-Amz-Signature")
  valid_613906 = validateParameter(valid_613906, JString, required = false,
                                 default = nil)
  if valid_613906 != nil:
    section.add "X-Amz-Signature", valid_613906
  var valid_613907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613907 = validateParameter(valid_613907, JString, required = false,
                                 default = nil)
  if valid_613907 != nil:
    section.add "X-Amz-Content-Sha256", valid_613907
  var valid_613908 = header.getOrDefault("X-Amz-Date")
  valid_613908 = validateParameter(valid_613908, JString, required = false,
                                 default = nil)
  if valid_613908 != nil:
    section.add "X-Amz-Date", valid_613908
  var valid_613909 = header.getOrDefault("X-Amz-Credential")
  valid_613909 = validateParameter(valid_613909, JString, required = false,
                                 default = nil)
  if valid_613909 != nil:
    section.add "X-Amz-Credential", valid_613909
  var valid_613910 = header.getOrDefault("X-Amz-Security-Token")
  valid_613910 = validateParameter(valid_613910, JString, required = false,
                                 default = nil)
  if valid_613910 != nil:
    section.add "X-Amz-Security-Token", valid_613910
  var valid_613911 = header.getOrDefault("X-Amz-Algorithm")
  valid_613911 = validateParameter(valid_613911, JString, required = false,
                                 default = nil)
  if valid_613911 != nil:
    section.add "X-Amz-Algorithm", valid_613911
  var valid_613912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613912 = validateParameter(valid_613912, JString, required = false,
                                 default = nil)
  if valid_613912 != nil:
    section.add "X-Amz-SignedHeaders", valid_613912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613913: Call_GetCreateServiceSpecificCredential_613899;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613913.validator(path, query, header, formData, body)
  let scheme = call_613913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613913.url(scheme.get, call_613913.host, call_613913.base,
                         call_613913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613913, url, valid)

proc call*(call_613914: Call_GetCreateServiceSpecificCredential_613899;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613915 = newJObject()
  add(query_613915, "UserName", newJString(UserName))
  add(query_613915, "ServiceName", newJString(ServiceName))
  add(query_613915, "Action", newJString(Action))
  add(query_613915, "Version", newJString(Version))
  result = call_613914.call(nil, query_613915, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_613899(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_613900, base: "/",
    url: url_GetCreateServiceSpecificCredential_613901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_613953 = ref object of OpenApiRestCall_612658
proc url_PostCreateUser_613955(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateUser_613954(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613956 = query.getOrDefault("Action")
  valid_613956 = validateParameter(valid_613956, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_613956 != nil:
    section.add "Action", valid_613956
  var valid_613957 = query.getOrDefault("Version")
  valid_613957 = validateParameter(valid_613957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613957 != nil:
    section.add "Version", valid_613957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613958 = header.getOrDefault("X-Amz-Signature")
  valid_613958 = validateParameter(valid_613958, JString, required = false,
                                 default = nil)
  if valid_613958 != nil:
    section.add "X-Amz-Signature", valid_613958
  var valid_613959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613959 = validateParameter(valid_613959, JString, required = false,
                                 default = nil)
  if valid_613959 != nil:
    section.add "X-Amz-Content-Sha256", valid_613959
  var valid_613960 = header.getOrDefault("X-Amz-Date")
  valid_613960 = validateParameter(valid_613960, JString, required = false,
                                 default = nil)
  if valid_613960 != nil:
    section.add "X-Amz-Date", valid_613960
  var valid_613961 = header.getOrDefault("X-Amz-Credential")
  valid_613961 = validateParameter(valid_613961, JString, required = false,
                                 default = nil)
  if valid_613961 != nil:
    section.add "X-Amz-Credential", valid_613961
  var valid_613962 = header.getOrDefault("X-Amz-Security-Token")
  valid_613962 = validateParameter(valid_613962, JString, required = false,
                                 default = nil)
  if valid_613962 != nil:
    section.add "X-Amz-Security-Token", valid_613962
  var valid_613963 = header.getOrDefault("X-Amz-Algorithm")
  valid_613963 = validateParameter(valid_613963, JString, required = false,
                                 default = nil)
  if valid_613963 != nil:
    section.add "X-Amz-Algorithm", valid_613963
  var valid_613964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613964 = validateParameter(valid_613964, JString, required = false,
                                 default = nil)
  if valid_613964 != nil:
    section.add "X-Amz-SignedHeaders", valid_613964
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_613965 = formData.getOrDefault("UserName")
  valid_613965 = validateParameter(valid_613965, JString, required = true,
                                 default = nil)
  if valid_613965 != nil:
    section.add "UserName", valid_613965
  var valid_613966 = formData.getOrDefault("Path")
  valid_613966 = validateParameter(valid_613966, JString, required = false,
                                 default = nil)
  if valid_613966 != nil:
    section.add "Path", valid_613966
  var valid_613967 = formData.getOrDefault("Tags")
  valid_613967 = validateParameter(valid_613967, JArray, required = false,
                                 default = nil)
  if valid_613967 != nil:
    section.add "Tags", valid_613967
  var valid_613968 = formData.getOrDefault("PermissionsBoundary")
  valid_613968 = validateParameter(valid_613968, JString, required = false,
                                 default = nil)
  if valid_613968 != nil:
    section.add "PermissionsBoundary", valid_613968
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613969: Call_PostCreateUser_613953; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613969.validator(path, query, header, formData, body)
  let scheme = call_613969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613969.url(scheme.get, call_613969.host, call_613969.base,
                         call_613969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613969, url, valid)

proc call*(call_613970: Call_PostCreateUser_613953; UserName: string;
          Path: string = ""; Action: string = "CreateUser"; Tags: JsonNode = nil;
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_613971 = newJObject()
  var formData_613972 = newJObject()
  add(formData_613972, "UserName", newJString(UserName))
  add(formData_613972, "Path", newJString(Path))
  add(query_613971, "Action", newJString(Action))
  if Tags != nil:
    formData_613972.add "Tags", Tags
  add(formData_613972, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_613971, "Version", newJString(Version))
  result = call_613970.call(nil, query_613971, nil, formData_613972, nil)

var postCreateUser* = Call_PostCreateUser_613953(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_613954,
    base: "/", url: url_PostCreateUser_613955, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_613934 = ref object of OpenApiRestCall_612658
proc url_GetCreateUser_613936(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateUser_613935(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_613937 = query.getOrDefault("UserName")
  valid_613937 = validateParameter(valid_613937, JString, required = true,
                                 default = nil)
  if valid_613937 != nil:
    section.add "UserName", valid_613937
  var valid_613938 = query.getOrDefault("Tags")
  valid_613938 = validateParameter(valid_613938, JArray, required = false,
                                 default = nil)
  if valid_613938 != nil:
    section.add "Tags", valid_613938
  var valid_613939 = query.getOrDefault("PermissionsBoundary")
  valid_613939 = validateParameter(valid_613939, JString, required = false,
                                 default = nil)
  if valid_613939 != nil:
    section.add "PermissionsBoundary", valid_613939
  var valid_613940 = query.getOrDefault("Path")
  valid_613940 = validateParameter(valid_613940, JString, required = false,
                                 default = nil)
  if valid_613940 != nil:
    section.add "Path", valid_613940
  var valid_613941 = query.getOrDefault("Action")
  valid_613941 = validateParameter(valid_613941, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_613941 != nil:
    section.add "Action", valid_613941
  var valid_613942 = query.getOrDefault("Version")
  valid_613942 = validateParameter(valid_613942, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613942 != nil:
    section.add "Version", valid_613942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613943 = header.getOrDefault("X-Amz-Signature")
  valid_613943 = validateParameter(valid_613943, JString, required = false,
                                 default = nil)
  if valid_613943 != nil:
    section.add "X-Amz-Signature", valid_613943
  var valid_613944 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613944 = validateParameter(valid_613944, JString, required = false,
                                 default = nil)
  if valid_613944 != nil:
    section.add "X-Amz-Content-Sha256", valid_613944
  var valid_613945 = header.getOrDefault("X-Amz-Date")
  valid_613945 = validateParameter(valid_613945, JString, required = false,
                                 default = nil)
  if valid_613945 != nil:
    section.add "X-Amz-Date", valid_613945
  var valid_613946 = header.getOrDefault("X-Amz-Credential")
  valid_613946 = validateParameter(valid_613946, JString, required = false,
                                 default = nil)
  if valid_613946 != nil:
    section.add "X-Amz-Credential", valid_613946
  var valid_613947 = header.getOrDefault("X-Amz-Security-Token")
  valid_613947 = validateParameter(valid_613947, JString, required = false,
                                 default = nil)
  if valid_613947 != nil:
    section.add "X-Amz-Security-Token", valid_613947
  var valid_613948 = header.getOrDefault("X-Amz-Algorithm")
  valid_613948 = validateParameter(valid_613948, JString, required = false,
                                 default = nil)
  if valid_613948 != nil:
    section.add "X-Amz-Algorithm", valid_613948
  var valid_613949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613949 = validateParameter(valid_613949, JString, required = false,
                                 default = nil)
  if valid_613949 != nil:
    section.add "X-Amz-SignedHeaders", valid_613949
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613950: Call_GetCreateUser_613934; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_613950.validator(path, query, header, formData, body)
  let scheme = call_613950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613950.url(scheme.get, call_613950.host, call_613950.base,
                         call_613950.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613950, url, valid)

proc call*(call_613951: Call_GetCreateUser_613934; UserName: string;
          Tags: JsonNode = nil; PermissionsBoundary: string = ""; Path: string = "";
          Action: string = "CreateUser"; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_613952 = newJObject()
  add(query_613952, "UserName", newJString(UserName))
  if Tags != nil:
    query_613952.add "Tags", Tags
  add(query_613952, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_613952, "Path", newJString(Path))
  add(query_613952, "Action", newJString(Action))
  add(query_613952, "Version", newJString(Version))
  result = call_613951.call(nil, query_613952, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_613934(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_613935,
    base: "/", url: url_GetCreateUser_613936, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_613990 = ref object of OpenApiRestCall_612658
proc url_PostCreateVirtualMFADevice_613992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateVirtualMFADevice_613991(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_613993 = query.getOrDefault("Action")
  valid_613993 = validateParameter(valid_613993, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_613993 != nil:
    section.add "Action", valid_613993
  var valid_613994 = query.getOrDefault("Version")
  valid_613994 = validateParameter(valid_613994, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613994 != nil:
    section.add "Version", valid_613994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613995 = header.getOrDefault("X-Amz-Signature")
  valid_613995 = validateParameter(valid_613995, JString, required = false,
                                 default = nil)
  if valid_613995 != nil:
    section.add "X-Amz-Signature", valid_613995
  var valid_613996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613996 = validateParameter(valid_613996, JString, required = false,
                                 default = nil)
  if valid_613996 != nil:
    section.add "X-Amz-Content-Sha256", valid_613996
  var valid_613997 = header.getOrDefault("X-Amz-Date")
  valid_613997 = validateParameter(valid_613997, JString, required = false,
                                 default = nil)
  if valid_613997 != nil:
    section.add "X-Amz-Date", valid_613997
  var valid_613998 = header.getOrDefault("X-Amz-Credential")
  valid_613998 = validateParameter(valid_613998, JString, required = false,
                                 default = nil)
  if valid_613998 != nil:
    section.add "X-Amz-Credential", valid_613998
  var valid_613999 = header.getOrDefault("X-Amz-Security-Token")
  valid_613999 = validateParameter(valid_613999, JString, required = false,
                                 default = nil)
  if valid_613999 != nil:
    section.add "X-Amz-Security-Token", valid_613999
  var valid_614000 = header.getOrDefault("X-Amz-Algorithm")
  valid_614000 = validateParameter(valid_614000, JString, required = false,
                                 default = nil)
  if valid_614000 != nil:
    section.add "X-Amz-Algorithm", valid_614000
  var valid_614001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614001 = validateParameter(valid_614001, JString, required = false,
                                 default = nil)
  if valid_614001 != nil:
    section.add "X-Amz-SignedHeaders", valid_614001
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_614002 = formData.getOrDefault("VirtualMFADeviceName")
  valid_614002 = validateParameter(valid_614002, JString, required = true,
                                 default = nil)
  if valid_614002 != nil:
    section.add "VirtualMFADeviceName", valid_614002
  var valid_614003 = formData.getOrDefault("Path")
  valid_614003 = validateParameter(valid_614003, JString, required = false,
                                 default = nil)
  if valid_614003 != nil:
    section.add "Path", valid_614003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614004: Call_PostCreateVirtualMFADevice_613990; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_614004.validator(path, query, header, formData, body)
  let scheme = call_614004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614004.url(scheme.get, call_614004.host, call_614004.base,
                         call_614004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614004, url, valid)

proc call*(call_614005: Call_PostCreateVirtualMFADevice_613990;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614006 = newJObject()
  var formData_614007 = newJObject()
  add(formData_614007, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(formData_614007, "Path", newJString(Path))
  add(query_614006, "Action", newJString(Action))
  add(query_614006, "Version", newJString(Version))
  result = call_614005.call(nil, query_614006, nil, formData_614007, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_613990(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_613991, base: "/",
    url: url_PostCreateVirtualMFADevice_613992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_613973 = ref object of OpenApiRestCall_612658
proc url_GetCreateVirtualMFADevice_613975(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateVirtualMFADevice_613974(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_613976 = query.getOrDefault("Path")
  valid_613976 = validateParameter(valid_613976, JString, required = false,
                                 default = nil)
  if valid_613976 != nil:
    section.add "Path", valid_613976
  var valid_613977 = query.getOrDefault("Action")
  valid_613977 = validateParameter(valid_613977, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_613977 != nil:
    section.add "Action", valid_613977
  var valid_613978 = query.getOrDefault("Version")
  valid_613978 = validateParameter(valid_613978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_613978 != nil:
    section.add "Version", valid_613978
  var valid_613979 = query.getOrDefault("VirtualMFADeviceName")
  valid_613979 = validateParameter(valid_613979, JString, required = true,
                                 default = nil)
  if valid_613979 != nil:
    section.add "VirtualMFADeviceName", valid_613979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_613980 = header.getOrDefault("X-Amz-Signature")
  valid_613980 = validateParameter(valid_613980, JString, required = false,
                                 default = nil)
  if valid_613980 != nil:
    section.add "X-Amz-Signature", valid_613980
  var valid_613981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_613981 = validateParameter(valid_613981, JString, required = false,
                                 default = nil)
  if valid_613981 != nil:
    section.add "X-Amz-Content-Sha256", valid_613981
  var valid_613982 = header.getOrDefault("X-Amz-Date")
  valid_613982 = validateParameter(valid_613982, JString, required = false,
                                 default = nil)
  if valid_613982 != nil:
    section.add "X-Amz-Date", valid_613982
  var valid_613983 = header.getOrDefault("X-Amz-Credential")
  valid_613983 = validateParameter(valid_613983, JString, required = false,
                                 default = nil)
  if valid_613983 != nil:
    section.add "X-Amz-Credential", valid_613983
  var valid_613984 = header.getOrDefault("X-Amz-Security-Token")
  valid_613984 = validateParameter(valid_613984, JString, required = false,
                                 default = nil)
  if valid_613984 != nil:
    section.add "X-Amz-Security-Token", valid_613984
  var valid_613985 = header.getOrDefault("X-Amz-Algorithm")
  valid_613985 = validateParameter(valid_613985, JString, required = false,
                                 default = nil)
  if valid_613985 != nil:
    section.add "X-Amz-Algorithm", valid_613985
  var valid_613986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_613986 = validateParameter(valid_613986, JString, required = false,
                                 default = nil)
  if valid_613986 != nil:
    section.add "X-Amz-SignedHeaders", valid_613986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_613987: Call_GetCreateVirtualMFADevice_613973; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_613987.validator(path, query, header, formData, body)
  let scheme = call_613987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_613987.url(scheme.get, call_613987.host, call_613987.base,
                         call_613987.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_613987, url, valid)

proc call*(call_613988: Call_GetCreateVirtualMFADevice_613973;
          VirtualMFADeviceName: string; Path: string = "";
          Action: string = "CreateVirtualMFADevice"; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_613989 = newJObject()
  add(query_613989, "Path", newJString(Path))
  add(query_613989, "Action", newJString(Action))
  add(query_613989, "Version", newJString(Version))
  add(query_613989, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  result = call_613988.call(nil, query_613989, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_613973(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_613974, base: "/",
    url: url_GetCreateVirtualMFADevice_613975,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_614025 = ref object of OpenApiRestCall_612658
proc url_PostDeactivateMFADevice_614027(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeactivateMFADevice_614026(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614028 = query.getOrDefault("Action")
  valid_614028 = validateParameter(valid_614028, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_614028 != nil:
    section.add "Action", valid_614028
  var valid_614029 = query.getOrDefault("Version")
  valid_614029 = validateParameter(valid_614029, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614029 != nil:
    section.add "Version", valid_614029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614030 = header.getOrDefault("X-Amz-Signature")
  valid_614030 = validateParameter(valid_614030, JString, required = false,
                                 default = nil)
  if valid_614030 != nil:
    section.add "X-Amz-Signature", valid_614030
  var valid_614031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614031 = validateParameter(valid_614031, JString, required = false,
                                 default = nil)
  if valid_614031 != nil:
    section.add "X-Amz-Content-Sha256", valid_614031
  var valid_614032 = header.getOrDefault("X-Amz-Date")
  valid_614032 = validateParameter(valid_614032, JString, required = false,
                                 default = nil)
  if valid_614032 != nil:
    section.add "X-Amz-Date", valid_614032
  var valid_614033 = header.getOrDefault("X-Amz-Credential")
  valid_614033 = validateParameter(valid_614033, JString, required = false,
                                 default = nil)
  if valid_614033 != nil:
    section.add "X-Amz-Credential", valid_614033
  var valid_614034 = header.getOrDefault("X-Amz-Security-Token")
  valid_614034 = validateParameter(valid_614034, JString, required = false,
                                 default = nil)
  if valid_614034 != nil:
    section.add "X-Amz-Security-Token", valid_614034
  var valid_614035 = header.getOrDefault("X-Amz-Algorithm")
  valid_614035 = validateParameter(valid_614035, JString, required = false,
                                 default = nil)
  if valid_614035 != nil:
    section.add "X-Amz-Algorithm", valid_614035
  var valid_614036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614036 = validateParameter(valid_614036, JString, required = false,
                                 default = nil)
  if valid_614036 != nil:
    section.add "X-Amz-SignedHeaders", valid_614036
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_614037 = formData.getOrDefault("SerialNumber")
  valid_614037 = validateParameter(valid_614037, JString, required = true,
                                 default = nil)
  if valid_614037 != nil:
    section.add "SerialNumber", valid_614037
  var valid_614038 = formData.getOrDefault("UserName")
  valid_614038 = validateParameter(valid_614038, JString, required = true,
                                 default = nil)
  if valid_614038 != nil:
    section.add "UserName", valid_614038
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614039: Call_PostDeactivateMFADevice_614025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614039.validator(path, query, header, formData, body)
  let scheme = call_614039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614039.url(scheme.get, call_614039.host, call_614039.base,
                         call_614039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614039, url, valid)

proc call*(call_614040: Call_PostDeactivateMFADevice_614025; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614041 = newJObject()
  var formData_614042 = newJObject()
  add(formData_614042, "SerialNumber", newJString(SerialNumber))
  add(formData_614042, "UserName", newJString(UserName))
  add(query_614041, "Action", newJString(Action))
  add(query_614041, "Version", newJString(Version))
  result = call_614040.call(nil, query_614041, nil, formData_614042, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_614025(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_614026, base: "/",
    url: url_PostDeactivateMFADevice_614027, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_614008 = ref object of OpenApiRestCall_612658
proc url_GetDeactivateMFADevice_614010(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeactivateMFADevice_614009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614011 = query.getOrDefault("UserName")
  valid_614011 = validateParameter(valid_614011, JString, required = true,
                                 default = nil)
  if valid_614011 != nil:
    section.add "UserName", valid_614011
  var valid_614012 = query.getOrDefault("SerialNumber")
  valid_614012 = validateParameter(valid_614012, JString, required = true,
                                 default = nil)
  if valid_614012 != nil:
    section.add "SerialNumber", valid_614012
  var valid_614013 = query.getOrDefault("Action")
  valid_614013 = validateParameter(valid_614013, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_614013 != nil:
    section.add "Action", valid_614013
  var valid_614014 = query.getOrDefault("Version")
  valid_614014 = validateParameter(valid_614014, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614014 != nil:
    section.add "Version", valid_614014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614015 = header.getOrDefault("X-Amz-Signature")
  valid_614015 = validateParameter(valid_614015, JString, required = false,
                                 default = nil)
  if valid_614015 != nil:
    section.add "X-Amz-Signature", valid_614015
  var valid_614016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614016 = validateParameter(valid_614016, JString, required = false,
                                 default = nil)
  if valid_614016 != nil:
    section.add "X-Amz-Content-Sha256", valid_614016
  var valid_614017 = header.getOrDefault("X-Amz-Date")
  valid_614017 = validateParameter(valid_614017, JString, required = false,
                                 default = nil)
  if valid_614017 != nil:
    section.add "X-Amz-Date", valid_614017
  var valid_614018 = header.getOrDefault("X-Amz-Credential")
  valid_614018 = validateParameter(valid_614018, JString, required = false,
                                 default = nil)
  if valid_614018 != nil:
    section.add "X-Amz-Credential", valid_614018
  var valid_614019 = header.getOrDefault("X-Amz-Security-Token")
  valid_614019 = validateParameter(valid_614019, JString, required = false,
                                 default = nil)
  if valid_614019 != nil:
    section.add "X-Amz-Security-Token", valid_614019
  var valid_614020 = header.getOrDefault("X-Amz-Algorithm")
  valid_614020 = validateParameter(valid_614020, JString, required = false,
                                 default = nil)
  if valid_614020 != nil:
    section.add "X-Amz-Algorithm", valid_614020
  var valid_614021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614021 = validateParameter(valid_614021, JString, required = false,
                                 default = nil)
  if valid_614021 != nil:
    section.add "X-Amz-SignedHeaders", valid_614021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614022: Call_GetDeactivateMFADevice_614008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614022.validator(path, query, header, formData, body)
  let scheme = call_614022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614022.url(scheme.get, call_614022.host, call_614022.base,
                         call_614022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614022, url, valid)

proc call*(call_614023: Call_GetDeactivateMFADevice_614008; UserName: string;
          SerialNumber: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614024 = newJObject()
  add(query_614024, "UserName", newJString(UserName))
  add(query_614024, "SerialNumber", newJString(SerialNumber))
  add(query_614024, "Action", newJString(Action))
  add(query_614024, "Version", newJString(Version))
  result = call_614023.call(nil, query_614024, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_614008(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_614009, base: "/",
    url: url_GetDeactivateMFADevice_614010, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_614060 = ref object of OpenApiRestCall_612658
proc url_PostDeleteAccessKey_614062(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccessKey_614061(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614063 = query.getOrDefault("Action")
  valid_614063 = validateParameter(valid_614063, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_614063 != nil:
    section.add "Action", valid_614063
  var valid_614064 = query.getOrDefault("Version")
  valid_614064 = validateParameter(valid_614064, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614064 != nil:
    section.add "Version", valid_614064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614065 = header.getOrDefault("X-Amz-Signature")
  valid_614065 = validateParameter(valid_614065, JString, required = false,
                                 default = nil)
  if valid_614065 != nil:
    section.add "X-Amz-Signature", valid_614065
  var valid_614066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614066 = validateParameter(valid_614066, JString, required = false,
                                 default = nil)
  if valid_614066 != nil:
    section.add "X-Amz-Content-Sha256", valid_614066
  var valid_614067 = header.getOrDefault("X-Amz-Date")
  valid_614067 = validateParameter(valid_614067, JString, required = false,
                                 default = nil)
  if valid_614067 != nil:
    section.add "X-Amz-Date", valid_614067
  var valid_614068 = header.getOrDefault("X-Amz-Credential")
  valid_614068 = validateParameter(valid_614068, JString, required = false,
                                 default = nil)
  if valid_614068 != nil:
    section.add "X-Amz-Credential", valid_614068
  var valid_614069 = header.getOrDefault("X-Amz-Security-Token")
  valid_614069 = validateParameter(valid_614069, JString, required = false,
                                 default = nil)
  if valid_614069 != nil:
    section.add "X-Amz-Security-Token", valid_614069
  var valid_614070 = header.getOrDefault("X-Amz-Algorithm")
  valid_614070 = validateParameter(valid_614070, JString, required = false,
                                 default = nil)
  if valid_614070 != nil:
    section.add "X-Amz-Algorithm", valid_614070
  var valid_614071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614071 = validateParameter(valid_614071, JString, required = false,
                                 default = nil)
  if valid_614071 != nil:
    section.add "X-Amz-SignedHeaders", valid_614071
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_614072 = formData.getOrDefault("AccessKeyId")
  valid_614072 = validateParameter(valid_614072, JString, required = true,
                                 default = nil)
  if valid_614072 != nil:
    section.add "AccessKeyId", valid_614072
  var valid_614073 = formData.getOrDefault("UserName")
  valid_614073 = validateParameter(valid_614073, JString, required = false,
                                 default = nil)
  if valid_614073 != nil:
    section.add "UserName", valid_614073
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614074: Call_PostDeleteAccessKey_614060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_614074.validator(path, query, header, formData, body)
  let scheme = call_614074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614074.url(scheme.get, call_614074.host, call_614074.base,
                         call_614074.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614074, url, valid)

proc call*(call_614075: Call_PostDeleteAccessKey_614060; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614076 = newJObject()
  var formData_614077 = newJObject()
  add(formData_614077, "AccessKeyId", newJString(AccessKeyId))
  add(formData_614077, "UserName", newJString(UserName))
  add(query_614076, "Action", newJString(Action))
  add(query_614076, "Version", newJString(Version))
  result = call_614075.call(nil, query_614076, nil, formData_614077, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_614060(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_614061, base: "/",
    url: url_PostDeleteAccessKey_614062, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_614043 = ref object of OpenApiRestCall_612658
proc url_GetDeleteAccessKey_614045(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccessKey_614044(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614046 = query.getOrDefault("UserName")
  valid_614046 = validateParameter(valid_614046, JString, required = false,
                                 default = nil)
  if valid_614046 != nil:
    section.add "UserName", valid_614046
  var valid_614047 = query.getOrDefault("Action")
  valid_614047 = validateParameter(valid_614047, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_614047 != nil:
    section.add "Action", valid_614047
  var valid_614048 = query.getOrDefault("AccessKeyId")
  valid_614048 = validateParameter(valid_614048, JString, required = true,
                                 default = nil)
  if valid_614048 != nil:
    section.add "AccessKeyId", valid_614048
  var valid_614049 = query.getOrDefault("Version")
  valid_614049 = validateParameter(valid_614049, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614049 != nil:
    section.add "Version", valid_614049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614050 = header.getOrDefault("X-Amz-Signature")
  valid_614050 = validateParameter(valid_614050, JString, required = false,
                                 default = nil)
  if valid_614050 != nil:
    section.add "X-Amz-Signature", valid_614050
  var valid_614051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614051 = validateParameter(valid_614051, JString, required = false,
                                 default = nil)
  if valid_614051 != nil:
    section.add "X-Amz-Content-Sha256", valid_614051
  var valid_614052 = header.getOrDefault("X-Amz-Date")
  valid_614052 = validateParameter(valid_614052, JString, required = false,
                                 default = nil)
  if valid_614052 != nil:
    section.add "X-Amz-Date", valid_614052
  var valid_614053 = header.getOrDefault("X-Amz-Credential")
  valid_614053 = validateParameter(valid_614053, JString, required = false,
                                 default = nil)
  if valid_614053 != nil:
    section.add "X-Amz-Credential", valid_614053
  var valid_614054 = header.getOrDefault("X-Amz-Security-Token")
  valid_614054 = validateParameter(valid_614054, JString, required = false,
                                 default = nil)
  if valid_614054 != nil:
    section.add "X-Amz-Security-Token", valid_614054
  var valid_614055 = header.getOrDefault("X-Amz-Algorithm")
  valid_614055 = validateParameter(valid_614055, JString, required = false,
                                 default = nil)
  if valid_614055 != nil:
    section.add "X-Amz-Algorithm", valid_614055
  var valid_614056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614056 = validateParameter(valid_614056, JString, required = false,
                                 default = nil)
  if valid_614056 != nil:
    section.add "X-Amz-SignedHeaders", valid_614056
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614057: Call_GetDeleteAccessKey_614043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_614057.validator(path, query, header, formData, body)
  let scheme = call_614057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614057.url(scheme.get, call_614057.host, call_614057.base,
                         call_614057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614057, url, valid)

proc call*(call_614058: Call_GetDeleteAccessKey_614043; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_614059 = newJObject()
  add(query_614059, "UserName", newJString(UserName))
  add(query_614059, "Action", newJString(Action))
  add(query_614059, "AccessKeyId", newJString(AccessKeyId))
  add(query_614059, "Version", newJString(Version))
  result = call_614058.call(nil, query_614059, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_614043(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_614044,
    base: "/", url: url_GetDeleteAccessKey_614045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_614094 = ref object of OpenApiRestCall_612658
proc url_PostDeleteAccountAlias_614096(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountAlias_614095(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614097 = query.getOrDefault("Action")
  valid_614097 = validateParameter(valid_614097, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_614097 != nil:
    section.add "Action", valid_614097
  var valid_614098 = query.getOrDefault("Version")
  valid_614098 = validateParameter(valid_614098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614098 != nil:
    section.add "Version", valid_614098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614099 = header.getOrDefault("X-Amz-Signature")
  valid_614099 = validateParameter(valid_614099, JString, required = false,
                                 default = nil)
  if valid_614099 != nil:
    section.add "X-Amz-Signature", valid_614099
  var valid_614100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614100 = validateParameter(valid_614100, JString, required = false,
                                 default = nil)
  if valid_614100 != nil:
    section.add "X-Amz-Content-Sha256", valid_614100
  var valid_614101 = header.getOrDefault("X-Amz-Date")
  valid_614101 = validateParameter(valid_614101, JString, required = false,
                                 default = nil)
  if valid_614101 != nil:
    section.add "X-Amz-Date", valid_614101
  var valid_614102 = header.getOrDefault("X-Amz-Credential")
  valid_614102 = validateParameter(valid_614102, JString, required = false,
                                 default = nil)
  if valid_614102 != nil:
    section.add "X-Amz-Credential", valid_614102
  var valid_614103 = header.getOrDefault("X-Amz-Security-Token")
  valid_614103 = validateParameter(valid_614103, JString, required = false,
                                 default = nil)
  if valid_614103 != nil:
    section.add "X-Amz-Security-Token", valid_614103
  var valid_614104 = header.getOrDefault("X-Amz-Algorithm")
  valid_614104 = validateParameter(valid_614104, JString, required = false,
                                 default = nil)
  if valid_614104 != nil:
    section.add "X-Amz-Algorithm", valid_614104
  var valid_614105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614105 = validateParameter(valid_614105, JString, required = false,
                                 default = nil)
  if valid_614105 != nil:
    section.add "X-Amz-SignedHeaders", valid_614105
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_614106 = formData.getOrDefault("AccountAlias")
  valid_614106 = validateParameter(valid_614106, JString, required = true,
                                 default = nil)
  if valid_614106 != nil:
    section.add "AccountAlias", valid_614106
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614107: Call_PostDeleteAccountAlias_614094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614107.validator(path, query, header, formData, body)
  let scheme = call_614107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614107.url(scheme.get, call_614107.host, call_614107.base,
                         call_614107.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614107, url, valid)

proc call*(call_614108: Call_PostDeleteAccountAlias_614094; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Version: string (required)
  var query_614109 = newJObject()
  var formData_614110 = newJObject()
  add(query_614109, "Action", newJString(Action))
  add(formData_614110, "AccountAlias", newJString(AccountAlias))
  add(query_614109, "Version", newJString(Version))
  result = call_614108.call(nil, query_614109, nil, formData_614110, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_614094(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_614095, base: "/",
    url: url_PostDeleteAccountAlias_614096, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_614078 = ref object of OpenApiRestCall_612658
proc url_GetDeleteAccountAlias_614080(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountAlias_614079(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_614081 = query.getOrDefault("AccountAlias")
  valid_614081 = validateParameter(valid_614081, JString, required = true,
                                 default = nil)
  if valid_614081 != nil:
    section.add "AccountAlias", valid_614081
  var valid_614082 = query.getOrDefault("Action")
  valid_614082 = validateParameter(valid_614082, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_614082 != nil:
    section.add "Action", valid_614082
  var valid_614083 = query.getOrDefault("Version")
  valid_614083 = validateParameter(valid_614083, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614083 != nil:
    section.add "Version", valid_614083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614084 = header.getOrDefault("X-Amz-Signature")
  valid_614084 = validateParameter(valid_614084, JString, required = false,
                                 default = nil)
  if valid_614084 != nil:
    section.add "X-Amz-Signature", valid_614084
  var valid_614085 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614085 = validateParameter(valid_614085, JString, required = false,
                                 default = nil)
  if valid_614085 != nil:
    section.add "X-Amz-Content-Sha256", valid_614085
  var valid_614086 = header.getOrDefault("X-Amz-Date")
  valid_614086 = validateParameter(valid_614086, JString, required = false,
                                 default = nil)
  if valid_614086 != nil:
    section.add "X-Amz-Date", valid_614086
  var valid_614087 = header.getOrDefault("X-Amz-Credential")
  valid_614087 = validateParameter(valid_614087, JString, required = false,
                                 default = nil)
  if valid_614087 != nil:
    section.add "X-Amz-Credential", valid_614087
  var valid_614088 = header.getOrDefault("X-Amz-Security-Token")
  valid_614088 = validateParameter(valid_614088, JString, required = false,
                                 default = nil)
  if valid_614088 != nil:
    section.add "X-Amz-Security-Token", valid_614088
  var valid_614089 = header.getOrDefault("X-Amz-Algorithm")
  valid_614089 = validateParameter(valid_614089, JString, required = false,
                                 default = nil)
  if valid_614089 != nil:
    section.add "X-Amz-Algorithm", valid_614089
  var valid_614090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614090 = validateParameter(valid_614090, JString, required = false,
                                 default = nil)
  if valid_614090 != nil:
    section.add "X-Amz-SignedHeaders", valid_614090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614091: Call_GetDeleteAccountAlias_614078; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614091.validator(path, query, header, formData, body)
  let scheme = call_614091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614091.url(scheme.get, call_614091.host, call_614091.base,
                         call_614091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614091, url, valid)

proc call*(call_614092: Call_GetDeleteAccountAlias_614078; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614093 = newJObject()
  add(query_614093, "AccountAlias", newJString(AccountAlias))
  add(query_614093, "Action", newJString(Action))
  add(query_614093, "Version", newJString(Version))
  result = call_614092.call(nil, query_614093, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_614078(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_614079, base: "/",
    url: url_GetDeleteAccountAlias_614080, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_614126 = ref object of OpenApiRestCall_612658
proc url_PostDeleteAccountPasswordPolicy_614128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteAccountPasswordPolicy_614127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614129 = query.getOrDefault("Action")
  valid_614129 = validateParameter(valid_614129, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_614129 != nil:
    section.add "Action", valid_614129
  var valid_614130 = query.getOrDefault("Version")
  valid_614130 = validateParameter(valid_614130, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614130 != nil:
    section.add "Version", valid_614130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614131 = header.getOrDefault("X-Amz-Signature")
  valid_614131 = validateParameter(valid_614131, JString, required = false,
                                 default = nil)
  if valid_614131 != nil:
    section.add "X-Amz-Signature", valid_614131
  var valid_614132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614132 = validateParameter(valid_614132, JString, required = false,
                                 default = nil)
  if valid_614132 != nil:
    section.add "X-Amz-Content-Sha256", valid_614132
  var valid_614133 = header.getOrDefault("X-Amz-Date")
  valid_614133 = validateParameter(valid_614133, JString, required = false,
                                 default = nil)
  if valid_614133 != nil:
    section.add "X-Amz-Date", valid_614133
  var valid_614134 = header.getOrDefault("X-Amz-Credential")
  valid_614134 = validateParameter(valid_614134, JString, required = false,
                                 default = nil)
  if valid_614134 != nil:
    section.add "X-Amz-Credential", valid_614134
  var valid_614135 = header.getOrDefault("X-Amz-Security-Token")
  valid_614135 = validateParameter(valid_614135, JString, required = false,
                                 default = nil)
  if valid_614135 != nil:
    section.add "X-Amz-Security-Token", valid_614135
  var valid_614136 = header.getOrDefault("X-Amz-Algorithm")
  valid_614136 = validateParameter(valid_614136, JString, required = false,
                                 default = nil)
  if valid_614136 != nil:
    section.add "X-Amz-Algorithm", valid_614136
  var valid_614137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614137 = validateParameter(valid_614137, JString, required = false,
                                 default = nil)
  if valid_614137 != nil:
    section.add "X-Amz-SignedHeaders", valid_614137
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614138: Call_PostDeleteAccountPasswordPolicy_614126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_614138.validator(path, query, header, formData, body)
  let scheme = call_614138.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614138.url(scheme.get, call_614138.host, call_614138.base,
                         call_614138.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614138, url, valid)

proc call*(call_614139: Call_PostDeleteAccountPasswordPolicy_614126;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614140 = newJObject()
  add(query_614140, "Action", newJString(Action))
  add(query_614140, "Version", newJString(Version))
  result = call_614139.call(nil, query_614140, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_614126(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_614127, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_614128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_614111 = ref object of OpenApiRestCall_612658
proc url_GetDeleteAccountPasswordPolicy_614113(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteAccountPasswordPolicy_614112(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614114 = query.getOrDefault("Action")
  valid_614114 = validateParameter(valid_614114, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_614114 != nil:
    section.add "Action", valid_614114
  var valid_614115 = query.getOrDefault("Version")
  valid_614115 = validateParameter(valid_614115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614115 != nil:
    section.add "Version", valid_614115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614116 = header.getOrDefault("X-Amz-Signature")
  valid_614116 = validateParameter(valid_614116, JString, required = false,
                                 default = nil)
  if valid_614116 != nil:
    section.add "X-Amz-Signature", valid_614116
  var valid_614117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614117 = validateParameter(valid_614117, JString, required = false,
                                 default = nil)
  if valid_614117 != nil:
    section.add "X-Amz-Content-Sha256", valid_614117
  var valid_614118 = header.getOrDefault("X-Amz-Date")
  valid_614118 = validateParameter(valid_614118, JString, required = false,
                                 default = nil)
  if valid_614118 != nil:
    section.add "X-Amz-Date", valid_614118
  var valid_614119 = header.getOrDefault("X-Amz-Credential")
  valid_614119 = validateParameter(valid_614119, JString, required = false,
                                 default = nil)
  if valid_614119 != nil:
    section.add "X-Amz-Credential", valid_614119
  var valid_614120 = header.getOrDefault("X-Amz-Security-Token")
  valid_614120 = validateParameter(valid_614120, JString, required = false,
                                 default = nil)
  if valid_614120 != nil:
    section.add "X-Amz-Security-Token", valid_614120
  var valid_614121 = header.getOrDefault("X-Amz-Algorithm")
  valid_614121 = validateParameter(valid_614121, JString, required = false,
                                 default = nil)
  if valid_614121 != nil:
    section.add "X-Amz-Algorithm", valid_614121
  var valid_614122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614122 = validateParameter(valid_614122, JString, required = false,
                                 default = nil)
  if valid_614122 != nil:
    section.add "X-Amz-SignedHeaders", valid_614122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614123: Call_GetDeleteAccountPasswordPolicy_614111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_614123.validator(path, query, header, formData, body)
  let scheme = call_614123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614123.url(scheme.get, call_614123.host, call_614123.base,
                         call_614123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614123, url, valid)

proc call*(call_614124: Call_GetDeleteAccountPasswordPolicy_614111;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614125 = newJObject()
  add(query_614125, "Action", newJString(Action))
  add(query_614125, "Version", newJString(Version))
  result = call_614124.call(nil, query_614125, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_614111(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_614112, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_614113,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_614157 = ref object of OpenApiRestCall_612658
proc url_PostDeleteGroup_614159(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroup_614158(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614160 = query.getOrDefault("Action")
  valid_614160 = validateParameter(valid_614160, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_614160 != nil:
    section.add "Action", valid_614160
  var valid_614161 = query.getOrDefault("Version")
  valid_614161 = validateParameter(valid_614161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614161 != nil:
    section.add "Version", valid_614161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614162 = header.getOrDefault("X-Amz-Signature")
  valid_614162 = validateParameter(valid_614162, JString, required = false,
                                 default = nil)
  if valid_614162 != nil:
    section.add "X-Amz-Signature", valid_614162
  var valid_614163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614163 = validateParameter(valid_614163, JString, required = false,
                                 default = nil)
  if valid_614163 != nil:
    section.add "X-Amz-Content-Sha256", valid_614163
  var valid_614164 = header.getOrDefault("X-Amz-Date")
  valid_614164 = validateParameter(valid_614164, JString, required = false,
                                 default = nil)
  if valid_614164 != nil:
    section.add "X-Amz-Date", valid_614164
  var valid_614165 = header.getOrDefault("X-Amz-Credential")
  valid_614165 = validateParameter(valid_614165, JString, required = false,
                                 default = nil)
  if valid_614165 != nil:
    section.add "X-Amz-Credential", valid_614165
  var valid_614166 = header.getOrDefault("X-Amz-Security-Token")
  valid_614166 = validateParameter(valid_614166, JString, required = false,
                                 default = nil)
  if valid_614166 != nil:
    section.add "X-Amz-Security-Token", valid_614166
  var valid_614167 = header.getOrDefault("X-Amz-Algorithm")
  valid_614167 = validateParameter(valid_614167, JString, required = false,
                                 default = nil)
  if valid_614167 != nil:
    section.add "X-Amz-Algorithm", valid_614167
  var valid_614168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614168 = validateParameter(valid_614168, JString, required = false,
                                 default = nil)
  if valid_614168 != nil:
    section.add "X-Amz-SignedHeaders", valid_614168
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614169 = formData.getOrDefault("GroupName")
  valid_614169 = validateParameter(valid_614169, JString, required = true,
                                 default = nil)
  if valid_614169 != nil:
    section.add "GroupName", valid_614169
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614170: Call_PostDeleteGroup_614157; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_614170.validator(path, query, header, formData, body)
  let scheme = call_614170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614170.url(scheme.get, call_614170.host, call_614170.base,
                         call_614170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614170, url, valid)

proc call*(call_614171: Call_PostDeleteGroup_614157; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614172 = newJObject()
  var formData_614173 = newJObject()
  add(formData_614173, "GroupName", newJString(GroupName))
  add(query_614172, "Action", newJString(Action))
  add(query_614172, "Version", newJString(Version))
  result = call_614171.call(nil, query_614172, nil, formData_614173, nil)

var postDeleteGroup* = Call_PostDeleteGroup_614157(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_614158,
    base: "/", url: url_PostDeleteGroup_614159, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_614141 = ref object of OpenApiRestCall_612658
proc url_GetDeleteGroup_614143(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroup_614142(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614144 = query.getOrDefault("GroupName")
  valid_614144 = validateParameter(valid_614144, JString, required = true,
                                 default = nil)
  if valid_614144 != nil:
    section.add "GroupName", valid_614144
  var valid_614145 = query.getOrDefault("Action")
  valid_614145 = validateParameter(valid_614145, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_614145 != nil:
    section.add "Action", valid_614145
  var valid_614146 = query.getOrDefault("Version")
  valid_614146 = validateParameter(valid_614146, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614146 != nil:
    section.add "Version", valid_614146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614147 = header.getOrDefault("X-Amz-Signature")
  valid_614147 = validateParameter(valid_614147, JString, required = false,
                                 default = nil)
  if valid_614147 != nil:
    section.add "X-Amz-Signature", valid_614147
  var valid_614148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614148 = validateParameter(valid_614148, JString, required = false,
                                 default = nil)
  if valid_614148 != nil:
    section.add "X-Amz-Content-Sha256", valid_614148
  var valid_614149 = header.getOrDefault("X-Amz-Date")
  valid_614149 = validateParameter(valid_614149, JString, required = false,
                                 default = nil)
  if valid_614149 != nil:
    section.add "X-Amz-Date", valid_614149
  var valid_614150 = header.getOrDefault("X-Amz-Credential")
  valid_614150 = validateParameter(valid_614150, JString, required = false,
                                 default = nil)
  if valid_614150 != nil:
    section.add "X-Amz-Credential", valid_614150
  var valid_614151 = header.getOrDefault("X-Amz-Security-Token")
  valid_614151 = validateParameter(valid_614151, JString, required = false,
                                 default = nil)
  if valid_614151 != nil:
    section.add "X-Amz-Security-Token", valid_614151
  var valid_614152 = header.getOrDefault("X-Amz-Algorithm")
  valid_614152 = validateParameter(valid_614152, JString, required = false,
                                 default = nil)
  if valid_614152 != nil:
    section.add "X-Amz-Algorithm", valid_614152
  var valid_614153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614153 = validateParameter(valid_614153, JString, required = false,
                                 default = nil)
  if valid_614153 != nil:
    section.add "X-Amz-SignedHeaders", valid_614153
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614154: Call_GetDeleteGroup_614141; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_614154.validator(path, query, header, formData, body)
  let scheme = call_614154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614154.url(scheme.get, call_614154.host, call_614154.base,
                         call_614154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614154, url, valid)

proc call*(call_614155: Call_GetDeleteGroup_614141; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614156 = newJObject()
  add(query_614156, "GroupName", newJString(GroupName))
  add(query_614156, "Action", newJString(Action))
  add(query_614156, "Version", newJString(Version))
  result = call_614155.call(nil, query_614156, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_614141(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_614142,
    base: "/", url: url_GetDeleteGroup_614143, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_614191 = ref object of OpenApiRestCall_612658
proc url_PostDeleteGroupPolicy_614193(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGroupPolicy_614192(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614194 = query.getOrDefault("Action")
  valid_614194 = validateParameter(valid_614194, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_614194 != nil:
    section.add "Action", valid_614194
  var valid_614195 = query.getOrDefault("Version")
  valid_614195 = validateParameter(valid_614195, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614195 != nil:
    section.add "Version", valid_614195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614196 = header.getOrDefault("X-Amz-Signature")
  valid_614196 = validateParameter(valid_614196, JString, required = false,
                                 default = nil)
  if valid_614196 != nil:
    section.add "X-Amz-Signature", valid_614196
  var valid_614197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614197 = validateParameter(valid_614197, JString, required = false,
                                 default = nil)
  if valid_614197 != nil:
    section.add "X-Amz-Content-Sha256", valid_614197
  var valid_614198 = header.getOrDefault("X-Amz-Date")
  valid_614198 = validateParameter(valid_614198, JString, required = false,
                                 default = nil)
  if valid_614198 != nil:
    section.add "X-Amz-Date", valid_614198
  var valid_614199 = header.getOrDefault("X-Amz-Credential")
  valid_614199 = validateParameter(valid_614199, JString, required = false,
                                 default = nil)
  if valid_614199 != nil:
    section.add "X-Amz-Credential", valid_614199
  var valid_614200 = header.getOrDefault("X-Amz-Security-Token")
  valid_614200 = validateParameter(valid_614200, JString, required = false,
                                 default = nil)
  if valid_614200 != nil:
    section.add "X-Amz-Security-Token", valid_614200
  var valid_614201 = header.getOrDefault("X-Amz-Algorithm")
  valid_614201 = validateParameter(valid_614201, JString, required = false,
                                 default = nil)
  if valid_614201 != nil:
    section.add "X-Amz-Algorithm", valid_614201
  var valid_614202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614202 = validateParameter(valid_614202, JString, required = false,
                                 default = nil)
  if valid_614202 != nil:
    section.add "X-Amz-SignedHeaders", valid_614202
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614203 = formData.getOrDefault("GroupName")
  valid_614203 = validateParameter(valid_614203, JString, required = true,
                                 default = nil)
  if valid_614203 != nil:
    section.add "GroupName", valid_614203
  var valid_614204 = formData.getOrDefault("PolicyName")
  valid_614204 = validateParameter(valid_614204, JString, required = true,
                                 default = nil)
  if valid_614204 != nil:
    section.add "PolicyName", valid_614204
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614205: Call_PostDeleteGroupPolicy_614191; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614205.validator(path, query, header, formData, body)
  let scheme = call_614205.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614205.url(scheme.get, call_614205.host, call_614205.base,
                         call_614205.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614205, url, valid)

proc call*(call_614206: Call_PostDeleteGroupPolicy_614191; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614207 = newJObject()
  var formData_614208 = newJObject()
  add(formData_614208, "GroupName", newJString(GroupName))
  add(query_614207, "Action", newJString(Action))
  add(query_614207, "Version", newJString(Version))
  add(formData_614208, "PolicyName", newJString(PolicyName))
  result = call_614206.call(nil, query_614207, nil, formData_614208, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_614191(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_614192, base: "/",
    url: url_PostDeleteGroupPolicy_614193, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_614174 = ref object of OpenApiRestCall_612658
proc url_GetDeleteGroupPolicy_614176(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGroupPolicy_614175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614177 = query.getOrDefault("GroupName")
  valid_614177 = validateParameter(valid_614177, JString, required = true,
                                 default = nil)
  if valid_614177 != nil:
    section.add "GroupName", valid_614177
  var valid_614178 = query.getOrDefault("PolicyName")
  valid_614178 = validateParameter(valid_614178, JString, required = true,
                                 default = nil)
  if valid_614178 != nil:
    section.add "PolicyName", valid_614178
  var valid_614179 = query.getOrDefault("Action")
  valid_614179 = validateParameter(valid_614179, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_614179 != nil:
    section.add "Action", valid_614179
  var valid_614180 = query.getOrDefault("Version")
  valid_614180 = validateParameter(valid_614180, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614180 != nil:
    section.add "Version", valid_614180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614181 = header.getOrDefault("X-Amz-Signature")
  valid_614181 = validateParameter(valid_614181, JString, required = false,
                                 default = nil)
  if valid_614181 != nil:
    section.add "X-Amz-Signature", valid_614181
  var valid_614182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614182 = validateParameter(valid_614182, JString, required = false,
                                 default = nil)
  if valid_614182 != nil:
    section.add "X-Amz-Content-Sha256", valid_614182
  var valid_614183 = header.getOrDefault("X-Amz-Date")
  valid_614183 = validateParameter(valid_614183, JString, required = false,
                                 default = nil)
  if valid_614183 != nil:
    section.add "X-Amz-Date", valid_614183
  var valid_614184 = header.getOrDefault("X-Amz-Credential")
  valid_614184 = validateParameter(valid_614184, JString, required = false,
                                 default = nil)
  if valid_614184 != nil:
    section.add "X-Amz-Credential", valid_614184
  var valid_614185 = header.getOrDefault("X-Amz-Security-Token")
  valid_614185 = validateParameter(valid_614185, JString, required = false,
                                 default = nil)
  if valid_614185 != nil:
    section.add "X-Amz-Security-Token", valid_614185
  var valid_614186 = header.getOrDefault("X-Amz-Algorithm")
  valid_614186 = validateParameter(valid_614186, JString, required = false,
                                 default = nil)
  if valid_614186 != nil:
    section.add "X-Amz-Algorithm", valid_614186
  var valid_614187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614187 = validateParameter(valid_614187, JString, required = false,
                                 default = nil)
  if valid_614187 != nil:
    section.add "X-Amz-SignedHeaders", valid_614187
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614188: Call_GetDeleteGroupPolicy_614174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614188.validator(path, query, header, formData, body)
  let scheme = call_614188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614188.url(scheme.get, call_614188.host, call_614188.base,
                         call_614188.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614188, url, valid)

proc call*(call_614189: Call_GetDeleteGroupPolicy_614174; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614190 = newJObject()
  add(query_614190, "GroupName", newJString(GroupName))
  add(query_614190, "PolicyName", newJString(PolicyName))
  add(query_614190, "Action", newJString(Action))
  add(query_614190, "Version", newJString(Version))
  result = call_614189.call(nil, query_614190, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_614174(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_614175, base: "/",
    url: url_GetDeleteGroupPolicy_614176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_614225 = ref object of OpenApiRestCall_612658
proc url_PostDeleteInstanceProfile_614227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstanceProfile_614226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614228 = query.getOrDefault("Action")
  valid_614228 = validateParameter(valid_614228, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_614228 != nil:
    section.add "Action", valid_614228
  var valid_614229 = query.getOrDefault("Version")
  valid_614229 = validateParameter(valid_614229, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614229 != nil:
    section.add "Version", valid_614229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614230 = header.getOrDefault("X-Amz-Signature")
  valid_614230 = validateParameter(valid_614230, JString, required = false,
                                 default = nil)
  if valid_614230 != nil:
    section.add "X-Amz-Signature", valid_614230
  var valid_614231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614231 = validateParameter(valid_614231, JString, required = false,
                                 default = nil)
  if valid_614231 != nil:
    section.add "X-Amz-Content-Sha256", valid_614231
  var valid_614232 = header.getOrDefault("X-Amz-Date")
  valid_614232 = validateParameter(valid_614232, JString, required = false,
                                 default = nil)
  if valid_614232 != nil:
    section.add "X-Amz-Date", valid_614232
  var valid_614233 = header.getOrDefault("X-Amz-Credential")
  valid_614233 = validateParameter(valid_614233, JString, required = false,
                                 default = nil)
  if valid_614233 != nil:
    section.add "X-Amz-Credential", valid_614233
  var valid_614234 = header.getOrDefault("X-Amz-Security-Token")
  valid_614234 = validateParameter(valid_614234, JString, required = false,
                                 default = nil)
  if valid_614234 != nil:
    section.add "X-Amz-Security-Token", valid_614234
  var valid_614235 = header.getOrDefault("X-Amz-Algorithm")
  valid_614235 = validateParameter(valid_614235, JString, required = false,
                                 default = nil)
  if valid_614235 != nil:
    section.add "X-Amz-Algorithm", valid_614235
  var valid_614236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614236 = validateParameter(valid_614236, JString, required = false,
                                 default = nil)
  if valid_614236 != nil:
    section.add "X-Amz-SignedHeaders", valid_614236
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_614237 = formData.getOrDefault("InstanceProfileName")
  valid_614237 = validateParameter(valid_614237, JString, required = true,
                                 default = nil)
  if valid_614237 != nil:
    section.add "InstanceProfileName", valid_614237
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614238: Call_PostDeleteInstanceProfile_614225; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_614238.validator(path, query, header, formData, body)
  let scheme = call_614238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614238.url(scheme.get, call_614238.host, call_614238.base,
                         call_614238.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614238, url, valid)

proc call*(call_614239: Call_PostDeleteInstanceProfile_614225;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_614240 = newJObject()
  var formData_614241 = newJObject()
  add(query_614240, "Action", newJString(Action))
  add(formData_614241, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_614240, "Version", newJString(Version))
  result = call_614239.call(nil, query_614240, nil, formData_614241, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_614225(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_614226, base: "/",
    url: url_PostDeleteInstanceProfile_614227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_614209 = ref object of OpenApiRestCall_612658
proc url_GetDeleteInstanceProfile_614211(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstanceProfile_614210(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614212 = query.getOrDefault("Action")
  valid_614212 = validateParameter(valid_614212, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_614212 != nil:
    section.add "Action", valid_614212
  var valid_614213 = query.getOrDefault("InstanceProfileName")
  valid_614213 = validateParameter(valid_614213, JString, required = true,
                                 default = nil)
  if valid_614213 != nil:
    section.add "InstanceProfileName", valid_614213
  var valid_614214 = query.getOrDefault("Version")
  valid_614214 = validateParameter(valid_614214, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614214 != nil:
    section.add "Version", valid_614214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614215 = header.getOrDefault("X-Amz-Signature")
  valid_614215 = validateParameter(valid_614215, JString, required = false,
                                 default = nil)
  if valid_614215 != nil:
    section.add "X-Amz-Signature", valid_614215
  var valid_614216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614216 = validateParameter(valid_614216, JString, required = false,
                                 default = nil)
  if valid_614216 != nil:
    section.add "X-Amz-Content-Sha256", valid_614216
  var valid_614217 = header.getOrDefault("X-Amz-Date")
  valid_614217 = validateParameter(valid_614217, JString, required = false,
                                 default = nil)
  if valid_614217 != nil:
    section.add "X-Amz-Date", valid_614217
  var valid_614218 = header.getOrDefault("X-Amz-Credential")
  valid_614218 = validateParameter(valid_614218, JString, required = false,
                                 default = nil)
  if valid_614218 != nil:
    section.add "X-Amz-Credential", valid_614218
  var valid_614219 = header.getOrDefault("X-Amz-Security-Token")
  valid_614219 = validateParameter(valid_614219, JString, required = false,
                                 default = nil)
  if valid_614219 != nil:
    section.add "X-Amz-Security-Token", valid_614219
  var valid_614220 = header.getOrDefault("X-Amz-Algorithm")
  valid_614220 = validateParameter(valid_614220, JString, required = false,
                                 default = nil)
  if valid_614220 != nil:
    section.add "X-Amz-Algorithm", valid_614220
  var valid_614221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614221 = validateParameter(valid_614221, JString, required = false,
                                 default = nil)
  if valid_614221 != nil:
    section.add "X-Amz-SignedHeaders", valid_614221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614222: Call_GetDeleteInstanceProfile_614209; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_614222.validator(path, query, header, formData, body)
  let scheme = call_614222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614222.url(scheme.get, call_614222.host, call_614222.base,
                         call_614222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614222, url, valid)

proc call*(call_614223: Call_GetDeleteInstanceProfile_614209;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_614224 = newJObject()
  add(query_614224, "Action", newJString(Action))
  add(query_614224, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_614224, "Version", newJString(Version))
  result = call_614223.call(nil, query_614224, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_614209(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_614210, base: "/",
    url: url_GetDeleteInstanceProfile_614211, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_614258 = ref object of OpenApiRestCall_612658
proc url_PostDeleteLoginProfile_614260(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteLoginProfile_614259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614261 = query.getOrDefault("Action")
  valid_614261 = validateParameter(valid_614261, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_614261 != nil:
    section.add "Action", valid_614261
  var valid_614262 = query.getOrDefault("Version")
  valid_614262 = validateParameter(valid_614262, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614262 != nil:
    section.add "Version", valid_614262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614263 = header.getOrDefault("X-Amz-Signature")
  valid_614263 = validateParameter(valid_614263, JString, required = false,
                                 default = nil)
  if valid_614263 != nil:
    section.add "X-Amz-Signature", valid_614263
  var valid_614264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614264 = validateParameter(valid_614264, JString, required = false,
                                 default = nil)
  if valid_614264 != nil:
    section.add "X-Amz-Content-Sha256", valid_614264
  var valid_614265 = header.getOrDefault("X-Amz-Date")
  valid_614265 = validateParameter(valid_614265, JString, required = false,
                                 default = nil)
  if valid_614265 != nil:
    section.add "X-Amz-Date", valid_614265
  var valid_614266 = header.getOrDefault("X-Amz-Credential")
  valid_614266 = validateParameter(valid_614266, JString, required = false,
                                 default = nil)
  if valid_614266 != nil:
    section.add "X-Amz-Credential", valid_614266
  var valid_614267 = header.getOrDefault("X-Amz-Security-Token")
  valid_614267 = validateParameter(valid_614267, JString, required = false,
                                 default = nil)
  if valid_614267 != nil:
    section.add "X-Amz-Security-Token", valid_614267
  var valid_614268 = header.getOrDefault("X-Amz-Algorithm")
  valid_614268 = validateParameter(valid_614268, JString, required = false,
                                 default = nil)
  if valid_614268 != nil:
    section.add "X-Amz-Algorithm", valid_614268
  var valid_614269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614269 = validateParameter(valid_614269, JString, required = false,
                                 default = nil)
  if valid_614269 != nil:
    section.add "X-Amz-SignedHeaders", valid_614269
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614270 = formData.getOrDefault("UserName")
  valid_614270 = validateParameter(valid_614270, JString, required = true,
                                 default = nil)
  if valid_614270 != nil:
    section.add "UserName", valid_614270
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614271: Call_PostDeleteLoginProfile_614258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_614271.validator(path, query, header, formData, body)
  let scheme = call_614271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614271.url(scheme.get, call_614271.host, call_614271.base,
                         call_614271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614271, url, valid)

proc call*(call_614272: Call_PostDeleteLoginProfile_614258; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614273 = newJObject()
  var formData_614274 = newJObject()
  add(formData_614274, "UserName", newJString(UserName))
  add(query_614273, "Action", newJString(Action))
  add(query_614273, "Version", newJString(Version))
  result = call_614272.call(nil, query_614273, nil, formData_614274, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_614258(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_614259, base: "/",
    url: url_PostDeleteLoginProfile_614260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_614242 = ref object of OpenApiRestCall_612658
proc url_GetDeleteLoginProfile_614244(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteLoginProfile_614243(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614245 = query.getOrDefault("UserName")
  valid_614245 = validateParameter(valid_614245, JString, required = true,
                                 default = nil)
  if valid_614245 != nil:
    section.add "UserName", valid_614245
  var valid_614246 = query.getOrDefault("Action")
  valid_614246 = validateParameter(valid_614246, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_614246 != nil:
    section.add "Action", valid_614246
  var valid_614247 = query.getOrDefault("Version")
  valid_614247 = validateParameter(valid_614247, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614247 != nil:
    section.add "Version", valid_614247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614248 = header.getOrDefault("X-Amz-Signature")
  valid_614248 = validateParameter(valid_614248, JString, required = false,
                                 default = nil)
  if valid_614248 != nil:
    section.add "X-Amz-Signature", valid_614248
  var valid_614249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614249 = validateParameter(valid_614249, JString, required = false,
                                 default = nil)
  if valid_614249 != nil:
    section.add "X-Amz-Content-Sha256", valid_614249
  var valid_614250 = header.getOrDefault("X-Amz-Date")
  valid_614250 = validateParameter(valid_614250, JString, required = false,
                                 default = nil)
  if valid_614250 != nil:
    section.add "X-Amz-Date", valid_614250
  var valid_614251 = header.getOrDefault("X-Amz-Credential")
  valid_614251 = validateParameter(valid_614251, JString, required = false,
                                 default = nil)
  if valid_614251 != nil:
    section.add "X-Amz-Credential", valid_614251
  var valid_614252 = header.getOrDefault("X-Amz-Security-Token")
  valid_614252 = validateParameter(valid_614252, JString, required = false,
                                 default = nil)
  if valid_614252 != nil:
    section.add "X-Amz-Security-Token", valid_614252
  var valid_614253 = header.getOrDefault("X-Amz-Algorithm")
  valid_614253 = validateParameter(valid_614253, JString, required = false,
                                 default = nil)
  if valid_614253 != nil:
    section.add "X-Amz-Algorithm", valid_614253
  var valid_614254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614254 = validateParameter(valid_614254, JString, required = false,
                                 default = nil)
  if valid_614254 != nil:
    section.add "X-Amz-SignedHeaders", valid_614254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614255: Call_GetDeleteLoginProfile_614242; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_614255.validator(path, query, header, formData, body)
  let scheme = call_614255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614255.url(scheme.get, call_614255.host, call_614255.base,
                         call_614255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614255, url, valid)

proc call*(call_614256: Call_GetDeleteLoginProfile_614242; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614257 = newJObject()
  add(query_614257, "UserName", newJString(UserName))
  add(query_614257, "Action", newJString(Action))
  add(query_614257, "Version", newJString(Version))
  result = call_614256.call(nil, query_614257, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_614242(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_614243, base: "/",
    url: url_GetDeleteLoginProfile_614244, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_614291 = ref object of OpenApiRestCall_612658
proc url_PostDeleteOpenIDConnectProvider_614293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOpenIDConnectProvider_614292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614294 = query.getOrDefault("Action")
  valid_614294 = validateParameter(valid_614294, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_614294 != nil:
    section.add "Action", valid_614294
  var valid_614295 = query.getOrDefault("Version")
  valid_614295 = validateParameter(valid_614295, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614295 != nil:
    section.add "Version", valid_614295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614296 = header.getOrDefault("X-Amz-Signature")
  valid_614296 = validateParameter(valid_614296, JString, required = false,
                                 default = nil)
  if valid_614296 != nil:
    section.add "X-Amz-Signature", valid_614296
  var valid_614297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614297 = validateParameter(valid_614297, JString, required = false,
                                 default = nil)
  if valid_614297 != nil:
    section.add "X-Amz-Content-Sha256", valid_614297
  var valid_614298 = header.getOrDefault("X-Amz-Date")
  valid_614298 = validateParameter(valid_614298, JString, required = false,
                                 default = nil)
  if valid_614298 != nil:
    section.add "X-Amz-Date", valid_614298
  var valid_614299 = header.getOrDefault("X-Amz-Credential")
  valid_614299 = validateParameter(valid_614299, JString, required = false,
                                 default = nil)
  if valid_614299 != nil:
    section.add "X-Amz-Credential", valid_614299
  var valid_614300 = header.getOrDefault("X-Amz-Security-Token")
  valid_614300 = validateParameter(valid_614300, JString, required = false,
                                 default = nil)
  if valid_614300 != nil:
    section.add "X-Amz-Security-Token", valid_614300
  var valid_614301 = header.getOrDefault("X-Amz-Algorithm")
  valid_614301 = validateParameter(valid_614301, JString, required = false,
                                 default = nil)
  if valid_614301 != nil:
    section.add "X-Amz-Algorithm", valid_614301
  var valid_614302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614302 = validateParameter(valid_614302, JString, required = false,
                                 default = nil)
  if valid_614302 != nil:
    section.add "X-Amz-SignedHeaders", valid_614302
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_614303 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_614303 = validateParameter(valid_614303, JString, required = true,
                                 default = nil)
  if valid_614303 != nil:
    section.add "OpenIDConnectProviderArn", valid_614303
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614304: Call_PostDeleteOpenIDConnectProvider_614291;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_614304.validator(path, query, header, formData, body)
  let scheme = call_614304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614304.url(scheme.get, call_614304.host, call_614304.base,
                         call_614304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614304, url, valid)

proc call*(call_614305: Call_PostDeleteOpenIDConnectProvider_614291;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_614306 = newJObject()
  var formData_614307 = newJObject()
  add(query_614306, "Action", newJString(Action))
  add(query_614306, "Version", newJString(Version))
  add(formData_614307, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_614305.call(nil, query_614306, nil, formData_614307, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_614291(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_614292, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_614293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_614275 = ref object of OpenApiRestCall_612658
proc url_GetDeleteOpenIDConnectProvider_614277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOpenIDConnectProvider_614276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_614278 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_614278 = validateParameter(valid_614278, JString, required = true,
                                 default = nil)
  if valid_614278 != nil:
    section.add "OpenIDConnectProviderArn", valid_614278
  var valid_614279 = query.getOrDefault("Action")
  valid_614279 = validateParameter(valid_614279, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_614279 != nil:
    section.add "Action", valid_614279
  var valid_614280 = query.getOrDefault("Version")
  valid_614280 = validateParameter(valid_614280, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614280 != nil:
    section.add "Version", valid_614280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614281 = header.getOrDefault("X-Amz-Signature")
  valid_614281 = validateParameter(valid_614281, JString, required = false,
                                 default = nil)
  if valid_614281 != nil:
    section.add "X-Amz-Signature", valid_614281
  var valid_614282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614282 = validateParameter(valid_614282, JString, required = false,
                                 default = nil)
  if valid_614282 != nil:
    section.add "X-Amz-Content-Sha256", valid_614282
  var valid_614283 = header.getOrDefault("X-Amz-Date")
  valid_614283 = validateParameter(valid_614283, JString, required = false,
                                 default = nil)
  if valid_614283 != nil:
    section.add "X-Amz-Date", valid_614283
  var valid_614284 = header.getOrDefault("X-Amz-Credential")
  valid_614284 = validateParameter(valid_614284, JString, required = false,
                                 default = nil)
  if valid_614284 != nil:
    section.add "X-Amz-Credential", valid_614284
  var valid_614285 = header.getOrDefault("X-Amz-Security-Token")
  valid_614285 = validateParameter(valid_614285, JString, required = false,
                                 default = nil)
  if valid_614285 != nil:
    section.add "X-Amz-Security-Token", valid_614285
  var valid_614286 = header.getOrDefault("X-Amz-Algorithm")
  valid_614286 = validateParameter(valid_614286, JString, required = false,
                                 default = nil)
  if valid_614286 != nil:
    section.add "X-Amz-Algorithm", valid_614286
  var valid_614287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614287 = validateParameter(valid_614287, JString, required = false,
                                 default = nil)
  if valid_614287 != nil:
    section.add "X-Amz-SignedHeaders", valid_614287
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614288: Call_GetDeleteOpenIDConnectProvider_614275; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_614288.validator(path, query, header, formData, body)
  let scheme = call_614288.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614288.url(scheme.get, call_614288.host, call_614288.base,
                         call_614288.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614288, url, valid)

proc call*(call_614289: Call_GetDeleteOpenIDConnectProvider_614275;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614290 = newJObject()
  add(query_614290, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_614290, "Action", newJString(Action))
  add(query_614290, "Version", newJString(Version))
  result = call_614289.call(nil, query_614290, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_614275(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_614276, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_614277,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_614324 = ref object of OpenApiRestCall_612658
proc url_PostDeletePolicy_614326(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicy_614325(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614327 = query.getOrDefault("Action")
  valid_614327 = validateParameter(valid_614327, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_614327 != nil:
    section.add "Action", valid_614327
  var valid_614328 = query.getOrDefault("Version")
  valid_614328 = validateParameter(valid_614328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614328 != nil:
    section.add "Version", valid_614328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614329 = header.getOrDefault("X-Amz-Signature")
  valid_614329 = validateParameter(valid_614329, JString, required = false,
                                 default = nil)
  if valid_614329 != nil:
    section.add "X-Amz-Signature", valid_614329
  var valid_614330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614330 = validateParameter(valid_614330, JString, required = false,
                                 default = nil)
  if valid_614330 != nil:
    section.add "X-Amz-Content-Sha256", valid_614330
  var valid_614331 = header.getOrDefault("X-Amz-Date")
  valid_614331 = validateParameter(valid_614331, JString, required = false,
                                 default = nil)
  if valid_614331 != nil:
    section.add "X-Amz-Date", valid_614331
  var valid_614332 = header.getOrDefault("X-Amz-Credential")
  valid_614332 = validateParameter(valid_614332, JString, required = false,
                                 default = nil)
  if valid_614332 != nil:
    section.add "X-Amz-Credential", valid_614332
  var valid_614333 = header.getOrDefault("X-Amz-Security-Token")
  valid_614333 = validateParameter(valid_614333, JString, required = false,
                                 default = nil)
  if valid_614333 != nil:
    section.add "X-Amz-Security-Token", valid_614333
  var valid_614334 = header.getOrDefault("X-Amz-Algorithm")
  valid_614334 = validateParameter(valid_614334, JString, required = false,
                                 default = nil)
  if valid_614334 != nil:
    section.add "X-Amz-Algorithm", valid_614334
  var valid_614335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614335 = validateParameter(valid_614335, JString, required = false,
                                 default = nil)
  if valid_614335 != nil:
    section.add "X-Amz-SignedHeaders", valid_614335
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_614336 = formData.getOrDefault("PolicyArn")
  valid_614336 = validateParameter(valid_614336, JString, required = true,
                                 default = nil)
  if valid_614336 != nil:
    section.add "PolicyArn", valid_614336
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614337: Call_PostDeletePolicy_614324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614337.validator(path, query, header, formData, body)
  let scheme = call_614337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614337.url(scheme.get, call_614337.host, call_614337.base,
                         call_614337.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614337, url, valid)

proc call*(call_614338: Call_PostDeletePolicy_614324; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614339 = newJObject()
  var formData_614340 = newJObject()
  add(formData_614340, "PolicyArn", newJString(PolicyArn))
  add(query_614339, "Action", newJString(Action))
  add(query_614339, "Version", newJString(Version))
  result = call_614338.call(nil, query_614339, nil, formData_614340, nil)

var postDeletePolicy* = Call_PostDeletePolicy_614324(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_614325,
    base: "/", url: url_PostDeletePolicy_614326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_614308 = ref object of OpenApiRestCall_612658
proc url_GetDeletePolicy_614310(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicy_614309(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_614311 = query.getOrDefault("PolicyArn")
  valid_614311 = validateParameter(valid_614311, JString, required = true,
                                 default = nil)
  if valid_614311 != nil:
    section.add "PolicyArn", valid_614311
  var valid_614312 = query.getOrDefault("Action")
  valid_614312 = validateParameter(valid_614312, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_614312 != nil:
    section.add "Action", valid_614312
  var valid_614313 = query.getOrDefault("Version")
  valid_614313 = validateParameter(valid_614313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614313 != nil:
    section.add "Version", valid_614313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614314 = header.getOrDefault("X-Amz-Signature")
  valid_614314 = validateParameter(valid_614314, JString, required = false,
                                 default = nil)
  if valid_614314 != nil:
    section.add "X-Amz-Signature", valid_614314
  var valid_614315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614315 = validateParameter(valid_614315, JString, required = false,
                                 default = nil)
  if valid_614315 != nil:
    section.add "X-Amz-Content-Sha256", valid_614315
  var valid_614316 = header.getOrDefault("X-Amz-Date")
  valid_614316 = validateParameter(valid_614316, JString, required = false,
                                 default = nil)
  if valid_614316 != nil:
    section.add "X-Amz-Date", valid_614316
  var valid_614317 = header.getOrDefault("X-Amz-Credential")
  valid_614317 = validateParameter(valid_614317, JString, required = false,
                                 default = nil)
  if valid_614317 != nil:
    section.add "X-Amz-Credential", valid_614317
  var valid_614318 = header.getOrDefault("X-Amz-Security-Token")
  valid_614318 = validateParameter(valid_614318, JString, required = false,
                                 default = nil)
  if valid_614318 != nil:
    section.add "X-Amz-Security-Token", valid_614318
  var valid_614319 = header.getOrDefault("X-Amz-Algorithm")
  valid_614319 = validateParameter(valid_614319, JString, required = false,
                                 default = nil)
  if valid_614319 != nil:
    section.add "X-Amz-Algorithm", valid_614319
  var valid_614320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614320 = validateParameter(valid_614320, JString, required = false,
                                 default = nil)
  if valid_614320 != nil:
    section.add "X-Amz-SignedHeaders", valid_614320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614321: Call_GetDeletePolicy_614308; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614321.validator(path, query, header, formData, body)
  let scheme = call_614321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614321.url(scheme.get, call_614321.host, call_614321.base,
                         call_614321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614321, url, valid)

proc call*(call_614322: Call_GetDeletePolicy_614308; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614323 = newJObject()
  add(query_614323, "PolicyArn", newJString(PolicyArn))
  add(query_614323, "Action", newJString(Action))
  add(query_614323, "Version", newJString(Version))
  result = call_614322.call(nil, query_614323, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_614308(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_614309,
    base: "/", url: url_GetDeletePolicy_614310, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_614358 = ref object of OpenApiRestCall_612658
proc url_PostDeletePolicyVersion_614360(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeletePolicyVersion_614359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614361 = query.getOrDefault("Action")
  valid_614361 = validateParameter(valid_614361, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_614361 != nil:
    section.add "Action", valid_614361
  var valid_614362 = query.getOrDefault("Version")
  valid_614362 = validateParameter(valid_614362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614362 != nil:
    section.add "Version", valid_614362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614363 = header.getOrDefault("X-Amz-Signature")
  valid_614363 = validateParameter(valid_614363, JString, required = false,
                                 default = nil)
  if valid_614363 != nil:
    section.add "X-Amz-Signature", valid_614363
  var valid_614364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614364 = validateParameter(valid_614364, JString, required = false,
                                 default = nil)
  if valid_614364 != nil:
    section.add "X-Amz-Content-Sha256", valid_614364
  var valid_614365 = header.getOrDefault("X-Amz-Date")
  valid_614365 = validateParameter(valid_614365, JString, required = false,
                                 default = nil)
  if valid_614365 != nil:
    section.add "X-Amz-Date", valid_614365
  var valid_614366 = header.getOrDefault("X-Amz-Credential")
  valid_614366 = validateParameter(valid_614366, JString, required = false,
                                 default = nil)
  if valid_614366 != nil:
    section.add "X-Amz-Credential", valid_614366
  var valid_614367 = header.getOrDefault("X-Amz-Security-Token")
  valid_614367 = validateParameter(valid_614367, JString, required = false,
                                 default = nil)
  if valid_614367 != nil:
    section.add "X-Amz-Security-Token", valid_614367
  var valid_614368 = header.getOrDefault("X-Amz-Algorithm")
  valid_614368 = validateParameter(valid_614368, JString, required = false,
                                 default = nil)
  if valid_614368 != nil:
    section.add "X-Amz-Algorithm", valid_614368
  var valid_614369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614369 = validateParameter(valid_614369, JString, required = false,
                                 default = nil)
  if valid_614369 != nil:
    section.add "X-Amz-SignedHeaders", valid_614369
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_614370 = formData.getOrDefault("VersionId")
  valid_614370 = validateParameter(valid_614370, JString, required = true,
                                 default = nil)
  if valid_614370 != nil:
    section.add "VersionId", valid_614370
  var valid_614371 = formData.getOrDefault("PolicyArn")
  valid_614371 = validateParameter(valid_614371, JString, required = true,
                                 default = nil)
  if valid_614371 != nil:
    section.add "PolicyArn", valid_614371
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614372: Call_PostDeletePolicyVersion_614358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614372.validator(path, query, header, formData, body)
  let scheme = call_614372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614372.url(scheme.get, call_614372.host, call_614372.base,
                         call_614372.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614372, url, valid)

proc call*(call_614373: Call_PostDeletePolicyVersion_614358; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614374 = newJObject()
  var formData_614375 = newJObject()
  add(formData_614375, "VersionId", newJString(VersionId))
  add(formData_614375, "PolicyArn", newJString(PolicyArn))
  add(query_614374, "Action", newJString(Action))
  add(query_614374, "Version", newJString(Version))
  result = call_614373.call(nil, query_614374, nil, formData_614375, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_614358(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_614359, base: "/",
    url: url_PostDeletePolicyVersion_614360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_614341 = ref object of OpenApiRestCall_612658
proc url_GetDeletePolicyVersion_614343(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeletePolicyVersion_614342(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_614344 = query.getOrDefault("VersionId")
  valid_614344 = validateParameter(valid_614344, JString, required = true,
                                 default = nil)
  if valid_614344 != nil:
    section.add "VersionId", valid_614344
  var valid_614345 = query.getOrDefault("PolicyArn")
  valid_614345 = validateParameter(valid_614345, JString, required = true,
                                 default = nil)
  if valid_614345 != nil:
    section.add "PolicyArn", valid_614345
  var valid_614346 = query.getOrDefault("Action")
  valid_614346 = validateParameter(valid_614346, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_614346 != nil:
    section.add "Action", valid_614346
  var valid_614347 = query.getOrDefault("Version")
  valid_614347 = validateParameter(valid_614347, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614347 != nil:
    section.add "Version", valid_614347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614348 = header.getOrDefault("X-Amz-Signature")
  valid_614348 = validateParameter(valid_614348, JString, required = false,
                                 default = nil)
  if valid_614348 != nil:
    section.add "X-Amz-Signature", valid_614348
  var valid_614349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614349 = validateParameter(valid_614349, JString, required = false,
                                 default = nil)
  if valid_614349 != nil:
    section.add "X-Amz-Content-Sha256", valid_614349
  var valid_614350 = header.getOrDefault("X-Amz-Date")
  valid_614350 = validateParameter(valid_614350, JString, required = false,
                                 default = nil)
  if valid_614350 != nil:
    section.add "X-Amz-Date", valid_614350
  var valid_614351 = header.getOrDefault("X-Amz-Credential")
  valid_614351 = validateParameter(valid_614351, JString, required = false,
                                 default = nil)
  if valid_614351 != nil:
    section.add "X-Amz-Credential", valid_614351
  var valid_614352 = header.getOrDefault("X-Amz-Security-Token")
  valid_614352 = validateParameter(valid_614352, JString, required = false,
                                 default = nil)
  if valid_614352 != nil:
    section.add "X-Amz-Security-Token", valid_614352
  var valid_614353 = header.getOrDefault("X-Amz-Algorithm")
  valid_614353 = validateParameter(valid_614353, JString, required = false,
                                 default = nil)
  if valid_614353 != nil:
    section.add "X-Amz-Algorithm", valid_614353
  var valid_614354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614354 = validateParameter(valid_614354, JString, required = false,
                                 default = nil)
  if valid_614354 != nil:
    section.add "X-Amz-SignedHeaders", valid_614354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614355: Call_GetDeletePolicyVersion_614341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614355.validator(path, query, header, formData, body)
  let scheme = call_614355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614355.url(scheme.get, call_614355.host, call_614355.base,
                         call_614355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614355, url, valid)

proc call*(call_614356: Call_GetDeletePolicyVersion_614341; VersionId: string;
          PolicyArn: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614357 = newJObject()
  add(query_614357, "VersionId", newJString(VersionId))
  add(query_614357, "PolicyArn", newJString(PolicyArn))
  add(query_614357, "Action", newJString(Action))
  add(query_614357, "Version", newJString(Version))
  result = call_614356.call(nil, query_614357, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_614341(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_614342, base: "/",
    url: url_GetDeletePolicyVersion_614343, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_614392 = ref object of OpenApiRestCall_612658
proc url_PostDeleteRole_614394(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRole_614393(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614395 = query.getOrDefault("Action")
  valid_614395 = validateParameter(valid_614395, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_614395 != nil:
    section.add "Action", valid_614395
  var valid_614396 = query.getOrDefault("Version")
  valid_614396 = validateParameter(valid_614396, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614396 != nil:
    section.add "Version", valid_614396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614397 = header.getOrDefault("X-Amz-Signature")
  valid_614397 = validateParameter(valid_614397, JString, required = false,
                                 default = nil)
  if valid_614397 != nil:
    section.add "X-Amz-Signature", valid_614397
  var valid_614398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614398 = validateParameter(valid_614398, JString, required = false,
                                 default = nil)
  if valid_614398 != nil:
    section.add "X-Amz-Content-Sha256", valid_614398
  var valid_614399 = header.getOrDefault("X-Amz-Date")
  valid_614399 = validateParameter(valid_614399, JString, required = false,
                                 default = nil)
  if valid_614399 != nil:
    section.add "X-Amz-Date", valid_614399
  var valid_614400 = header.getOrDefault("X-Amz-Credential")
  valid_614400 = validateParameter(valid_614400, JString, required = false,
                                 default = nil)
  if valid_614400 != nil:
    section.add "X-Amz-Credential", valid_614400
  var valid_614401 = header.getOrDefault("X-Amz-Security-Token")
  valid_614401 = validateParameter(valid_614401, JString, required = false,
                                 default = nil)
  if valid_614401 != nil:
    section.add "X-Amz-Security-Token", valid_614401
  var valid_614402 = header.getOrDefault("X-Amz-Algorithm")
  valid_614402 = validateParameter(valid_614402, JString, required = false,
                                 default = nil)
  if valid_614402 != nil:
    section.add "X-Amz-Algorithm", valid_614402
  var valid_614403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614403 = validateParameter(valid_614403, JString, required = false,
                                 default = nil)
  if valid_614403 != nil:
    section.add "X-Amz-SignedHeaders", valid_614403
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614404 = formData.getOrDefault("RoleName")
  valid_614404 = validateParameter(valid_614404, JString, required = true,
                                 default = nil)
  if valid_614404 != nil:
    section.add "RoleName", valid_614404
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614405: Call_PostDeleteRole_614392; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_614405.validator(path, query, header, formData, body)
  let scheme = call_614405.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614405.url(scheme.get, call_614405.host, call_614405.base,
                         call_614405.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614405, url, valid)

proc call*(call_614406: Call_PostDeleteRole_614392; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614407 = newJObject()
  var formData_614408 = newJObject()
  add(formData_614408, "RoleName", newJString(RoleName))
  add(query_614407, "Action", newJString(Action))
  add(query_614407, "Version", newJString(Version))
  result = call_614406.call(nil, query_614407, nil, formData_614408, nil)

var postDeleteRole* = Call_PostDeleteRole_614392(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_614393,
    base: "/", url: url_PostDeleteRole_614394, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_614376 = ref object of OpenApiRestCall_612658
proc url_GetDeleteRole_614378(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRole_614377(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614379 = query.getOrDefault("RoleName")
  valid_614379 = validateParameter(valid_614379, JString, required = true,
                                 default = nil)
  if valid_614379 != nil:
    section.add "RoleName", valid_614379
  var valid_614380 = query.getOrDefault("Action")
  valid_614380 = validateParameter(valid_614380, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_614380 != nil:
    section.add "Action", valid_614380
  var valid_614381 = query.getOrDefault("Version")
  valid_614381 = validateParameter(valid_614381, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614381 != nil:
    section.add "Version", valid_614381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614382 = header.getOrDefault("X-Amz-Signature")
  valid_614382 = validateParameter(valid_614382, JString, required = false,
                                 default = nil)
  if valid_614382 != nil:
    section.add "X-Amz-Signature", valid_614382
  var valid_614383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614383 = validateParameter(valid_614383, JString, required = false,
                                 default = nil)
  if valid_614383 != nil:
    section.add "X-Amz-Content-Sha256", valid_614383
  var valid_614384 = header.getOrDefault("X-Amz-Date")
  valid_614384 = validateParameter(valid_614384, JString, required = false,
                                 default = nil)
  if valid_614384 != nil:
    section.add "X-Amz-Date", valid_614384
  var valid_614385 = header.getOrDefault("X-Amz-Credential")
  valid_614385 = validateParameter(valid_614385, JString, required = false,
                                 default = nil)
  if valid_614385 != nil:
    section.add "X-Amz-Credential", valid_614385
  var valid_614386 = header.getOrDefault("X-Amz-Security-Token")
  valid_614386 = validateParameter(valid_614386, JString, required = false,
                                 default = nil)
  if valid_614386 != nil:
    section.add "X-Amz-Security-Token", valid_614386
  var valid_614387 = header.getOrDefault("X-Amz-Algorithm")
  valid_614387 = validateParameter(valid_614387, JString, required = false,
                                 default = nil)
  if valid_614387 != nil:
    section.add "X-Amz-Algorithm", valid_614387
  var valid_614388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614388 = validateParameter(valid_614388, JString, required = false,
                                 default = nil)
  if valid_614388 != nil:
    section.add "X-Amz-SignedHeaders", valid_614388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614389: Call_GetDeleteRole_614376; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_614389.validator(path, query, header, formData, body)
  let scheme = call_614389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614389.url(scheme.get, call_614389.host, call_614389.base,
                         call_614389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614389, url, valid)

proc call*(call_614390: Call_GetDeleteRole_614376; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614391 = newJObject()
  add(query_614391, "RoleName", newJString(RoleName))
  add(query_614391, "Action", newJString(Action))
  add(query_614391, "Version", newJString(Version))
  result = call_614390.call(nil, query_614391, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_614376(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_614377,
    base: "/", url: url_GetDeleteRole_614378, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_614425 = ref object of OpenApiRestCall_612658
proc url_PostDeleteRolePermissionsBoundary_614427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePermissionsBoundary_614426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614428 = query.getOrDefault("Action")
  valid_614428 = validateParameter(valid_614428, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_614428 != nil:
    section.add "Action", valid_614428
  var valid_614429 = query.getOrDefault("Version")
  valid_614429 = validateParameter(valid_614429, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614429 != nil:
    section.add "Version", valid_614429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614430 = header.getOrDefault("X-Amz-Signature")
  valid_614430 = validateParameter(valid_614430, JString, required = false,
                                 default = nil)
  if valid_614430 != nil:
    section.add "X-Amz-Signature", valid_614430
  var valid_614431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614431 = validateParameter(valid_614431, JString, required = false,
                                 default = nil)
  if valid_614431 != nil:
    section.add "X-Amz-Content-Sha256", valid_614431
  var valid_614432 = header.getOrDefault("X-Amz-Date")
  valid_614432 = validateParameter(valid_614432, JString, required = false,
                                 default = nil)
  if valid_614432 != nil:
    section.add "X-Amz-Date", valid_614432
  var valid_614433 = header.getOrDefault("X-Amz-Credential")
  valid_614433 = validateParameter(valid_614433, JString, required = false,
                                 default = nil)
  if valid_614433 != nil:
    section.add "X-Amz-Credential", valid_614433
  var valid_614434 = header.getOrDefault("X-Amz-Security-Token")
  valid_614434 = validateParameter(valid_614434, JString, required = false,
                                 default = nil)
  if valid_614434 != nil:
    section.add "X-Amz-Security-Token", valid_614434
  var valid_614435 = header.getOrDefault("X-Amz-Algorithm")
  valid_614435 = validateParameter(valid_614435, JString, required = false,
                                 default = nil)
  if valid_614435 != nil:
    section.add "X-Amz-Algorithm", valid_614435
  var valid_614436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614436 = validateParameter(valid_614436, JString, required = false,
                                 default = nil)
  if valid_614436 != nil:
    section.add "X-Amz-SignedHeaders", valid_614436
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614437 = formData.getOrDefault("RoleName")
  valid_614437 = validateParameter(valid_614437, JString, required = true,
                                 default = nil)
  if valid_614437 != nil:
    section.add "RoleName", valid_614437
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614438: Call_PostDeleteRolePermissionsBoundary_614425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_614438.validator(path, query, header, formData, body)
  let scheme = call_614438.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614438.url(scheme.get, call_614438.host, call_614438.base,
                         call_614438.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614438, url, valid)

proc call*(call_614439: Call_PostDeleteRolePermissionsBoundary_614425;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614440 = newJObject()
  var formData_614441 = newJObject()
  add(formData_614441, "RoleName", newJString(RoleName))
  add(query_614440, "Action", newJString(Action))
  add(query_614440, "Version", newJString(Version))
  result = call_614439.call(nil, query_614440, nil, formData_614441, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_614425(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_614426, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_614427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_614409 = ref object of OpenApiRestCall_612658
proc url_GetDeleteRolePermissionsBoundary_614411(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePermissionsBoundary_614410(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614412 = query.getOrDefault("RoleName")
  valid_614412 = validateParameter(valid_614412, JString, required = true,
                                 default = nil)
  if valid_614412 != nil:
    section.add "RoleName", valid_614412
  var valid_614413 = query.getOrDefault("Action")
  valid_614413 = validateParameter(valid_614413, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_614413 != nil:
    section.add "Action", valid_614413
  var valid_614414 = query.getOrDefault("Version")
  valid_614414 = validateParameter(valid_614414, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614414 != nil:
    section.add "Version", valid_614414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614415 = header.getOrDefault("X-Amz-Signature")
  valid_614415 = validateParameter(valid_614415, JString, required = false,
                                 default = nil)
  if valid_614415 != nil:
    section.add "X-Amz-Signature", valid_614415
  var valid_614416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614416 = validateParameter(valid_614416, JString, required = false,
                                 default = nil)
  if valid_614416 != nil:
    section.add "X-Amz-Content-Sha256", valid_614416
  var valid_614417 = header.getOrDefault("X-Amz-Date")
  valid_614417 = validateParameter(valid_614417, JString, required = false,
                                 default = nil)
  if valid_614417 != nil:
    section.add "X-Amz-Date", valid_614417
  var valid_614418 = header.getOrDefault("X-Amz-Credential")
  valid_614418 = validateParameter(valid_614418, JString, required = false,
                                 default = nil)
  if valid_614418 != nil:
    section.add "X-Amz-Credential", valid_614418
  var valid_614419 = header.getOrDefault("X-Amz-Security-Token")
  valid_614419 = validateParameter(valid_614419, JString, required = false,
                                 default = nil)
  if valid_614419 != nil:
    section.add "X-Amz-Security-Token", valid_614419
  var valid_614420 = header.getOrDefault("X-Amz-Algorithm")
  valid_614420 = validateParameter(valid_614420, JString, required = false,
                                 default = nil)
  if valid_614420 != nil:
    section.add "X-Amz-Algorithm", valid_614420
  var valid_614421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614421 = validateParameter(valid_614421, JString, required = false,
                                 default = nil)
  if valid_614421 != nil:
    section.add "X-Amz-SignedHeaders", valid_614421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614422: Call_GetDeleteRolePermissionsBoundary_614409;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_614422.validator(path, query, header, formData, body)
  let scheme = call_614422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614422.url(scheme.get, call_614422.host, call_614422.base,
                         call_614422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614422, url, valid)

proc call*(call_614423: Call_GetDeleteRolePermissionsBoundary_614409;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614424 = newJObject()
  add(query_614424, "RoleName", newJString(RoleName))
  add(query_614424, "Action", newJString(Action))
  add(query_614424, "Version", newJString(Version))
  result = call_614423.call(nil, query_614424, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_614409(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_614410, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_614411,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_614459 = ref object of OpenApiRestCall_612658
proc url_PostDeleteRolePolicy_614461(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteRolePolicy_614460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614462 = query.getOrDefault("Action")
  valid_614462 = validateParameter(valid_614462, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_614462 != nil:
    section.add "Action", valid_614462
  var valid_614463 = query.getOrDefault("Version")
  valid_614463 = validateParameter(valid_614463, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614463 != nil:
    section.add "Version", valid_614463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614464 = header.getOrDefault("X-Amz-Signature")
  valid_614464 = validateParameter(valid_614464, JString, required = false,
                                 default = nil)
  if valid_614464 != nil:
    section.add "X-Amz-Signature", valid_614464
  var valid_614465 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614465 = validateParameter(valid_614465, JString, required = false,
                                 default = nil)
  if valid_614465 != nil:
    section.add "X-Amz-Content-Sha256", valid_614465
  var valid_614466 = header.getOrDefault("X-Amz-Date")
  valid_614466 = validateParameter(valid_614466, JString, required = false,
                                 default = nil)
  if valid_614466 != nil:
    section.add "X-Amz-Date", valid_614466
  var valid_614467 = header.getOrDefault("X-Amz-Credential")
  valid_614467 = validateParameter(valid_614467, JString, required = false,
                                 default = nil)
  if valid_614467 != nil:
    section.add "X-Amz-Credential", valid_614467
  var valid_614468 = header.getOrDefault("X-Amz-Security-Token")
  valid_614468 = validateParameter(valid_614468, JString, required = false,
                                 default = nil)
  if valid_614468 != nil:
    section.add "X-Amz-Security-Token", valid_614468
  var valid_614469 = header.getOrDefault("X-Amz-Algorithm")
  valid_614469 = validateParameter(valid_614469, JString, required = false,
                                 default = nil)
  if valid_614469 != nil:
    section.add "X-Amz-Algorithm", valid_614469
  var valid_614470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614470 = validateParameter(valid_614470, JString, required = false,
                                 default = nil)
  if valid_614470 != nil:
    section.add "X-Amz-SignedHeaders", valid_614470
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614471 = formData.getOrDefault("RoleName")
  valid_614471 = validateParameter(valid_614471, JString, required = true,
                                 default = nil)
  if valid_614471 != nil:
    section.add "RoleName", valid_614471
  var valid_614472 = formData.getOrDefault("PolicyName")
  valid_614472 = validateParameter(valid_614472, JString, required = true,
                                 default = nil)
  if valid_614472 != nil:
    section.add "PolicyName", valid_614472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614473: Call_PostDeleteRolePolicy_614459; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614473.validator(path, query, header, formData, body)
  let scheme = call_614473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614473.url(scheme.get, call_614473.host, call_614473.base,
                         call_614473.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614473, url, valid)

proc call*(call_614474: Call_PostDeleteRolePolicy_614459; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614475 = newJObject()
  var formData_614476 = newJObject()
  add(formData_614476, "RoleName", newJString(RoleName))
  add(query_614475, "Action", newJString(Action))
  add(query_614475, "Version", newJString(Version))
  add(formData_614476, "PolicyName", newJString(PolicyName))
  result = call_614474.call(nil, query_614475, nil, formData_614476, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_614459(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_614460, base: "/",
    url: url_PostDeleteRolePolicy_614461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_614442 = ref object of OpenApiRestCall_612658
proc url_GetDeleteRolePolicy_614444(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteRolePolicy_614443(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_614445 = query.getOrDefault("PolicyName")
  valid_614445 = validateParameter(valid_614445, JString, required = true,
                                 default = nil)
  if valid_614445 != nil:
    section.add "PolicyName", valid_614445
  var valid_614446 = query.getOrDefault("RoleName")
  valid_614446 = validateParameter(valid_614446, JString, required = true,
                                 default = nil)
  if valid_614446 != nil:
    section.add "RoleName", valid_614446
  var valid_614447 = query.getOrDefault("Action")
  valid_614447 = validateParameter(valid_614447, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_614447 != nil:
    section.add "Action", valid_614447
  var valid_614448 = query.getOrDefault("Version")
  valid_614448 = validateParameter(valid_614448, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614448 != nil:
    section.add "Version", valid_614448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614449 = header.getOrDefault("X-Amz-Signature")
  valid_614449 = validateParameter(valid_614449, JString, required = false,
                                 default = nil)
  if valid_614449 != nil:
    section.add "X-Amz-Signature", valid_614449
  var valid_614450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614450 = validateParameter(valid_614450, JString, required = false,
                                 default = nil)
  if valid_614450 != nil:
    section.add "X-Amz-Content-Sha256", valid_614450
  var valid_614451 = header.getOrDefault("X-Amz-Date")
  valid_614451 = validateParameter(valid_614451, JString, required = false,
                                 default = nil)
  if valid_614451 != nil:
    section.add "X-Amz-Date", valid_614451
  var valid_614452 = header.getOrDefault("X-Amz-Credential")
  valid_614452 = validateParameter(valid_614452, JString, required = false,
                                 default = nil)
  if valid_614452 != nil:
    section.add "X-Amz-Credential", valid_614452
  var valid_614453 = header.getOrDefault("X-Amz-Security-Token")
  valid_614453 = validateParameter(valid_614453, JString, required = false,
                                 default = nil)
  if valid_614453 != nil:
    section.add "X-Amz-Security-Token", valid_614453
  var valid_614454 = header.getOrDefault("X-Amz-Algorithm")
  valid_614454 = validateParameter(valid_614454, JString, required = false,
                                 default = nil)
  if valid_614454 != nil:
    section.add "X-Amz-Algorithm", valid_614454
  var valid_614455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614455 = validateParameter(valid_614455, JString, required = false,
                                 default = nil)
  if valid_614455 != nil:
    section.add "X-Amz-SignedHeaders", valid_614455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614456: Call_GetDeleteRolePolicy_614442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614456.validator(path, query, header, formData, body)
  let scheme = call_614456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614456.url(scheme.get, call_614456.host, call_614456.base,
                         call_614456.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614456, url, valid)

proc call*(call_614457: Call_GetDeleteRolePolicy_614442; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614458 = newJObject()
  add(query_614458, "PolicyName", newJString(PolicyName))
  add(query_614458, "RoleName", newJString(RoleName))
  add(query_614458, "Action", newJString(Action))
  add(query_614458, "Version", newJString(Version))
  result = call_614457.call(nil, query_614458, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_614442(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_614443, base: "/",
    url: url_GetDeleteRolePolicy_614444, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_614493 = ref object of OpenApiRestCall_612658
proc url_PostDeleteSAMLProvider_614495(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSAMLProvider_614494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614496 = query.getOrDefault("Action")
  valid_614496 = validateParameter(valid_614496, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_614496 != nil:
    section.add "Action", valid_614496
  var valid_614497 = query.getOrDefault("Version")
  valid_614497 = validateParameter(valid_614497, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614497 != nil:
    section.add "Version", valid_614497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614498 = header.getOrDefault("X-Amz-Signature")
  valid_614498 = validateParameter(valid_614498, JString, required = false,
                                 default = nil)
  if valid_614498 != nil:
    section.add "X-Amz-Signature", valid_614498
  var valid_614499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614499 = validateParameter(valid_614499, JString, required = false,
                                 default = nil)
  if valid_614499 != nil:
    section.add "X-Amz-Content-Sha256", valid_614499
  var valid_614500 = header.getOrDefault("X-Amz-Date")
  valid_614500 = validateParameter(valid_614500, JString, required = false,
                                 default = nil)
  if valid_614500 != nil:
    section.add "X-Amz-Date", valid_614500
  var valid_614501 = header.getOrDefault("X-Amz-Credential")
  valid_614501 = validateParameter(valid_614501, JString, required = false,
                                 default = nil)
  if valid_614501 != nil:
    section.add "X-Amz-Credential", valid_614501
  var valid_614502 = header.getOrDefault("X-Amz-Security-Token")
  valid_614502 = validateParameter(valid_614502, JString, required = false,
                                 default = nil)
  if valid_614502 != nil:
    section.add "X-Amz-Security-Token", valid_614502
  var valid_614503 = header.getOrDefault("X-Amz-Algorithm")
  valid_614503 = validateParameter(valid_614503, JString, required = false,
                                 default = nil)
  if valid_614503 != nil:
    section.add "X-Amz-Algorithm", valid_614503
  var valid_614504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614504 = validateParameter(valid_614504, JString, required = false,
                                 default = nil)
  if valid_614504 != nil:
    section.add "X-Amz-SignedHeaders", valid_614504
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_614505 = formData.getOrDefault("SAMLProviderArn")
  valid_614505 = validateParameter(valid_614505, JString, required = true,
                                 default = nil)
  if valid_614505 != nil:
    section.add "SAMLProviderArn", valid_614505
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614506: Call_PostDeleteSAMLProvider_614493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614506.validator(path, query, header, formData, body)
  let scheme = call_614506.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614506.url(scheme.get, call_614506.host, call_614506.base,
                         call_614506.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614506, url, valid)

proc call*(call_614507: Call_PostDeleteSAMLProvider_614493;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614508 = newJObject()
  var formData_614509 = newJObject()
  add(formData_614509, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_614508, "Action", newJString(Action))
  add(query_614508, "Version", newJString(Version))
  result = call_614507.call(nil, query_614508, nil, formData_614509, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_614493(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_614494, base: "/",
    url: url_PostDeleteSAMLProvider_614495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_614477 = ref object of OpenApiRestCall_612658
proc url_GetDeleteSAMLProvider_614479(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSAMLProvider_614478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_614480 = query.getOrDefault("Action")
  valid_614480 = validateParameter(valid_614480, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_614480 != nil:
    section.add "Action", valid_614480
  var valid_614481 = query.getOrDefault("SAMLProviderArn")
  valid_614481 = validateParameter(valid_614481, JString, required = true,
                                 default = nil)
  if valid_614481 != nil:
    section.add "SAMLProviderArn", valid_614481
  var valid_614482 = query.getOrDefault("Version")
  valid_614482 = validateParameter(valid_614482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614482 != nil:
    section.add "Version", valid_614482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614483 = header.getOrDefault("X-Amz-Signature")
  valid_614483 = validateParameter(valid_614483, JString, required = false,
                                 default = nil)
  if valid_614483 != nil:
    section.add "X-Amz-Signature", valid_614483
  var valid_614484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614484 = validateParameter(valid_614484, JString, required = false,
                                 default = nil)
  if valid_614484 != nil:
    section.add "X-Amz-Content-Sha256", valid_614484
  var valid_614485 = header.getOrDefault("X-Amz-Date")
  valid_614485 = validateParameter(valid_614485, JString, required = false,
                                 default = nil)
  if valid_614485 != nil:
    section.add "X-Amz-Date", valid_614485
  var valid_614486 = header.getOrDefault("X-Amz-Credential")
  valid_614486 = validateParameter(valid_614486, JString, required = false,
                                 default = nil)
  if valid_614486 != nil:
    section.add "X-Amz-Credential", valid_614486
  var valid_614487 = header.getOrDefault("X-Amz-Security-Token")
  valid_614487 = validateParameter(valid_614487, JString, required = false,
                                 default = nil)
  if valid_614487 != nil:
    section.add "X-Amz-Security-Token", valid_614487
  var valid_614488 = header.getOrDefault("X-Amz-Algorithm")
  valid_614488 = validateParameter(valid_614488, JString, required = false,
                                 default = nil)
  if valid_614488 != nil:
    section.add "X-Amz-Algorithm", valid_614488
  var valid_614489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614489 = validateParameter(valid_614489, JString, required = false,
                                 default = nil)
  if valid_614489 != nil:
    section.add "X-Amz-SignedHeaders", valid_614489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614490: Call_GetDeleteSAMLProvider_614477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_614490.validator(path, query, header, formData, body)
  let scheme = call_614490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614490.url(scheme.get, call_614490.host, call_614490.base,
                         call_614490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614490, url, valid)

proc call*(call_614491: Call_GetDeleteSAMLProvider_614477; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_614492 = newJObject()
  add(query_614492, "Action", newJString(Action))
  add(query_614492, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_614492, "Version", newJString(Version))
  result = call_614491.call(nil, query_614492, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_614477(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_614478, base: "/",
    url: url_GetDeleteSAMLProvider_614479, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_614527 = ref object of OpenApiRestCall_612658
proc url_PostDeleteSSHPublicKey_614529(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSSHPublicKey_614528(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614530 = query.getOrDefault("Action")
  valid_614530 = validateParameter(valid_614530, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_614530 != nil:
    section.add "Action", valid_614530
  var valid_614531 = query.getOrDefault("Version")
  valid_614531 = validateParameter(valid_614531, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614531 != nil:
    section.add "Version", valid_614531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614532 = header.getOrDefault("X-Amz-Signature")
  valid_614532 = validateParameter(valid_614532, JString, required = false,
                                 default = nil)
  if valid_614532 != nil:
    section.add "X-Amz-Signature", valid_614532
  var valid_614533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614533 = validateParameter(valid_614533, JString, required = false,
                                 default = nil)
  if valid_614533 != nil:
    section.add "X-Amz-Content-Sha256", valid_614533
  var valid_614534 = header.getOrDefault("X-Amz-Date")
  valid_614534 = validateParameter(valid_614534, JString, required = false,
                                 default = nil)
  if valid_614534 != nil:
    section.add "X-Amz-Date", valid_614534
  var valid_614535 = header.getOrDefault("X-Amz-Credential")
  valid_614535 = validateParameter(valid_614535, JString, required = false,
                                 default = nil)
  if valid_614535 != nil:
    section.add "X-Amz-Credential", valid_614535
  var valid_614536 = header.getOrDefault("X-Amz-Security-Token")
  valid_614536 = validateParameter(valid_614536, JString, required = false,
                                 default = nil)
  if valid_614536 != nil:
    section.add "X-Amz-Security-Token", valid_614536
  var valid_614537 = header.getOrDefault("X-Amz-Algorithm")
  valid_614537 = validateParameter(valid_614537, JString, required = false,
                                 default = nil)
  if valid_614537 != nil:
    section.add "X-Amz-Algorithm", valid_614537
  var valid_614538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614538 = validateParameter(valid_614538, JString, required = false,
                                 default = nil)
  if valid_614538 != nil:
    section.add "X-Amz-SignedHeaders", valid_614538
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_614539 = formData.getOrDefault("SSHPublicKeyId")
  valid_614539 = validateParameter(valid_614539, JString, required = true,
                                 default = nil)
  if valid_614539 != nil:
    section.add "SSHPublicKeyId", valid_614539
  var valid_614540 = formData.getOrDefault("UserName")
  valid_614540 = validateParameter(valid_614540, JString, required = true,
                                 default = nil)
  if valid_614540 != nil:
    section.add "UserName", valid_614540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614541: Call_PostDeleteSSHPublicKey_614527; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_614541.validator(path, query, header, formData, body)
  let scheme = call_614541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614541.url(scheme.get, call_614541.host, call_614541.base,
                         call_614541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614541, url, valid)

proc call*(call_614542: Call_PostDeleteSSHPublicKey_614527; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614543 = newJObject()
  var formData_614544 = newJObject()
  add(formData_614544, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_614544, "UserName", newJString(UserName))
  add(query_614543, "Action", newJString(Action))
  add(query_614543, "Version", newJString(Version))
  result = call_614542.call(nil, query_614543, nil, formData_614544, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_614527(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_614528, base: "/",
    url: url_PostDeleteSSHPublicKey_614529, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_614510 = ref object of OpenApiRestCall_612658
proc url_GetDeleteSSHPublicKey_614512(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSSHPublicKey_614511(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_614513 = query.getOrDefault("SSHPublicKeyId")
  valid_614513 = validateParameter(valid_614513, JString, required = true,
                                 default = nil)
  if valid_614513 != nil:
    section.add "SSHPublicKeyId", valid_614513
  var valid_614514 = query.getOrDefault("UserName")
  valid_614514 = validateParameter(valid_614514, JString, required = true,
                                 default = nil)
  if valid_614514 != nil:
    section.add "UserName", valid_614514
  var valid_614515 = query.getOrDefault("Action")
  valid_614515 = validateParameter(valid_614515, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_614515 != nil:
    section.add "Action", valid_614515
  var valid_614516 = query.getOrDefault("Version")
  valid_614516 = validateParameter(valid_614516, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614516 != nil:
    section.add "Version", valid_614516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614517 = header.getOrDefault("X-Amz-Signature")
  valid_614517 = validateParameter(valid_614517, JString, required = false,
                                 default = nil)
  if valid_614517 != nil:
    section.add "X-Amz-Signature", valid_614517
  var valid_614518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614518 = validateParameter(valid_614518, JString, required = false,
                                 default = nil)
  if valid_614518 != nil:
    section.add "X-Amz-Content-Sha256", valid_614518
  var valid_614519 = header.getOrDefault("X-Amz-Date")
  valid_614519 = validateParameter(valid_614519, JString, required = false,
                                 default = nil)
  if valid_614519 != nil:
    section.add "X-Amz-Date", valid_614519
  var valid_614520 = header.getOrDefault("X-Amz-Credential")
  valid_614520 = validateParameter(valid_614520, JString, required = false,
                                 default = nil)
  if valid_614520 != nil:
    section.add "X-Amz-Credential", valid_614520
  var valid_614521 = header.getOrDefault("X-Amz-Security-Token")
  valid_614521 = validateParameter(valid_614521, JString, required = false,
                                 default = nil)
  if valid_614521 != nil:
    section.add "X-Amz-Security-Token", valid_614521
  var valid_614522 = header.getOrDefault("X-Amz-Algorithm")
  valid_614522 = validateParameter(valid_614522, JString, required = false,
                                 default = nil)
  if valid_614522 != nil:
    section.add "X-Amz-Algorithm", valid_614522
  var valid_614523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614523 = validateParameter(valid_614523, JString, required = false,
                                 default = nil)
  if valid_614523 != nil:
    section.add "X-Amz-SignedHeaders", valid_614523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614524: Call_GetDeleteSSHPublicKey_614510; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_614524.validator(path, query, header, formData, body)
  let scheme = call_614524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614524.url(scheme.get, call_614524.host, call_614524.base,
                         call_614524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614524, url, valid)

proc call*(call_614525: Call_GetDeleteSSHPublicKey_614510; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614526 = newJObject()
  add(query_614526, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_614526, "UserName", newJString(UserName))
  add(query_614526, "Action", newJString(Action))
  add(query_614526, "Version", newJString(Version))
  result = call_614525.call(nil, query_614526, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_614510(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_614511, base: "/",
    url: url_GetDeleteSSHPublicKey_614512, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_614561 = ref object of OpenApiRestCall_612658
proc url_PostDeleteServerCertificate_614563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServerCertificate_614562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614564 = query.getOrDefault("Action")
  valid_614564 = validateParameter(valid_614564, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_614564 != nil:
    section.add "Action", valid_614564
  var valid_614565 = query.getOrDefault("Version")
  valid_614565 = validateParameter(valid_614565, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614565 != nil:
    section.add "Version", valid_614565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614566 = header.getOrDefault("X-Amz-Signature")
  valid_614566 = validateParameter(valid_614566, JString, required = false,
                                 default = nil)
  if valid_614566 != nil:
    section.add "X-Amz-Signature", valid_614566
  var valid_614567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614567 = validateParameter(valid_614567, JString, required = false,
                                 default = nil)
  if valid_614567 != nil:
    section.add "X-Amz-Content-Sha256", valid_614567
  var valid_614568 = header.getOrDefault("X-Amz-Date")
  valid_614568 = validateParameter(valid_614568, JString, required = false,
                                 default = nil)
  if valid_614568 != nil:
    section.add "X-Amz-Date", valid_614568
  var valid_614569 = header.getOrDefault("X-Amz-Credential")
  valid_614569 = validateParameter(valid_614569, JString, required = false,
                                 default = nil)
  if valid_614569 != nil:
    section.add "X-Amz-Credential", valid_614569
  var valid_614570 = header.getOrDefault("X-Amz-Security-Token")
  valid_614570 = validateParameter(valid_614570, JString, required = false,
                                 default = nil)
  if valid_614570 != nil:
    section.add "X-Amz-Security-Token", valid_614570
  var valid_614571 = header.getOrDefault("X-Amz-Algorithm")
  valid_614571 = validateParameter(valid_614571, JString, required = false,
                                 default = nil)
  if valid_614571 != nil:
    section.add "X-Amz-Algorithm", valid_614571
  var valid_614572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614572 = validateParameter(valid_614572, JString, required = false,
                                 default = nil)
  if valid_614572 != nil:
    section.add "X-Amz-SignedHeaders", valid_614572
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_614573 = formData.getOrDefault("ServerCertificateName")
  valid_614573 = validateParameter(valid_614573, JString, required = true,
                                 default = nil)
  if valid_614573 != nil:
    section.add "ServerCertificateName", valid_614573
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614574: Call_PostDeleteServerCertificate_614561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_614574.validator(path, query, header, formData, body)
  let scheme = call_614574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614574.url(scheme.get, call_614574.host, call_614574.base,
                         call_614574.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614574, url, valid)

proc call*(call_614575: Call_PostDeleteServerCertificate_614561;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614576 = newJObject()
  var formData_614577 = newJObject()
  add(formData_614577, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_614576, "Action", newJString(Action))
  add(query_614576, "Version", newJString(Version))
  result = call_614575.call(nil, query_614576, nil, formData_614577, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_614561(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_614562, base: "/",
    url: url_PostDeleteServerCertificate_614563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_614545 = ref object of OpenApiRestCall_612658
proc url_GetDeleteServerCertificate_614547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServerCertificate_614546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_614548 = query.getOrDefault("ServerCertificateName")
  valid_614548 = validateParameter(valid_614548, JString, required = true,
                                 default = nil)
  if valid_614548 != nil:
    section.add "ServerCertificateName", valid_614548
  var valid_614549 = query.getOrDefault("Action")
  valid_614549 = validateParameter(valid_614549, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_614549 != nil:
    section.add "Action", valid_614549
  var valid_614550 = query.getOrDefault("Version")
  valid_614550 = validateParameter(valid_614550, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614550 != nil:
    section.add "Version", valid_614550
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614551 = header.getOrDefault("X-Amz-Signature")
  valid_614551 = validateParameter(valid_614551, JString, required = false,
                                 default = nil)
  if valid_614551 != nil:
    section.add "X-Amz-Signature", valid_614551
  var valid_614552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614552 = validateParameter(valid_614552, JString, required = false,
                                 default = nil)
  if valid_614552 != nil:
    section.add "X-Amz-Content-Sha256", valid_614552
  var valid_614553 = header.getOrDefault("X-Amz-Date")
  valid_614553 = validateParameter(valid_614553, JString, required = false,
                                 default = nil)
  if valid_614553 != nil:
    section.add "X-Amz-Date", valid_614553
  var valid_614554 = header.getOrDefault("X-Amz-Credential")
  valid_614554 = validateParameter(valid_614554, JString, required = false,
                                 default = nil)
  if valid_614554 != nil:
    section.add "X-Amz-Credential", valid_614554
  var valid_614555 = header.getOrDefault("X-Amz-Security-Token")
  valid_614555 = validateParameter(valid_614555, JString, required = false,
                                 default = nil)
  if valid_614555 != nil:
    section.add "X-Amz-Security-Token", valid_614555
  var valid_614556 = header.getOrDefault("X-Amz-Algorithm")
  valid_614556 = validateParameter(valid_614556, JString, required = false,
                                 default = nil)
  if valid_614556 != nil:
    section.add "X-Amz-Algorithm", valid_614556
  var valid_614557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614557 = validateParameter(valid_614557, JString, required = false,
                                 default = nil)
  if valid_614557 != nil:
    section.add "X-Amz-SignedHeaders", valid_614557
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614558: Call_GetDeleteServerCertificate_614545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_614558.validator(path, query, header, formData, body)
  let scheme = call_614558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614558.url(scheme.get, call_614558.host, call_614558.base,
                         call_614558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614558, url, valid)

proc call*(call_614559: Call_GetDeleteServerCertificate_614545;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614560 = newJObject()
  add(query_614560, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_614560, "Action", newJString(Action))
  add(query_614560, "Version", newJString(Version))
  result = call_614559.call(nil, query_614560, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_614545(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_614546, base: "/",
    url: url_GetDeleteServerCertificate_614547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_614594 = ref object of OpenApiRestCall_612658
proc url_PostDeleteServiceLinkedRole_614596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceLinkedRole_614595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614597 = query.getOrDefault("Action")
  valid_614597 = validateParameter(valid_614597, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_614597 != nil:
    section.add "Action", valid_614597
  var valid_614598 = query.getOrDefault("Version")
  valid_614598 = validateParameter(valid_614598, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614598 != nil:
    section.add "Version", valid_614598
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614599 = header.getOrDefault("X-Amz-Signature")
  valid_614599 = validateParameter(valid_614599, JString, required = false,
                                 default = nil)
  if valid_614599 != nil:
    section.add "X-Amz-Signature", valid_614599
  var valid_614600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614600 = validateParameter(valid_614600, JString, required = false,
                                 default = nil)
  if valid_614600 != nil:
    section.add "X-Amz-Content-Sha256", valid_614600
  var valid_614601 = header.getOrDefault("X-Amz-Date")
  valid_614601 = validateParameter(valid_614601, JString, required = false,
                                 default = nil)
  if valid_614601 != nil:
    section.add "X-Amz-Date", valid_614601
  var valid_614602 = header.getOrDefault("X-Amz-Credential")
  valid_614602 = validateParameter(valid_614602, JString, required = false,
                                 default = nil)
  if valid_614602 != nil:
    section.add "X-Amz-Credential", valid_614602
  var valid_614603 = header.getOrDefault("X-Amz-Security-Token")
  valid_614603 = validateParameter(valid_614603, JString, required = false,
                                 default = nil)
  if valid_614603 != nil:
    section.add "X-Amz-Security-Token", valid_614603
  var valid_614604 = header.getOrDefault("X-Amz-Algorithm")
  valid_614604 = validateParameter(valid_614604, JString, required = false,
                                 default = nil)
  if valid_614604 != nil:
    section.add "X-Amz-Algorithm", valid_614604
  var valid_614605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614605 = validateParameter(valid_614605, JString, required = false,
                                 default = nil)
  if valid_614605 != nil:
    section.add "X-Amz-SignedHeaders", valid_614605
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614606 = formData.getOrDefault("RoleName")
  valid_614606 = validateParameter(valid_614606, JString, required = true,
                                 default = nil)
  if valid_614606 != nil:
    section.add "RoleName", valid_614606
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614607: Call_PostDeleteServiceLinkedRole_614594; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614607.validator(path, query, header, formData, body)
  let scheme = call_614607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614607.url(scheme.get, call_614607.host, call_614607.base,
                         call_614607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614607, url, valid)

proc call*(call_614608: Call_PostDeleteServiceLinkedRole_614594; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614609 = newJObject()
  var formData_614610 = newJObject()
  add(formData_614610, "RoleName", newJString(RoleName))
  add(query_614609, "Action", newJString(Action))
  add(query_614609, "Version", newJString(Version))
  result = call_614608.call(nil, query_614609, nil, formData_614610, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_614594(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_614595, base: "/",
    url: url_PostDeleteServiceLinkedRole_614596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_614578 = ref object of OpenApiRestCall_612658
proc url_GetDeleteServiceLinkedRole_614580(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceLinkedRole_614579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_614581 = query.getOrDefault("RoleName")
  valid_614581 = validateParameter(valid_614581, JString, required = true,
                                 default = nil)
  if valid_614581 != nil:
    section.add "RoleName", valid_614581
  var valid_614582 = query.getOrDefault("Action")
  valid_614582 = validateParameter(valid_614582, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_614582 != nil:
    section.add "Action", valid_614582
  var valid_614583 = query.getOrDefault("Version")
  valid_614583 = validateParameter(valid_614583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614583 != nil:
    section.add "Version", valid_614583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614584 = header.getOrDefault("X-Amz-Signature")
  valid_614584 = validateParameter(valid_614584, JString, required = false,
                                 default = nil)
  if valid_614584 != nil:
    section.add "X-Amz-Signature", valid_614584
  var valid_614585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614585 = validateParameter(valid_614585, JString, required = false,
                                 default = nil)
  if valid_614585 != nil:
    section.add "X-Amz-Content-Sha256", valid_614585
  var valid_614586 = header.getOrDefault("X-Amz-Date")
  valid_614586 = validateParameter(valid_614586, JString, required = false,
                                 default = nil)
  if valid_614586 != nil:
    section.add "X-Amz-Date", valid_614586
  var valid_614587 = header.getOrDefault("X-Amz-Credential")
  valid_614587 = validateParameter(valid_614587, JString, required = false,
                                 default = nil)
  if valid_614587 != nil:
    section.add "X-Amz-Credential", valid_614587
  var valid_614588 = header.getOrDefault("X-Amz-Security-Token")
  valid_614588 = validateParameter(valid_614588, JString, required = false,
                                 default = nil)
  if valid_614588 != nil:
    section.add "X-Amz-Security-Token", valid_614588
  var valid_614589 = header.getOrDefault("X-Amz-Algorithm")
  valid_614589 = validateParameter(valid_614589, JString, required = false,
                                 default = nil)
  if valid_614589 != nil:
    section.add "X-Amz-Algorithm", valid_614589
  var valid_614590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614590 = validateParameter(valid_614590, JString, required = false,
                                 default = nil)
  if valid_614590 != nil:
    section.add "X-Amz-SignedHeaders", valid_614590
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614591: Call_GetDeleteServiceLinkedRole_614578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614591.validator(path, query, header, formData, body)
  let scheme = call_614591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614591.url(scheme.get, call_614591.host, call_614591.base,
                         call_614591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614591, url, valid)

proc call*(call_614592: Call_GetDeleteServiceLinkedRole_614578; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614593 = newJObject()
  add(query_614593, "RoleName", newJString(RoleName))
  add(query_614593, "Action", newJString(Action))
  add(query_614593, "Version", newJString(Version))
  result = call_614592.call(nil, query_614593, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_614578(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_614579, base: "/",
    url: url_GetDeleteServiceLinkedRole_614580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_614628 = ref object of OpenApiRestCall_612658
proc url_PostDeleteServiceSpecificCredential_614630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteServiceSpecificCredential_614629(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614631 = query.getOrDefault("Action")
  valid_614631 = validateParameter(valid_614631, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_614631 != nil:
    section.add "Action", valid_614631
  var valid_614632 = query.getOrDefault("Version")
  valid_614632 = validateParameter(valid_614632, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614632 != nil:
    section.add "Version", valid_614632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614633 = header.getOrDefault("X-Amz-Signature")
  valid_614633 = validateParameter(valid_614633, JString, required = false,
                                 default = nil)
  if valid_614633 != nil:
    section.add "X-Amz-Signature", valid_614633
  var valid_614634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614634 = validateParameter(valid_614634, JString, required = false,
                                 default = nil)
  if valid_614634 != nil:
    section.add "X-Amz-Content-Sha256", valid_614634
  var valid_614635 = header.getOrDefault("X-Amz-Date")
  valid_614635 = validateParameter(valid_614635, JString, required = false,
                                 default = nil)
  if valid_614635 != nil:
    section.add "X-Amz-Date", valid_614635
  var valid_614636 = header.getOrDefault("X-Amz-Credential")
  valid_614636 = validateParameter(valid_614636, JString, required = false,
                                 default = nil)
  if valid_614636 != nil:
    section.add "X-Amz-Credential", valid_614636
  var valid_614637 = header.getOrDefault("X-Amz-Security-Token")
  valid_614637 = validateParameter(valid_614637, JString, required = false,
                                 default = nil)
  if valid_614637 != nil:
    section.add "X-Amz-Security-Token", valid_614637
  var valid_614638 = header.getOrDefault("X-Amz-Algorithm")
  valid_614638 = validateParameter(valid_614638, JString, required = false,
                                 default = nil)
  if valid_614638 != nil:
    section.add "X-Amz-Algorithm", valid_614638
  var valid_614639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614639 = validateParameter(valid_614639, JString, required = false,
                                 default = nil)
  if valid_614639 != nil:
    section.add "X-Amz-SignedHeaders", valid_614639
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_614640 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_614640 = validateParameter(valid_614640, JString, required = true,
                                 default = nil)
  if valid_614640 != nil:
    section.add "ServiceSpecificCredentialId", valid_614640
  var valid_614641 = formData.getOrDefault("UserName")
  valid_614641 = validateParameter(valid_614641, JString, required = false,
                                 default = nil)
  if valid_614641 != nil:
    section.add "UserName", valid_614641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614642: Call_PostDeleteServiceSpecificCredential_614628;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_614642.validator(path, query, header, formData, body)
  let scheme = call_614642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614642.url(scheme.get, call_614642.host, call_614642.base,
                         call_614642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614642, url, valid)

proc call*(call_614643: Call_PostDeleteServiceSpecificCredential_614628;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614644 = newJObject()
  var formData_614645 = newJObject()
  add(formData_614645, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_614645, "UserName", newJString(UserName))
  add(query_614644, "Action", newJString(Action))
  add(query_614644, "Version", newJString(Version))
  result = call_614643.call(nil, query_614644, nil, formData_614645, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_614628(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_614629, base: "/",
    url: url_PostDeleteServiceSpecificCredential_614630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_614611 = ref object of OpenApiRestCall_612658
proc url_GetDeleteServiceSpecificCredential_614613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteServiceSpecificCredential_614612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614614 = query.getOrDefault("UserName")
  valid_614614 = validateParameter(valid_614614, JString, required = false,
                                 default = nil)
  if valid_614614 != nil:
    section.add "UserName", valid_614614
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_614615 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_614615 = validateParameter(valid_614615, JString, required = true,
                                 default = nil)
  if valid_614615 != nil:
    section.add "ServiceSpecificCredentialId", valid_614615
  var valid_614616 = query.getOrDefault("Action")
  valid_614616 = validateParameter(valid_614616, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_614616 != nil:
    section.add "Action", valid_614616
  var valid_614617 = query.getOrDefault("Version")
  valid_614617 = validateParameter(valid_614617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614617 != nil:
    section.add "Version", valid_614617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614618 = header.getOrDefault("X-Amz-Signature")
  valid_614618 = validateParameter(valid_614618, JString, required = false,
                                 default = nil)
  if valid_614618 != nil:
    section.add "X-Amz-Signature", valid_614618
  var valid_614619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614619 = validateParameter(valid_614619, JString, required = false,
                                 default = nil)
  if valid_614619 != nil:
    section.add "X-Amz-Content-Sha256", valid_614619
  var valid_614620 = header.getOrDefault("X-Amz-Date")
  valid_614620 = validateParameter(valid_614620, JString, required = false,
                                 default = nil)
  if valid_614620 != nil:
    section.add "X-Amz-Date", valid_614620
  var valid_614621 = header.getOrDefault("X-Amz-Credential")
  valid_614621 = validateParameter(valid_614621, JString, required = false,
                                 default = nil)
  if valid_614621 != nil:
    section.add "X-Amz-Credential", valid_614621
  var valid_614622 = header.getOrDefault("X-Amz-Security-Token")
  valid_614622 = validateParameter(valid_614622, JString, required = false,
                                 default = nil)
  if valid_614622 != nil:
    section.add "X-Amz-Security-Token", valid_614622
  var valid_614623 = header.getOrDefault("X-Amz-Algorithm")
  valid_614623 = validateParameter(valid_614623, JString, required = false,
                                 default = nil)
  if valid_614623 != nil:
    section.add "X-Amz-Algorithm", valid_614623
  var valid_614624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614624 = validateParameter(valid_614624, JString, required = false,
                                 default = nil)
  if valid_614624 != nil:
    section.add "X-Amz-SignedHeaders", valid_614624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614625: Call_GetDeleteServiceSpecificCredential_614611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_614625.validator(path, query, header, formData, body)
  let scheme = call_614625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614625.url(scheme.get, call_614625.host, call_614625.base,
                         call_614625.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614625, url, valid)

proc call*(call_614626: Call_GetDeleteServiceSpecificCredential_614611;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614627 = newJObject()
  add(query_614627, "UserName", newJString(UserName))
  add(query_614627, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_614627, "Action", newJString(Action))
  add(query_614627, "Version", newJString(Version))
  result = call_614626.call(nil, query_614627, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_614611(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_614612, base: "/",
    url: url_GetDeleteServiceSpecificCredential_614613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_614663 = ref object of OpenApiRestCall_612658
proc url_PostDeleteSigningCertificate_614665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSigningCertificate_614664(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614666 = query.getOrDefault("Action")
  valid_614666 = validateParameter(valid_614666, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_614666 != nil:
    section.add "Action", valid_614666
  var valid_614667 = query.getOrDefault("Version")
  valid_614667 = validateParameter(valid_614667, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614667 != nil:
    section.add "Version", valid_614667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614668 = header.getOrDefault("X-Amz-Signature")
  valid_614668 = validateParameter(valid_614668, JString, required = false,
                                 default = nil)
  if valid_614668 != nil:
    section.add "X-Amz-Signature", valid_614668
  var valid_614669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614669 = validateParameter(valid_614669, JString, required = false,
                                 default = nil)
  if valid_614669 != nil:
    section.add "X-Amz-Content-Sha256", valid_614669
  var valid_614670 = header.getOrDefault("X-Amz-Date")
  valid_614670 = validateParameter(valid_614670, JString, required = false,
                                 default = nil)
  if valid_614670 != nil:
    section.add "X-Amz-Date", valid_614670
  var valid_614671 = header.getOrDefault("X-Amz-Credential")
  valid_614671 = validateParameter(valid_614671, JString, required = false,
                                 default = nil)
  if valid_614671 != nil:
    section.add "X-Amz-Credential", valid_614671
  var valid_614672 = header.getOrDefault("X-Amz-Security-Token")
  valid_614672 = validateParameter(valid_614672, JString, required = false,
                                 default = nil)
  if valid_614672 != nil:
    section.add "X-Amz-Security-Token", valid_614672
  var valid_614673 = header.getOrDefault("X-Amz-Algorithm")
  valid_614673 = validateParameter(valid_614673, JString, required = false,
                                 default = nil)
  if valid_614673 != nil:
    section.add "X-Amz-Algorithm", valid_614673
  var valid_614674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614674 = validateParameter(valid_614674, JString, required = false,
                                 default = nil)
  if valid_614674 != nil:
    section.add "X-Amz-SignedHeaders", valid_614674
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_614675 = formData.getOrDefault("CertificateId")
  valid_614675 = validateParameter(valid_614675, JString, required = true,
                                 default = nil)
  if valid_614675 != nil:
    section.add "CertificateId", valid_614675
  var valid_614676 = formData.getOrDefault("UserName")
  valid_614676 = validateParameter(valid_614676, JString, required = false,
                                 default = nil)
  if valid_614676 != nil:
    section.add "UserName", valid_614676
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614677: Call_PostDeleteSigningCertificate_614663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_614677.validator(path, query, header, formData, body)
  let scheme = call_614677.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614677.url(scheme.get, call_614677.host, call_614677.base,
                         call_614677.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614677, url, valid)

proc call*(call_614678: Call_PostDeleteSigningCertificate_614663;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614679 = newJObject()
  var formData_614680 = newJObject()
  add(formData_614680, "CertificateId", newJString(CertificateId))
  add(formData_614680, "UserName", newJString(UserName))
  add(query_614679, "Action", newJString(Action))
  add(query_614679, "Version", newJString(Version))
  result = call_614678.call(nil, query_614679, nil, formData_614680, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_614663(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_614664, base: "/",
    url: url_PostDeleteSigningCertificate_614665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_614646 = ref object of OpenApiRestCall_612658
proc url_GetDeleteSigningCertificate_614648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSigningCertificate_614647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_614649 = query.getOrDefault("UserName")
  valid_614649 = validateParameter(valid_614649, JString, required = false,
                                 default = nil)
  if valid_614649 != nil:
    section.add "UserName", valid_614649
  var valid_614650 = query.getOrDefault("Action")
  valid_614650 = validateParameter(valid_614650, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_614650 != nil:
    section.add "Action", valid_614650
  var valid_614651 = query.getOrDefault("Version")
  valid_614651 = validateParameter(valid_614651, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614651 != nil:
    section.add "Version", valid_614651
  var valid_614652 = query.getOrDefault("CertificateId")
  valid_614652 = validateParameter(valid_614652, JString, required = true,
                                 default = nil)
  if valid_614652 != nil:
    section.add "CertificateId", valid_614652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614653 = header.getOrDefault("X-Amz-Signature")
  valid_614653 = validateParameter(valid_614653, JString, required = false,
                                 default = nil)
  if valid_614653 != nil:
    section.add "X-Amz-Signature", valid_614653
  var valid_614654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614654 = validateParameter(valid_614654, JString, required = false,
                                 default = nil)
  if valid_614654 != nil:
    section.add "X-Amz-Content-Sha256", valid_614654
  var valid_614655 = header.getOrDefault("X-Amz-Date")
  valid_614655 = validateParameter(valid_614655, JString, required = false,
                                 default = nil)
  if valid_614655 != nil:
    section.add "X-Amz-Date", valid_614655
  var valid_614656 = header.getOrDefault("X-Amz-Credential")
  valid_614656 = validateParameter(valid_614656, JString, required = false,
                                 default = nil)
  if valid_614656 != nil:
    section.add "X-Amz-Credential", valid_614656
  var valid_614657 = header.getOrDefault("X-Amz-Security-Token")
  valid_614657 = validateParameter(valid_614657, JString, required = false,
                                 default = nil)
  if valid_614657 != nil:
    section.add "X-Amz-Security-Token", valid_614657
  var valid_614658 = header.getOrDefault("X-Amz-Algorithm")
  valid_614658 = validateParameter(valid_614658, JString, required = false,
                                 default = nil)
  if valid_614658 != nil:
    section.add "X-Amz-Algorithm", valid_614658
  var valid_614659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614659 = validateParameter(valid_614659, JString, required = false,
                                 default = nil)
  if valid_614659 != nil:
    section.add "X-Amz-SignedHeaders", valid_614659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614660: Call_GetDeleteSigningCertificate_614646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_614660.validator(path, query, header, formData, body)
  let scheme = call_614660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614660.url(scheme.get, call_614660.host, call_614660.base,
                         call_614660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614660, url, valid)

proc call*(call_614661: Call_GetDeleteSigningCertificate_614646;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  var query_614662 = newJObject()
  add(query_614662, "UserName", newJString(UserName))
  add(query_614662, "Action", newJString(Action))
  add(query_614662, "Version", newJString(Version))
  add(query_614662, "CertificateId", newJString(CertificateId))
  result = call_614661.call(nil, query_614662, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_614646(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_614647, base: "/",
    url: url_GetDeleteSigningCertificate_614648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_614697 = ref object of OpenApiRestCall_612658
proc url_PostDeleteUser_614699(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUser_614698(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614700 = query.getOrDefault("Action")
  valid_614700 = validateParameter(valid_614700, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_614700 != nil:
    section.add "Action", valid_614700
  var valid_614701 = query.getOrDefault("Version")
  valid_614701 = validateParameter(valid_614701, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614701 != nil:
    section.add "Version", valid_614701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614702 = header.getOrDefault("X-Amz-Signature")
  valid_614702 = validateParameter(valid_614702, JString, required = false,
                                 default = nil)
  if valid_614702 != nil:
    section.add "X-Amz-Signature", valid_614702
  var valid_614703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614703 = validateParameter(valid_614703, JString, required = false,
                                 default = nil)
  if valid_614703 != nil:
    section.add "X-Amz-Content-Sha256", valid_614703
  var valid_614704 = header.getOrDefault("X-Amz-Date")
  valid_614704 = validateParameter(valid_614704, JString, required = false,
                                 default = nil)
  if valid_614704 != nil:
    section.add "X-Amz-Date", valid_614704
  var valid_614705 = header.getOrDefault("X-Amz-Credential")
  valid_614705 = validateParameter(valid_614705, JString, required = false,
                                 default = nil)
  if valid_614705 != nil:
    section.add "X-Amz-Credential", valid_614705
  var valid_614706 = header.getOrDefault("X-Amz-Security-Token")
  valid_614706 = validateParameter(valid_614706, JString, required = false,
                                 default = nil)
  if valid_614706 != nil:
    section.add "X-Amz-Security-Token", valid_614706
  var valid_614707 = header.getOrDefault("X-Amz-Algorithm")
  valid_614707 = validateParameter(valid_614707, JString, required = false,
                                 default = nil)
  if valid_614707 != nil:
    section.add "X-Amz-Algorithm", valid_614707
  var valid_614708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614708 = validateParameter(valid_614708, JString, required = false,
                                 default = nil)
  if valid_614708 != nil:
    section.add "X-Amz-SignedHeaders", valid_614708
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614709 = formData.getOrDefault("UserName")
  valid_614709 = validateParameter(valid_614709, JString, required = true,
                                 default = nil)
  if valid_614709 != nil:
    section.add "UserName", valid_614709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614710: Call_PostDeleteUser_614697; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_614710.validator(path, query, header, formData, body)
  let scheme = call_614710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614710.url(scheme.get, call_614710.host, call_614710.base,
                         call_614710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614710, url, valid)

proc call*(call_614711: Call_PostDeleteUser_614697; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614712 = newJObject()
  var formData_614713 = newJObject()
  add(formData_614713, "UserName", newJString(UserName))
  add(query_614712, "Action", newJString(Action))
  add(query_614712, "Version", newJString(Version))
  result = call_614711.call(nil, query_614712, nil, formData_614713, nil)

var postDeleteUser* = Call_PostDeleteUser_614697(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_614698,
    base: "/", url: url_PostDeleteUser_614699, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_614681 = ref object of OpenApiRestCall_612658
proc url_GetDeleteUser_614683(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUser_614682(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614684 = query.getOrDefault("UserName")
  valid_614684 = validateParameter(valid_614684, JString, required = true,
                                 default = nil)
  if valid_614684 != nil:
    section.add "UserName", valid_614684
  var valid_614685 = query.getOrDefault("Action")
  valid_614685 = validateParameter(valid_614685, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_614685 != nil:
    section.add "Action", valid_614685
  var valid_614686 = query.getOrDefault("Version")
  valid_614686 = validateParameter(valid_614686, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614686 != nil:
    section.add "Version", valid_614686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614687 = header.getOrDefault("X-Amz-Signature")
  valid_614687 = validateParameter(valid_614687, JString, required = false,
                                 default = nil)
  if valid_614687 != nil:
    section.add "X-Amz-Signature", valid_614687
  var valid_614688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614688 = validateParameter(valid_614688, JString, required = false,
                                 default = nil)
  if valid_614688 != nil:
    section.add "X-Amz-Content-Sha256", valid_614688
  var valid_614689 = header.getOrDefault("X-Amz-Date")
  valid_614689 = validateParameter(valid_614689, JString, required = false,
                                 default = nil)
  if valid_614689 != nil:
    section.add "X-Amz-Date", valid_614689
  var valid_614690 = header.getOrDefault("X-Amz-Credential")
  valid_614690 = validateParameter(valid_614690, JString, required = false,
                                 default = nil)
  if valid_614690 != nil:
    section.add "X-Amz-Credential", valid_614690
  var valid_614691 = header.getOrDefault("X-Amz-Security-Token")
  valid_614691 = validateParameter(valid_614691, JString, required = false,
                                 default = nil)
  if valid_614691 != nil:
    section.add "X-Amz-Security-Token", valid_614691
  var valid_614692 = header.getOrDefault("X-Amz-Algorithm")
  valid_614692 = validateParameter(valid_614692, JString, required = false,
                                 default = nil)
  if valid_614692 != nil:
    section.add "X-Amz-Algorithm", valid_614692
  var valid_614693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614693 = validateParameter(valid_614693, JString, required = false,
                                 default = nil)
  if valid_614693 != nil:
    section.add "X-Amz-SignedHeaders", valid_614693
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614694: Call_GetDeleteUser_614681; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_614694.validator(path, query, header, formData, body)
  let scheme = call_614694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614694.url(scheme.get, call_614694.host, call_614694.base,
                         call_614694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614694, url, valid)

proc call*(call_614695: Call_GetDeleteUser_614681; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614696 = newJObject()
  add(query_614696, "UserName", newJString(UserName))
  add(query_614696, "Action", newJString(Action))
  add(query_614696, "Version", newJString(Version))
  result = call_614695.call(nil, query_614696, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_614681(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_614682,
    base: "/", url: url_GetDeleteUser_614683, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_614730 = ref object of OpenApiRestCall_612658
proc url_PostDeleteUserPermissionsBoundary_614732(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPermissionsBoundary_614731(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614733 = query.getOrDefault("Action")
  valid_614733 = validateParameter(valid_614733, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_614733 != nil:
    section.add "Action", valid_614733
  var valid_614734 = query.getOrDefault("Version")
  valid_614734 = validateParameter(valid_614734, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614734 != nil:
    section.add "Version", valid_614734
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614735 = header.getOrDefault("X-Amz-Signature")
  valid_614735 = validateParameter(valid_614735, JString, required = false,
                                 default = nil)
  if valid_614735 != nil:
    section.add "X-Amz-Signature", valid_614735
  var valid_614736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614736 = validateParameter(valid_614736, JString, required = false,
                                 default = nil)
  if valid_614736 != nil:
    section.add "X-Amz-Content-Sha256", valid_614736
  var valid_614737 = header.getOrDefault("X-Amz-Date")
  valid_614737 = validateParameter(valid_614737, JString, required = false,
                                 default = nil)
  if valid_614737 != nil:
    section.add "X-Amz-Date", valid_614737
  var valid_614738 = header.getOrDefault("X-Amz-Credential")
  valid_614738 = validateParameter(valid_614738, JString, required = false,
                                 default = nil)
  if valid_614738 != nil:
    section.add "X-Amz-Credential", valid_614738
  var valid_614739 = header.getOrDefault("X-Amz-Security-Token")
  valid_614739 = validateParameter(valid_614739, JString, required = false,
                                 default = nil)
  if valid_614739 != nil:
    section.add "X-Amz-Security-Token", valid_614739
  var valid_614740 = header.getOrDefault("X-Amz-Algorithm")
  valid_614740 = validateParameter(valid_614740, JString, required = false,
                                 default = nil)
  if valid_614740 != nil:
    section.add "X-Amz-Algorithm", valid_614740
  var valid_614741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614741 = validateParameter(valid_614741, JString, required = false,
                                 default = nil)
  if valid_614741 != nil:
    section.add "X-Amz-SignedHeaders", valid_614741
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614742 = formData.getOrDefault("UserName")
  valid_614742 = validateParameter(valid_614742, JString, required = true,
                                 default = nil)
  if valid_614742 != nil:
    section.add "UserName", valid_614742
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614743: Call_PostDeleteUserPermissionsBoundary_614730;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_614743.validator(path, query, header, formData, body)
  let scheme = call_614743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614743.url(scheme.get, call_614743.host, call_614743.base,
                         call_614743.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614743, url, valid)

proc call*(call_614744: Call_PostDeleteUserPermissionsBoundary_614730;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614745 = newJObject()
  var formData_614746 = newJObject()
  add(formData_614746, "UserName", newJString(UserName))
  add(query_614745, "Action", newJString(Action))
  add(query_614745, "Version", newJString(Version))
  result = call_614744.call(nil, query_614745, nil, formData_614746, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_614730(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_614731, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_614732,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_614714 = ref object of OpenApiRestCall_612658
proc url_GetDeleteUserPermissionsBoundary_614716(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPermissionsBoundary_614715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614717 = query.getOrDefault("UserName")
  valid_614717 = validateParameter(valid_614717, JString, required = true,
                                 default = nil)
  if valid_614717 != nil:
    section.add "UserName", valid_614717
  var valid_614718 = query.getOrDefault("Action")
  valid_614718 = validateParameter(valid_614718, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_614718 != nil:
    section.add "Action", valid_614718
  var valid_614719 = query.getOrDefault("Version")
  valid_614719 = validateParameter(valid_614719, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614719 != nil:
    section.add "Version", valid_614719
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614720 = header.getOrDefault("X-Amz-Signature")
  valid_614720 = validateParameter(valid_614720, JString, required = false,
                                 default = nil)
  if valid_614720 != nil:
    section.add "X-Amz-Signature", valid_614720
  var valid_614721 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614721 = validateParameter(valid_614721, JString, required = false,
                                 default = nil)
  if valid_614721 != nil:
    section.add "X-Amz-Content-Sha256", valid_614721
  var valid_614722 = header.getOrDefault("X-Amz-Date")
  valid_614722 = validateParameter(valid_614722, JString, required = false,
                                 default = nil)
  if valid_614722 != nil:
    section.add "X-Amz-Date", valid_614722
  var valid_614723 = header.getOrDefault("X-Amz-Credential")
  valid_614723 = validateParameter(valid_614723, JString, required = false,
                                 default = nil)
  if valid_614723 != nil:
    section.add "X-Amz-Credential", valid_614723
  var valid_614724 = header.getOrDefault("X-Amz-Security-Token")
  valid_614724 = validateParameter(valid_614724, JString, required = false,
                                 default = nil)
  if valid_614724 != nil:
    section.add "X-Amz-Security-Token", valid_614724
  var valid_614725 = header.getOrDefault("X-Amz-Algorithm")
  valid_614725 = validateParameter(valid_614725, JString, required = false,
                                 default = nil)
  if valid_614725 != nil:
    section.add "X-Amz-Algorithm", valid_614725
  var valid_614726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614726 = validateParameter(valid_614726, JString, required = false,
                                 default = nil)
  if valid_614726 != nil:
    section.add "X-Amz-SignedHeaders", valid_614726
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614727: Call_GetDeleteUserPermissionsBoundary_614714;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_614727.validator(path, query, header, formData, body)
  let scheme = call_614727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614727.url(scheme.get, call_614727.host, call_614727.base,
                         call_614727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614727, url, valid)

proc call*(call_614728: Call_GetDeleteUserPermissionsBoundary_614714;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614729 = newJObject()
  add(query_614729, "UserName", newJString(UserName))
  add(query_614729, "Action", newJString(Action))
  add(query_614729, "Version", newJString(Version))
  result = call_614728.call(nil, query_614729, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_614714(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_614715, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_614716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_614764 = ref object of OpenApiRestCall_612658
proc url_PostDeleteUserPolicy_614766(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteUserPolicy_614765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614767 = query.getOrDefault("Action")
  valid_614767 = validateParameter(valid_614767, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_614767 != nil:
    section.add "Action", valid_614767
  var valid_614768 = query.getOrDefault("Version")
  valid_614768 = validateParameter(valid_614768, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614768 != nil:
    section.add "Version", valid_614768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614769 = header.getOrDefault("X-Amz-Signature")
  valid_614769 = validateParameter(valid_614769, JString, required = false,
                                 default = nil)
  if valid_614769 != nil:
    section.add "X-Amz-Signature", valid_614769
  var valid_614770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614770 = validateParameter(valid_614770, JString, required = false,
                                 default = nil)
  if valid_614770 != nil:
    section.add "X-Amz-Content-Sha256", valid_614770
  var valid_614771 = header.getOrDefault("X-Amz-Date")
  valid_614771 = validateParameter(valid_614771, JString, required = false,
                                 default = nil)
  if valid_614771 != nil:
    section.add "X-Amz-Date", valid_614771
  var valid_614772 = header.getOrDefault("X-Amz-Credential")
  valid_614772 = validateParameter(valid_614772, JString, required = false,
                                 default = nil)
  if valid_614772 != nil:
    section.add "X-Amz-Credential", valid_614772
  var valid_614773 = header.getOrDefault("X-Amz-Security-Token")
  valid_614773 = validateParameter(valid_614773, JString, required = false,
                                 default = nil)
  if valid_614773 != nil:
    section.add "X-Amz-Security-Token", valid_614773
  var valid_614774 = header.getOrDefault("X-Amz-Algorithm")
  valid_614774 = validateParameter(valid_614774, JString, required = false,
                                 default = nil)
  if valid_614774 != nil:
    section.add "X-Amz-Algorithm", valid_614774
  var valid_614775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614775 = validateParameter(valid_614775, JString, required = false,
                                 default = nil)
  if valid_614775 != nil:
    section.add "X-Amz-SignedHeaders", valid_614775
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_614776 = formData.getOrDefault("UserName")
  valid_614776 = validateParameter(valid_614776, JString, required = true,
                                 default = nil)
  if valid_614776 != nil:
    section.add "UserName", valid_614776
  var valid_614777 = formData.getOrDefault("PolicyName")
  valid_614777 = validateParameter(valid_614777, JString, required = true,
                                 default = nil)
  if valid_614777 != nil:
    section.add "PolicyName", valid_614777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614778: Call_PostDeleteUserPolicy_614764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614778.validator(path, query, header, formData, body)
  let scheme = call_614778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614778.url(scheme.get, call_614778.host, call_614778.base,
                         call_614778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614778, url, valid)

proc call*(call_614779: Call_PostDeleteUserPolicy_614764; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_614780 = newJObject()
  var formData_614781 = newJObject()
  add(formData_614781, "UserName", newJString(UserName))
  add(query_614780, "Action", newJString(Action))
  add(query_614780, "Version", newJString(Version))
  add(formData_614781, "PolicyName", newJString(PolicyName))
  result = call_614779.call(nil, query_614780, nil, formData_614781, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_614764(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_614765, base: "/",
    url: url_PostDeleteUserPolicy_614766, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_614747 = ref object of OpenApiRestCall_612658
proc url_GetDeleteUserPolicy_614749(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteUserPolicy_614748(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614750 = query.getOrDefault("UserName")
  valid_614750 = validateParameter(valid_614750, JString, required = true,
                                 default = nil)
  if valid_614750 != nil:
    section.add "UserName", valid_614750
  var valid_614751 = query.getOrDefault("PolicyName")
  valid_614751 = validateParameter(valid_614751, JString, required = true,
                                 default = nil)
  if valid_614751 != nil:
    section.add "PolicyName", valid_614751
  var valid_614752 = query.getOrDefault("Action")
  valid_614752 = validateParameter(valid_614752, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_614752 != nil:
    section.add "Action", valid_614752
  var valid_614753 = query.getOrDefault("Version")
  valid_614753 = validateParameter(valid_614753, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614753 != nil:
    section.add "Version", valid_614753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614754 = header.getOrDefault("X-Amz-Signature")
  valid_614754 = validateParameter(valid_614754, JString, required = false,
                                 default = nil)
  if valid_614754 != nil:
    section.add "X-Amz-Signature", valid_614754
  var valid_614755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614755 = validateParameter(valid_614755, JString, required = false,
                                 default = nil)
  if valid_614755 != nil:
    section.add "X-Amz-Content-Sha256", valid_614755
  var valid_614756 = header.getOrDefault("X-Amz-Date")
  valid_614756 = validateParameter(valid_614756, JString, required = false,
                                 default = nil)
  if valid_614756 != nil:
    section.add "X-Amz-Date", valid_614756
  var valid_614757 = header.getOrDefault("X-Amz-Credential")
  valid_614757 = validateParameter(valid_614757, JString, required = false,
                                 default = nil)
  if valid_614757 != nil:
    section.add "X-Amz-Credential", valid_614757
  var valid_614758 = header.getOrDefault("X-Amz-Security-Token")
  valid_614758 = validateParameter(valid_614758, JString, required = false,
                                 default = nil)
  if valid_614758 != nil:
    section.add "X-Amz-Security-Token", valid_614758
  var valid_614759 = header.getOrDefault("X-Amz-Algorithm")
  valid_614759 = validateParameter(valid_614759, JString, required = false,
                                 default = nil)
  if valid_614759 != nil:
    section.add "X-Amz-Algorithm", valid_614759
  var valid_614760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614760 = validateParameter(valid_614760, JString, required = false,
                                 default = nil)
  if valid_614760 != nil:
    section.add "X-Amz-SignedHeaders", valid_614760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614761: Call_GetDeleteUserPolicy_614747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614761.validator(path, query, header, formData, body)
  let scheme = call_614761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614761.url(scheme.get, call_614761.host, call_614761.base,
                         call_614761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614761, url, valid)

proc call*(call_614762: Call_GetDeleteUserPolicy_614747; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614763 = newJObject()
  add(query_614763, "UserName", newJString(UserName))
  add(query_614763, "PolicyName", newJString(PolicyName))
  add(query_614763, "Action", newJString(Action))
  add(query_614763, "Version", newJString(Version))
  result = call_614762.call(nil, query_614763, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_614747(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_614748, base: "/",
    url: url_GetDeleteUserPolicy_614749, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_614798 = ref object of OpenApiRestCall_612658
proc url_PostDeleteVirtualMFADevice_614800(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteVirtualMFADevice_614799(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614801 = query.getOrDefault("Action")
  valid_614801 = validateParameter(valid_614801, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_614801 != nil:
    section.add "Action", valid_614801
  var valid_614802 = query.getOrDefault("Version")
  valid_614802 = validateParameter(valid_614802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614802 != nil:
    section.add "Version", valid_614802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614803 = header.getOrDefault("X-Amz-Signature")
  valid_614803 = validateParameter(valid_614803, JString, required = false,
                                 default = nil)
  if valid_614803 != nil:
    section.add "X-Amz-Signature", valid_614803
  var valid_614804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614804 = validateParameter(valid_614804, JString, required = false,
                                 default = nil)
  if valid_614804 != nil:
    section.add "X-Amz-Content-Sha256", valid_614804
  var valid_614805 = header.getOrDefault("X-Amz-Date")
  valid_614805 = validateParameter(valid_614805, JString, required = false,
                                 default = nil)
  if valid_614805 != nil:
    section.add "X-Amz-Date", valid_614805
  var valid_614806 = header.getOrDefault("X-Amz-Credential")
  valid_614806 = validateParameter(valid_614806, JString, required = false,
                                 default = nil)
  if valid_614806 != nil:
    section.add "X-Amz-Credential", valid_614806
  var valid_614807 = header.getOrDefault("X-Amz-Security-Token")
  valid_614807 = validateParameter(valid_614807, JString, required = false,
                                 default = nil)
  if valid_614807 != nil:
    section.add "X-Amz-Security-Token", valid_614807
  var valid_614808 = header.getOrDefault("X-Amz-Algorithm")
  valid_614808 = validateParameter(valid_614808, JString, required = false,
                                 default = nil)
  if valid_614808 != nil:
    section.add "X-Amz-Algorithm", valid_614808
  var valid_614809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614809 = validateParameter(valid_614809, JString, required = false,
                                 default = nil)
  if valid_614809 != nil:
    section.add "X-Amz-SignedHeaders", valid_614809
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_614810 = formData.getOrDefault("SerialNumber")
  valid_614810 = validateParameter(valid_614810, JString, required = true,
                                 default = nil)
  if valid_614810 != nil:
    section.add "SerialNumber", valid_614810
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614811: Call_PostDeleteVirtualMFADevice_614798; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_614811.validator(path, query, header, formData, body)
  let scheme = call_614811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614811.url(scheme.get, call_614811.host, call_614811.base,
                         call_614811.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614811, url, valid)

proc call*(call_614812: Call_PostDeleteVirtualMFADevice_614798;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614813 = newJObject()
  var formData_614814 = newJObject()
  add(formData_614814, "SerialNumber", newJString(SerialNumber))
  add(query_614813, "Action", newJString(Action))
  add(query_614813, "Version", newJString(Version))
  result = call_614812.call(nil, query_614813, nil, formData_614814, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_614798(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_614799, base: "/",
    url: url_PostDeleteVirtualMFADevice_614800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_614782 = ref object of OpenApiRestCall_612658
proc url_GetDeleteVirtualMFADevice_614784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteVirtualMFADevice_614783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_614785 = query.getOrDefault("SerialNumber")
  valid_614785 = validateParameter(valid_614785, JString, required = true,
                                 default = nil)
  if valid_614785 != nil:
    section.add "SerialNumber", valid_614785
  var valid_614786 = query.getOrDefault("Action")
  valid_614786 = validateParameter(valid_614786, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_614786 != nil:
    section.add "Action", valid_614786
  var valid_614787 = query.getOrDefault("Version")
  valid_614787 = validateParameter(valid_614787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614787 != nil:
    section.add "Version", valid_614787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614788 = header.getOrDefault("X-Amz-Signature")
  valid_614788 = validateParameter(valid_614788, JString, required = false,
                                 default = nil)
  if valid_614788 != nil:
    section.add "X-Amz-Signature", valid_614788
  var valid_614789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614789 = validateParameter(valid_614789, JString, required = false,
                                 default = nil)
  if valid_614789 != nil:
    section.add "X-Amz-Content-Sha256", valid_614789
  var valid_614790 = header.getOrDefault("X-Amz-Date")
  valid_614790 = validateParameter(valid_614790, JString, required = false,
                                 default = nil)
  if valid_614790 != nil:
    section.add "X-Amz-Date", valid_614790
  var valid_614791 = header.getOrDefault("X-Amz-Credential")
  valid_614791 = validateParameter(valid_614791, JString, required = false,
                                 default = nil)
  if valid_614791 != nil:
    section.add "X-Amz-Credential", valid_614791
  var valid_614792 = header.getOrDefault("X-Amz-Security-Token")
  valid_614792 = validateParameter(valid_614792, JString, required = false,
                                 default = nil)
  if valid_614792 != nil:
    section.add "X-Amz-Security-Token", valid_614792
  var valid_614793 = header.getOrDefault("X-Amz-Algorithm")
  valid_614793 = validateParameter(valid_614793, JString, required = false,
                                 default = nil)
  if valid_614793 != nil:
    section.add "X-Amz-Algorithm", valid_614793
  var valid_614794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614794 = validateParameter(valid_614794, JString, required = false,
                                 default = nil)
  if valid_614794 != nil:
    section.add "X-Amz-SignedHeaders", valid_614794
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614795: Call_GetDeleteVirtualMFADevice_614782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_614795.validator(path, query, header, formData, body)
  let scheme = call_614795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614795.url(scheme.get, call_614795.host, call_614795.base,
                         call_614795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614795, url, valid)

proc call*(call_614796: Call_GetDeleteVirtualMFADevice_614782;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614797 = newJObject()
  add(query_614797, "SerialNumber", newJString(SerialNumber))
  add(query_614797, "Action", newJString(Action))
  add(query_614797, "Version", newJString(Version))
  result = call_614796.call(nil, query_614797, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_614782(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_614783, base: "/",
    url: url_GetDeleteVirtualMFADevice_614784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_614832 = ref object of OpenApiRestCall_612658
proc url_PostDetachGroupPolicy_614834(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachGroupPolicy_614833(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614835 = query.getOrDefault("Action")
  valid_614835 = validateParameter(valid_614835, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_614835 != nil:
    section.add "Action", valid_614835
  var valid_614836 = query.getOrDefault("Version")
  valid_614836 = validateParameter(valid_614836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614836 != nil:
    section.add "Version", valid_614836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614837 = header.getOrDefault("X-Amz-Signature")
  valid_614837 = validateParameter(valid_614837, JString, required = false,
                                 default = nil)
  if valid_614837 != nil:
    section.add "X-Amz-Signature", valid_614837
  var valid_614838 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614838 = validateParameter(valid_614838, JString, required = false,
                                 default = nil)
  if valid_614838 != nil:
    section.add "X-Amz-Content-Sha256", valid_614838
  var valid_614839 = header.getOrDefault("X-Amz-Date")
  valid_614839 = validateParameter(valid_614839, JString, required = false,
                                 default = nil)
  if valid_614839 != nil:
    section.add "X-Amz-Date", valid_614839
  var valid_614840 = header.getOrDefault("X-Amz-Credential")
  valid_614840 = validateParameter(valid_614840, JString, required = false,
                                 default = nil)
  if valid_614840 != nil:
    section.add "X-Amz-Credential", valid_614840
  var valid_614841 = header.getOrDefault("X-Amz-Security-Token")
  valid_614841 = validateParameter(valid_614841, JString, required = false,
                                 default = nil)
  if valid_614841 != nil:
    section.add "X-Amz-Security-Token", valid_614841
  var valid_614842 = header.getOrDefault("X-Amz-Algorithm")
  valid_614842 = validateParameter(valid_614842, JString, required = false,
                                 default = nil)
  if valid_614842 != nil:
    section.add "X-Amz-Algorithm", valid_614842
  var valid_614843 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614843 = validateParameter(valid_614843, JString, required = false,
                                 default = nil)
  if valid_614843 != nil:
    section.add "X-Amz-SignedHeaders", valid_614843
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_614844 = formData.getOrDefault("GroupName")
  valid_614844 = validateParameter(valid_614844, JString, required = true,
                                 default = nil)
  if valid_614844 != nil:
    section.add "GroupName", valid_614844
  var valid_614845 = formData.getOrDefault("PolicyArn")
  valid_614845 = validateParameter(valid_614845, JString, required = true,
                                 default = nil)
  if valid_614845 != nil:
    section.add "PolicyArn", valid_614845
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614846: Call_PostDetachGroupPolicy_614832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614846.validator(path, query, header, formData, body)
  let scheme = call_614846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614846.url(scheme.get, call_614846.host, call_614846.base,
                         call_614846.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614846, url, valid)

proc call*(call_614847: Call_PostDetachGroupPolicy_614832; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614848 = newJObject()
  var formData_614849 = newJObject()
  add(formData_614849, "GroupName", newJString(GroupName))
  add(formData_614849, "PolicyArn", newJString(PolicyArn))
  add(query_614848, "Action", newJString(Action))
  add(query_614848, "Version", newJString(Version))
  result = call_614847.call(nil, query_614848, nil, formData_614849, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_614832(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_614833, base: "/",
    url: url_PostDetachGroupPolicy_614834, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_614815 = ref object of OpenApiRestCall_612658
proc url_GetDetachGroupPolicy_614817(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachGroupPolicy_614816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_614818 = query.getOrDefault("GroupName")
  valid_614818 = validateParameter(valid_614818, JString, required = true,
                                 default = nil)
  if valid_614818 != nil:
    section.add "GroupName", valid_614818
  var valid_614819 = query.getOrDefault("PolicyArn")
  valid_614819 = validateParameter(valid_614819, JString, required = true,
                                 default = nil)
  if valid_614819 != nil:
    section.add "PolicyArn", valid_614819
  var valid_614820 = query.getOrDefault("Action")
  valid_614820 = validateParameter(valid_614820, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_614820 != nil:
    section.add "Action", valid_614820
  var valid_614821 = query.getOrDefault("Version")
  valid_614821 = validateParameter(valid_614821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614821 != nil:
    section.add "Version", valid_614821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614822 = header.getOrDefault("X-Amz-Signature")
  valid_614822 = validateParameter(valid_614822, JString, required = false,
                                 default = nil)
  if valid_614822 != nil:
    section.add "X-Amz-Signature", valid_614822
  var valid_614823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614823 = validateParameter(valid_614823, JString, required = false,
                                 default = nil)
  if valid_614823 != nil:
    section.add "X-Amz-Content-Sha256", valid_614823
  var valid_614824 = header.getOrDefault("X-Amz-Date")
  valid_614824 = validateParameter(valid_614824, JString, required = false,
                                 default = nil)
  if valid_614824 != nil:
    section.add "X-Amz-Date", valid_614824
  var valid_614825 = header.getOrDefault("X-Amz-Credential")
  valid_614825 = validateParameter(valid_614825, JString, required = false,
                                 default = nil)
  if valid_614825 != nil:
    section.add "X-Amz-Credential", valid_614825
  var valid_614826 = header.getOrDefault("X-Amz-Security-Token")
  valid_614826 = validateParameter(valid_614826, JString, required = false,
                                 default = nil)
  if valid_614826 != nil:
    section.add "X-Amz-Security-Token", valid_614826
  var valid_614827 = header.getOrDefault("X-Amz-Algorithm")
  valid_614827 = validateParameter(valid_614827, JString, required = false,
                                 default = nil)
  if valid_614827 != nil:
    section.add "X-Amz-Algorithm", valid_614827
  var valid_614828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614828 = validateParameter(valid_614828, JString, required = false,
                                 default = nil)
  if valid_614828 != nil:
    section.add "X-Amz-SignedHeaders", valid_614828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614829: Call_GetDetachGroupPolicy_614815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614829.validator(path, query, header, formData, body)
  let scheme = call_614829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614829.url(scheme.get, call_614829.host, call_614829.base,
                         call_614829.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614829, url, valid)

proc call*(call_614830: Call_GetDetachGroupPolicy_614815; GroupName: string;
          PolicyArn: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614831 = newJObject()
  add(query_614831, "GroupName", newJString(GroupName))
  add(query_614831, "PolicyArn", newJString(PolicyArn))
  add(query_614831, "Action", newJString(Action))
  add(query_614831, "Version", newJString(Version))
  result = call_614830.call(nil, query_614831, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_614815(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_614816, base: "/",
    url: url_GetDetachGroupPolicy_614817, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_614867 = ref object of OpenApiRestCall_612658
proc url_PostDetachRolePolicy_614869(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachRolePolicy_614868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614870 = query.getOrDefault("Action")
  valid_614870 = validateParameter(valid_614870, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_614870 != nil:
    section.add "Action", valid_614870
  var valid_614871 = query.getOrDefault("Version")
  valid_614871 = validateParameter(valid_614871, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614871 != nil:
    section.add "Version", valid_614871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614872 = header.getOrDefault("X-Amz-Signature")
  valid_614872 = validateParameter(valid_614872, JString, required = false,
                                 default = nil)
  if valid_614872 != nil:
    section.add "X-Amz-Signature", valid_614872
  var valid_614873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614873 = validateParameter(valid_614873, JString, required = false,
                                 default = nil)
  if valid_614873 != nil:
    section.add "X-Amz-Content-Sha256", valid_614873
  var valid_614874 = header.getOrDefault("X-Amz-Date")
  valid_614874 = validateParameter(valid_614874, JString, required = false,
                                 default = nil)
  if valid_614874 != nil:
    section.add "X-Amz-Date", valid_614874
  var valid_614875 = header.getOrDefault("X-Amz-Credential")
  valid_614875 = validateParameter(valid_614875, JString, required = false,
                                 default = nil)
  if valid_614875 != nil:
    section.add "X-Amz-Credential", valid_614875
  var valid_614876 = header.getOrDefault("X-Amz-Security-Token")
  valid_614876 = validateParameter(valid_614876, JString, required = false,
                                 default = nil)
  if valid_614876 != nil:
    section.add "X-Amz-Security-Token", valid_614876
  var valid_614877 = header.getOrDefault("X-Amz-Algorithm")
  valid_614877 = validateParameter(valid_614877, JString, required = false,
                                 default = nil)
  if valid_614877 != nil:
    section.add "X-Amz-Algorithm", valid_614877
  var valid_614878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614878 = validateParameter(valid_614878, JString, required = false,
                                 default = nil)
  if valid_614878 != nil:
    section.add "X-Amz-SignedHeaders", valid_614878
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_614879 = formData.getOrDefault("RoleName")
  valid_614879 = validateParameter(valid_614879, JString, required = true,
                                 default = nil)
  if valid_614879 != nil:
    section.add "RoleName", valid_614879
  var valid_614880 = formData.getOrDefault("PolicyArn")
  valid_614880 = validateParameter(valid_614880, JString, required = true,
                                 default = nil)
  if valid_614880 != nil:
    section.add "PolicyArn", valid_614880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614881: Call_PostDetachRolePolicy_614867; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614881.validator(path, query, header, formData, body)
  let scheme = call_614881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614881.url(scheme.get, call_614881.host, call_614881.base,
                         call_614881.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614881, url, valid)

proc call*(call_614882: Call_PostDetachRolePolicy_614867; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614883 = newJObject()
  var formData_614884 = newJObject()
  add(formData_614884, "RoleName", newJString(RoleName))
  add(formData_614884, "PolicyArn", newJString(PolicyArn))
  add(query_614883, "Action", newJString(Action))
  add(query_614883, "Version", newJString(Version))
  result = call_614882.call(nil, query_614883, nil, formData_614884, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_614867(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_614868, base: "/",
    url: url_PostDetachRolePolicy_614869, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_614850 = ref object of OpenApiRestCall_612658
proc url_GetDetachRolePolicy_614852(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachRolePolicy_614851(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_614853 = query.getOrDefault("PolicyArn")
  valid_614853 = validateParameter(valid_614853, JString, required = true,
                                 default = nil)
  if valid_614853 != nil:
    section.add "PolicyArn", valid_614853
  var valid_614854 = query.getOrDefault("RoleName")
  valid_614854 = validateParameter(valid_614854, JString, required = true,
                                 default = nil)
  if valid_614854 != nil:
    section.add "RoleName", valid_614854
  var valid_614855 = query.getOrDefault("Action")
  valid_614855 = validateParameter(valid_614855, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_614855 != nil:
    section.add "Action", valid_614855
  var valid_614856 = query.getOrDefault("Version")
  valid_614856 = validateParameter(valid_614856, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614856 != nil:
    section.add "Version", valid_614856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614857 = header.getOrDefault("X-Amz-Signature")
  valid_614857 = validateParameter(valid_614857, JString, required = false,
                                 default = nil)
  if valid_614857 != nil:
    section.add "X-Amz-Signature", valid_614857
  var valid_614858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614858 = validateParameter(valid_614858, JString, required = false,
                                 default = nil)
  if valid_614858 != nil:
    section.add "X-Amz-Content-Sha256", valid_614858
  var valid_614859 = header.getOrDefault("X-Amz-Date")
  valid_614859 = validateParameter(valid_614859, JString, required = false,
                                 default = nil)
  if valid_614859 != nil:
    section.add "X-Amz-Date", valid_614859
  var valid_614860 = header.getOrDefault("X-Amz-Credential")
  valid_614860 = validateParameter(valid_614860, JString, required = false,
                                 default = nil)
  if valid_614860 != nil:
    section.add "X-Amz-Credential", valid_614860
  var valid_614861 = header.getOrDefault("X-Amz-Security-Token")
  valid_614861 = validateParameter(valid_614861, JString, required = false,
                                 default = nil)
  if valid_614861 != nil:
    section.add "X-Amz-Security-Token", valid_614861
  var valid_614862 = header.getOrDefault("X-Amz-Algorithm")
  valid_614862 = validateParameter(valid_614862, JString, required = false,
                                 default = nil)
  if valid_614862 != nil:
    section.add "X-Amz-Algorithm", valid_614862
  var valid_614863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614863 = validateParameter(valid_614863, JString, required = false,
                                 default = nil)
  if valid_614863 != nil:
    section.add "X-Amz-SignedHeaders", valid_614863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614864: Call_GetDetachRolePolicy_614850; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614864.validator(path, query, header, formData, body)
  let scheme = call_614864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614864.url(scheme.get, call_614864.host, call_614864.base,
                         call_614864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614864, url, valid)

proc call*(call_614865: Call_GetDetachRolePolicy_614850; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614866 = newJObject()
  add(query_614866, "PolicyArn", newJString(PolicyArn))
  add(query_614866, "RoleName", newJString(RoleName))
  add(query_614866, "Action", newJString(Action))
  add(query_614866, "Version", newJString(Version))
  result = call_614865.call(nil, query_614866, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_614850(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_614851, base: "/",
    url: url_GetDetachRolePolicy_614852, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_614902 = ref object of OpenApiRestCall_612658
proc url_PostDetachUserPolicy_614904(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDetachUserPolicy_614903(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614905 = query.getOrDefault("Action")
  valid_614905 = validateParameter(valid_614905, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_614905 != nil:
    section.add "Action", valid_614905
  var valid_614906 = query.getOrDefault("Version")
  valid_614906 = validateParameter(valid_614906, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614906 != nil:
    section.add "Version", valid_614906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614907 = header.getOrDefault("X-Amz-Signature")
  valid_614907 = validateParameter(valid_614907, JString, required = false,
                                 default = nil)
  if valid_614907 != nil:
    section.add "X-Amz-Signature", valid_614907
  var valid_614908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614908 = validateParameter(valid_614908, JString, required = false,
                                 default = nil)
  if valid_614908 != nil:
    section.add "X-Amz-Content-Sha256", valid_614908
  var valid_614909 = header.getOrDefault("X-Amz-Date")
  valid_614909 = validateParameter(valid_614909, JString, required = false,
                                 default = nil)
  if valid_614909 != nil:
    section.add "X-Amz-Date", valid_614909
  var valid_614910 = header.getOrDefault("X-Amz-Credential")
  valid_614910 = validateParameter(valid_614910, JString, required = false,
                                 default = nil)
  if valid_614910 != nil:
    section.add "X-Amz-Credential", valid_614910
  var valid_614911 = header.getOrDefault("X-Amz-Security-Token")
  valid_614911 = validateParameter(valid_614911, JString, required = false,
                                 default = nil)
  if valid_614911 != nil:
    section.add "X-Amz-Security-Token", valid_614911
  var valid_614912 = header.getOrDefault("X-Amz-Algorithm")
  valid_614912 = validateParameter(valid_614912, JString, required = false,
                                 default = nil)
  if valid_614912 != nil:
    section.add "X-Amz-Algorithm", valid_614912
  var valid_614913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614913 = validateParameter(valid_614913, JString, required = false,
                                 default = nil)
  if valid_614913 != nil:
    section.add "X-Amz-SignedHeaders", valid_614913
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_614914 = formData.getOrDefault("PolicyArn")
  valid_614914 = validateParameter(valid_614914, JString, required = true,
                                 default = nil)
  if valid_614914 != nil:
    section.add "PolicyArn", valid_614914
  var valid_614915 = formData.getOrDefault("UserName")
  valid_614915 = validateParameter(valid_614915, JString, required = true,
                                 default = nil)
  if valid_614915 != nil:
    section.add "UserName", valid_614915
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614916: Call_PostDetachUserPolicy_614902; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614916.validator(path, query, header, formData, body)
  let scheme = call_614916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614916.url(scheme.get, call_614916.host, call_614916.base,
                         call_614916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614916, url, valid)

proc call*(call_614917: Call_PostDetachUserPolicy_614902; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614918 = newJObject()
  var formData_614919 = newJObject()
  add(formData_614919, "PolicyArn", newJString(PolicyArn))
  add(formData_614919, "UserName", newJString(UserName))
  add(query_614918, "Action", newJString(Action))
  add(query_614918, "Version", newJString(Version))
  result = call_614917.call(nil, query_614918, nil, formData_614919, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_614902(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_614903, base: "/",
    url: url_PostDetachUserPolicy_614904, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_614885 = ref object of OpenApiRestCall_612658
proc url_GetDetachUserPolicy_614887(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDetachUserPolicy_614886(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614888 = query.getOrDefault("UserName")
  valid_614888 = validateParameter(valid_614888, JString, required = true,
                                 default = nil)
  if valid_614888 != nil:
    section.add "UserName", valid_614888
  var valid_614889 = query.getOrDefault("PolicyArn")
  valid_614889 = validateParameter(valid_614889, JString, required = true,
                                 default = nil)
  if valid_614889 != nil:
    section.add "PolicyArn", valid_614889
  var valid_614890 = query.getOrDefault("Action")
  valid_614890 = validateParameter(valid_614890, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_614890 != nil:
    section.add "Action", valid_614890
  var valid_614891 = query.getOrDefault("Version")
  valid_614891 = validateParameter(valid_614891, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614891 != nil:
    section.add "Version", valid_614891
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614892 = header.getOrDefault("X-Amz-Signature")
  valid_614892 = validateParameter(valid_614892, JString, required = false,
                                 default = nil)
  if valid_614892 != nil:
    section.add "X-Amz-Signature", valid_614892
  var valid_614893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614893 = validateParameter(valid_614893, JString, required = false,
                                 default = nil)
  if valid_614893 != nil:
    section.add "X-Amz-Content-Sha256", valid_614893
  var valid_614894 = header.getOrDefault("X-Amz-Date")
  valid_614894 = validateParameter(valid_614894, JString, required = false,
                                 default = nil)
  if valid_614894 != nil:
    section.add "X-Amz-Date", valid_614894
  var valid_614895 = header.getOrDefault("X-Amz-Credential")
  valid_614895 = validateParameter(valid_614895, JString, required = false,
                                 default = nil)
  if valid_614895 != nil:
    section.add "X-Amz-Credential", valid_614895
  var valid_614896 = header.getOrDefault("X-Amz-Security-Token")
  valid_614896 = validateParameter(valid_614896, JString, required = false,
                                 default = nil)
  if valid_614896 != nil:
    section.add "X-Amz-Security-Token", valid_614896
  var valid_614897 = header.getOrDefault("X-Amz-Algorithm")
  valid_614897 = validateParameter(valid_614897, JString, required = false,
                                 default = nil)
  if valid_614897 != nil:
    section.add "X-Amz-Algorithm", valid_614897
  var valid_614898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614898 = validateParameter(valid_614898, JString, required = false,
                                 default = nil)
  if valid_614898 != nil:
    section.add "X-Amz-SignedHeaders", valid_614898
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614899: Call_GetDetachUserPolicy_614885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_614899.validator(path, query, header, formData, body)
  let scheme = call_614899.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614899.url(scheme.get, call_614899.host, call_614899.base,
                         call_614899.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614899, url, valid)

proc call*(call_614900: Call_GetDetachUserPolicy_614885; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614901 = newJObject()
  add(query_614901, "UserName", newJString(UserName))
  add(query_614901, "PolicyArn", newJString(PolicyArn))
  add(query_614901, "Action", newJString(Action))
  add(query_614901, "Version", newJString(Version))
  result = call_614900.call(nil, query_614901, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_614885(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_614886, base: "/",
    url: url_GetDetachUserPolicy_614887, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_614939 = ref object of OpenApiRestCall_612658
proc url_PostEnableMFADevice_614941(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostEnableMFADevice_614940(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614942 = query.getOrDefault("Action")
  valid_614942 = validateParameter(valid_614942, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_614942 != nil:
    section.add "Action", valid_614942
  var valid_614943 = query.getOrDefault("Version")
  valid_614943 = validateParameter(valid_614943, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614943 != nil:
    section.add "Version", valid_614943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614944 = header.getOrDefault("X-Amz-Signature")
  valid_614944 = validateParameter(valid_614944, JString, required = false,
                                 default = nil)
  if valid_614944 != nil:
    section.add "X-Amz-Signature", valid_614944
  var valid_614945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614945 = validateParameter(valid_614945, JString, required = false,
                                 default = nil)
  if valid_614945 != nil:
    section.add "X-Amz-Content-Sha256", valid_614945
  var valid_614946 = header.getOrDefault("X-Amz-Date")
  valid_614946 = validateParameter(valid_614946, JString, required = false,
                                 default = nil)
  if valid_614946 != nil:
    section.add "X-Amz-Date", valid_614946
  var valid_614947 = header.getOrDefault("X-Amz-Credential")
  valid_614947 = validateParameter(valid_614947, JString, required = false,
                                 default = nil)
  if valid_614947 != nil:
    section.add "X-Amz-Credential", valid_614947
  var valid_614948 = header.getOrDefault("X-Amz-Security-Token")
  valid_614948 = validateParameter(valid_614948, JString, required = false,
                                 default = nil)
  if valid_614948 != nil:
    section.add "X-Amz-Security-Token", valid_614948
  var valid_614949 = header.getOrDefault("X-Amz-Algorithm")
  valid_614949 = validateParameter(valid_614949, JString, required = false,
                                 default = nil)
  if valid_614949 != nil:
    section.add "X-Amz-Algorithm", valid_614949
  var valid_614950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614950 = validateParameter(valid_614950, JString, required = false,
                                 default = nil)
  if valid_614950 != nil:
    section.add "X-Amz-SignedHeaders", valid_614950
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_614951 = formData.getOrDefault("AuthenticationCode2")
  valid_614951 = validateParameter(valid_614951, JString, required = true,
                                 default = nil)
  if valid_614951 != nil:
    section.add "AuthenticationCode2", valid_614951
  var valid_614952 = formData.getOrDefault("SerialNumber")
  valid_614952 = validateParameter(valid_614952, JString, required = true,
                                 default = nil)
  if valid_614952 != nil:
    section.add "SerialNumber", valid_614952
  var valid_614953 = formData.getOrDefault("UserName")
  valid_614953 = validateParameter(valid_614953, JString, required = true,
                                 default = nil)
  if valid_614953 != nil:
    section.add "UserName", valid_614953
  var valid_614954 = formData.getOrDefault("AuthenticationCode1")
  valid_614954 = validateParameter(valid_614954, JString, required = true,
                                 default = nil)
  if valid_614954 != nil:
    section.add "AuthenticationCode1", valid_614954
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614955: Call_PostEnableMFADevice_614939; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_614955.validator(path, query, header, formData, body)
  let scheme = call_614955.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614955.url(scheme.get, call_614955.host, call_614955.base,
                         call_614955.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614955, url, valid)

proc call*(call_614956: Call_PostEnableMFADevice_614939;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_614957 = newJObject()
  var formData_614958 = newJObject()
  add(formData_614958, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_614958, "SerialNumber", newJString(SerialNumber))
  add(formData_614958, "UserName", newJString(UserName))
  add(query_614957, "Action", newJString(Action))
  add(formData_614958, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_614957, "Version", newJString(Version))
  result = call_614956.call(nil, query_614957, nil, formData_614958, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_614939(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_614940, base: "/",
    url: url_PostEnableMFADevice_614941, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_614920 = ref object of OpenApiRestCall_612658
proc url_GetEnableMFADevice_614922(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetEnableMFADevice_614921(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_614923 = query.getOrDefault("UserName")
  valid_614923 = validateParameter(valid_614923, JString, required = true,
                                 default = nil)
  if valid_614923 != nil:
    section.add "UserName", valid_614923
  var valid_614924 = query.getOrDefault("AuthenticationCode1")
  valid_614924 = validateParameter(valid_614924, JString, required = true,
                                 default = nil)
  if valid_614924 != nil:
    section.add "AuthenticationCode1", valid_614924
  var valid_614925 = query.getOrDefault("AuthenticationCode2")
  valid_614925 = validateParameter(valid_614925, JString, required = true,
                                 default = nil)
  if valid_614925 != nil:
    section.add "AuthenticationCode2", valid_614925
  var valid_614926 = query.getOrDefault("SerialNumber")
  valid_614926 = validateParameter(valid_614926, JString, required = true,
                                 default = nil)
  if valid_614926 != nil:
    section.add "SerialNumber", valid_614926
  var valid_614927 = query.getOrDefault("Action")
  valid_614927 = validateParameter(valid_614927, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_614927 != nil:
    section.add "Action", valid_614927
  var valid_614928 = query.getOrDefault("Version")
  valid_614928 = validateParameter(valid_614928, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614928 != nil:
    section.add "Version", valid_614928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614929 = header.getOrDefault("X-Amz-Signature")
  valid_614929 = validateParameter(valid_614929, JString, required = false,
                                 default = nil)
  if valid_614929 != nil:
    section.add "X-Amz-Signature", valid_614929
  var valid_614930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614930 = validateParameter(valid_614930, JString, required = false,
                                 default = nil)
  if valid_614930 != nil:
    section.add "X-Amz-Content-Sha256", valid_614930
  var valid_614931 = header.getOrDefault("X-Amz-Date")
  valid_614931 = validateParameter(valid_614931, JString, required = false,
                                 default = nil)
  if valid_614931 != nil:
    section.add "X-Amz-Date", valid_614931
  var valid_614932 = header.getOrDefault("X-Amz-Credential")
  valid_614932 = validateParameter(valid_614932, JString, required = false,
                                 default = nil)
  if valid_614932 != nil:
    section.add "X-Amz-Credential", valid_614932
  var valid_614933 = header.getOrDefault("X-Amz-Security-Token")
  valid_614933 = validateParameter(valid_614933, JString, required = false,
                                 default = nil)
  if valid_614933 != nil:
    section.add "X-Amz-Security-Token", valid_614933
  var valid_614934 = header.getOrDefault("X-Amz-Algorithm")
  valid_614934 = validateParameter(valid_614934, JString, required = false,
                                 default = nil)
  if valid_614934 != nil:
    section.add "X-Amz-Algorithm", valid_614934
  var valid_614935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614935 = validateParameter(valid_614935, JString, required = false,
                                 default = nil)
  if valid_614935 != nil:
    section.add "X-Amz-SignedHeaders", valid_614935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614936: Call_GetEnableMFADevice_614920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_614936.validator(path, query, header, formData, body)
  let scheme = call_614936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614936.url(scheme.get, call_614936.host, call_614936.base,
                         call_614936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614936, url, valid)

proc call*(call_614937: Call_GetEnableMFADevice_614920; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614938 = newJObject()
  add(query_614938, "UserName", newJString(UserName))
  add(query_614938, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_614938, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_614938, "SerialNumber", newJString(SerialNumber))
  add(query_614938, "Action", newJString(Action))
  add(query_614938, "Version", newJString(Version))
  result = call_614937.call(nil, query_614938, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_614920(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_614921,
    base: "/", url: url_GetEnableMFADevice_614922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_614974 = ref object of OpenApiRestCall_612658
proc url_PostGenerateCredentialReport_614976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateCredentialReport_614975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614977 = query.getOrDefault("Action")
  valid_614977 = validateParameter(valid_614977, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_614977 != nil:
    section.add "Action", valid_614977
  var valid_614978 = query.getOrDefault("Version")
  valid_614978 = validateParameter(valid_614978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614978 != nil:
    section.add "Version", valid_614978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614979 = header.getOrDefault("X-Amz-Signature")
  valid_614979 = validateParameter(valid_614979, JString, required = false,
                                 default = nil)
  if valid_614979 != nil:
    section.add "X-Amz-Signature", valid_614979
  var valid_614980 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614980 = validateParameter(valid_614980, JString, required = false,
                                 default = nil)
  if valid_614980 != nil:
    section.add "X-Amz-Content-Sha256", valid_614980
  var valid_614981 = header.getOrDefault("X-Amz-Date")
  valid_614981 = validateParameter(valid_614981, JString, required = false,
                                 default = nil)
  if valid_614981 != nil:
    section.add "X-Amz-Date", valid_614981
  var valid_614982 = header.getOrDefault("X-Amz-Credential")
  valid_614982 = validateParameter(valid_614982, JString, required = false,
                                 default = nil)
  if valid_614982 != nil:
    section.add "X-Amz-Credential", valid_614982
  var valid_614983 = header.getOrDefault("X-Amz-Security-Token")
  valid_614983 = validateParameter(valid_614983, JString, required = false,
                                 default = nil)
  if valid_614983 != nil:
    section.add "X-Amz-Security-Token", valid_614983
  var valid_614984 = header.getOrDefault("X-Amz-Algorithm")
  valid_614984 = validateParameter(valid_614984, JString, required = false,
                                 default = nil)
  if valid_614984 != nil:
    section.add "X-Amz-Algorithm", valid_614984
  var valid_614985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614985 = validateParameter(valid_614985, JString, required = false,
                                 default = nil)
  if valid_614985 != nil:
    section.add "X-Amz-SignedHeaders", valid_614985
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614986: Call_PostGenerateCredentialReport_614974; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614986.validator(path, query, header, formData, body)
  let scheme = call_614986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614986.url(scheme.get, call_614986.host, call_614986.base,
                         call_614986.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614986, url, valid)

proc call*(call_614987: Call_PostGenerateCredentialReport_614974;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614988 = newJObject()
  add(query_614988, "Action", newJString(Action))
  add(query_614988, "Version", newJString(Version))
  result = call_614987.call(nil, query_614988, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_614974(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_614975, base: "/",
    url: url_PostGenerateCredentialReport_614976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_614959 = ref object of OpenApiRestCall_612658
proc url_GetGenerateCredentialReport_614961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateCredentialReport_614960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_614962 = query.getOrDefault("Action")
  valid_614962 = validateParameter(valid_614962, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_614962 != nil:
    section.add "Action", valid_614962
  var valid_614963 = query.getOrDefault("Version")
  valid_614963 = validateParameter(valid_614963, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614963 != nil:
    section.add "Version", valid_614963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614964 = header.getOrDefault("X-Amz-Signature")
  valid_614964 = validateParameter(valid_614964, JString, required = false,
                                 default = nil)
  if valid_614964 != nil:
    section.add "X-Amz-Signature", valid_614964
  var valid_614965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614965 = validateParameter(valid_614965, JString, required = false,
                                 default = nil)
  if valid_614965 != nil:
    section.add "X-Amz-Content-Sha256", valid_614965
  var valid_614966 = header.getOrDefault("X-Amz-Date")
  valid_614966 = validateParameter(valid_614966, JString, required = false,
                                 default = nil)
  if valid_614966 != nil:
    section.add "X-Amz-Date", valid_614966
  var valid_614967 = header.getOrDefault("X-Amz-Credential")
  valid_614967 = validateParameter(valid_614967, JString, required = false,
                                 default = nil)
  if valid_614967 != nil:
    section.add "X-Amz-Credential", valid_614967
  var valid_614968 = header.getOrDefault("X-Amz-Security-Token")
  valid_614968 = validateParameter(valid_614968, JString, required = false,
                                 default = nil)
  if valid_614968 != nil:
    section.add "X-Amz-Security-Token", valid_614968
  var valid_614969 = header.getOrDefault("X-Amz-Algorithm")
  valid_614969 = validateParameter(valid_614969, JString, required = false,
                                 default = nil)
  if valid_614969 != nil:
    section.add "X-Amz-Algorithm", valid_614969
  var valid_614970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_614970 = validateParameter(valid_614970, JString, required = false,
                                 default = nil)
  if valid_614970 != nil:
    section.add "X-Amz-SignedHeaders", valid_614970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_614971: Call_GetGenerateCredentialReport_614959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_614971.validator(path, query, header, formData, body)
  let scheme = call_614971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_614971.url(scheme.get, call_614971.host, call_614971.base,
                         call_614971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_614971, url, valid)

proc call*(call_614972: Call_GetGenerateCredentialReport_614959;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_614973 = newJObject()
  add(query_614973, "Action", newJString(Action))
  add(query_614973, "Version", newJString(Version))
  result = call_614972.call(nil, query_614973, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_614959(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_614960, base: "/",
    url: url_GetGenerateCredentialReport_614961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_615006 = ref object of OpenApiRestCall_612658
proc url_PostGenerateOrganizationsAccessReport_615008(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateOrganizationsAccessReport_615007(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615009 = query.getOrDefault("Action")
  valid_615009 = validateParameter(valid_615009, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_615009 != nil:
    section.add "Action", valid_615009
  var valid_615010 = query.getOrDefault("Version")
  valid_615010 = validateParameter(valid_615010, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615010 != nil:
    section.add "Version", valid_615010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615011 = header.getOrDefault("X-Amz-Signature")
  valid_615011 = validateParameter(valid_615011, JString, required = false,
                                 default = nil)
  if valid_615011 != nil:
    section.add "X-Amz-Signature", valid_615011
  var valid_615012 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615012 = validateParameter(valid_615012, JString, required = false,
                                 default = nil)
  if valid_615012 != nil:
    section.add "X-Amz-Content-Sha256", valid_615012
  var valid_615013 = header.getOrDefault("X-Amz-Date")
  valid_615013 = validateParameter(valid_615013, JString, required = false,
                                 default = nil)
  if valid_615013 != nil:
    section.add "X-Amz-Date", valid_615013
  var valid_615014 = header.getOrDefault("X-Amz-Credential")
  valid_615014 = validateParameter(valid_615014, JString, required = false,
                                 default = nil)
  if valid_615014 != nil:
    section.add "X-Amz-Credential", valid_615014
  var valid_615015 = header.getOrDefault("X-Amz-Security-Token")
  valid_615015 = validateParameter(valid_615015, JString, required = false,
                                 default = nil)
  if valid_615015 != nil:
    section.add "X-Amz-Security-Token", valid_615015
  var valid_615016 = header.getOrDefault("X-Amz-Algorithm")
  valid_615016 = validateParameter(valid_615016, JString, required = false,
                                 default = nil)
  if valid_615016 != nil:
    section.add "X-Amz-Algorithm", valid_615016
  var valid_615017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615017 = validateParameter(valid_615017, JString, required = false,
                                 default = nil)
  if valid_615017 != nil:
    section.add "X-Amz-SignedHeaders", valid_615017
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_615018 = formData.getOrDefault("OrganizationsPolicyId")
  valid_615018 = validateParameter(valid_615018, JString, required = false,
                                 default = nil)
  if valid_615018 != nil:
    section.add "OrganizationsPolicyId", valid_615018
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_615019 = formData.getOrDefault("EntityPath")
  valid_615019 = validateParameter(valid_615019, JString, required = true,
                                 default = nil)
  if valid_615019 != nil:
    section.add "EntityPath", valid_615019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615020: Call_PostGenerateOrganizationsAccessReport_615006;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615020.validator(path, query, header, formData, body)
  let scheme = call_615020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615020.url(scheme.get, call_615020.host, call_615020.base,
                         call_615020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615020, url, valid)

proc call*(call_615021: Call_PostGenerateOrganizationsAccessReport_615006;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  var query_615022 = newJObject()
  var formData_615023 = newJObject()
  add(formData_615023, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_615022, "Action", newJString(Action))
  add(query_615022, "Version", newJString(Version))
  add(formData_615023, "EntityPath", newJString(EntityPath))
  result = call_615021.call(nil, query_615022, nil, formData_615023, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_615006(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_615007, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_615008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_614989 = ref object of OpenApiRestCall_612658
proc url_GetGenerateOrganizationsAccessReport_614991(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateOrganizationsAccessReport_614990(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_614992 = query.getOrDefault("EntityPath")
  valid_614992 = validateParameter(valid_614992, JString, required = true,
                                 default = nil)
  if valid_614992 != nil:
    section.add "EntityPath", valid_614992
  var valid_614993 = query.getOrDefault("OrganizationsPolicyId")
  valid_614993 = validateParameter(valid_614993, JString, required = false,
                                 default = nil)
  if valid_614993 != nil:
    section.add "OrganizationsPolicyId", valid_614993
  var valid_614994 = query.getOrDefault("Action")
  valid_614994 = validateParameter(valid_614994, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_614994 != nil:
    section.add "Action", valid_614994
  var valid_614995 = query.getOrDefault("Version")
  valid_614995 = validateParameter(valid_614995, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_614995 != nil:
    section.add "Version", valid_614995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_614996 = header.getOrDefault("X-Amz-Signature")
  valid_614996 = validateParameter(valid_614996, JString, required = false,
                                 default = nil)
  if valid_614996 != nil:
    section.add "X-Amz-Signature", valid_614996
  var valid_614997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_614997 = validateParameter(valid_614997, JString, required = false,
                                 default = nil)
  if valid_614997 != nil:
    section.add "X-Amz-Content-Sha256", valid_614997
  var valid_614998 = header.getOrDefault("X-Amz-Date")
  valid_614998 = validateParameter(valid_614998, JString, required = false,
                                 default = nil)
  if valid_614998 != nil:
    section.add "X-Amz-Date", valid_614998
  var valid_614999 = header.getOrDefault("X-Amz-Credential")
  valid_614999 = validateParameter(valid_614999, JString, required = false,
                                 default = nil)
  if valid_614999 != nil:
    section.add "X-Amz-Credential", valid_614999
  var valid_615000 = header.getOrDefault("X-Amz-Security-Token")
  valid_615000 = validateParameter(valid_615000, JString, required = false,
                                 default = nil)
  if valid_615000 != nil:
    section.add "X-Amz-Security-Token", valid_615000
  var valid_615001 = header.getOrDefault("X-Amz-Algorithm")
  valid_615001 = validateParameter(valid_615001, JString, required = false,
                                 default = nil)
  if valid_615001 != nil:
    section.add "X-Amz-Algorithm", valid_615001
  var valid_615002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615002 = validateParameter(valid_615002, JString, required = false,
                                 default = nil)
  if valid_615002 != nil:
    section.add "X-Amz-SignedHeaders", valid_615002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615003: Call_GetGenerateOrganizationsAccessReport_614989;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615003.validator(path, query, header, formData, body)
  let scheme = call_615003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615003.url(scheme.get, call_615003.host, call_615003.base,
                         call_615003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615003, url, valid)

proc call*(call_615004: Call_GetGenerateOrganizationsAccessReport_614989;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615005 = newJObject()
  add(query_615005, "EntityPath", newJString(EntityPath))
  add(query_615005, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_615005, "Action", newJString(Action))
  add(query_615005, "Version", newJString(Version))
  result = call_615004.call(nil, query_615005, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_614989(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_614990, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_614991,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_615040 = ref object of OpenApiRestCall_612658
proc url_PostGenerateServiceLastAccessedDetails_615042(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGenerateServiceLastAccessedDetails_615041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615043 = query.getOrDefault("Action")
  valid_615043 = validateParameter(valid_615043, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_615043 != nil:
    section.add "Action", valid_615043
  var valid_615044 = query.getOrDefault("Version")
  valid_615044 = validateParameter(valid_615044, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615044 != nil:
    section.add "Version", valid_615044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615045 = header.getOrDefault("X-Amz-Signature")
  valid_615045 = validateParameter(valid_615045, JString, required = false,
                                 default = nil)
  if valid_615045 != nil:
    section.add "X-Amz-Signature", valid_615045
  var valid_615046 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615046 = validateParameter(valid_615046, JString, required = false,
                                 default = nil)
  if valid_615046 != nil:
    section.add "X-Amz-Content-Sha256", valid_615046
  var valid_615047 = header.getOrDefault("X-Amz-Date")
  valid_615047 = validateParameter(valid_615047, JString, required = false,
                                 default = nil)
  if valid_615047 != nil:
    section.add "X-Amz-Date", valid_615047
  var valid_615048 = header.getOrDefault("X-Amz-Credential")
  valid_615048 = validateParameter(valid_615048, JString, required = false,
                                 default = nil)
  if valid_615048 != nil:
    section.add "X-Amz-Credential", valid_615048
  var valid_615049 = header.getOrDefault("X-Amz-Security-Token")
  valid_615049 = validateParameter(valid_615049, JString, required = false,
                                 default = nil)
  if valid_615049 != nil:
    section.add "X-Amz-Security-Token", valid_615049
  var valid_615050 = header.getOrDefault("X-Amz-Algorithm")
  valid_615050 = validateParameter(valid_615050, JString, required = false,
                                 default = nil)
  if valid_615050 != nil:
    section.add "X-Amz-Algorithm", valid_615050
  var valid_615051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615051 = validateParameter(valid_615051, JString, required = false,
                                 default = nil)
  if valid_615051 != nil:
    section.add "X-Amz-SignedHeaders", valid_615051
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_615052 = formData.getOrDefault("Arn")
  valid_615052 = validateParameter(valid_615052, JString, required = true,
                                 default = nil)
  if valid_615052 != nil:
    section.add "Arn", valid_615052
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615053: Call_PostGenerateServiceLastAccessedDetails_615040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615053.validator(path, query, header, formData, body)
  let scheme = call_615053.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615053.url(scheme.get, call_615053.host, call_615053.base,
                         call_615053.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615053, url, valid)

proc call*(call_615054: Call_PostGenerateServiceLastAccessedDetails_615040;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615055 = newJObject()
  var formData_615056 = newJObject()
  add(formData_615056, "Arn", newJString(Arn))
  add(query_615055, "Action", newJString(Action))
  add(query_615055, "Version", newJString(Version))
  result = call_615054.call(nil, query_615055, nil, formData_615056, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_615040(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_615041, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_615042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_615024 = ref object of OpenApiRestCall_612658
proc url_GetGenerateServiceLastAccessedDetails_615026(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGenerateServiceLastAccessedDetails_615025(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_615027 = query.getOrDefault("Action")
  valid_615027 = validateParameter(valid_615027, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_615027 != nil:
    section.add "Action", valid_615027
  var valid_615028 = query.getOrDefault("Version")
  valid_615028 = validateParameter(valid_615028, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615028 != nil:
    section.add "Version", valid_615028
  var valid_615029 = query.getOrDefault("Arn")
  valid_615029 = validateParameter(valid_615029, JString, required = true,
                                 default = nil)
  if valid_615029 != nil:
    section.add "Arn", valid_615029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615030 = header.getOrDefault("X-Amz-Signature")
  valid_615030 = validateParameter(valid_615030, JString, required = false,
                                 default = nil)
  if valid_615030 != nil:
    section.add "X-Amz-Signature", valid_615030
  var valid_615031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615031 = validateParameter(valid_615031, JString, required = false,
                                 default = nil)
  if valid_615031 != nil:
    section.add "X-Amz-Content-Sha256", valid_615031
  var valid_615032 = header.getOrDefault("X-Amz-Date")
  valid_615032 = validateParameter(valid_615032, JString, required = false,
                                 default = nil)
  if valid_615032 != nil:
    section.add "X-Amz-Date", valid_615032
  var valid_615033 = header.getOrDefault("X-Amz-Credential")
  valid_615033 = validateParameter(valid_615033, JString, required = false,
                                 default = nil)
  if valid_615033 != nil:
    section.add "X-Amz-Credential", valid_615033
  var valid_615034 = header.getOrDefault("X-Amz-Security-Token")
  valid_615034 = validateParameter(valid_615034, JString, required = false,
                                 default = nil)
  if valid_615034 != nil:
    section.add "X-Amz-Security-Token", valid_615034
  var valid_615035 = header.getOrDefault("X-Amz-Algorithm")
  valid_615035 = validateParameter(valid_615035, JString, required = false,
                                 default = nil)
  if valid_615035 != nil:
    section.add "X-Amz-Algorithm", valid_615035
  var valid_615036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615036 = validateParameter(valid_615036, JString, required = false,
                                 default = nil)
  if valid_615036 != nil:
    section.add "X-Amz-SignedHeaders", valid_615036
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615037: Call_GetGenerateServiceLastAccessedDetails_615024;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615037.validator(path, query, header, formData, body)
  let scheme = call_615037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615037.url(scheme.get, call_615037.host, call_615037.base,
                         call_615037.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615037, url, valid)

proc call*(call_615038: Call_GetGenerateServiceLastAccessedDetails_615024;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_615039 = newJObject()
  add(query_615039, "Action", newJString(Action))
  add(query_615039, "Version", newJString(Version))
  add(query_615039, "Arn", newJString(Arn))
  result = call_615038.call(nil, query_615039, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_615024(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_615025, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_615026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_615073 = ref object of OpenApiRestCall_612658
proc url_PostGetAccessKeyLastUsed_615075(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccessKeyLastUsed_615074(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615076 = query.getOrDefault("Action")
  valid_615076 = validateParameter(valid_615076, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_615076 != nil:
    section.add "Action", valid_615076
  var valid_615077 = query.getOrDefault("Version")
  valid_615077 = validateParameter(valid_615077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615077 != nil:
    section.add "Version", valid_615077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615078 = header.getOrDefault("X-Amz-Signature")
  valid_615078 = validateParameter(valid_615078, JString, required = false,
                                 default = nil)
  if valid_615078 != nil:
    section.add "X-Amz-Signature", valid_615078
  var valid_615079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615079 = validateParameter(valid_615079, JString, required = false,
                                 default = nil)
  if valid_615079 != nil:
    section.add "X-Amz-Content-Sha256", valid_615079
  var valid_615080 = header.getOrDefault("X-Amz-Date")
  valid_615080 = validateParameter(valid_615080, JString, required = false,
                                 default = nil)
  if valid_615080 != nil:
    section.add "X-Amz-Date", valid_615080
  var valid_615081 = header.getOrDefault("X-Amz-Credential")
  valid_615081 = validateParameter(valid_615081, JString, required = false,
                                 default = nil)
  if valid_615081 != nil:
    section.add "X-Amz-Credential", valid_615081
  var valid_615082 = header.getOrDefault("X-Amz-Security-Token")
  valid_615082 = validateParameter(valid_615082, JString, required = false,
                                 default = nil)
  if valid_615082 != nil:
    section.add "X-Amz-Security-Token", valid_615082
  var valid_615083 = header.getOrDefault("X-Amz-Algorithm")
  valid_615083 = validateParameter(valid_615083, JString, required = false,
                                 default = nil)
  if valid_615083 != nil:
    section.add "X-Amz-Algorithm", valid_615083
  var valid_615084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615084 = validateParameter(valid_615084, JString, required = false,
                                 default = nil)
  if valid_615084 != nil:
    section.add "X-Amz-SignedHeaders", valid_615084
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_615085 = formData.getOrDefault("AccessKeyId")
  valid_615085 = validateParameter(valid_615085, JString, required = true,
                                 default = nil)
  if valid_615085 != nil:
    section.add "AccessKeyId", valid_615085
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615086: Call_PostGetAccessKeyLastUsed_615073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_615086.validator(path, query, header, formData, body)
  let scheme = call_615086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615086.url(scheme.get, call_615086.host, call_615086.base,
                         call_615086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615086, url, valid)

proc call*(call_615087: Call_PostGetAccessKeyLastUsed_615073; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615088 = newJObject()
  var formData_615089 = newJObject()
  add(formData_615089, "AccessKeyId", newJString(AccessKeyId))
  add(query_615088, "Action", newJString(Action))
  add(query_615088, "Version", newJString(Version))
  result = call_615087.call(nil, query_615088, nil, formData_615089, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_615073(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_615074, base: "/",
    url: url_PostGetAccessKeyLastUsed_615075, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_615057 = ref object of OpenApiRestCall_612658
proc url_GetGetAccessKeyLastUsed_615059(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccessKeyLastUsed_615058(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615060 = query.getOrDefault("Action")
  valid_615060 = validateParameter(valid_615060, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_615060 != nil:
    section.add "Action", valid_615060
  var valid_615061 = query.getOrDefault("AccessKeyId")
  valid_615061 = validateParameter(valid_615061, JString, required = true,
                                 default = nil)
  if valid_615061 != nil:
    section.add "AccessKeyId", valid_615061
  var valid_615062 = query.getOrDefault("Version")
  valid_615062 = validateParameter(valid_615062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615062 != nil:
    section.add "Version", valid_615062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615063 = header.getOrDefault("X-Amz-Signature")
  valid_615063 = validateParameter(valid_615063, JString, required = false,
                                 default = nil)
  if valid_615063 != nil:
    section.add "X-Amz-Signature", valid_615063
  var valid_615064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615064 = validateParameter(valid_615064, JString, required = false,
                                 default = nil)
  if valid_615064 != nil:
    section.add "X-Amz-Content-Sha256", valid_615064
  var valid_615065 = header.getOrDefault("X-Amz-Date")
  valid_615065 = validateParameter(valid_615065, JString, required = false,
                                 default = nil)
  if valid_615065 != nil:
    section.add "X-Amz-Date", valid_615065
  var valid_615066 = header.getOrDefault("X-Amz-Credential")
  valid_615066 = validateParameter(valid_615066, JString, required = false,
                                 default = nil)
  if valid_615066 != nil:
    section.add "X-Amz-Credential", valid_615066
  var valid_615067 = header.getOrDefault("X-Amz-Security-Token")
  valid_615067 = validateParameter(valid_615067, JString, required = false,
                                 default = nil)
  if valid_615067 != nil:
    section.add "X-Amz-Security-Token", valid_615067
  var valid_615068 = header.getOrDefault("X-Amz-Algorithm")
  valid_615068 = validateParameter(valid_615068, JString, required = false,
                                 default = nil)
  if valid_615068 != nil:
    section.add "X-Amz-Algorithm", valid_615068
  var valid_615069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615069 = validateParameter(valid_615069, JString, required = false,
                                 default = nil)
  if valid_615069 != nil:
    section.add "X-Amz-SignedHeaders", valid_615069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615070: Call_GetGetAccessKeyLastUsed_615057; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_615070.validator(path, query, header, formData, body)
  let scheme = call_615070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615070.url(scheme.get, call_615070.host, call_615070.base,
                         call_615070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615070, url, valid)

proc call*(call_615071: Call_GetGetAccessKeyLastUsed_615057; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_615072 = newJObject()
  add(query_615072, "Action", newJString(Action))
  add(query_615072, "AccessKeyId", newJString(AccessKeyId))
  add(query_615072, "Version", newJString(Version))
  result = call_615071.call(nil, query_615072, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_615057(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_615058, base: "/",
    url: url_GetGetAccessKeyLastUsed_615059, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_615108 = ref object of OpenApiRestCall_612658
proc url_PostGetAccountAuthorizationDetails_615110(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountAuthorizationDetails_615109(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615111 = query.getOrDefault("Action")
  valid_615111 = validateParameter(valid_615111, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_615111 != nil:
    section.add "Action", valid_615111
  var valid_615112 = query.getOrDefault("Version")
  valid_615112 = validateParameter(valid_615112, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615112 != nil:
    section.add "Version", valid_615112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615113 = header.getOrDefault("X-Amz-Signature")
  valid_615113 = validateParameter(valid_615113, JString, required = false,
                                 default = nil)
  if valid_615113 != nil:
    section.add "X-Amz-Signature", valid_615113
  var valid_615114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615114 = validateParameter(valid_615114, JString, required = false,
                                 default = nil)
  if valid_615114 != nil:
    section.add "X-Amz-Content-Sha256", valid_615114
  var valid_615115 = header.getOrDefault("X-Amz-Date")
  valid_615115 = validateParameter(valid_615115, JString, required = false,
                                 default = nil)
  if valid_615115 != nil:
    section.add "X-Amz-Date", valid_615115
  var valid_615116 = header.getOrDefault("X-Amz-Credential")
  valid_615116 = validateParameter(valid_615116, JString, required = false,
                                 default = nil)
  if valid_615116 != nil:
    section.add "X-Amz-Credential", valid_615116
  var valid_615117 = header.getOrDefault("X-Amz-Security-Token")
  valid_615117 = validateParameter(valid_615117, JString, required = false,
                                 default = nil)
  if valid_615117 != nil:
    section.add "X-Amz-Security-Token", valid_615117
  var valid_615118 = header.getOrDefault("X-Amz-Algorithm")
  valid_615118 = validateParameter(valid_615118, JString, required = false,
                                 default = nil)
  if valid_615118 != nil:
    section.add "X-Amz-Algorithm", valid_615118
  var valid_615119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615119 = validateParameter(valid_615119, JString, required = false,
                                 default = nil)
  if valid_615119 != nil:
    section.add "X-Amz-SignedHeaders", valid_615119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  section = newJObject()
  var valid_615120 = formData.getOrDefault("Marker")
  valid_615120 = validateParameter(valid_615120, JString, required = false,
                                 default = nil)
  if valid_615120 != nil:
    section.add "Marker", valid_615120
  var valid_615121 = formData.getOrDefault("MaxItems")
  valid_615121 = validateParameter(valid_615121, JInt, required = false, default = nil)
  if valid_615121 != nil:
    section.add "MaxItems", valid_615121
  var valid_615122 = formData.getOrDefault("Filter")
  valid_615122 = validateParameter(valid_615122, JArray, required = false,
                                 default = nil)
  if valid_615122 != nil:
    section.add "Filter", valid_615122
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615123: Call_PostGetAccountAuthorizationDetails_615108;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_615123.validator(path, query, header, formData, body)
  let scheme = call_615123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615123.url(scheme.get, call_615123.host, call_615123.base,
                         call_615123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615123, url, valid)

proc call*(call_615124: Call_PostGetAccountAuthorizationDetails_615108;
          Marker: string = ""; Action: string = "GetAccountAuthorizationDetails";
          MaxItems: int = 0; Version: string = "2010-05-08"; Filter: JsonNode = nil): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  var query_615125 = newJObject()
  var formData_615126 = newJObject()
  add(formData_615126, "Marker", newJString(Marker))
  add(query_615125, "Action", newJString(Action))
  add(formData_615126, "MaxItems", newJInt(MaxItems))
  add(query_615125, "Version", newJString(Version))
  if Filter != nil:
    formData_615126.add "Filter", Filter
  result = call_615124.call(nil, query_615125, nil, formData_615126, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_615108(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_615109, base: "/",
    url: url_PostGetAccountAuthorizationDetails_615110,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_615090 = ref object of OpenApiRestCall_612658
proc url_GetGetAccountAuthorizationDetails_615092(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountAuthorizationDetails_615091(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615093 = query.getOrDefault("Marker")
  valid_615093 = validateParameter(valid_615093, JString, required = false,
                                 default = nil)
  if valid_615093 != nil:
    section.add "Marker", valid_615093
  var valid_615094 = query.getOrDefault("MaxItems")
  valid_615094 = validateParameter(valid_615094, JInt, required = false, default = nil)
  if valid_615094 != nil:
    section.add "MaxItems", valid_615094
  var valid_615095 = query.getOrDefault("Filter")
  valid_615095 = validateParameter(valid_615095, JArray, required = false,
                                 default = nil)
  if valid_615095 != nil:
    section.add "Filter", valid_615095
  var valid_615096 = query.getOrDefault("Action")
  valid_615096 = validateParameter(valid_615096, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_615096 != nil:
    section.add "Action", valid_615096
  var valid_615097 = query.getOrDefault("Version")
  valid_615097 = validateParameter(valid_615097, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615097 != nil:
    section.add "Version", valid_615097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615098 = header.getOrDefault("X-Amz-Signature")
  valid_615098 = validateParameter(valid_615098, JString, required = false,
                                 default = nil)
  if valid_615098 != nil:
    section.add "X-Amz-Signature", valid_615098
  var valid_615099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615099 = validateParameter(valid_615099, JString, required = false,
                                 default = nil)
  if valid_615099 != nil:
    section.add "X-Amz-Content-Sha256", valid_615099
  var valid_615100 = header.getOrDefault("X-Amz-Date")
  valid_615100 = validateParameter(valid_615100, JString, required = false,
                                 default = nil)
  if valid_615100 != nil:
    section.add "X-Amz-Date", valid_615100
  var valid_615101 = header.getOrDefault("X-Amz-Credential")
  valid_615101 = validateParameter(valid_615101, JString, required = false,
                                 default = nil)
  if valid_615101 != nil:
    section.add "X-Amz-Credential", valid_615101
  var valid_615102 = header.getOrDefault("X-Amz-Security-Token")
  valid_615102 = validateParameter(valid_615102, JString, required = false,
                                 default = nil)
  if valid_615102 != nil:
    section.add "X-Amz-Security-Token", valid_615102
  var valid_615103 = header.getOrDefault("X-Amz-Algorithm")
  valid_615103 = validateParameter(valid_615103, JString, required = false,
                                 default = nil)
  if valid_615103 != nil:
    section.add "X-Amz-Algorithm", valid_615103
  var valid_615104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615104 = validateParameter(valid_615104, JString, required = false,
                                 default = nil)
  if valid_615104 != nil:
    section.add "X-Amz-SignedHeaders", valid_615104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615105: Call_GetGetAccountAuthorizationDetails_615090;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_615105.validator(path, query, header, formData, body)
  let scheme = call_615105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615105.url(scheme.get, call_615105.host, call_615105.base,
                         call_615105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615105, url, valid)

proc call*(call_615106: Call_GetGetAccountAuthorizationDetails_615090;
          Marker: string = ""; MaxItems: int = 0; Filter: JsonNode = nil;
          Action: string = "GetAccountAuthorizationDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615107 = newJObject()
  add(query_615107, "Marker", newJString(Marker))
  add(query_615107, "MaxItems", newJInt(MaxItems))
  if Filter != nil:
    query_615107.add "Filter", Filter
  add(query_615107, "Action", newJString(Action))
  add(query_615107, "Version", newJString(Version))
  result = call_615106.call(nil, query_615107, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_615090(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_615091, base: "/",
    url: url_GetGetAccountAuthorizationDetails_615092,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_615142 = ref object of OpenApiRestCall_612658
proc url_PostGetAccountPasswordPolicy_615144(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountPasswordPolicy_615143(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615145 = query.getOrDefault("Action")
  valid_615145 = validateParameter(valid_615145, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_615145 != nil:
    section.add "Action", valid_615145
  var valid_615146 = query.getOrDefault("Version")
  valid_615146 = validateParameter(valid_615146, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615146 != nil:
    section.add "Version", valid_615146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615147 = header.getOrDefault("X-Amz-Signature")
  valid_615147 = validateParameter(valid_615147, JString, required = false,
                                 default = nil)
  if valid_615147 != nil:
    section.add "X-Amz-Signature", valid_615147
  var valid_615148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615148 = validateParameter(valid_615148, JString, required = false,
                                 default = nil)
  if valid_615148 != nil:
    section.add "X-Amz-Content-Sha256", valid_615148
  var valid_615149 = header.getOrDefault("X-Amz-Date")
  valid_615149 = validateParameter(valid_615149, JString, required = false,
                                 default = nil)
  if valid_615149 != nil:
    section.add "X-Amz-Date", valid_615149
  var valid_615150 = header.getOrDefault("X-Amz-Credential")
  valid_615150 = validateParameter(valid_615150, JString, required = false,
                                 default = nil)
  if valid_615150 != nil:
    section.add "X-Amz-Credential", valid_615150
  var valid_615151 = header.getOrDefault("X-Amz-Security-Token")
  valid_615151 = validateParameter(valid_615151, JString, required = false,
                                 default = nil)
  if valid_615151 != nil:
    section.add "X-Amz-Security-Token", valid_615151
  var valid_615152 = header.getOrDefault("X-Amz-Algorithm")
  valid_615152 = validateParameter(valid_615152, JString, required = false,
                                 default = nil)
  if valid_615152 != nil:
    section.add "X-Amz-Algorithm", valid_615152
  var valid_615153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615153 = validateParameter(valid_615153, JString, required = false,
                                 default = nil)
  if valid_615153 != nil:
    section.add "X-Amz-SignedHeaders", valid_615153
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615154: Call_PostGetAccountPasswordPolicy_615142; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_615154.validator(path, query, header, formData, body)
  let scheme = call_615154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615154.url(scheme.get, call_615154.host, call_615154.base,
                         call_615154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615154, url, valid)

proc call*(call_615155: Call_PostGetAccountPasswordPolicy_615142;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615156 = newJObject()
  add(query_615156, "Action", newJString(Action))
  add(query_615156, "Version", newJString(Version))
  result = call_615155.call(nil, query_615156, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_615142(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_615143, base: "/",
    url: url_PostGetAccountPasswordPolicy_615144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_615127 = ref object of OpenApiRestCall_612658
proc url_GetGetAccountPasswordPolicy_615129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountPasswordPolicy_615128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615130 = query.getOrDefault("Action")
  valid_615130 = validateParameter(valid_615130, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_615130 != nil:
    section.add "Action", valid_615130
  var valid_615131 = query.getOrDefault("Version")
  valid_615131 = validateParameter(valid_615131, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615131 != nil:
    section.add "Version", valid_615131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615132 = header.getOrDefault("X-Amz-Signature")
  valid_615132 = validateParameter(valid_615132, JString, required = false,
                                 default = nil)
  if valid_615132 != nil:
    section.add "X-Amz-Signature", valid_615132
  var valid_615133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615133 = validateParameter(valid_615133, JString, required = false,
                                 default = nil)
  if valid_615133 != nil:
    section.add "X-Amz-Content-Sha256", valid_615133
  var valid_615134 = header.getOrDefault("X-Amz-Date")
  valid_615134 = validateParameter(valid_615134, JString, required = false,
                                 default = nil)
  if valid_615134 != nil:
    section.add "X-Amz-Date", valid_615134
  var valid_615135 = header.getOrDefault("X-Amz-Credential")
  valid_615135 = validateParameter(valid_615135, JString, required = false,
                                 default = nil)
  if valid_615135 != nil:
    section.add "X-Amz-Credential", valid_615135
  var valid_615136 = header.getOrDefault("X-Amz-Security-Token")
  valid_615136 = validateParameter(valid_615136, JString, required = false,
                                 default = nil)
  if valid_615136 != nil:
    section.add "X-Amz-Security-Token", valid_615136
  var valid_615137 = header.getOrDefault("X-Amz-Algorithm")
  valid_615137 = validateParameter(valid_615137, JString, required = false,
                                 default = nil)
  if valid_615137 != nil:
    section.add "X-Amz-Algorithm", valid_615137
  var valid_615138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615138 = validateParameter(valid_615138, JString, required = false,
                                 default = nil)
  if valid_615138 != nil:
    section.add "X-Amz-SignedHeaders", valid_615138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615139: Call_GetGetAccountPasswordPolicy_615127; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_615139.validator(path, query, header, formData, body)
  let scheme = call_615139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615139.url(scheme.get, call_615139.host, call_615139.base,
                         call_615139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615139, url, valid)

proc call*(call_615140: Call_GetGetAccountPasswordPolicy_615127;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615141 = newJObject()
  add(query_615141, "Action", newJString(Action))
  add(query_615141, "Version", newJString(Version))
  result = call_615140.call(nil, query_615141, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_615127(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_615128, base: "/",
    url: url_GetGetAccountPasswordPolicy_615129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_615172 = ref object of OpenApiRestCall_612658
proc url_PostGetAccountSummary_615174(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetAccountSummary_615173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615175 = query.getOrDefault("Action")
  valid_615175 = validateParameter(valid_615175, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_615175 != nil:
    section.add "Action", valid_615175
  var valid_615176 = query.getOrDefault("Version")
  valid_615176 = validateParameter(valid_615176, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615176 != nil:
    section.add "Version", valid_615176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615177 = header.getOrDefault("X-Amz-Signature")
  valid_615177 = validateParameter(valid_615177, JString, required = false,
                                 default = nil)
  if valid_615177 != nil:
    section.add "X-Amz-Signature", valid_615177
  var valid_615178 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615178 = validateParameter(valid_615178, JString, required = false,
                                 default = nil)
  if valid_615178 != nil:
    section.add "X-Amz-Content-Sha256", valid_615178
  var valid_615179 = header.getOrDefault("X-Amz-Date")
  valid_615179 = validateParameter(valid_615179, JString, required = false,
                                 default = nil)
  if valid_615179 != nil:
    section.add "X-Amz-Date", valid_615179
  var valid_615180 = header.getOrDefault("X-Amz-Credential")
  valid_615180 = validateParameter(valid_615180, JString, required = false,
                                 default = nil)
  if valid_615180 != nil:
    section.add "X-Amz-Credential", valid_615180
  var valid_615181 = header.getOrDefault("X-Amz-Security-Token")
  valid_615181 = validateParameter(valid_615181, JString, required = false,
                                 default = nil)
  if valid_615181 != nil:
    section.add "X-Amz-Security-Token", valid_615181
  var valid_615182 = header.getOrDefault("X-Amz-Algorithm")
  valid_615182 = validateParameter(valid_615182, JString, required = false,
                                 default = nil)
  if valid_615182 != nil:
    section.add "X-Amz-Algorithm", valid_615182
  var valid_615183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615183 = validateParameter(valid_615183, JString, required = false,
                                 default = nil)
  if valid_615183 != nil:
    section.add "X-Amz-SignedHeaders", valid_615183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615184: Call_PostGetAccountSummary_615172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615184.validator(path, query, header, formData, body)
  let scheme = call_615184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615184.url(scheme.get, call_615184.host, call_615184.base,
                         call_615184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615184, url, valid)

proc call*(call_615185: Call_PostGetAccountSummary_615172;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615186 = newJObject()
  add(query_615186, "Action", newJString(Action))
  add(query_615186, "Version", newJString(Version))
  result = call_615185.call(nil, query_615186, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_615172(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_615173, base: "/",
    url: url_PostGetAccountSummary_615174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_615157 = ref object of OpenApiRestCall_612658
proc url_GetGetAccountSummary_615159(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetAccountSummary_615158(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615160 = query.getOrDefault("Action")
  valid_615160 = validateParameter(valid_615160, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_615160 != nil:
    section.add "Action", valid_615160
  var valid_615161 = query.getOrDefault("Version")
  valid_615161 = validateParameter(valid_615161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615161 != nil:
    section.add "Version", valid_615161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615162 = header.getOrDefault("X-Amz-Signature")
  valid_615162 = validateParameter(valid_615162, JString, required = false,
                                 default = nil)
  if valid_615162 != nil:
    section.add "X-Amz-Signature", valid_615162
  var valid_615163 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615163 = validateParameter(valid_615163, JString, required = false,
                                 default = nil)
  if valid_615163 != nil:
    section.add "X-Amz-Content-Sha256", valid_615163
  var valid_615164 = header.getOrDefault("X-Amz-Date")
  valid_615164 = validateParameter(valid_615164, JString, required = false,
                                 default = nil)
  if valid_615164 != nil:
    section.add "X-Amz-Date", valid_615164
  var valid_615165 = header.getOrDefault("X-Amz-Credential")
  valid_615165 = validateParameter(valid_615165, JString, required = false,
                                 default = nil)
  if valid_615165 != nil:
    section.add "X-Amz-Credential", valid_615165
  var valid_615166 = header.getOrDefault("X-Amz-Security-Token")
  valid_615166 = validateParameter(valid_615166, JString, required = false,
                                 default = nil)
  if valid_615166 != nil:
    section.add "X-Amz-Security-Token", valid_615166
  var valid_615167 = header.getOrDefault("X-Amz-Algorithm")
  valid_615167 = validateParameter(valid_615167, JString, required = false,
                                 default = nil)
  if valid_615167 != nil:
    section.add "X-Amz-Algorithm", valid_615167
  var valid_615168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615168 = validateParameter(valid_615168, JString, required = false,
                                 default = nil)
  if valid_615168 != nil:
    section.add "X-Amz-SignedHeaders", valid_615168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615169: Call_GetGetAccountSummary_615157; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615169.validator(path, query, header, formData, body)
  let scheme = call_615169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615169.url(scheme.get, call_615169.host, call_615169.base,
                         call_615169.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615169, url, valid)

proc call*(call_615170: Call_GetGetAccountSummary_615157;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615171 = newJObject()
  add(query_615171, "Action", newJString(Action))
  add(query_615171, "Version", newJString(Version))
  result = call_615170.call(nil, query_615171, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_615157(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_615158, base: "/",
    url: url_GetGetAccountSummary_615159, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_615203 = ref object of OpenApiRestCall_612658
proc url_PostGetContextKeysForCustomPolicy_615205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForCustomPolicy_615204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615206 = query.getOrDefault("Action")
  valid_615206 = validateParameter(valid_615206, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_615206 != nil:
    section.add "Action", valid_615206
  var valid_615207 = query.getOrDefault("Version")
  valid_615207 = validateParameter(valid_615207, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615207 != nil:
    section.add "Version", valid_615207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615208 = header.getOrDefault("X-Amz-Signature")
  valid_615208 = validateParameter(valid_615208, JString, required = false,
                                 default = nil)
  if valid_615208 != nil:
    section.add "X-Amz-Signature", valid_615208
  var valid_615209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615209 = validateParameter(valid_615209, JString, required = false,
                                 default = nil)
  if valid_615209 != nil:
    section.add "X-Amz-Content-Sha256", valid_615209
  var valid_615210 = header.getOrDefault("X-Amz-Date")
  valid_615210 = validateParameter(valid_615210, JString, required = false,
                                 default = nil)
  if valid_615210 != nil:
    section.add "X-Amz-Date", valid_615210
  var valid_615211 = header.getOrDefault("X-Amz-Credential")
  valid_615211 = validateParameter(valid_615211, JString, required = false,
                                 default = nil)
  if valid_615211 != nil:
    section.add "X-Amz-Credential", valid_615211
  var valid_615212 = header.getOrDefault("X-Amz-Security-Token")
  valid_615212 = validateParameter(valid_615212, JString, required = false,
                                 default = nil)
  if valid_615212 != nil:
    section.add "X-Amz-Security-Token", valid_615212
  var valid_615213 = header.getOrDefault("X-Amz-Algorithm")
  valid_615213 = validateParameter(valid_615213, JString, required = false,
                                 default = nil)
  if valid_615213 != nil:
    section.add "X-Amz-Algorithm", valid_615213
  var valid_615214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615214 = validateParameter(valid_615214, JString, required = false,
                                 default = nil)
  if valid_615214 != nil:
    section.add "X-Amz-SignedHeaders", valid_615214
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_615215 = formData.getOrDefault("PolicyInputList")
  valid_615215 = validateParameter(valid_615215, JArray, required = true, default = nil)
  if valid_615215 != nil:
    section.add "PolicyInputList", valid_615215
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615216: Call_PostGetContextKeysForCustomPolicy_615203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_615216.validator(path, query, header, formData, body)
  let scheme = call_615216.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615216.url(scheme.get, call_615216.host, call_615216.base,
                         call_615216.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615216, url, valid)

proc call*(call_615217: Call_PostGetContextKeysForCustomPolicy_615203;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_615218 = newJObject()
  var formData_615219 = newJObject()
  add(query_615218, "Action", newJString(Action))
  add(query_615218, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_615219.add "PolicyInputList", PolicyInputList
  result = call_615217.call(nil, query_615218, nil, formData_615219, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_615203(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_615204, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_615205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_615187 = ref object of OpenApiRestCall_612658
proc url_GetGetContextKeysForCustomPolicy_615189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForCustomPolicy_615188(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_615190 = query.getOrDefault("PolicyInputList")
  valid_615190 = validateParameter(valid_615190, JArray, required = true, default = nil)
  if valid_615190 != nil:
    section.add "PolicyInputList", valid_615190
  var valid_615191 = query.getOrDefault("Action")
  valid_615191 = validateParameter(valid_615191, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_615191 != nil:
    section.add "Action", valid_615191
  var valid_615192 = query.getOrDefault("Version")
  valid_615192 = validateParameter(valid_615192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615192 != nil:
    section.add "Version", valid_615192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615193 = header.getOrDefault("X-Amz-Signature")
  valid_615193 = validateParameter(valid_615193, JString, required = false,
                                 default = nil)
  if valid_615193 != nil:
    section.add "X-Amz-Signature", valid_615193
  var valid_615194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615194 = validateParameter(valid_615194, JString, required = false,
                                 default = nil)
  if valid_615194 != nil:
    section.add "X-Amz-Content-Sha256", valid_615194
  var valid_615195 = header.getOrDefault("X-Amz-Date")
  valid_615195 = validateParameter(valid_615195, JString, required = false,
                                 default = nil)
  if valid_615195 != nil:
    section.add "X-Amz-Date", valid_615195
  var valid_615196 = header.getOrDefault("X-Amz-Credential")
  valid_615196 = validateParameter(valid_615196, JString, required = false,
                                 default = nil)
  if valid_615196 != nil:
    section.add "X-Amz-Credential", valid_615196
  var valid_615197 = header.getOrDefault("X-Amz-Security-Token")
  valid_615197 = validateParameter(valid_615197, JString, required = false,
                                 default = nil)
  if valid_615197 != nil:
    section.add "X-Amz-Security-Token", valid_615197
  var valid_615198 = header.getOrDefault("X-Amz-Algorithm")
  valid_615198 = validateParameter(valid_615198, JString, required = false,
                                 default = nil)
  if valid_615198 != nil:
    section.add "X-Amz-Algorithm", valid_615198
  var valid_615199 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615199 = validateParameter(valid_615199, JString, required = false,
                                 default = nil)
  if valid_615199 != nil:
    section.add "X-Amz-SignedHeaders", valid_615199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615200: Call_GetGetContextKeysForCustomPolicy_615187;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_615200.validator(path, query, header, formData, body)
  let scheme = call_615200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615200.url(scheme.get, call_615200.host, call_615200.base,
                         call_615200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615200, url, valid)

proc call*(call_615201: Call_GetGetContextKeysForCustomPolicy_615187;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615202 = newJObject()
  if PolicyInputList != nil:
    query_615202.add "PolicyInputList", PolicyInputList
  add(query_615202, "Action", newJString(Action))
  add(query_615202, "Version", newJString(Version))
  result = call_615201.call(nil, query_615202, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_615187(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_615188, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_615189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_615237 = ref object of OpenApiRestCall_612658
proc url_PostGetContextKeysForPrincipalPolicy_615239(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetContextKeysForPrincipalPolicy_615238(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615240 = query.getOrDefault("Action")
  valid_615240 = validateParameter(valid_615240, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_615240 != nil:
    section.add "Action", valid_615240
  var valid_615241 = query.getOrDefault("Version")
  valid_615241 = validateParameter(valid_615241, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615241 != nil:
    section.add "Version", valid_615241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615242 = header.getOrDefault("X-Amz-Signature")
  valid_615242 = validateParameter(valid_615242, JString, required = false,
                                 default = nil)
  if valid_615242 != nil:
    section.add "X-Amz-Signature", valid_615242
  var valid_615243 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615243 = validateParameter(valid_615243, JString, required = false,
                                 default = nil)
  if valid_615243 != nil:
    section.add "X-Amz-Content-Sha256", valid_615243
  var valid_615244 = header.getOrDefault("X-Amz-Date")
  valid_615244 = validateParameter(valid_615244, JString, required = false,
                                 default = nil)
  if valid_615244 != nil:
    section.add "X-Amz-Date", valid_615244
  var valid_615245 = header.getOrDefault("X-Amz-Credential")
  valid_615245 = validateParameter(valid_615245, JString, required = false,
                                 default = nil)
  if valid_615245 != nil:
    section.add "X-Amz-Credential", valid_615245
  var valid_615246 = header.getOrDefault("X-Amz-Security-Token")
  valid_615246 = validateParameter(valid_615246, JString, required = false,
                                 default = nil)
  if valid_615246 != nil:
    section.add "X-Amz-Security-Token", valid_615246
  var valid_615247 = header.getOrDefault("X-Amz-Algorithm")
  valid_615247 = validateParameter(valid_615247, JString, required = false,
                                 default = nil)
  if valid_615247 != nil:
    section.add "X-Amz-Algorithm", valid_615247
  var valid_615248 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615248 = validateParameter(valid_615248, JString, required = false,
                                 default = nil)
  if valid_615248 != nil:
    section.add "X-Amz-SignedHeaders", valid_615248
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_615249 = formData.getOrDefault("PolicySourceArn")
  valid_615249 = validateParameter(valid_615249, JString, required = true,
                                 default = nil)
  if valid_615249 != nil:
    section.add "PolicySourceArn", valid_615249
  var valid_615250 = formData.getOrDefault("PolicyInputList")
  valid_615250 = validateParameter(valid_615250, JArray, required = false,
                                 default = nil)
  if valid_615250 != nil:
    section.add "PolicyInputList", valid_615250
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615251: Call_PostGetContextKeysForPrincipalPolicy_615237;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_615251.validator(path, query, header, formData, body)
  let scheme = call_615251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615251.url(scheme.get, call_615251.host, call_615251.base,
                         call_615251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615251, url, valid)

proc call*(call_615252: Call_PostGetContextKeysForPrincipalPolicy_615237;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"; PolicyInputList: JsonNode = nil): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  var query_615253 = newJObject()
  var formData_615254 = newJObject()
  add(formData_615254, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_615253, "Action", newJString(Action))
  add(query_615253, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_615254.add "PolicyInputList", PolicyInputList
  result = call_615252.call(nil, query_615253, nil, formData_615254, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_615237(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_615238, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_615239,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_615220 = ref object of OpenApiRestCall_612658
proc url_GetGetContextKeysForPrincipalPolicy_615222(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetContextKeysForPrincipalPolicy_615221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_615223 = query.getOrDefault("PolicySourceArn")
  valid_615223 = validateParameter(valid_615223, JString, required = true,
                                 default = nil)
  if valid_615223 != nil:
    section.add "PolicySourceArn", valid_615223
  var valid_615224 = query.getOrDefault("PolicyInputList")
  valid_615224 = validateParameter(valid_615224, JArray, required = false,
                                 default = nil)
  if valid_615224 != nil:
    section.add "PolicyInputList", valid_615224
  var valid_615225 = query.getOrDefault("Action")
  valid_615225 = validateParameter(valid_615225, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_615225 != nil:
    section.add "Action", valid_615225
  var valid_615226 = query.getOrDefault("Version")
  valid_615226 = validateParameter(valid_615226, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615226 != nil:
    section.add "Version", valid_615226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615227 = header.getOrDefault("X-Amz-Signature")
  valid_615227 = validateParameter(valid_615227, JString, required = false,
                                 default = nil)
  if valid_615227 != nil:
    section.add "X-Amz-Signature", valid_615227
  var valid_615228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615228 = validateParameter(valid_615228, JString, required = false,
                                 default = nil)
  if valid_615228 != nil:
    section.add "X-Amz-Content-Sha256", valid_615228
  var valid_615229 = header.getOrDefault("X-Amz-Date")
  valid_615229 = validateParameter(valid_615229, JString, required = false,
                                 default = nil)
  if valid_615229 != nil:
    section.add "X-Amz-Date", valid_615229
  var valid_615230 = header.getOrDefault("X-Amz-Credential")
  valid_615230 = validateParameter(valid_615230, JString, required = false,
                                 default = nil)
  if valid_615230 != nil:
    section.add "X-Amz-Credential", valid_615230
  var valid_615231 = header.getOrDefault("X-Amz-Security-Token")
  valid_615231 = validateParameter(valid_615231, JString, required = false,
                                 default = nil)
  if valid_615231 != nil:
    section.add "X-Amz-Security-Token", valid_615231
  var valid_615232 = header.getOrDefault("X-Amz-Algorithm")
  valid_615232 = validateParameter(valid_615232, JString, required = false,
                                 default = nil)
  if valid_615232 != nil:
    section.add "X-Amz-Algorithm", valid_615232
  var valid_615233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615233 = validateParameter(valid_615233, JString, required = false,
                                 default = nil)
  if valid_615233 != nil:
    section.add "X-Amz-SignedHeaders", valid_615233
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615234: Call_GetGetContextKeysForPrincipalPolicy_615220;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_615234.validator(path, query, header, formData, body)
  let scheme = call_615234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615234.url(scheme.get, call_615234.host, call_615234.base,
                         call_615234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615234, url, valid)

proc call*(call_615235: Call_GetGetContextKeysForPrincipalPolicy_615220;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615236 = newJObject()
  add(query_615236, "PolicySourceArn", newJString(PolicySourceArn))
  if PolicyInputList != nil:
    query_615236.add "PolicyInputList", PolicyInputList
  add(query_615236, "Action", newJString(Action))
  add(query_615236, "Version", newJString(Version))
  result = call_615235.call(nil, query_615236, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_615220(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_615221, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_615222,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_615270 = ref object of OpenApiRestCall_612658
proc url_PostGetCredentialReport_615272(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetCredentialReport_615271(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615273 = query.getOrDefault("Action")
  valid_615273 = validateParameter(valid_615273, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_615273 != nil:
    section.add "Action", valid_615273
  var valid_615274 = query.getOrDefault("Version")
  valid_615274 = validateParameter(valid_615274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615274 != nil:
    section.add "Version", valid_615274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615275 = header.getOrDefault("X-Amz-Signature")
  valid_615275 = validateParameter(valid_615275, JString, required = false,
                                 default = nil)
  if valid_615275 != nil:
    section.add "X-Amz-Signature", valid_615275
  var valid_615276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615276 = validateParameter(valid_615276, JString, required = false,
                                 default = nil)
  if valid_615276 != nil:
    section.add "X-Amz-Content-Sha256", valid_615276
  var valid_615277 = header.getOrDefault("X-Amz-Date")
  valid_615277 = validateParameter(valid_615277, JString, required = false,
                                 default = nil)
  if valid_615277 != nil:
    section.add "X-Amz-Date", valid_615277
  var valid_615278 = header.getOrDefault("X-Amz-Credential")
  valid_615278 = validateParameter(valid_615278, JString, required = false,
                                 default = nil)
  if valid_615278 != nil:
    section.add "X-Amz-Credential", valid_615278
  var valid_615279 = header.getOrDefault("X-Amz-Security-Token")
  valid_615279 = validateParameter(valid_615279, JString, required = false,
                                 default = nil)
  if valid_615279 != nil:
    section.add "X-Amz-Security-Token", valid_615279
  var valid_615280 = header.getOrDefault("X-Amz-Algorithm")
  valid_615280 = validateParameter(valid_615280, JString, required = false,
                                 default = nil)
  if valid_615280 != nil:
    section.add "X-Amz-Algorithm", valid_615280
  var valid_615281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615281 = validateParameter(valid_615281, JString, required = false,
                                 default = nil)
  if valid_615281 != nil:
    section.add "X-Amz-SignedHeaders", valid_615281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615282: Call_PostGetCredentialReport_615270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615282.validator(path, query, header, formData, body)
  let scheme = call_615282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615282.url(scheme.get, call_615282.host, call_615282.base,
                         call_615282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615282, url, valid)

proc call*(call_615283: Call_PostGetCredentialReport_615270;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615284 = newJObject()
  add(query_615284, "Action", newJString(Action))
  add(query_615284, "Version", newJString(Version))
  result = call_615283.call(nil, query_615284, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_615270(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_615271, base: "/",
    url: url_PostGetCredentialReport_615272, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_615255 = ref object of OpenApiRestCall_612658
proc url_GetGetCredentialReport_615257(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetCredentialReport_615256(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615258 = query.getOrDefault("Action")
  valid_615258 = validateParameter(valid_615258, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_615258 != nil:
    section.add "Action", valid_615258
  var valid_615259 = query.getOrDefault("Version")
  valid_615259 = validateParameter(valid_615259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615259 != nil:
    section.add "Version", valid_615259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615260 = header.getOrDefault("X-Amz-Signature")
  valid_615260 = validateParameter(valid_615260, JString, required = false,
                                 default = nil)
  if valid_615260 != nil:
    section.add "X-Amz-Signature", valid_615260
  var valid_615261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615261 = validateParameter(valid_615261, JString, required = false,
                                 default = nil)
  if valid_615261 != nil:
    section.add "X-Amz-Content-Sha256", valid_615261
  var valid_615262 = header.getOrDefault("X-Amz-Date")
  valid_615262 = validateParameter(valid_615262, JString, required = false,
                                 default = nil)
  if valid_615262 != nil:
    section.add "X-Amz-Date", valid_615262
  var valid_615263 = header.getOrDefault("X-Amz-Credential")
  valid_615263 = validateParameter(valid_615263, JString, required = false,
                                 default = nil)
  if valid_615263 != nil:
    section.add "X-Amz-Credential", valid_615263
  var valid_615264 = header.getOrDefault("X-Amz-Security-Token")
  valid_615264 = validateParameter(valid_615264, JString, required = false,
                                 default = nil)
  if valid_615264 != nil:
    section.add "X-Amz-Security-Token", valid_615264
  var valid_615265 = header.getOrDefault("X-Amz-Algorithm")
  valid_615265 = validateParameter(valid_615265, JString, required = false,
                                 default = nil)
  if valid_615265 != nil:
    section.add "X-Amz-Algorithm", valid_615265
  var valid_615266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615266 = validateParameter(valid_615266, JString, required = false,
                                 default = nil)
  if valid_615266 != nil:
    section.add "X-Amz-SignedHeaders", valid_615266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615267: Call_GetGetCredentialReport_615255; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615267.validator(path, query, header, formData, body)
  let scheme = call_615267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615267.url(scheme.get, call_615267.host, call_615267.base,
                         call_615267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615267, url, valid)

proc call*(call_615268: Call_GetGetCredentialReport_615255;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615269 = newJObject()
  add(query_615269, "Action", newJString(Action))
  add(query_615269, "Version", newJString(Version))
  result = call_615268.call(nil, query_615269, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_615255(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_615256, base: "/",
    url: url_GetGetCredentialReport_615257, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_615303 = ref object of OpenApiRestCall_612658
proc url_PostGetGroup_615305(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroup_615304(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615306 = query.getOrDefault("Action")
  valid_615306 = validateParameter(valid_615306, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_615306 != nil:
    section.add "Action", valid_615306
  var valid_615307 = query.getOrDefault("Version")
  valid_615307 = validateParameter(valid_615307, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615307 != nil:
    section.add "Version", valid_615307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615308 = header.getOrDefault("X-Amz-Signature")
  valid_615308 = validateParameter(valid_615308, JString, required = false,
                                 default = nil)
  if valid_615308 != nil:
    section.add "X-Amz-Signature", valid_615308
  var valid_615309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615309 = validateParameter(valid_615309, JString, required = false,
                                 default = nil)
  if valid_615309 != nil:
    section.add "X-Amz-Content-Sha256", valid_615309
  var valid_615310 = header.getOrDefault("X-Amz-Date")
  valid_615310 = validateParameter(valid_615310, JString, required = false,
                                 default = nil)
  if valid_615310 != nil:
    section.add "X-Amz-Date", valid_615310
  var valid_615311 = header.getOrDefault("X-Amz-Credential")
  valid_615311 = validateParameter(valid_615311, JString, required = false,
                                 default = nil)
  if valid_615311 != nil:
    section.add "X-Amz-Credential", valid_615311
  var valid_615312 = header.getOrDefault("X-Amz-Security-Token")
  valid_615312 = validateParameter(valid_615312, JString, required = false,
                                 default = nil)
  if valid_615312 != nil:
    section.add "X-Amz-Security-Token", valid_615312
  var valid_615313 = header.getOrDefault("X-Amz-Algorithm")
  valid_615313 = validateParameter(valid_615313, JString, required = false,
                                 default = nil)
  if valid_615313 != nil:
    section.add "X-Amz-Algorithm", valid_615313
  var valid_615314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615314 = validateParameter(valid_615314, JString, required = false,
                                 default = nil)
  if valid_615314 != nil:
    section.add "X-Amz-SignedHeaders", valid_615314
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_615315 = formData.getOrDefault("Marker")
  valid_615315 = validateParameter(valid_615315, JString, required = false,
                                 default = nil)
  if valid_615315 != nil:
    section.add "Marker", valid_615315
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_615316 = formData.getOrDefault("GroupName")
  valid_615316 = validateParameter(valid_615316, JString, required = true,
                                 default = nil)
  if valid_615316 != nil:
    section.add "GroupName", valid_615316
  var valid_615317 = formData.getOrDefault("MaxItems")
  valid_615317 = validateParameter(valid_615317, JInt, required = false, default = nil)
  if valid_615317 != nil:
    section.add "MaxItems", valid_615317
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615318: Call_PostGetGroup_615303; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_615318.validator(path, query, header, formData, body)
  let scheme = call_615318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615318.url(scheme.get, call_615318.host, call_615318.base,
                         call_615318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615318, url, valid)

proc call*(call_615319: Call_PostGetGroup_615303; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_615320 = newJObject()
  var formData_615321 = newJObject()
  add(formData_615321, "Marker", newJString(Marker))
  add(formData_615321, "GroupName", newJString(GroupName))
  add(query_615320, "Action", newJString(Action))
  add(formData_615321, "MaxItems", newJInt(MaxItems))
  add(query_615320, "Version", newJString(Version))
  result = call_615319.call(nil, query_615320, nil, formData_615321, nil)

var postGetGroup* = Call_PostGetGroup_615303(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_615304, base: "/",
    url: url_PostGetGroup_615305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_615285 = ref object of OpenApiRestCall_612658
proc url_GetGetGroup_615287(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroup_615286(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615288 = query.getOrDefault("Marker")
  valid_615288 = validateParameter(valid_615288, JString, required = false,
                                 default = nil)
  if valid_615288 != nil:
    section.add "Marker", valid_615288
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_615289 = query.getOrDefault("GroupName")
  valid_615289 = validateParameter(valid_615289, JString, required = true,
                                 default = nil)
  if valid_615289 != nil:
    section.add "GroupName", valid_615289
  var valid_615290 = query.getOrDefault("MaxItems")
  valid_615290 = validateParameter(valid_615290, JInt, required = false, default = nil)
  if valid_615290 != nil:
    section.add "MaxItems", valid_615290
  var valid_615291 = query.getOrDefault("Action")
  valid_615291 = validateParameter(valid_615291, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_615291 != nil:
    section.add "Action", valid_615291
  var valid_615292 = query.getOrDefault("Version")
  valid_615292 = validateParameter(valid_615292, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615292 != nil:
    section.add "Version", valid_615292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615293 = header.getOrDefault("X-Amz-Signature")
  valid_615293 = validateParameter(valid_615293, JString, required = false,
                                 default = nil)
  if valid_615293 != nil:
    section.add "X-Amz-Signature", valid_615293
  var valid_615294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615294 = validateParameter(valid_615294, JString, required = false,
                                 default = nil)
  if valid_615294 != nil:
    section.add "X-Amz-Content-Sha256", valid_615294
  var valid_615295 = header.getOrDefault("X-Amz-Date")
  valid_615295 = validateParameter(valid_615295, JString, required = false,
                                 default = nil)
  if valid_615295 != nil:
    section.add "X-Amz-Date", valid_615295
  var valid_615296 = header.getOrDefault("X-Amz-Credential")
  valid_615296 = validateParameter(valid_615296, JString, required = false,
                                 default = nil)
  if valid_615296 != nil:
    section.add "X-Amz-Credential", valid_615296
  var valid_615297 = header.getOrDefault("X-Amz-Security-Token")
  valid_615297 = validateParameter(valid_615297, JString, required = false,
                                 default = nil)
  if valid_615297 != nil:
    section.add "X-Amz-Security-Token", valid_615297
  var valid_615298 = header.getOrDefault("X-Amz-Algorithm")
  valid_615298 = validateParameter(valid_615298, JString, required = false,
                                 default = nil)
  if valid_615298 != nil:
    section.add "X-Amz-Algorithm", valid_615298
  var valid_615299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615299 = validateParameter(valid_615299, JString, required = false,
                                 default = nil)
  if valid_615299 != nil:
    section.add "X-Amz-SignedHeaders", valid_615299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615300: Call_GetGetGroup_615285; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_615300.validator(path, query, header, formData, body)
  let scheme = call_615300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615300.url(scheme.get, call_615300.host, call_615300.base,
                         call_615300.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615300, url, valid)

proc call*(call_615301: Call_GetGetGroup_615285; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "GetGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615302 = newJObject()
  add(query_615302, "Marker", newJString(Marker))
  add(query_615302, "GroupName", newJString(GroupName))
  add(query_615302, "MaxItems", newJInt(MaxItems))
  add(query_615302, "Action", newJString(Action))
  add(query_615302, "Version", newJString(Version))
  result = call_615301.call(nil, query_615302, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_615285(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_615286,
                                        base: "/", url: url_GetGetGroup_615287,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_615339 = ref object of OpenApiRestCall_612658
proc url_PostGetGroupPolicy_615341(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetGroupPolicy_615340(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615342 = query.getOrDefault("Action")
  valid_615342 = validateParameter(valid_615342, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_615342 != nil:
    section.add "Action", valid_615342
  var valid_615343 = query.getOrDefault("Version")
  valid_615343 = validateParameter(valid_615343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615343 != nil:
    section.add "Version", valid_615343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615344 = header.getOrDefault("X-Amz-Signature")
  valid_615344 = validateParameter(valid_615344, JString, required = false,
                                 default = nil)
  if valid_615344 != nil:
    section.add "X-Amz-Signature", valid_615344
  var valid_615345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615345 = validateParameter(valid_615345, JString, required = false,
                                 default = nil)
  if valid_615345 != nil:
    section.add "X-Amz-Content-Sha256", valid_615345
  var valid_615346 = header.getOrDefault("X-Amz-Date")
  valid_615346 = validateParameter(valid_615346, JString, required = false,
                                 default = nil)
  if valid_615346 != nil:
    section.add "X-Amz-Date", valid_615346
  var valid_615347 = header.getOrDefault("X-Amz-Credential")
  valid_615347 = validateParameter(valid_615347, JString, required = false,
                                 default = nil)
  if valid_615347 != nil:
    section.add "X-Amz-Credential", valid_615347
  var valid_615348 = header.getOrDefault("X-Amz-Security-Token")
  valid_615348 = validateParameter(valid_615348, JString, required = false,
                                 default = nil)
  if valid_615348 != nil:
    section.add "X-Amz-Security-Token", valid_615348
  var valid_615349 = header.getOrDefault("X-Amz-Algorithm")
  valid_615349 = validateParameter(valid_615349, JString, required = false,
                                 default = nil)
  if valid_615349 != nil:
    section.add "X-Amz-Algorithm", valid_615349
  var valid_615350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615350 = validateParameter(valid_615350, JString, required = false,
                                 default = nil)
  if valid_615350 != nil:
    section.add "X-Amz-SignedHeaders", valid_615350
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_615351 = formData.getOrDefault("GroupName")
  valid_615351 = validateParameter(valid_615351, JString, required = true,
                                 default = nil)
  if valid_615351 != nil:
    section.add "GroupName", valid_615351
  var valid_615352 = formData.getOrDefault("PolicyName")
  valid_615352 = validateParameter(valid_615352, JString, required = true,
                                 default = nil)
  if valid_615352 != nil:
    section.add "PolicyName", valid_615352
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615353: Call_PostGetGroupPolicy_615339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615353.validator(path, query, header, formData, body)
  let scheme = call_615353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615353.url(scheme.get, call_615353.host, call_615353.base,
                         call_615353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615353, url, valid)

proc call*(call_615354: Call_PostGetGroupPolicy_615339; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_615355 = newJObject()
  var formData_615356 = newJObject()
  add(formData_615356, "GroupName", newJString(GroupName))
  add(query_615355, "Action", newJString(Action))
  add(query_615355, "Version", newJString(Version))
  add(formData_615356, "PolicyName", newJString(PolicyName))
  result = call_615354.call(nil, query_615355, nil, formData_615356, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_615339(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_615340, base: "/",
    url: url_PostGetGroupPolicy_615341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_615322 = ref object of OpenApiRestCall_612658
proc url_GetGetGroupPolicy_615324(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetGroupPolicy_615323(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_615325 = query.getOrDefault("GroupName")
  valid_615325 = validateParameter(valid_615325, JString, required = true,
                                 default = nil)
  if valid_615325 != nil:
    section.add "GroupName", valid_615325
  var valid_615326 = query.getOrDefault("PolicyName")
  valid_615326 = validateParameter(valid_615326, JString, required = true,
                                 default = nil)
  if valid_615326 != nil:
    section.add "PolicyName", valid_615326
  var valid_615327 = query.getOrDefault("Action")
  valid_615327 = validateParameter(valid_615327, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_615327 != nil:
    section.add "Action", valid_615327
  var valid_615328 = query.getOrDefault("Version")
  valid_615328 = validateParameter(valid_615328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615328 != nil:
    section.add "Version", valid_615328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615329 = header.getOrDefault("X-Amz-Signature")
  valid_615329 = validateParameter(valid_615329, JString, required = false,
                                 default = nil)
  if valid_615329 != nil:
    section.add "X-Amz-Signature", valid_615329
  var valid_615330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615330 = validateParameter(valid_615330, JString, required = false,
                                 default = nil)
  if valid_615330 != nil:
    section.add "X-Amz-Content-Sha256", valid_615330
  var valid_615331 = header.getOrDefault("X-Amz-Date")
  valid_615331 = validateParameter(valid_615331, JString, required = false,
                                 default = nil)
  if valid_615331 != nil:
    section.add "X-Amz-Date", valid_615331
  var valid_615332 = header.getOrDefault("X-Amz-Credential")
  valid_615332 = validateParameter(valid_615332, JString, required = false,
                                 default = nil)
  if valid_615332 != nil:
    section.add "X-Amz-Credential", valid_615332
  var valid_615333 = header.getOrDefault("X-Amz-Security-Token")
  valid_615333 = validateParameter(valid_615333, JString, required = false,
                                 default = nil)
  if valid_615333 != nil:
    section.add "X-Amz-Security-Token", valid_615333
  var valid_615334 = header.getOrDefault("X-Amz-Algorithm")
  valid_615334 = validateParameter(valid_615334, JString, required = false,
                                 default = nil)
  if valid_615334 != nil:
    section.add "X-Amz-Algorithm", valid_615334
  var valid_615335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615335 = validateParameter(valid_615335, JString, required = false,
                                 default = nil)
  if valid_615335 != nil:
    section.add "X-Amz-SignedHeaders", valid_615335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615336: Call_GetGetGroupPolicy_615322; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615336.validator(path, query, header, formData, body)
  let scheme = call_615336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615336.url(scheme.get, call_615336.host, call_615336.base,
                         call_615336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615336, url, valid)

proc call*(call_615337: Call_GetGetGroupPolicy_615322; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615338 = newJObject()
  add(query_615338, "GroupName", newJString(GroupName))
  add(query_615338, "PolicyName", newJString(PolicyName))
  add(query_615338, "Action", newJString(Action))
  add(query_615338, "Version", newJString(Version))
  result = call_615337.call(nil, query_615338, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_615322(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_615323,
    base: "/", url: url_GetGetGroupPolicy_615324,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_615373 = ref object of OpenApiRestCall_612658
proc url_PostGetInstanceProfile_615375(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetInstanceProfile_615374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615376 = query.getOrDefault("Action")
  valid_615376 = validateParameter(valid_615376, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_615376 != nil:
    section.add "Action", valid_615376
  var valid_615377 = query.getOrDefault("Version")
  valid_615377 = validateParameter(valid_615377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615377 != nil:
    section.add "Version", valid_615377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615378 = header.getOrDefault("X-Amz-Signature")
  valid_615378 = validateParameter(valid_615378, JString, required = false,
                                 default = nil)
  if valid_615378 != nil:
    section.add "X-Amz-Signature", valid_615378
  var valid_615379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615379 = validateParameter(valid_615379, JString, required = false,
                                 default = nil)
  if valid_615379 != nil:
    section.add "X-Amz-Content-Sha256", valid_615379
  var valid_615380 = header.getOrDefault("X-Amz-Date")
  valid_615380 = validateParameter(valid_615380, JString, required = false,
                                 default = nil)
  if valid_615380 != nil:
    section.add "X-Amz-Date", valid_615380
  var valid_615381 = header.getOrDefault("X-Amz-Credential")
  valid_615381 = validateParameter(valid_615381, JString, required = false,
                                 default = nil)
  if valid_615381 != nil:
    section.add "X-Amz-Credential", valid_615381
  var valid_615382 = header.getOrDefault("X-Amz-Security-Token")
  valid_615382 = validateParameter(valid_615382, JString, required = false,
                                 default = nil)
  if valid_615382 != nil:
    section.add "X-Amz-Security-Token", valid_615382
  var valid_615383 = header.getOrDefault("X-Amz-Algorithm")
  valid_615383 = validateParameter(valid_615383, JString, required = false,
                                 default = nil)
  if valid_615383 != nil:
    section.add "X-Amz-Algorithm", valid_615383
  var valid_615384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615384 = validateParameter(valid_615384, JString, required = false,
                                 default = nil)
  if valid_615384 != nil:
    section.add "X-Amz-SignedHeaders", valid_615384
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_615385 = formData.getOrDefault("InstanceProfileName")
  valid_615385 = validateParameter(valid_615385, JString, required = true,
                                 default = nil)
  if valid_615385 != nil:
    section.add "InstanceProfileName", valid_615385
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615386: Call_PostGetInstanceProfile_615373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615386.validator(path, query, header, formData, body)
  let scheme = call_615386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615386.url(scheme.get, call_615386.host, call_615386.base,
                         call_615386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615386, url, valid)

proc call*(call_615387: Call_PostGetInstanceProfile_615373;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_615388 = newJObject()
  var formData_615389 = newJObject()
  add(query_615388, "Action", newJString(Action))
  add(formData_615389, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_615388, "Version", newJString(Version))
  result = call_615387.call(nil, query_615388, nil, formData_615389, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_615373(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_615374, base: "/",
    url: url_PostGetInstanceProfile_615375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_615357 = ref object of OpenApiRestCall_612658
proc url_GetGetInstanceProfile_615359(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetInstanceProfile_615358(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615360 = query.getOrDefault("Action")
  valid_615360 = validateParameter(valid_615360, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_615360 != nil:
    section.add "Action", valid_615360
  var valid_615361 = query.getOrDefault("InstanceProfileName")
  valid_615361 = validateParameter(valid_615361, JString, required = true,
                                 default = nil)
  if valid_615361 != nil:
    section.add "InstanceProfileName", valid_615361
  var valid_615362 = query.getOrDefault("Version")
  valid_615362 = validateParameter(valid_615362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615362 != nil:
    section.add "Version", valid_615362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615363 = header.getOrDefault("X-Amz-Signature")
  valid_615363 = validateParameter(valid_615363, JString, required = false,
                                 default = nil)
  if valid_615363 != nil:
    section.add "X-Amz-Signature", valid_615363
  var valid_615364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615364 = validateParameter(valid_615364, JString, required = false,
                                 default = nil)
  if valid_615364 != nil:
    section.add "X-Amz-Content-Sha256", valid_615364
  var valid_615365 = header.getOrDefault("X-Amz-Date")
  valid_615365 = validateParameter(valid_615365, JString, required = false,
                                 default = nil)
  if valid_615365 != nil:
    section.add "X-Amz-Date", valid_615365
  var valid_615366 = header.getOrDefault("X-Amz-Credential")
  valid_615366 = validateParameter(valid_615366, JString, required = false,
                                 default = nil)
  if valid_615366 != nil:
    section.add "X-Amz-Credential", valid_615366
  var valid_615367 = header.getOrDefault("X-Amz-Security-Token")
  valid_615367 = validateParameter(valid_615367, JString, required = false,
                                 default = nil)
  if valid_615367 != nil:
    section.add "X-Amz-Security-Token", valid_615367
  var valid_615368 = header.getOrDefault("X-Amz-Algorithm")
  valid_615368 = validateParameter(valid_615368, JString, required = false,
                                 default = nil)
  if valid_615368 != nil:
    section.add "X-Amz-Algorithm", valid_615368
  var valid_615369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615369 = validateParameter(valid_615369, JString, required = false,
                                 default = nil)
  if valid_615369 != nil:
    section.add "X-Amz-SignedHeaders", valid_615369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615370: Call_GetGetInstanceProfile_615357; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615370.validator(path, query, header, formData, body)
  let scheme = call_615370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615370.url(scheme.get, call_615370.host, call_615370.base,
                         call_615370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615370, url, valid)

proc call*(call_615371: Call_GetGetInstanceProfile_615357;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_615372 = newJObject()
  add(query_615372, "Action", newJString(Action))
  add(query_615372, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_615372, "Version", newJString(Version))
  result = call_615371.call(nil, query_615372, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_615357(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_615358, base: "/",
    url: url_GetGetInstanceProfile_615359, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_615406 = ref object of OpenApiRestCall_612658
proc url_PostGetLoginProfile_615408(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetLoginProfile_615407(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615409 = query.getOrDefault("Action")
  valid_615409 = validateParameter(valid_615409, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_615409 != nil:
    section.add "Action", valid_615409
  var valid_615410 = query.getOrDefault("Version")
  valid_615410 = validateParameter(valid_615410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615410 != nil:
    section.add "Version", valid_615410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615411 = header.getOrDefault("X-Amz-Signature")
  valid_615411 = validateParameter(valid_615411, JString, required = false,
                                 default = nil)
  if valid_615411 != nil:
    section.add "X-Amz-Signature", valid_615411
  var valid_615412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615412 = validateParameter(valid_615412, JString, required = false,
                                 default = nil)
  if valid_615412 != nil:
    section.add "X-Amz-Content-Sha256", valid_615412
  var valid_615413 = header.getOrDefault("X-Amz-Date")
  valid_615413 = validateParameter(valid_615413, JString, required = false,
                                 default = nil)
  if valid_615413 != nil:
    section.add "X-Amz-Date", valid_615413
  var valid_615414 = header.getOrDefault("X-Amz-Credential")
  valid_615414 = validateParameter(valid_615414, JString, required = false,
                                 default = nil)
  if valid_615414 != nil:
    section.add "X-Amz-Credential", valid_615414
  var valid_615415 = header.getOrDefault("X-Amz-Security-Token")
  valid_615415 = validateParameter(valid_615415, JString, required = false,
                                 default = nil)
  if valid_615415 != nil:
    section.add "X-Amz-Security-Token", valid_615415
  var valid_615416 = header.getOrDefault("X-Amz-Algorithm")
  valid_615416 = validateParameter(valid_615416, JString, required = false,
                                 default = nil)
  if valid_615416 != nil:
    section.add "X-Amz-Algorithm", valid_615416
  var valid_615417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615417 = validateParameter(valid_615417, JString, required = false,
                                 default = nil)
  if valid_615417 != nil:
    section.add "X-Amz-SignedHeaders", valid_615417
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615418 = formData.getOrDefault("UserName")
  valid_615418 = validateParameter(valid_615418, JString, required = true,
                                 default = nil)
  if valid_615418 != nil:
    section.add "UserName", valid_615418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615419: Call_PostGetLoginProfile_615406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_615419.validator(path, query, header, formData, body)
  let scheme = call_615419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615419.url(scheme.get, call_615419.host, call_615419.base,
                         call_615419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615419, url, valid)

proc call*(call_615420: Call_PostGetLoginProfile_615406; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615421 = newJObject()
  var formData_615422 = newJObject()
  add(formData_615422, "UserName", newJString(UserName))
  add(query_615421, "Action", newJString(Action))
  add(query_615421, "Version", newJString(Version))
  result = call_615420.call(nil, query_615421, nil, formData_615422, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_615406(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_615407, base: "/",
    url: url_PostGetLoginProfile_615408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_615390 = ref object of OpenApiRestCall_612658
proc url_GetGetLoginProfile_615392(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetLoginProfile_615391(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615393 = query.getOrDefault("UserName")
  valid_615393 = validateParameter(valid_615393, JString, required = true,
                                 default = nil)
  if valid_615393 != nil:
    section.add "UserName", valid_615393
  var valid_615394 = query.getOrDefault("Action")
  valid_615394 = validateParameter(valid_615394, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_615394 != nil:
    section.add "Action", valid_615394
  var valid_615395 = query.getOrDefault("Version")
  valid_615395 = validateParameter(valid_615395, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615395 != nil:
    section.add "Version", valid_615395
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615396 = header.getOrDefault("X-Amz-Signature")
  valid_615396 = validateParameter(valid_615396, JString, required = false,
                                 default = nil)
  if valid_615396 != nil:
    section.add "X-Amz-Signature", valid_615396
  var valid_615397 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615397 = validateParameter(valid_615397, JString, required = false,
                                 default = nil)
  if valid_615397 != nil:
    section.add "X-Amz-Content-Sha256", valid_615397
  var valid_615398 = header.getOrDefault("X-Amz-Date")
  valid_615398 = validateParameter(valid_615398, JString, required = false,
                                 default = nil)
  if valid_615398 != nil:
    section.add "X-Amz-Date", valid_615398
  var valid_615399 = header.getOrDefault("X-Amz-Credential")
  valid_615399 = validateParameter(valid_615399, JString, required = false,
                                 default = nil)
  if valid_615399 != nil:
    section.add "X-Amz-Credential", valid_615399
  var valid_615400 = header.getOrDefault("X-Amz-Security-Token")
  valid_615400 = validateParameter(valid_615400, JString, required = false,
                                 default = nil)
  if valid_615400 != nil:
    section.add "X-Amz-Security-Token", valid_615400
  var valid_615401 = header.getOrDefault("X-Amz-Algorithm")
  valid_615401 = validateParameter(valid_615401, JString, required = false,
                                 default = nil)
  if valid_615401 != nil:
    section.add "X-Amz-Algorithm", valid_615401
  var valid_615402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615402 = validateParameter(valid_615402, JString, required = false,
                                 default = nil)
  if valid_615402 != nil:
    section.add "X-Amz-SignedHeaders", valid_615402
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615403: Call_GetGetLoginProfile_615390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_615403.validator(path, query, header, formData, body)
  let scheme = call_615403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615403.url(scheme.get, call_615403.host, call_615403.base,
                         call_615403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615403, url, valid)

proc call*(call_615404: Call_GetGetLoginProfile_615390; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615405 = newJObject()
  add(query_615405, "UserName", newJString(UserName))
  add(query_615405, "Action", newJString(Action))
  add(query_615405, "Version", newJString(Version))
  result = call_615404.call(nil, query_615405, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_615390(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_615391,
    base: "/", url: url_GetGetLoginProfile_615392,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_615439 = ref object of OpenApiRestCall_612658
proc url_PostGetOpenIDConnectProvider_615441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOpenIDConnectProvider_615440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615442 = query.getOrDefault("Action")
  valid_615442 = validateParameter(valid_615442, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_615442 != nil:
    section.add "Action", valid_615442
  var valid_615443 = query.getOrDefault("Version")
  valid_615443 = validateParameter(valid_615443, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615443 != nil:
    section.add "Version", valid_615443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615444 = header.getOrDefault("X-Amz-Signature")
  valid_615444 = validateParameter(valid_615444, JString, required = false,
                                 default = nil)
  if valid_615444 != nil:
    section.add "X-Amz-Signature", valid_615444
  var valid_615445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615445 = validateParameter(valid_615445, JString, required = false,
                                 default = nil)
  if valid_615445 != nil:
    section.add "X-Amz-Content-Sha256", valid_615445
  var valid_615446 = header.getOrDefault("X-Amz-Date")
  valid_615446 = validateParameter(valid_615446, JString, required = false,
                                 default = nil)
  if valid_615446 != nil:
    section.add "X-Amz-Date", valid_615446
  var valid_615447 = header.getOrDefault("X-Amz-Credential")
  valid_615447 = validateParameter(valid_615447, JString, required = false,
                                 default = nil)
  if valid_615447 != nil:
    section.add "X-Amz-Credential", valid_615447
  var valid_615448 = header.getOrDefault("X-Amz-Security-Token")
  valid_615448 = validateParameter(valid_615448, JString, required = false,
                                 default = nil)
  if valid_615448 != nil:
    section.add "X-Amz-Security-Token", valid_615448
  var valid_615449 = header.getOrDefault("X-Amz-Algorithm")
  valid_615449 = validateParameter(valid_615449, JString, required = false,
                                 default = nil)
  if valid_615449 != nil:
    section.add "X-Amz-Algorithm", valid_615449
  var valid_615450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615450 = validateParameter(valid_615450, JString, required = false,
                                 default = nil)
  if valid_615450 != nil:
    section.add "X-Amz-SignedHeaders", valid_615450
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_615451 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_615451 = validateParameter(valid_615451, JString, required = true,
                                 default = nil)
  if valid_615451 != nil:
    section.add "OpenIDConnectProviderArn", valid_615451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615452: Call_PostGetOpenIDConnectProvider_615439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_615452.validator(path, query, header, formData, body)
  let scheme = call_615452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615452.url(scheme.get, call_615452.host, call_615452.base,
                         call_615452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615452, url, valid)

proc call*(call_615453: Call_PostGetOpenIDConnectProvider_615439;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_615454 = newJObject()
  var formData_615455 = newJObject()
  add(query_615454, "Action", newJString(Action))
  add(query_615454, "Version", newJString(Version))
  add(formData_615455, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_615453.call(nil, query_615454, nil, formData_615455, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_615439(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_615440, base: "/",
    url: url_PostGetOpenIDConnectProvider_615441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_615423 = ref object of OpenApiRestCall_612658
proc url_GetGetOpenIDConnectProvider_615425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOpenIDConnectProvider_615424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_615426 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_615426 = validateParameter(valid_615426, JString, required = true,
                                 default = nil)
  if valid_615426 != nil:
    section.add "OpenIDConnectProviderArn", valid_615426
  var valid_615427 = query.getOrDefault("Action")
  valid_615427 = validateParameter(valid_615427, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_615427 != nil:
    section.add "Action", valid_615427
  var valid_615428 = query.getOrDefault("Version")
  valid_615428 = validateParameter(valid_615428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615428 != nil:
    section.add "Version", valid_615428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615429 = header.getOrDefault("X-Amz-Signature")
  valid_615429 = validateParameter(valid_615429, JString, required = false,
                                 default = nil)
  if valid_615429 != nil:
    section.add "X-Amz-Signature", valid_615429
  var valid_615430 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615430 = validateParameter(valid_615430, JString, required = false,
                                 default = nil)
  if valid_615430 != nil:
    section.add "X-Amz-Content-Sha256", valid_615430
  var valid_615431 = header.getOrDefault("X-Amz-Date")
  valid_615431 = validateParameter(valid_615431, JString, required = false,
                                 default = nil)
  if valid_615431 != nil:
    section.add "X-Amz-Date", valid_615431
  var valid_615432 = header.getOrDefault("X-Amz-Credential")
  valid_615432 = validateParameter(valid_615432, JString, required = false,
                                 default = nil)
  if valid_615432 != nil:
    section.add "X-Amz-Credential", valid_615432
  var valid_615433 = header.getOrDefault("X-Amz-Security-Token")
  valid_615433 = validateParameter(valid_615433, JString, required = false,
                                 default = nil)
  if valid_615433 != nil:
    section.add "X-Amz-Security-Token", valid_615433
  var valid_615434 = header.getOrDefault("X-Amz-Algorithm")
  valid_615434 = validateParameter(valid_615434, JString, required = false,
                                 default = nil)
  if valid_615434 != nil:
    section.add "X-Amz-Algorithm", valid_615434
  var valid_615435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615435 = validateParameter(valid_615435, JString, required = false,
                                 default = nil)
  if valid_615435 != nil:
    section.add "X-Amz-SignedHeaders", valid_615435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615436: Call_GetGetOpenIDConnectProvider_615423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_615436.validator(path, query, header, formData, body)
  let scheme = call_615436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615436.url(scheme.get, call_615436.host, call_615436.base,
                         call_615436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615436, url, valid)

proc call*(call_615437: Call_GetGetOpenIDConnectProvider_615423;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615438 = newJObject()
  add(query_615438, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_615438, "Action", newJString(Action))
  add(query_615438, "Version", newJString(Version))
  result = call_615437.call(nil, query_615438, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_615423(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_615424, base: "/",
    url: url_GetGetOpenIDConnectProvider_615425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_615475 = ref object of OpenApiRestCall_612658
proc url_PostGetOrganizationsAccessReport_615477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetOrganizationsAccessReport_615476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615478 = query.getOrDefault("Action")
  valid_615478 = validateParameter(valid_615478, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_615478 != nil:
    section.add "Action", valid_615478
  var valid_615479 = query.getOrDefault("Version")
  valid_615479 = validateParameter(valid_615479, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615479 != nil:
    section.add "Version", valid_615479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615480 = header.getOrDefault("X-Amz-Signature")
  valid_615480 = validateParameter(valid_615480, JString, required = false,
                                 default = nil)
  if valid_615480 != nil:
    section.add "X-Amz-Signature", valid_615480
  var valid_615481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615481 = validateParameter(valid_615481, JString, required = false,
                                 default = nil)
  if valid_615481 != nil:
    section.add "X-Amz-Content-Sha256", valid_615481
  var valid_615482 = header.getOrDefault("X-Amz-Date")
  valid_615482 = validateParameter(valid_615482, JString, required = false,
                                 default = nil)
  if valid_615482 != nil:
    section.add "X-Amz-Date", valid_615482
  var valid_615483 = header.getOrDefault("X-Amz-Credential")
  valid_615483 = validateParameter(valid_615483, JString, required = false,
                                 default = nil)
  if valid_615483 != nil:
    section.add "X-Amz-Credential", valid_615483
  var valid_615484 = header.getOrDefault("X-Amz-Security-Token")
  valid_615484 = validateParameter(valid_615484, JString, required = false,
                                 default = nil)
  if valid_615484 != nil:
    section.add "X-Amz-Security-Token", valid_615484
  var valid_615485 = header.getOrDefault("X-Amz-Algorithm")
  valid_615485 = validateParameter(valid_615485, JString, required = false,
                                 default = nil)
  if valid_615485 != nil:
    section.add "X-Amz-Algorithm", valid_615485
  var valid_615486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615486 = validateParameter(valid_615486, JString, required = false,
                                 default = nil)
  if valid_615486 != nil:
    section.add "X-Amz-SignedHeaders", valid_615486
  result.add "header", section
  ## parameters in `formData` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_615487 = formData.getOrDefault("SortKey")
  valid_615487 = validateParameter(valid_615487, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_615487 != nil:
    section.add "SortKey", valid_615487
  var valid_615488 = formData.getOrDefault("Marker")
  valid_615488 = validateParameter(valid_615488, JString, required = false,
                                 default = nil)
  if valid_615488 != nil:
    section.add "Marker", valid_615488
  var valid_615489 = formData.getOrDefault("MaxItems")
  valid_615489 = validateParameter(valid_615489, JInt, required = false, default = nil)
  if valid_615489 != nil:
    section.add "MaxItems", valid_615489
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_615490 = formData.getOrDefault("JobId")
  valid_615490 = validateParameter(valid_615490, JString, required = true,
                                 default = nil)
  if valid_615490 != nil:
    section.add "JobId", valid_615490
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615491: Call_PostGetOrganizationsAccessReport_615475;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_615491.validator(path, query, header, formData, body)
  let scheme = call_615491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615491.url(scheme.get, call_615491.host, call_615491.base,
                         call_615491.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615491, url, valid)

proc call*(call_615492: Call_PostGetOrganizationsAccessReport_615475;
          JobId: string; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Marker: string = ""; Action: string = "GetOrganizationsAccessReport";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Version: string (required)
  var query_615493 = newJObject()
  var formData_615494 = newJObject()
  add(formData_615494, "SortKey", newJString(SortKey))
  add(formData_615494, "Marker", newJString(Marker))
  add(query_615493, "Action", newJString(Action))
  add(formData_615494, "MaxItems", newJInt(MaxItems))
  add(formData_615494, "JobId", newJString(JobId))
  add(query_615493, "Version", newJString(Version))
  result = call_615492.call(nil, query_615493, nil, formData_615494, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_615475(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_615476, base: "/",
    url: url_PostGetOrganizationsAccessReport_615477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_615456 = ref object of OpenApiRestCall_612658
proc url_GetGetOrganizationsAccessReport_615458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetOrganizationsAccessReport_615457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  section = newJObject()
  var valid_615459 = query.getOrDefault("Marker")
  valid_615459 = validateParameter(valid_615459, JString, required = false,
                                 default = nil)
  if valid_615459 != nil:
    section.add "Marker", valid_615459
  var valid_615460 = query.getOrDefault("SortKey")
  valid_615460 = validateParameter(valid_615460, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_615460 != nil:
    section.add "SortKey", valid_615460
  var valid_615461 = query.getOrDefault("MaxItems")
  valid_615461 = validateParameter(valid_615461, JInt, required = false, default = nil)
  if valid_615461 != nil:
    section.add "MaxItems", valid_615461
  var valid_615462 = query.getOrDefault("Action")
  valid_615462 = validateParameter(valid_615462, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_615462 != nil:
    section.add "Action", valid_615462
  var valid_615463 = query.getOrDefault("Version")
  valid_615463 = validateParameter(valid_615463, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615463 != nil:
    section.add "Version", valid_615463
  var valid_615464 = query.getOrDefault("JobId")
  valid_615464 = validateParameter(valid_615464, JString, required = true,
                                 default = nil)
  if valid_615464 != nil:
    section.add "JobId", valid_615464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615465 = header.getOrDefault("X-Amz-Signature")
  valid_615465 = validateParameter(valid_615465, JString, required = false,
                                 default = nil)
  if valid_615465 != nil:
    section.add "X-Amz-Signature", valid_615465
  var valid_615466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615466 = validateParameter(valid_615466, JString, required = false,
                                 default = nil)
  if valid_615466 != nil:
    section.add "X-Amz-Content-Sha256", valid_615466
  var valid_615467 = header.getOrDefault("X-Amz-Date")
  valid_615467 = validateParameter(valid_615467, JString, required = false,
                                 default = nil)
  if valid_615467 != nil:
    section.add "X-Amz-Date", valid_615467
  var valid_615468 = header.getOrDefault("X-Amz-Credential")
  valid_615468 = validateParameter(valid_615468, JString, required = false,
                                 default = nil)
  if valid_615468 != nil:
    section.add "X-Amz-Credential", valid_615468
  var valid_615469 = header.getOrDefault("X-Amz-Security-Token")
  valid_615469 = validateParameter(valid_615469, JString, required = false,
                                 default = nil)
  if valid_615469 != nil:
    section.add "X-Amz-Security-Token", valid_615469
  var valid_615470 = header.getOrDefault("X-Amz-Algorithm")
  valid_615470 = validateParameter(valid_615470, JString, required = false,
                                 default = nil)
  if valid_615470 != nil:
    section.add "X-Amz-Algorithm", valid_615470
  var valid_615471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615471 = validateParameter(valid_615471, JString, required = false,
                                 default = nil)
  if valid_615471 != nil:
    section.add "X-Amz-SignedHeaders", valid_615471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615472: Call_GetGetOrganizationsAccessReport_615456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_615472.validator(path, query, header, formData, body)
  let scheme = call_615472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615472.url(scheme.get, call_615472.host, call_615472.base,
                         call_615472.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615472, url, valid)

proc call*(call_615473: Call_GetGetOrganizationsAccessReport_615456; JobId: string;
          Marker: string = ""; SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          MaxItems: int = 0; Action: string = "GetOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  var query_615474 = newJObject()
  add(query_615474, "Marker", newJString(Marker))
  add(query_615474, "SortKey", newJString(SortKey))
  add(query_615474, "MaxItems", newJInt(MaxItems))
  add(query_615474, "Action", newJString(Action))
  add(query_615474, "Version", newJString(Version))
  add(query_615474, "JobId", newJString(JobId))
  result = call_615473.call(nil, query_615474, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_615456(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_615457, base: "/",
    url: url_GetGetOrganizationsAccessReport_615458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_615511 = ref object of OpenApiRestCall_612658
proc url_PostGetPolicy_615513(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicy_615512(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615514 = query.getOrDefault("Action")
  valid_615514 = validateParameter(valid_615514, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_615514 != nil:
    section.add "Action", valid_615514
  var valid_615515 = query.getOrDefault("Version")
  valid_615515 = validateParameter(valid_615515, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615515 != nil:
    section.add "Version", valid_615515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615516 = header.getOrDefault("X-Amz-Signature")
  valid_615516 = validateParameter(valid_615516, JString, required = false,
                                 default = nil)
  if valid_615516 != nil:
    section.add "X-Amz-Signature", valid_615516
  var valid_615517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615517 = validateParameter(valid_615517, JString, required = false,
                                 default = nil)
  if valid_615517 != nil:
    section.add "X-Amz-Content-Sha256", valid_615517
  var valid_615518 = header.getOrDefault("X-Amz-Date")
  valid_615518 = validateParameter(valid_615518, JString, required = false,
                                 default = nil)
  if valid_615518 != nil:
    section.add "X-Amz-Date", valid_615518
  var valid_615519 = header.getOrDefault("X-Amz-Credential")
  valid_615519 = validateParameter(valid_615519, JString, required = false,
                                 default = nil)
  if valid_615519 != nil:
    section.add "X-Amz-Credential", valid_615519
  var valid_615520 = header.getOrDefault("X-Amz-Security-Token")
  valid_615520 = validateParameter(valid_615520, JString, required = false,
                                 default = nil)
  if valid_615520 != nil:
    section.add "X-Amz-Security-Token", valid_615520
  var valid_615521 = header.getOrDefault("X-Amz-Algorithm")
  valid_615521 = validateParameter(valid_615521, JString, required = false,
                                 default = nil)
  if valid_615521 != nil:
    section.add "X-Amz-Algorithm", valid_615521
  var valid_615522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615522 = validateParameter(valid_615522, JString, required = false,
                                 default = nil)
  if valid_615522 != nil:
    section.add "X-Amz-SignedHeaders", valid_615522
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_615523 = formData.getOrDefault("PolicyArn")
  valid_615523 = validateParameter(valid_615523, JString, required = true,
                                 default = nil)
  if valid_615523 != nil:
    section.add "PolicyArn", valid_615523
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615524: Call_PostGetPolicy_615511; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615524.validator(path, query, header, formData, body)
  let scheme = call_615524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615524.url(scheme.get, call_615524.host, call_615524.base,
                         call_615524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615524, url, valid)

proc call*(call_615525: Call_PostGetPolicy_615511; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615526 = newJObject()
  var formData_615527 = newJObject()
  add(formData_615527, "PolicyArn", newJString(PolicyArn))
  add(query_615526, "Action", newJString(Action))
  add(query_615526, "Version", newJString(Version))
  result = call_615525.call(nil, query_615526, nil, formData_615527, nil)

var postGetPolicy* = Call_PostGetPolicy_615511(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_615512,
    base: "/", url: url_PostGetPolicy_615513, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_615495 = ref object of OpenApiRestCall_612658
proc url_GetGetPolicy_615497(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicy_615496(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_615498 = query.getOrDefault("PolicyArn")
  valid_615498 = validateParameter(valid_615498, JString, required = true,
                                 default = nil)
  if valid_615498 != nil:
    section.add "PolicyArn", valid_615498
  var valid_615499 = query.getOrDefault("Action")
  valid_615499 = validateParameter(valid_615499, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_615499 != nil:
    section.add "Action", valid_615499
  var valid_615500 = query.getOrDefault("Version")
  valid_615500 = validateParameter(valid_615500, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615500 != nil:
    section.add "Version", valid_615500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615501 = header.getOrDefault("X-Amz-Signature")
  valid_615501 = validateParameter(valid_615501, JString, required = false,
                                 default = nil)
  if valid_615501 != nil:
    section.add "X-Amz-Signature", valid_615501
  var valid_615502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615502 = validateParameter(valid_615502, JString, required = false,
                                 default = nil)
  if valid_615502 != nil:
    section.add "X-Amz-Content-Sha256", valid_615502
  var valid_615503 = header.getOrDefault("X-Amz-Date")
  valid_615503 = validateParameter(valid_615503, JString, required = false,
                                 default = nil)
  if valid_615503 != nil:
    section.add "X-Amz-Date", valid_615503
  var valid_615504 = header.getOrDefault("X-Amz-Credential")
  valid_615504 = validateParameter(valid_615504, JString, required = false,
                                 default = nil)
  if valid_615504 != nil:
    section.add "X-Amz-Credential", valid_615504
  var valid_615505 = header.getOrDefault("X-Amz-Security-Token")
  valid_615505 = validateParameter(valid_615505, JString, required = false,
                                 default = nil)
  if valid_615505 != nil:
    section.add "X-Amz-Security-Token", valid_615505
  var valid_615506 = header.getOrDefault("X-Amz-Algorithm")
  valid_615506 = validateParameter(valid_615506, JString, required = false,
                                 default = nil)
  if valid_615506 != nil:
    section.add "X-Amz-Algorithm", valid_615506
  var valid_615507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615507 = validateParameter(valid_615507, JString, required = false,
                                 default = nil)
  if valid_615507 != nil:
    section.add "X-Amz-SignedHeaders", valid_615507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615508: Call_GetGetPolicy_615495; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615508.validator(path, query, header, formData, body)
  let scheme = call_615508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615508.url(scheme.get, call_615508.host, call_615508.base,
                         call_615508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615508, url, valid)

proc call*(call_615509: Call_GetGetPolicy_615495; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615510 = newJObject()
  add(query_615510, "PolicyArn", newJString(PolicyArn))
  add(query_615510, "Action", newJString(Action))
  add(query_615510, "Version", newJString(Version))
  result = call_615509.call(nil, query_615510, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_615495(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_615496, base: "/",
    url: url_GetGetPolicy_615497, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_615545 = ref object of OpenApiRestCall_612658
proc url_PostGetPolicyVersion_615547(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetPolicyVersion_615546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615548 = query.getOrDefault("Action")
  valid_615548 = validateParameter(valid_615548, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_615548 != nil:
    section.add "Action", valid_615548
  var valid_615549 = query.getOrDefault("Version")
  valid_615549 = validateParameter(valid_615549, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615549 != nil:
    section.add "Version", valid_615549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615550 = header.getOrDefault("X-Amz-Signature")
  valid_615550 = validateParameter(valid_615550, JString, required = false,
                                 default = nil)
  if valid_615550 != nil:
    section.add "X-Amz-Signature", valid_615550
  var valid_615551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615551 = validateParameter(valid_615551, JString, required = false,
                                 default = nil)
  if valid_615551 != nil:
    section.add "X-Amz-Content-Sha256", valid_615551
  var valid_615552 = header.getOrDefault("X-Amz-Date")
  valid_615552 = validateParameter(valid_615552, JString, required = false,
                                 default = nil)
  if valid_615552 != nil:
    section.add "X-Amz-Date", valid_615552
  var valid_615553 = header.getOrDefault("X-Amz-Credential")
  valid_615553 = validateParameter(valid_615553, JString, required = false,
                                 default = nil)
  if valid_615553 != nil:
    section.add "X-Amz-Credential", valid_615553
  var valid_615554 = header.getOrDefault("X-Amz-Security-Token")
  valid_615554 = validateParameter(valid_615554, JString, required = false,
                                 default = nil)
  if valid_615554 != nil:
    section.add "X-Amz-Security-Token", valid_615554
  var valid_615555 = header.getOrDefault("X-Amz-Algorithm")
  valid_615555 = validateParameter(valid_615555, JString, required = false,
                                 default = nil)
  if valid_615555 != nil:
    section.add "X-Amz-Algorithm", valid_615555
  var valid_615556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615556 = validateParameter(valid_615556, JString, required = false,
                                 default = nil)
  if valid_615556 != nil:
    section.add "X-Amz-SignedHeaders", valid_615556
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_615557 = formData.getOrDefault("VersionId")
  valid_615557 = validateParameter(valid_615557, JString, required = true,
                                 default = nil)
  if valid_615557 != nil:
    section.add "VersionId", valid_615557
  var valid_615558 = formData.getOrDefault("PolicyArn")
  valid_615558 = validateParameter(valid_615558, JString, required = true,
                                 default = nil)
  if valid_615558 != nil:
    section.add "PolicyArn", valid_615558
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615559: Call_PostGetPolicyVersion_615545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615559.validator(path, query, header, formData, body)
  let scheme = call_615559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615559.url(scheme.get, call_615559.host, call_615559.base,
                         call_615559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615559, url, valid)

proc call*(call_615560: Call_PostGetPolicyVersion_615545; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615561 = newJObject()
  var formData_615562 = newJObject()
  add(formData_615562, "VersionId", newJString(VersionId))
  add(formData_615562, "PolicyArn", newJString(PolicyArn))
  add(query_615561, "Action", newJString(Action))
  add(query_615561, "Version", newJString(Version))
  result = call_615560.call(nil, query_615561, nil, formData_615562, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_615545(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_615546, base: "/",
    url: url_PostGetPolicyVersion_615547, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_615528 = ref object of OpenApiRestCall_612658
proc url_GetGetPolicyVersion_615530(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetPolicyVersion_615529(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_615531 = query.getOrDefault("VersionId")
  valid_615531 = validateParameter(valid_615531, JString, required = true,
                                 default = nil)
  if valid_615531 != nil:
    section.add "VersionId", valid_615531
  var valid_615532 = query.getOrDefault("PolicyArn")
  valid_615532 = validateParameter(valid_615532, JString, required = true,
                                 default = nil)
  if valid_615532 != nil:
    section.add "PolicyArn", valid_615532
  var valid_615533 = query.getOrDefault("Action")
  valid_615533 = validateParameter(valid_615533, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_615533 != nil:
    section.add "Action", valid_615533
  var valid_615534 = query.getOrDefault("Version")
  valid_615534 = validateParameter(valid_615534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615534 != nil:
    section.add "Version", valid_615534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615535 = header.getOrDefault("X-Amz-Signature")
  valid_615535 = validateParameter(valid_615535, JString, required = false,
                                 default = nil)
  if valid_615535 != nil:
    section.add "X-Amz-Signature", valid_615535
  var valid_615536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615536 = validateParameter(valid_615536, JString, required = false,
                                 default = nil)
  if valid_615536 != nil:
    section.add "X-Amz-Content-Sha256", valid_615536
  var valid_615537 = header.getOrDefault("X-Amz-Date")
  valid_615537 = validateParameter(valid_615537, JString, required = false,
                                 default = nil)
  if valid_615537 != nil:
    section.add "X-Amz-Date", valid_615537
  var valid_615538 = header.getOrDefault("X-Amz-Credential")
  valid_615538 = validateParameter(valid_615538, JString, required = false,
                                 default = nil)
  if valid_615538 != nil:
    section.add "X-Amz-Credential", valid_615538
  var valid_615539 = header.getOrDefault("X-Amz-Security-Token")
  valid_615539 = validateParameter(valid_615539, JString, required = false,
                                 default = nil)
  if valid_615539 != nil:
    section.add "X-Amz-Security-Token", valid_615539
  var valid_615540 = header.getOrDefault("X-Amz-Algorithm")
  valid_615540 = validateParameter(valid_615540, JString, required = false,
                                 default = nil)
  if valid_615540 != nil:
    section.add "X-Amz-Algorithm", valid_615540
  var valid_615541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615541 = validateParameter(valid_615541, JString, required = false,
                                 default = nil)
  if valid_615541 != nil:
    section.add "X-Amz-SignedHeaders", valid_615541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615542: Call_GetGetPolicyVersion_615528; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615542.validator(path, query, header, formData, body)
  let scheme = call_615542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615542.url(scheme.get, call_615542.host, call_615542.base,
                         call_615542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615542, url, valid)

proc call*(call_615543: Call_GetGetPolicyVersion_615528; VersionId: string;
          PolicyArn: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615544 = newJObject()
  add(query_615544, "VersionId", newJString(VersionId))
  add(query_615544, "PolicyArn", newJString(PolicyArn))
  add(query_615544, "Action", newJString(Action))
  add(query_615544, "Version", newJString(Version))
  result = call_615543.call(nil, query_615544, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_615528(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_615529, base: "/",
    url: url_GetGetPolicyVersion_615530, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_615579 = ref object of OpenApiRestCall_612658
proc url_PostGetRole_615581(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRole_615580(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615582 = query.getOrDefault("Action")
  valid_615582 = validateParameter(valid_615582, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_615582 != nil:
    section.add "Action", valid_615582
  var valid_615583 = query.getOrDefault("Version")
  valid_615583 = validateParameter(valid_615583, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615583 != nil:
    section.add "Version", valid_615583
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615584 = header.getOrDefault("X-Amz-Signature")
  valid_615584 = validateParameter(valid_615584, JString, required = false,
                                 default = nil)
  if valid_615584 != nil:
    section.add "X-Amz-Signature", valid_615584
  var valid_615585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615585 = validateParameter(valid_615585, JString, required = false,
                                 default = nil)
  if valid_615585 != nil:
    section.add "X-Amz-Content-Sha256", valid_615585
  var valid_615586 = header.getOrDefault("X-Amz-Date")
  valid_615586 = validateParameter(valid_615586, JString, required = false,
                                 default = nil)
  if valid_615586 != nil:
    section.add "X-Amz-Date", valid_615586
  var valid_615587 = header.getOrDefault("X-Amz-Credential")
  valid_615587 = validateParameter(valid_615587, JString, required = false,
                                 default = nil)
  if valid_615587 != nil:
    section.add "X-Amz-Credential", valid_615587
  var valid_615588 = header.getOrDefault("X-Amz-Security-Token")
  valid_615588 = validateParameter(valid_615588, JString, required = false,
                                 default = nil)
  if valid_615588 != nil:
    section.add "X-Amz-Security-Token", valid_615588
  var valid_615589 = header.getOrDefault("X-Amz-Algorithm")
  valid_615589 = validateParameter(valid_615589, JString, required = false,
                                 default = nil)
  if valid_615589 != nil:
    section.add "X-Amz-Algorithm", valid_615589
  var valid_615590 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615590 = validateParameter(valid_615590, JString, required = false,
                                 default = nil)
  if valid_615590 != nil:
    section.add "X-Amz-SignedHeaders", valid_615590
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615591 = formData.getOrDefault("RoleName")
  valid_615591 = validateParameter(valid_615591, JString, required = true,
                                 default = nil)
  if valid_615591 != nil:
    section.add "RoleName", valid_615591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615592: Call_PostGetRole_615579; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_615592.validator(path, query, header, formData, body)
  let scheme = call_615592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615592.url(scheme.get, call_615592.host, call_615592.base,
                         call_615592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615592, url, valid)

proc call*(call_615593: Call_PostGetRole_615579; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615594 = newJObject()
  var formData_615595 = newJObject()
  add(formData_615595, "RoleName", newJString(RoleName))
  add(query_615594, "Action", newJString(Action))
  add(query_615594, "Version", newJString(Version))
  result = call_615593.call(nil, query_615594, nil, formData_615595, nil)

var postGetRole* = Call_PostGetRole_615579(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_615580,
                                        base: "/", url: url_PostGetRole_615581,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_615563 = ref object of OpenApiRestCall_612658
proc url_GetGetRole_615565(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRole_615564(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_615566 = query.getOrDefault("RoleName")
  valid_615566 = validateParameter(valid_615566, JString, required = true,
                                 default = nil)
  if valid_615566 != nil:
    section.add "RoleName", valid_615566
  var valid_615567 = query.getOrDefault("Action")
  valid_615567 = validateParameter(valid_615567, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_615567 != nil:
    section.add "Action", valid_615567
  var valid_615568 = query.getOrDefault("Version")
  valid_615568 = validateParameter(valid_615568, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615568 != nil:
    section.add "Version", valid_615568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615569 = header.getOrDefault("X-Amz-Signature")
  valid_615569 = validateParameter(valid_615569, JString, required = false,
                                 default = nil)
  if valid_615569 != nil:
    section.add "X-Amz-Signature", valid_615569
  var valid_615570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615570 = validateParameter(valid_615570, JString, required = false,
                                 default = nil)
  if valid_615570 != nil:
    section.add "X-Amz-Content-Sha256", valid_615570
  var valid_615571 = header.getOrDefault("X-Amz-Date")
  valid_615571 = validateParameter(valid_615571, JString, required = false,
                                 default = nil)
  if valid_615571 != nil:
    section.add "X-Amz-Date", valid_615571
  var valid_615572 = header.getOrDefault("X-Amz-Credential")
  valid_615572 = validateParameter(valid_615572, JString, required = false,
                                 default = nil)
  if valid_615572 != nil:
    section.add "X-Amz-Credential", valid_615572
  var valid_615573 = header.getOrDefault("X-Amz-Security-Token")
  valid_615573 = validateParameter(valid_615573, JString, required = false,
                                 default = nil)
  if valid_615573 != nil:
    section.add "X-Amz-Security-Token", valid_615573
  var valid_615574 = header.getOrDefault("X-Amz-Algorithm")
  valid_615574 = validateParameter(valid_615574, JString, required = false,
                                 default = nil)
  if valid_615574 != nil:
    section.add "X-Amz-Algorithm", valid_615574
  var valid_615575 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615575 = validateParameter(valid_615575, JString, required = false,
                                 default = nil)
  if valid_615575 != nil:
    section.add "X-Amz-SignedHeaders", valid_615575
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615576: Call_GetGetRole_615563; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_615576.validator(path, query, header, formData, body)
  let scheme = call_615576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615576.url(scheme.get, call_615576.host, call_615576.base,
                         call_615576.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615576, url, valid)

proc call*(call_615577: Call_GetGetRole_615563; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615578 = newJObject()
  add(query_615578, "RoleName", newJString(RoleName))
  add(query_615578, "Action", newJString(Action))
  add(query_615578, "Version", newJString(Version))
  result = call_615577.call(nil, query_615578, nil, nil, nil)

var getGetRole* = Call_GetGetRole_615563(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_615564,
                                      base: "/", url: url_GetGetRole_615565,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_615613 = ref object of OpenApiRestCall_612658
proc url_PostGetRolePolicy_615615(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetRolePolicy_615614(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615616 = query.getOrDefault("Action")
  valid_615616 = validateParameter(valid_615616, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_615616 != nil:
    section.add "Action", valid_615616
  var valid_615617 = query.getOrDefault("Version")
  valid_615617 = validateParameter(valid_615617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615617 != nil:
    section.add "Version", valid_615617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615618 = header.getOrDefault("X-Amz-Signature")
  valid_615618 = validateParameter(valid_615618, JString, required = false,
                                 default = nil)
  if valid_615618 != nil:
    section.add "X-Amz-Signature", valid_615618
  var valid_615619 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615619 = validateParameter(valid_615619, JString, required = false,
                                 default = nil)
  if valid_615619 != nil:
    section.add "X-Amz-Content-Sha256", valid_615619
  var valid_615620 = header.getOrDefault("X-Amz-Date")
  valid_615620 = validateParameter(valid_615620, JString, required = false,
                                 default = nil)
  if valid_615620 != nil:
    section.add "X-Amz-Date", valid_615620
  var valid_615621 = header.getOrDefault("X-Amz-Credential")
  valid_615621 = validateParameter(valid_615621, JString, required = false,
                                 default = nil)
  if valid_615621 != nil:
    section.add "X-Amz-Credential", valid_615621
  var valid_615622 = header.getOrDefault("X-Amz-Security-Token")
  valid_615622 = validateParameter(valid_615622, JString, required = false,
                                 default = nil)
  if valid_615622 != nil:
    section.add "X-Amz-Security-Token", valid_615622
  var valid_615623 = header.getOrDefault("X-Amz-Algorithm")
  valid_615623 = validateParameter(valid_615623, JString, required = false,
                                 default = nil)
  if valid_615623 != nil:
    section.add "X-Amz-Algorithm", valid_615623
  var valid_615624 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615624 = validateParameter(valid_615624, JString, required = false,
                                 default = nil)
  if valid_615624 != nil:
    section.add "X-Amz-SignedHeaders", valid_615624
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_615625 = formData.getOrDefault("RoleName")
  valid_615625 = validateParameter(valid_615625, JString, required = true,
                                 default = nil)
  if valid_615625 != nil:
    section.add "RoleName", valid_615625
  var valid_615626 = formData.getOrDefault("PolicyName")
  valid_615626 = validateParameter(valid_615626, JString, required = true,
                                 default = nil)
  if valid_615626 != nil:
    section.add "PolicyName", valid_615626
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615627: Call_PostGetRolePolicy_615613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_615627.validator(path, query, header, formData, body)
  let scheme = call_615627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615627.url(scheme.get, call_615627.host, call_615627.base,
                         call_615627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615627, url, valid)

proc call*(call_615628: Call_PostGetRolePolicy_615613; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_615629 = newJObject()
  var formData_615630 = newJObject()
  add(formData_615630, "RoleName", newJString(RoleName))
  add(query_615629, "Action", newJString(Action))
  add(query_615629, "Version", newJString(Version))
  add(formData_615630, "PolicyName", newJString(PolicyName))
  result = call_615628.call(nil, query_615629, nil, formData_615630, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_615613(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_615614,
    base: "/", url: url_PostGetRolePolicy_615615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_615596 = ref object of OpenApiRestCall_612658
proc url_GetGetRolePolicy_615598(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetRolePolicy_615597(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_615599 = query.getOrDefault("PolicyName")
  valid_615599 = validateParameter(valid_615599, JString, required = true,
                                 default = nil)
  if valid_615599 != nil:
    section.add "PolicyName", valid_615599
  var valid_615600 = query.getOrDefault("RoleName")
  valid_615600 = validateParameter(valid_615600, JString, required = true,
                                 default = nil)
  if valid_615600 != nil:
    section.add "RoleName", valid_615600
  var valid_615601 = query.getOrDefault("Action")
  valid_615601 = validateParameter(valid_615601, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_615601 != nil:
    section.add "Action", valid_615601
  var valid_615602 = query.getOrDefault("Version")
  valid_615602 = validateParameter(valid_615602, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615602 != nil:
    section.add "Version", valid_615602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615603 = header.getOrDefault("X-Amz-Signature")
  valid_615603 = validateParameter(valid_615603, JString, required = false,
                                 default = nil)
  if valid_615603 != nil:
    section.add "X-Amz-Signature", valid_615603
  var valid_615604 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615604 = validateParameter(valid_615604, JString, required = false,
                                 default = nil)
  if valid_615604 != nil:
    section.add "X-Amz-Content-Sha256", valid_615604
  var valid_615605 = header.getOrDefault("X-Amz-Date")
  valid_615605 = validateParameter(valid_615605, JString, required = false,
                                 default = nil)
  if valid_615605 != nil:
    section.add "X-Amz-Date", valid_615605
  var valid_615606 = header.getOrDefault("X-Amz-Credential")
  valid_615606 = validateParameter(valid_615606, JString, required = false,
                                 default = nil)
  if valid_615606 != nil:
    section.add "X-Amz-Credential", valid_615606
  var valid_615607 = header.getOrDefault("X-Amz-Security-Token")
  valid_615607 = validateParameter(valid_615607, JString, required = false,
                                 default = nil)
  if valid_615607 != nil:
    section.add "X-Amz-Security-Token", valid_615607
  var valid_615608 = header.getOrDefault("X-Amz-Algorithm")
  valid_615608 = validateParameter(valid_615608, JString, required = false,
                                 default = nil)
  if valid_615608 != nil:
    section.add "X-Amz-Algorithm", valid_615608
  var valid_615609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615609 = validateParameter(valid_615609, JString, required = false,
                                 default = nil)
  if valid_615609 != nil:
    section.add "X-Amz-SignedHeaders", valid_615609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615610: Call_GetGetRolePolicy_615596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_615610.validator(path, query, header, formData, body)
  let scheme = call_615610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615610.url(scheme.get, call_615610.host, call_615610.base,
                         call_615610.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615610, url, valid)

proc call*(call_615611: Call_GetGetRolePolicy_615596; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615612 = newJObject()
  add(query_615612, "PolicyName", newJString(PolicyName))
  add(query_615612, "RoleName", newJString(RoleName))
  add(query_615612, "Action", newJString(Action))
  add(query_615612, "Version", newJString(Version))
  result = call_615611.call(nil, query_615612, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_615596(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_615597,
    base: "/", url: url_GetGetRolePolicy_615598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_615647 = ref object of OpenApiRestCall_612658
proc url_PostGetSAMLProvider_615649(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSAMLProvider_615648(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615650 = query.getOrDefault("Action")
  valid_615650 = validateParameter(valid_615650, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_615650 != nil:
    section.add "Action", valid_615650
  var valid_615651 = query.getOrDefault("Version")
  valid_615651 = validateParameter(valid_615651, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615651 != nil:
    section.add "Version", valid_615651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615652 = header.getOrDefault("X-Amz-Signature")
  valid_615652 = validateParameter(valid_615652, JString, required = false,
                                 default = nil)
  if valid_615652 != nil:
    section.add "X-Amz-Signature", valid_615652
  var valid_615653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615653 = validateParameter(valid_615653, JString, required = false,
                                 default = nil)
  if valid_615653 != nil:
    section.add "X-Amz-Content-Sha256", valid_615653
  var valid_615654 = header.getOrDefault("X-Amz-Date")
  valid_615654 = validateParameter(valid_615654, JString, required = false,
                                 default = nil)
  if valid_615654 != nil:
    section.add "X-Amz-Date", valid_615654
  var valid_615655 = header.getOrDefault("X-Amz-Credential")
  valid_615655 = validateParameter(valid_615655, JString, required = false,
                                 default = nil)
  if valid_615655 != nil:
    section.add "X-Amz-Credential", valid_615655
  var valid_615656 = header.getOrDefault("X-Amz-Security-Token")
  valid_615656 = validateParameter(valid_615656, JString, required = false,
                                 default = nil)
  if valid_615656 != nil:
    section.add "X-Amz-Security-Token", valid_615656
  var valid_615657 = header.getOrDefault("X-Amz-Algorithm")
  valid_615657 = validateParameter(valid_615657, JString, required = false,
                                 default = nil)
  if valid_615657 != nil:
    section.add "X-Amz-Algorithm", valid_615657
  var valid_615658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615658 = validateParameter(valid_615658, JString, required = false,
                                 default = nil)
  if valid_615658 != nil:
    section.add "X-Amz-SignedHeaders", valid_615658
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_615659 = formData.getOrDefault("SAMLProviderArn")
  valid_615659 = validateParameter(valid_615659, JString, required = true,
                                 default = nil)
  if valid_615659 != nil:
    section.add "SAMLProviderArn", valid_615659
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615660: Call_PostGetSAMLProvider_615647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_615660.validator(path, query, header, formData, body)
  let scheme = call_615660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615660.url(scheme.get, call_615660.host, call_615660.base,
                         call_615660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615660, url, valid)

proc call*(call_615661: Call_PostGetSAMLProvider_615647; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615662 = newJObject()
  var formData_615663 = newJObject()
  add(formData_615663, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_615662, "Action", newJString(Action))
  add(query_615662, "Version", newJString(Version))
  result = call_615661.call(nil, query_615662, nil, formData_615663, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_615647(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_615648, base: "/",
    url: url_PostGetSAMLProvider_615649, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_615631 = ref object of OpenApiRestCall_612658
proc url_GetGetSAMLProvider_615633(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSAMLProvider_615632(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_615634 = query.getOrDefault("Action")
  valid_615634 = validateParameter(valid_615634, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_615634 != nil:
    section.add "Action", valid_615634
  var valid_615635 = query.getOrDefault("SAMLProviderArn")
  valid_615635 = validateParameter(valid_615635, JString, required = true,
                                 default = nil)
  if valid_615635 != nil:
    section.add "SAMLProviderArn", valid_615635
  var valid_615636 = query.getOrDefault("Version")
  valid_615636 = validateParameter(valid_615636, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615636 != nil:
    section.add "Version", valid_615636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615637 = header.getOrDefault("X-Amz-Signature")
  valid_615637 = validateParameter(valid_615637, JString, required = false,
                                 default = nil)
  if valid_615637 != nil:
    section.add "X-Amz-Signature", valid_615637
  var valid_615638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615638 = validateParameter(valid_615638, JString, required = false,
                                 default = nil)
  if valid_615638 != nil:
    section.add "X-Amz-Content-Sha256", valid_615638
  var valid_615639 = header.getOrDefault("X-Amz-Date")
  valid_615639 = validateParameter(valid_615639, JString, required = false,
                                 default = nil)
  if valid_615639 != nil:
    section.add "X-Amz-Date", valid_615639
  var valid_615640 = header.getOrDefault("X-Amz-Credential")
  valid_615640 = validateParameter(valid_615640, JString, required = false,
                                 default = nil)
  if valid_615640 != nil:
    section.add "X-Amz-Credential", valid_615640
  var valid_615641 = header.getOrDefault("X-Amz-Security-Token")
  valid_615641 = validateParameter(valid_615641, JString, required = false,
                                 default = nil)
  if valid_615641 != nil:
    section.add "X-Amz-Security-Token", valid_615641
  var valid_615642 = header.getOrDefault("X-Amz-Algorithm")
  valid_615642 = validateParameter(valid_615642, JString, required = false,
                                 default = nil)
  if valid_615642 != nil:
    section.add "X-Amz-Algorithm", valid_615642
  var valid_615643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615643 = validateParameter(valid_615643, JString, required = false,
                                 default = nil)
  if valid_615643 != nil:
    section.add "X-Amz-SignedHeaders", valid_615643
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615644: Call_GetGetSAMLProvider_615631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_615644.validator(path, query, header, formData, body)
  let scheme = call_615644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615644.url(scheme.get, call_615644.host, call_615644.base,
                         call_615644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615644, url, valid)

proc call*(call_615645: Call_GetGetSAMLProvider_615631; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_615646 = newJObject()
  add(query_615646, "Action", newJString(Action))
  add(query_615646, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_615646, "Version", newJString(Version))
  result = call_615645.call(nil, query_615646, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_615631(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_615632,
    base: "/", url: url_GetGetSAMLProvider_615633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_615682 = ref object of OpenApiRestCall_612658
proc url_PostGetSSHPublicKey_615684(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetSSHPublicKey_615683(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615685 = query.getOrDefault("Action")
  valid_615685 = validateParameter(valid_615685, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_615685 != nil:
    section.add "Action", valid_615685
  var valid_615686 = query.getOrDefault("Version")
  valid_615686 = validateParameter(valid_615686, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615686 != nil:
    section.add "Version", valid_615686
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615687 = header.getOrDefault("X-Amz-Signature")
  valid_615687 = validateParameter(valid_615687, JString, required = false,
                                 default = nil)
  if valid_615687 != nil:
    section.add "X-Amz-Signature", valid_615687
  var valid_615688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615688 = validateParameter(valid_615688, JString, required = false,
                                 default = nil)
  if valid_615688 != nil:
    section.add "X-Amz-Content-Sha256", valid_615688
  var valid_615689 = header.getOrDefault("X-Amz-Date")
  valid_615689 = validateParameter(valid_615689, JString, required = false,
                                 default = nil)
  if valid_615689 != nil:
    section.add "X-Amz-Date", valid_615689
  var valid_615690 = header.getOrDefault("X-Amz-Credential")
  valid_615690 = validateParameter(valid_615690, JString, required = false,
                                 default = nil)
  if valid_615690 != nil:
    section.add "X-Amz-Credential", valid_615690
  var valid_615691 = header.getOrDefault("X-Amz-Security-Token")
  valid_615691 = validateParameter(valid_615691, JString, required = false,
                                 default = nil)
  if valid_615691 != nil:
    section.add "X-Amz-Security-Token", valid_615691
  var valid_615692 = header.getOrDefault("X-Amz-Algorithm")
  valid_615692 = validateParameter(valid_615692, JString, required = false,
                                 default = nil)
  if valid_615692 != nil:
    section.add "X-Amz-Algorithm", valid_615692
  var valid_615693 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615693 = validateParameter(valid_615693, JString, required = false,
                                 default = nil)
  if valid_615693 != nil:
    section.add "X-Amz-SignedHeaders", valid_615693
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_615694 = formData.getOrDefault("SSHPublicKeyId")
  valid_615694 = validateParameter(valid_615694, JString, required = true,
                                 default = nil)
  if valid_615694 != nil:
    section.add "SSHPublicKeyId", valid_615694
  var valid_615695 = formData.getOrDefault("Encoding")
  valid_615695 = validateParameter(valid_615695, JString, required = true,
                                 default = newJString("SSH"))
  if valid_615695 != nil:
    section.add "Encoding", valid_615695
  var valid_615696 = formData.getOrDefault("UserName")
  valid_615696 = validateParameter(valid_615696, JString, required = true,
                                 default = nil)
  if valid_615696 != nil:
    section.add "UserName", valid_615696
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615697: Call_PostGetSSHPublicKey_615682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615697.validator(path, query, header, formData, body)
  let scheme = call_615697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615697.url(scheme.get, call_615697.host, call_615697.base,
                         call_615697.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615697, url, valid)

proc call*(call_615698: Call_PostGetSSHPublicKey_615682; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615699 = newJObject()
  var formData_615700 = newJObject()
  add(formData_615700, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_615700, "Encoding", newJString(Encoding))
  add(formData_615700, "UserName", newJString(UserName))
  add(query_615699, "Action", newJString(Action))
  add(query_615699, "Version", newJString(Version))
  result = call_615698.call(nil, query_615699, nil, formData_615700, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_615682(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_615683, base: "/",
    url: url_PostGetSSHPublicKey_615684, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_615664 = ref object of OpenApiRestCall_612658
proc url_GetGetSSHPublicKey_615666(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetSSHPublicKey_615665(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_615667 = query.getOrDefault("SSHPublicKeyId")
  valid_615667 = validateParameter(valid_615667, JString, required = true,
                                 default = nil)
  if valid_615667 != nil:
    section.add "SSHPublicKeyId", valid_615667
  var valid_615668 = query.getOrDefault("UserName")
  valid_615668 = validateParameter(valid_615668, JString, required = true,
                                 default = nil)
  if valid_615668 != nil:
    section.add "UserName", valid_615668
  var valid_615669 = query.getOrDefault("Encoding")
  valid_615669 = validateParameter(valid_615669, JString, required = true,
                                 default = newJString("SSH"))
  if valid_615669 != nil:
    section.add "Encoding", valid_615669
  var valid_615670 = query.getOrDefault("Action")
  valid_615670 = validateParameter(valid_615670, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_615670 != nil:
    section.add "Action", valid_615670
  var valid_615671 = query.getOrDefault("Version")
  valid_615671 = validateParameter(valid_615671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615671 != nil:
    section.add "Version", valid_615671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615672 = header.getOrDefault("X-Amz-Signature")
  valid_615672 = validateParameter(valid_615672, JString, required = false,
                                 default = nil)
  if valid_615672 != nil:
    section.add "X-Amz-Signature", valid_615672
  var valid_615673 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615673 = validateParameter(valid_615673, JString, required = false,
                                 default = nil)
  if valid_615673 != nil:
    section.add "X-Amz-Content-Sha256", valid_615673
  var valid_615674 = header.getOrDefault("X-Amz-Date")
  valid_615674 = validateParameter(valid_615674, JString, required = false,
                                 default = nil)
  if valid_615674 != nil:
    section.add "X-Amz-Date", valid_615674
  var valid_615675 = header.getOrDefault("X-Amz-Credential")
  valid_615675 = validateParameter(valid_615675, JString, required = false,
                                 default = nil)
  if valid_615675 != nil:
    section.add "X-Amz-Credential", valid_615675
  var valid_615676 = header.getOrDefault("X-Amz-Security-Token")
  valid_615676 = validateParameter(valid_615676, JString, required = false,
                                 default = nil)
  if valid_615676 != nil:
    section.add "X-Amz-Security-Token", valid_615676
  var valid_615677 = header.getOrDefault("X-Amz-Algorithm")
  valid_615677 = validateParameter(valid_615677, JString, required = false,
                                 default = nil)
  if valid_615677 != nil:
    section.add "X-Amz-Algorithm", valid_615677
  var valid_615678 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615678 = validateParameter(valid_615678, JString, required = false,
                                 default = nil)
  if valid_615678 != nil:
    section.add "X-Amz-SignedHeaders", valid_615678
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615679: Call_GetGetSSHPublicKey_615664; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_615679.validator(path, query, header, formData, body)
  let scheme = call_615679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615679.url(scheme.get, call_615679.host, call_615679.base,
                         call_615679.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615679, url, valid)

proc call*(call_615680: Call_GetGetSSHPublicKey_615664; SSHPublicKeyId: string;
          UserName: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615681 = newJObject()
  add(query_615681, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_615681, "UserName", newJString(UserName))
  add(query_615681, "Encoding", newJString(Encoding))
  add(query_615681, "Action", newJString(Action))
  add(query_615681, "Version", newJString(Version))
  result = call_615680.call(nil, query_615681, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_615664(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_615665,
    base: "/", url: url_GetGetSSHPublicKey_615666,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_615717 = ref object of OpenApiRestCall_612658
proc url_PostGetServerCertificate_615719(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServerCertificate_615718(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615720 = query.getOrDefault("Action")
  valid_615720 = validateParameter(valid_615720, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_615720 != nil:
    section.add "Action", valid_615720
  var valid_615721 = query.getOrDefault("Version")
  valid_615721 = validateParameter(valid_615721, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615721 != nil:
    section.add "Version", valid_615721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615722 = header.getOrDefault("X-Amz-Signature")
  valid_615722 = validateParameter(valid_615722, JString, required = false,
                                 default = nil)
  if valid_615722 != nil:
    section.add "X-Amz-Signature", valid_615722
  var valid_615723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615723 = validateParameter(valid_615723, JString, required = false,
                                 default = nil)
  if valid_615723 != nil:
    section.add "X-Amz-Content-Sha256", valid_615723
  var valid_615724 = header.getOrDefault("X-Amz-Date")
  valid_615724 = validateParameter(valid_615724, JString, required = false,
                                 default = nil)
  if valid_615724 != nil:
    section.add "X-Amz-Date", valid_615724
  var valid_615725 = header.getOrDefault("X-Amz-Credential")
  valid_615725 = validateParameter(valid_615725, JString, required = false,
                                 default = nil)
  if valid_615725 != nil:
    section.add "X-Amz-Credential", valid_615725
  var valid_615726 = header.getOrDefault("X-Amz-Security-Token")
  valid_615726 = validateParameter(valid_615726, JString, required = false,
                                 default = nil)
  if valid_615726 != nil:
    section.add "X-Amz-Security-Token", valid_615726
  var valid_615727 = header.getOrDefault("X-Amz-Algorithm")
  valid_615727 = validateParameter(valid_615727, JString, required = false,
                                 default = nil)
  if valid_615727 != nil:
    section.add "X-Amz-Algorithm", valid_615727
  var valid_615728 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615728 = validateParameter(valid_615728, JString, required = false,
                                 default = nil)
  if valid_615728 != nil:
    section.add "X-Amz-SignedHeaders", valid_615728
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_615729 = formData.getOrDefault("ServerCertificateName")
  valid_615729 = validateParameter(valid_615729, JString, required = true,
                                 default = nil)
  if valid_615729 != nil:
    section.add "ServerCertificateName", valid_615729
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615730: Call_PostGetServerCertificate_615717; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_615730.validator(path, query, header, formData, body)
  let scheme = call_615730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615730.url(scheme.get, call_615730.host, call_615730.base,
                         call_615730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615730, url, valid)

proc call*(call_615731: Call_PostGetServerCertificate_615717;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615732 = newJObject()
  var formData_615733 = newJObject()
  add(formData_615733, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_615732, "Action", newJString(Action))
  add(query_615732, "Version", newJString(Version))
  result = call_615731.call(nil, query_615732, nil, formData_615733, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_615717(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_615718, base: "/",
    url: url_PostGetServerCertificate_615719, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_615701 = ref object of OpenApiRestCall_612658
proc url_GetGetServerCertificate_615703(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServerCertificate_615702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_615704 = query.getOrDefault("ServerCertificateName")
  valid_615704 = validateParameter(valid_615704, JString, required = true,
                                 default = nil)
  if valid_615704 != nil:
    section.add "ServerCertificateName", valid_615704
  var valid_615705 = query.getOrDefault("Action")
  valid_615705 = validateParameter(valid_615705, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_615705 != nil:
    section.add "Action", valid_615705
  var valid_615706 = query.getOrDefault("Version")
  valid_615706 = validateParameter(valid_615706, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615706 != nil:
    section.add "Version", valid_615706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615707 = header.getOrDefault("X-Amz-Signature")
  valid_615707 = validateParameter(valid_615707, JString, required = false,
                                 default = nil)
  if valid_615707 != nil:
    section.add "X-Amz-Signature", valid_615707
  var valid_615708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615708 = validateParameter(valid_615708, JString, required = false,
                                 default = nil)
  if valid_615708 != nil:
    section.add "X-Amz-Content-Sha256", valid_615708
  var valid_615709 = header.getOrDefault("X-Amz-Date")
  valid_615709 = validateParameter(valid_615709, JString, required = false,
                                 default = nil)
  if valid_615709 != nil:
    section.add "X-Amz-Date", valid_615709
  var valid_615710 = header.getOrDefault("X-Amz-Credential")
  valid_615710 = validateParameter(valid_615710, JString, required = false,
                                 default = nil)
  if valid_615710 != nil:
    section.add "X-Amz-Credential", valid_615710
  var valid_615711 = header.getOrDefault("X-Amz-Security-Token")
  valid_615711 = validateParameter(valid_615711, JString, required = false,
                                 default = nil)
  if valid_615711 != nil:
    section.add "X-Amz-Security-Token", valid_615711
  var valid_615712 = header.getOrDefault("X-Amz-Algorithm")
  valid_615712 = validateParameter(valid_615712, JString, required = false,
                                 default = nil)
  if valid_615712 != nil:
    section.add "X-Amz-Algorithm", valid_615712
  var valid_615713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615713 = validateParameter(valid_615713, JString, required = false,
                                 default = nil)
  if valid_615713 != nil:
    section.add "X-Amz-SignedHeaders", valid_615713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615714: Call_GetGetServerCertificate_615701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_615714.validator(path, query, header, formData, body)
  let scheme = call_615714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615714.url(scheme.get, call_615714.host, call_615714.base,
                         call_615714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615714, url, valid)

proc call*(call_615715: Call_GetGetServerCertificate_615701;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615716 = newJObject()
  add(query_615716, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_615716, "Action", newJString(Action))
  add(query_615716, "Version", newJString(Version))
  result = call_615715.call(nil, query_615716, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_615701(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_615702, base: "/",
    url: url_GetGetServerCertificate_615703, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_615752 = ref object of OpenApiRestCall_612658
proc url_PostGetServiceLastAccessedDetails_615754(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetails_615753(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615755 = query.getOrDefault("Action")
  valid_615755 = validateParameter(valid_615755, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_615755 != nil:
    section.add "Action", valid_615755
  var valid_615756 = query.getOrDefault("Version")
  valid_615756 = validateParameter(valid_615756, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615756 != nil:
    section.add "Version", valid_615756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615757 = header.getOrDefault("X-Amz-Signature")
  valid_615757 = validateParameter(valid_615757, JString, required = false,
                                 default = nil)
  if valid_615757 != nil:
    section.add "X-Amz-Signature", valid_615757
  var valid_615758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615758 = validateParameter(valid_615758, JString, required = false,
                                 default = nil)
  if valid_615758 != nil:
    section.add "X-Amz-Content-Sha256", valid_615758
  var valid_615759 = header.getOrDefault("X-Amz-Date")
  valid_615759 = validateParameter(valid_615759, JString, required = false,
                                 default = nil)
  if valid_615759 != nil:
    section.add "X-Amz-Date", valid_615759
  var valid_615760 = header.getOrDefault("X-Amz-Credential")
  valid_615760 = validateParameter(valid_615760, JString, required = false,
                                 default = nil)
  if valid_615760 != nil:
    section.add "X-Amz-Credential", valid_615760
  var valid_615761 = header.getOrDefault("X-Amz-Security-Token")
  valid_615761 = validateParameter(valid_615761, JString, required = false,
                                 default = nil)
  if valid_615761 != nil:
    section.add "X-Amz-Security-Token", valid_615761
  var valid_615762 = header.getOrDefault("X-Amz-Algorithm")
  valid_615762 = validateParameter(valid_615762, JString, required = false,
                                 default = nil)
  if valid_615762 != nil:
    section.add "X-Amz-Algorithm", valid_615762
  var valid_615763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615763 = validateParameter(valid_615763, JString, required = false,
                                 default = nil)
  if valid_615763 != nil:
    section.add "X-Amz-SignedHeaders", valid_615763
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_615764 = formData.getOrDefault("Marker")
  valid_615764 = validateParameter(valid_615764, JString, required = false,
                                 default = nil)
  if valid_615764 != nil:
    section.add "Marker", valid_615764
  var valid_615765 = formData.getOrDefault("MaxItems")
  valid_615765 = validateParameter(valid_615765, JInt, required = false, default = nil)
  if valid_615765 != nil:
    section.add "MaxItems", valid_615765
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_615766 = formData.getOrDefault("JobId")
  valid_615766 = validateParameter(valid_615766, JString, required = true,
                                 default = nil)
  if valid_615766 != nil:
    section.add "JobId", valid_615766
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615767: Call_PostGetServiceLastAccessedDetails_615752;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_615767.validator(path, query, header, formData, body)
  let scheme = call_615767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615767.url(scheme.get, call_615767.host, call_615767.base,
                         call_615767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615767, url, valid)

proc call*(call_615768: Call_PostGetServiceLastAccessedDetails_615752;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Version: string (required)
  var query_615769 = newJObject()
  var formData_615770 = newJObject()
  add(formData_615770, "Marker", newJString(Marker))
  add(query_615769, "Action", newJString(Action))
  add(formData_615770, "MaxItems", newJInt(MaxItems))
  add(formData_615770, "JobId", newJString(JobId))
  add(query_615769, "Version", newJString(Version))
  result = call_615768.call(nil, query_615769, nil, formData_615770, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_615752(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_615753, base: "/",
    url: url_PostGetServiceLastAccessedDetails_615754,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_615734 = ref object of OpenApiRestCall_612658
proc url_GetGetServiceLastAccessedDetails_615736(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetails_615735(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  section = newJObject()
  var valid_615737 = query.getOrDefault("Marker")
  valid_615737 = validateParameter(valid_615737, JString, required = false,
                                 default = nil)
  if valid_615737 != nil:
    section.add "Marker", valid_615737
  var valid_615738 = query.getOrDefault("MaxItems")
  valid_615738 = validateParameter(valid_615738, JInt, required = false, default = nil)
  if valid_615738 != nil:
    section.add "MaxItems", valid_615738
  var valid_615739 = query.getOrDefault("Action")
  valid_615739 = validateParameter(valid_615739, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_615739 != nil:
    section.add "Action", valid_615739
  var valid_615740 = query.getOrDefault("Version")
  valid_615740 = validateParameter(valid_615740, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615740 != nil:
    section.add "Version", valid_615740
  var valid_615741 = query.getOrDefault("JobId")
  valid_615741 = validateParameter(valid_615741, JString, required = true,
                                 default = nil)
  if valid_615741 != nil:
    section.add "JobId", valid_615741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615742 = header.getOrDefault("X-Amz-Signature")
  valid_615742 = validateParameter(valid_615742, JString, required = false,
                                 default = nil)
  if valid_615742 != nil:
    section.add "X-Amz-Signature", valid_615742
  var valid_615743 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615743 = validateParameter(valid_615743, JString, required = false,
                                 default = nil)
  if valid_615743 != nil:
    section.add "X-Amz-Content-Sha256", valid_615743
  var valid_615744 = header.getOrDefault("X-Amz-Date")
  valid_615744 = validateParameter(valid_615744, JString, required = false,
                                 default = nil)
  if valid_615744 != nil:
    section.add "X-Amz-Date", valid_615744
  var valid_615745 = header.getOrDefault("X-Amz-Credential")
  valid_615745 = validateParameter(valid_615745, JString, required = false,
                                 default = nil)
  if valid_615745 != nil:
    section.add "X-Amz-Credential", valid_615745
  var valid_615746 = header.getOrDefault("X-Amz-Security-Token")
  valid_615746 = validateParameter(valid_615746, JString, required = false,
                                 default = nil)
  if valid_615746 != nil:
    section.add "X-Amz-Security-Token", valid_615746
  var valid_615747 = header.getOrDefault("X-Amz-Algorithm")
  valid_615747 = validateParameter(valid_615747, JString, required = false,
                                 default = nil)
  if valid_615747 != nil:
    section.add "X-Amz-Algorithm", valid_615747
  var valid_615748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615748 = validateParameter(valid_615748, JString, required = false,
                                 default = nil)
  if valid_615748 != nil:
    section.add "X-Amz-SignedHeaders", valid_615748
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615749: Call_GetGetServiceLastAccessedDetails_615734;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_615749.validator(path, query, header, formData, body)
  let scheme = call_615749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615749.url(scheme.get, call_615749.host, call_615749.base,
                         call_615749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615749, url, valid)

proc call*(call_615750: Call_GetGetServiceLastAccessedDetails_615734;
          JobId: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  var query_615751 = newJObject()
  add(query_615751, "Marker", newJString(Marker))
  add(query_615751, "MaxItems", newJInt(MaxItems))
  add(query_615751, "Action", newJString(Action))
  add(query_615751, "Version", newJString(Version))
  add(query_615751, "JobId", newJString(JobId))
  result = call_615750.call(nil, query_615751, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_615734(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_615735, base: "/",
    url: url_GetGetServiceLastAccessedDetails_615736,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_615790 = ref object of OpenApiRestCall_612658
proc url_PostGetServiceLastAccessedDetailsWithEntities_615792(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_615791(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615793 = query.getOrDefault("Action")
  valid_615793 = validateParameter(valid_615793, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_615793 != nil:
    section.add "Action", valid_615793
  var valid_615794 = query.getOrDefault("Version")
  valid_615794 = validateParameter(valid_615794, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615794 != nil:
    section.add "Version", valid_615794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615795 = header.getOrDefault("X-Amz-Signature")
  valid_615795 = validateParameter(valid_615795, JString, required = false,
                                 default = nil)
  if valid_615795 != nil:
    section.add "X-Amz-Signature", valid_615795
  var valid_615796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615796 = validateParameter(valid_615796, JString, required = false,
                                 default = nil)
  if valid_615796 != nil:
    section.add "X-Amz-Content-Sha256", valid_615796
  var valid_615797 = header.getOrDefault("X-Amz-Date")
  valid_615797 = validateParameter(valid_615797, JString, required = false,
                                 default = nil)
  if valid_615797 != nil:
    section.add "X-Amz-Date", valid_615797
  var valid_615798 = header.getOrDefault("X-Amz-Credential")
  valid_615798 = validateParameter(valid_615798, JString, required = false,
                                 default = nil)
  if valid_615798 != nil:
    section.add "X-Amz-Credential", valid_615798
  var valid_615799 = header.getOrDefault("X-Amz-Security-Token")
  valid_615799 = validateParameter(valid_615799, JString, required = false,
                                 default = nil)
  if valid_615799 != nil:
    section.add "X-Amz-Security-Token", valid_615799
  var valid_615800 = header.getOrDefault("X-Amz-Algorithm")
  valid_615800 = validateParameter(valid_615800, JString, required = false,
                                 default = nil)
  if valid_615800 != nil:
    section.add "X-Amz-Algorithm", valid_615800
  var valid_615801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615801 = validateParameter(valid_615801, JString, required = false,
                                 default = nil)
  if valid_615801 != nil:
    section.add "X-Amz-SignedHeaders", valid_615801
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_615802 = formData.getOrDefault("Marker")
  valid_615802 = validateParameter(valid_615802, JString, required = false,
                                 default = nil)
  if valid_615802 != nil:
    section.add "Marker", valid_615802
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_615803 = formData.getOrDefault("ServiceNamespace")
  valid_615803 = validateParameter(valid_615803, JString, required = true,
                                 default = nil)
  if valid_615803 != nil:
    section.add "ServiceNamespace", valid_615803
  var valid_615804 = formData.getOrDefault("MaxItems")
  valid_615804 = validateParameter(valid_615804, JInt, required = false, default = nil)
  if valid_615804 != nil:
    section.add "MaxItems", valid_615804
  var valid_615805 = formData.getOrDefault("JobId")
  valid_615805 = validateParameter(valid_615805, JString, required = true,
                                 default = nil)
  if valid_615805 != nil:
    section.add "JobId", valid_615805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615806: Call_PostGetServiceLastAccessedDetailsWithEntities_615790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_615806.validator(path, query, header, formData, body)
  let scheme = call_615806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615806.url(scheme.get, call_615806.host, call_615806.base,
                         call_615806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615806, url, valid)

proc call*(call_615807: Call_PostGetServiceLastAccessedDetailsWithEntities_615790;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Version: string (required)
  var query_615808 = newJObject()
  var formData_615809 = newJObject()
  add(formData_615809, "Marker", newJString(Marker))
  add(formData_615809, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_615808, "Action", newJString(Action))
  add(formData_615809, "MaxItems", newJInt(MaxItems))
  add(formData_615809, "JobId", newJString(JobId))
  add(query_615808, "Version", newJString(Version))
  result = call_615807.call(nil, query_615808, nil, formData_615809, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_615790(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_615791,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_615792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_615771 = ref object of OpenApiRestCall_612658
proc url_GetGetServiceLastAccessedDetailsWithEntities_615773(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_615772(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  section = newJObject()
  var valid_615774 = query.getOrDefault("Marker")
  valid_615774 = validateParameter(valid_615774, JString, required = false,
                                 default = nil)
  if valid_615774 != nil:
    section.add "Marker", valid_615774
  var valid_615775 = query.getOrDefault("MaxItems")
  valid_615775 = validateParameter(valid_615775, JInt, required = false, default = nil)
  if valid_615775 != nil:
    section.add "MaxItems", valid_615775
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespace` field"
  var valid_615776 = query.getOrDefault("ServiceNamespace")
  valid_615776 = validateParameter(valid_615776, JString, required = true,
                                 default = nil)
  if valid_615776 != nil:
    section.add "ServiceNamespace", valid_615776
  var valid_615777 = query.getOrDefault("Action")
  valid_615777 = validateParameter(valid_615777, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_615777 != nil:
    section.add "Action", valid_615777
  var valid_615778 = query.getOrDefault("Version")
  valid_615778 = validateParameter(valid_615778, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615778 != nil:
    section.add "Version", valid_615778
  var valid_615779 = query.getOrDefault("JobId")
  valid_615779 = validateParameter(valid_615779, JString, required = true,
                                 default = nil)
  if valid_615779 != nil:
    section.add "JobId", valid_615779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615780 = header.getOrDefault("X-Amz-Signature")
  valid_615780 = validateParameter(valid_615780, JString, required = false,
                                 default = nil)
  if valid_615780 != nil:
    section.add "X-Amz-Signature", valid_615780
  var valid_615781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615781 = validateParameter(valid_615781, JString, required = false,
                                 default = nil)
  if valid_615781 != nil:
    section.add "X-Amz-Content-Sha256", valid_615781
  var valid_615782 = header.getOrDefault("X-Amz-Date")
  valid_615782 = validateParameter(valid_615782, JString, required = false,
                                 default = nil)
  if valid_615782 != nil:
    section.add "X-Amz-Date", valid_615782
  var valid_615783 = header.getOrDefault("X-Amz-Credential")
  valid_615783 = validateParameter(valid_615783, JString, required = false,
                                 default = nil)
  if valid_615783 != nil:
    section.add "X-Amz-Credential", valid_615783
  var valid_615784 = header.getOrDefault("X-Amz-Security-Token")
  valid_615784 = validateParameter(valid_615784, JString, required = false,
                                 default = nil)
  if valid_615784 != nil:
    section.add "X-Amz-Security-Token", valid_615784
  var valid_615785 = header.getOrDefault("X-Amz-Algorithm")
  valid_615785 = validateParameter(valid_615785, JString, required = false,
                                 default = nil)
  if valid_615785 != nil:
    section.add "X-Amz-Algorithm", valid_615785
  var valid_615786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615786 = validateParameter(valid_615786, JString, required = false,
                                 default = nil)
  if valid_615786 != nil:
    section.add "X-Amz-SignedHeaders", valid_615786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615787: Call_GetGetServiceLastAccessedDetailsWithEntities_615771;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_615787.validator(path, query, header, formData, body)
  let scheme = call_615787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615787.url(scheme.get, call_615787.host, call_615787.base,
                         call_615787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615787, url, valid)

proc call*(call_615788: Call_GetGetServiceLastAccessedDetailsWithEntities_615771;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          MaxItems: int = 0;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  var query_615789 = newJObject()
  add(query_615789, "Marker", newJString(Marker))
  add(query_615789, "MaxItems", newJInt(MaxItems))
  add(query_615789, "ServiceNamespace", newJString(ServiceNamespace))
  add(query_615789, "Action", newJString(Action))
  add(query_615789, "Version", newJString(Version))
  add(query_615789, "JobId", newJString(JobId))
  result = call_615788.call(nil, query_615789, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_615771(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_615772,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_615773,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_615826 = ref object of OpenApiRestCall_612658
proc url_PostGetServiceLinkedRoleDeletionStatus_615828(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_615827(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615829 = query.getOrDefault("Action")
  valid_615829 = validateParameter(valid_615829, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_615829 != nil:
    section.add "Action", valid_615829
  var valid_615830 = query.getOrDefault("Version")
  valid_615830 = validateParameter(valid_615830, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615830 != nil:
    section.add "Version", valid_615830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615831 = header.getOrDefault("X-Amz-Signature")
  valid_615831 = validateParameter(valid_615831, JString, required = false,
                                 default = nil)
  if valid_615831 != nil:
    section.add "X-Amz-Signature", valid_615831
  var valid_615832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615832 = validateParameter(valid_615832, JString, required = false,
                                 default = nil)
  if valid_615832 != nil:
    section.add "X-Amz-Content-Sha256", valid_615832
  var valid_615833 = header.getOrDefault("X-Amz-Date")
  valid_615833 = validateParameter(valid_615833, JString, required = false,
                                 default = nil)
  if valid_615833 != nil:
    section.add "X-Amz-Date", valid_615833
  var valid_615834 = header.getOrDefault("X-Amz-Credential")
  valid_615834 = validateParameter(valid_615834, JString, required = false,
                                 default = nil)
  if valid_615834 != nil:
    section.add "X-Amz-Credential", valid_615834
  var valid_615835 = header.getOrDefault("X-Amz-Security-Token")
  valid_615835 = validateParameter(valid_615835, JString, required = false,
                                 default = nil)
  if valid_615835 != nil:
    section.add "X-Amz-Security-Token", valid_615835
  var valid_615836 = header.getOrDefault("X-Amz-Algorithm")
  valid_615836 = validateParameter(valid_615836, JString, required = false,
                                 default = nil)
  if valid_615836 != nil:
    section.add "X-Amz-Algorithm", valid_615836
  var valid_615837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615837 = validateParameter(valid_615837, JString, required = false,
                                 default = nil)
  if valid_615837 != nil:
    section.add "X-Amz-SignedHeaders", valid_615837
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_615838 = formData.getOrDefault("DeletionTaskId")
  valid_615838 = validateParameter(valid_615838, JString, required = true,
                                 default = nil)
  if valid_615838 != nil:
    section.add "DeletionTaskId", valid_615838
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615839: Call_PostGetServiceLinkedRoleDeletionStatus_615826;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_615839.validator(path, query, header, formData, body)
  let scheme = call_615839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615839.url(scheme.get, call_615839.host, call_615839.base,
                         call_615839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615839, url, valid)

proc call*(call_615840: Call_PostGetServiceLinkedRoleDeletionStatus_615826;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615841 = newJObject()
  var formData_615842 = newJObject()
  add(formData_615842, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_615841, "Action", newJString(Action))
  add(query_615841, "Version", newJString(Version))
  result = call_615840.call(nil, query_615841, nil, formData_615842, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_615826(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_615827, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_615828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_615810 = ref object of OpenApiRestCall_612658
proc url_GetGetServiceLinkedRoleDeletionStatus_615812(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_615811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DeletionTaskId` field"
  var valid_615813 = query.getOrDefault("DeletionTaskId")
  valid_615813 = validateParameter(valid_615813, JString, required = true,
                                 default = nil)
  if valid_615813 != nil:
    section.add "DeletionTaskId", valid_615813
  var valid_615814 = query.getOrDefault("Action")
  valid_615814 = validateParameter(valid_615814, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_615814 != nil:
    section.add "Action", valid_615814
  var valid_615815 = query.getOrDefault("Version")
  valid_615815 = validateParameter(valid_615815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615815 != nil:
    section.add "Version", valid_615815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615816 = header.getOrDefault("X-Amz-Signature")
  valid_615816 = validateParameter(valid_615816, JString, required = false,
                                 default = nil)
  if valid_615816 != nil:
    section.add "X-Amz-Signature", valid_615816
  var valid_615817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615817 = validateParameter(valid_615817, JString, required = false,
                                 default = nil)
  if valid_615817 != nil:
    section.add "X-Amz-Content-Sha256", valid_615817
  var valid_615818 = header.getOrDefault("X-Amz-Date")
  valid_615818 = validateParameter(valid_615818, JString, required = false,
                                 default = nil)
  if valid_615818 != nil:
    section.add "X-Amz-Date", valid_615818
  var valid_615819 = header.getOrDefault("X-Amz-Credential")
  valid_615819 = validateParameter(valid_615819, JString, required = false,
                                 default = nil)
  if valid_615819 != nil:
    section.add "X-Amz-Credential", valid_615819
  var valid_615820 = header.getOrDefault("X-Amz-Security-Token")
  valid_615820 = validateParameter(valid_615820, JString, required = false,
                                 default = nil)
  if valid_615820 != nil:
    section.add "X-Amz-Security-Token", valid_615820
  var valid_615821 = header.getOrDefault("X-Amz-Algorithm")
  valid_615821 = validateParameter(valid_615821, JString, required = false,
                                 default = nil)
  if valid_615821 != nil:
    section.add "X-Amz-Algorithm", valid_615821
  var valid_615822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615822 = validateParameter(valid_615822, JString, required = false,
                                 default = nil)
  if valid_615822 != nil:
    section.add "X-Amz-SignedHeaders", valid_615822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615823: Call_GetGetServiceLinkedRoleDeletionStatus_615810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_615823.validator(path, query, header, formData, body)
  let scheme = call_615823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615823.url(scheme.get, call_615823.host, call_615823.base,
                         call_615823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615823, url, valid)

proc call*(call_615824: Call_GetGetServiceLinkedRoleDeletionStatus_615810;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615825 = newJObject()
  add(query_615825, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_615825, "Action", newJString(Action))
  add(query_615825, "Version", newJString(Version))
  result = call_615824.call(nil, query_615825, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_615810(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_615811, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_615812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_615859 = ref object of OpenApiRestCall_612658
proc url_PostGetUser_615861(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUser_615860(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615862 = query.getOrDefault("Action")
  valid_615862 = validateParameter(valid_615862, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_615862 != nil:
    section.add "Action", valid_615862
  var valid_615863 = query.getOrDefault("Version")
  valid_615863 = validateParameter(valid_615863, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615863 != nil:
    section.add "Version", valid_615863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615864 = header.getOrDefault("X-Amz-Signature")
  valid_615864 = validateParameter(valid_615864, JString, required = false,
                                 default = nil)
  if valid_615864 != nil:
    section.add "X-Amz-Signature", valid_615864
  var valid_615865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615865 = validateParameter(valid_615865, JString, required = false,
                                 default = nil)
  if valid_615865 != nil:
    section.add "X-Amz-Content-Sha256", valid_615865
  var valid_615866 = header.getOrDefault("X-Amz-Date")
  valid_615866 = validateParameter(valid_615866, JString, required = false,
                                 default = nil)
  if valid_615866 != nil:
    section.add "X-Amz-Date", valid_615866
  var valid_615867 = header.getOrDefault("X-Amz-Credential")
  valid_615867 = validateParameter(valid_615867, JString, required = false,
                                 default = nil)
  if valid_615867 != nil:
    section.add "X-Amz-Credential", valid_615867
  var valid_615868 = header.getOrDefault("X-Amz-Security-Token")
  valid_615868 = validateParameter(valid_615868, JString, required = false,
                                 default = nil)
  if valid_615868 != nil:
    section.add "X-Amz-Security-Token", valid_615868
  var valid_615869 = header.getOrDefault("X-Amz-Algorithm")
  valid_615869 = validateParameter(valid_615869, JString, required = false,
                                 default = nil)
  if valid_615869 != nil:
    section.add "X-Amz-Algorithm", valid_615869
  var valid_615870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615870 = validateParameter(valid_615870, JString, required = false,
                                 default = nil)
  if valid_615870 != nil:
    section.add "X-Amz-SignedHeaders", valid_615870
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_615871 = formData.getOrDefault("UserName")
  valid_615871 = validateParameter(valid_615871, JString, required = false,
                                 default = nil)
  if valid_615871 != nil:
    section.add "UserName", valid_615871
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615872: Call_PostGetUser_615859; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_615872.validator(path, query, header, formData, body)
  let scheme = call_615872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615872.url(scheme.get, call_615872.host, call_615872.base,
                         call_615872.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615872, url, valid)

proc call*(call_615873: Call_PostGetUser_615859; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615874 = newJObject()
  var formData_615875 = newJObject()
  add(formData_615875, "UserName", newJString(UserName))
  add(query_615874, "Action", newJString(Action))
  add(query_615874, "Version", newJString(Version))
  result = call_615873.call(nil, query_615874, nil, formData_615875, nil)

var postGetUser* = Call_PostGetUser_615859(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_615860,
                                        base: "/", url: url_PostGetUser_615861,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_615843 = ref object of OpenApiRestCall_612658
proc url_GetGetUser_615845(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUser_615844(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615846 = query.getOrDefault("UserName")
  valid_615846 = validateParameter(valid_615846, JString, required = false,
                                 default = nil)
  if valid_615846 != nil:
    section.add "UserName", valid_615846
  var valid_615847 = query.getOrDefault("Action")
  valid_615847 = validateParameter(valid_615847, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_615847 != nil:
    section.add "Action", valid_615847
  var valid_615848 = query.getOrDefault("Version")
  valid_615848 = validateParameter(valid_615848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615848 != nil:
    section.add "Version", valid_615848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615849 = header.getOrDefault("X-Amz-Signature")
  valid_615849 = validateParameter(valid_615849, JString, required = false,
                                 default = nil)
  if valid_615849 != nil:
    section.add "X-Amz-Signature", valid_615849
  var valid_615850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615850 = validateParameter(valid_615850, JString, required = false,
                                 default = nil)
  if valid_615850 != nil:
    section.add "X-Amz-Content-Sha256", valid_615850
  var valid_615851 = header.getOrDefault("X-Amz-Date")
  valid_615851 = validateParameter(valid_615851, JString, required = false,
                                 default = nil)
  if valid_615851 != nil:
    section.add "X-Amz-Date", valid_615851
  var valid_615852 = header.getOrDefault("X-Amz-Credential")
  valid_615852 = validateParameter(valid_615852, JString, required = false,
                                 default = nil)
  if valid_615852 != nil:
    section.add "X-Amz-Credential", valid_615852
  var valid_615853 = header.getOrDefault("X-Amz-Security-Token")
  valid_615853 = validateParameter(valid_615853, JString, required = false,
                                 default = nil)
  if valid_615853 != nil:
    section.add "X-Amz-Security-Token", valid_615853
  var valid_615854 = header.getOrDefault("X-Amz-Algorithm")
  valid_615854 = validateParameter(valid_615854, JString, required = false,
                                 default = nil)
  if valid_615854 != nil:
    section.add "X-Amz-Algorithm", valid_615854
  var valid_615855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615855 = validateParameter(valid_615855, JString, required = false,
                                 default = nil)
  if valid_615855 != nil:
    section.add "X-Amz-SignedHeaders", valid_615855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615856: Call_GetGetUser_615843; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_615856.validator(path, query, header, formData, body)
  let scheme = call_615856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615856.url(scheme.get, call_615856.host, call_615856.base,
                         call_615856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615856, url, valid)

proc call*(call_615857: Call_GetGetUser_615843; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615858 = newJObject()
  add(query_615858, "UserName", newJString(UserName))
  add(query_615858, "Action", newJString(Action))
  add(query_615858, "Version", newJString(Version))
  result = call_615857.call(nil, query_615858, nil, nil, nil)

var getGetUser* = Call_GetGetUser_615843(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_615844,
                                      base: "/", url: url_GetGetUser_615845,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_615893 = ref object of OpenApiRestCall_612658
proc url_PostGetUserPolicy_615895(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostGetUserPolicy_615894(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615896 = query.getOrDefault("Action")
  valid_615896 = validateParameter(valid_615896, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_615896 != nil:
    section.add "Action", valid_615896
  var valid_615897 = query.getOrDefault("Version")
  valid_615897 = validateParameter(valid_615897, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615897 != nil:
    section.add "Version", valid_615897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615898 = header.getOrDefault("X-Amz-Signature")
  valid_615898 = validateParameter(valid_615898, JString, required = false,
                                 default = nil)
  if valid_615898 != nil:
    section.add "X-Amz-Signature", valid_615898
  var valid_615899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615899 = validateParameter(valid_615899, JString, required = false,
                                 default = nil)
  if valid_615899 != nil:
    section.add "X-Amz-Content-Sha256", valid_615899
  var valid_615900 = header.getOrDefault("X-Amz-Date")
  valid_615900 = validateParameter(valid_615900, JString, required = false,
                                 default = nil)
  if valid_615900 != nil:
    section.add "X-Amz-Date", valid_615900
  var valid_615901 = header.getOrDefault("X-Amz-Credential")
  valid_615901 = validateParameter(valid_615901, JString, required = false,
                                 default = nil)
  if valid_615901 != nil:
    section.add "X-Amz-Credential", valid_615901
  var valid_615902 = header.getOrDefault("X-Amz-Security-Token")
  valid_615902 = validateParameter(valid_615902, JString, required = false,
                                 default = nil)
  if valid_615902 != nil:
    section.add "X-Amz-Security-Token", valid_615902
  var valid_615903 = header.getOrDefault("X-Amz-Algorithm")
  valid_615903 = validateParameter(valid_615903, JString, required = false,
                                 default = nil)
  if valid_615903 != nil:
    section.add "X-Amz-Algorithm", valid_615903
  var valid_615904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615904 = validateParameter(valid_615904, JString, required = false,
                                 default = nil)
  if valid_615904 != nil:
    section.add "X-Amz-SignedHeaders", valid_615904
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_615905 = formData.getOrDefault("UserName")
  valid_615905 = validateParameter(valid_615905, JString, required = true,
                                 default = nil)
  if valid_615905 != nil:
    section.add "UserName", valid_615905
  var valid_615906 = formData.getOrDefault("PolicyName")
  valid_615906 = validateParameter(valid_615906, JString, required = true,
                                 default = nil)
  if valid_615906 != nil:
    section.add "PolicyName", valid_615906
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615907: Call_PostGetUserPolicy_615893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615907.validator(path, query, header, formData, body)
  let scheme = call_615907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615907.url(scheme.get, call_615907.host, call_615907.base,
                         call_615907.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615907, url, valid)

proc call*(call_615908: Call_PostGetUserPolicy_615893; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_615909 = newJObject()
  var formData_615910 = newJObject()
  add(formData_615910, "UserName", newJString(UserName))
  add(query_615909, "Action", newJString(Action))
  add(query_615909, "Version", newJString(Version))
  add(formData_615910, "PolicyName", newJString(PolicyName))
  result = call_615908.call(nil, query_615909, nil, formData_615910, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_615893(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_615894,
    base: "/", url: url_PostGetUserPolicy_615895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_615876 = ref object of OpenApiRestCall_612658
proc url_GetGetUserPolicy_615878(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetGetUserPolicy_615877(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_615879 = query.getOrDefault("UserName")
  valid_615879 = validateParameter(valid_615879, JString, required = true,
                                 default = nil)
  if valid_615879 != nil:
    section.add "UserName", valid_615879
  var valid_615880 = query.getOrDefault("PolicyName")
  valid_615880 = validateParameter(valid_615880, JString, required = true,
                                 default = nil)
  if valid_615880 != nil:
    section.add "PolicyName", valid_615880
  var valid_615881 = query.getOrDefault("Action")
  valid_615881 = validateParameter(valid_615881, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_615881 != nil:
    section.add "Action", valid_615881
  var valid_615882 = query.getOrDefault("Version")
  valid_615882 = validateParameter(valid_615882, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615882 != nil:
    section.add "Version", valid_615882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615883 = header.getOrDefault("X-Amz-Signature")
  valid_615883 = validateParameter(valid_615883, JString, required = false,
                                 default = nil)
  if valid_615883 != nil:
    section.add "X-Amz-Signature", valid_615883
  var valid_615884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615884 = validateParameter(valid_615884, JString, required = false,
                                 default = nil)
  if valid_615884 != nil:
    section.add "X-Amz-Content-Sha256", valid_615884
  var valid_615885 = header.getOrDefault("X-Amz-Date")
  valid_615885 = validateParameter(valid_615885, JString, required = false,
                                 default = nil)
  if valid_615885 != nil:
    section.add "X-Amz-Date", valid_615885
  var valid_615886 = header.getOrDefault("X-Amz-Credential")
  valid_615886 = validateParameter(valid_615886, JString, required = false,
                                 default = nil)
  if valid_615886 != nil:
    section.add "X-Amz-Credential", valid_615886
  var valid_615887 = header.getOrDefault("X-Amz-Security-Token")
  valid_615887 = validateParameter(valid_615887, JString, required = false,
                                 default = nil)
  if valid_615887 != nil:
    section.add "X-Amz-Security-Token", valid_615887
  var valid_615888 = header.getOrDefault("X-Amz-Algorithm")
  valid_615888 = validateParameter(valid_615888, JString, required = false,
                                 default = nil)
  if valid_615888 != nil:
    section.add "X-Amz-Algorithm", valid_615888
  var valid_615889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615889 = validateParameter(valid_615889, JString, required = false,
                                 default = nil)
  if valid_615889 != nil:
    section.add "X-Amz-SignedHeaders", valid_615889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615890: Call_GetGetUserPolicy_615876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_615890.validator(path, query, header, formData, body)
  let scheme = call_615890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615890.url(scheme.get, call_615890.host, call_615890.base,
                         call_615890.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615890, url, valid)

proc call*(call_615891: Call_GetGetUserPolicy_615876; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615892 = newJObject()
  add(query_615892, "UserName", newJString(UserName))
  add(query_615892, "PolicyName", newJString(PolicyName))
  add(query_615892, "Action", newJString(Action))
  add(query_615892, "Version", newJString(Version))
  result = call_615891.call(nil, query_615892, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_615876(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_615877,
    base: "/", url: url_GetGetUserPolicy_615878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_615929 = ref object of OpenApiRestCall_612658
proc url_PostListAccessKeys_615931(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccessKeys_615930(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615932 = query.getOrDefault("Action")
  valid_615932 = validateParameter(valid_615932, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_615932 != nil:
    section.add "Action", valid_615932
  var valid_615933 = query.getOrDefault("Version")
  valid_615933 = validateParameter(valid_615933, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615933 != nil:
    section.add "Version", valid_615933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615934 = header.getOrDefault("X-Amz-Signature")
  valid_615934 = validateParameter(valid_615934, JString, required = false,
                                 default = nil)
  if valid_615934 != nil:
    section.add "X-Amz-Signature", valid_615934
  var valid_615935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615935 = validateParameter(valid_615935, JString, required = false,
                                 default = nil)
  if valid_615935 != nil:
    section.add "X-Amz-Content-Sha256", valid_615935
  var valid_615936 = header.getOrDefault("X-Amz-Date")
  valid_615936 = validateParameter(valid_615936, JString, required = false,
                                 default = nil)
  if valid_615936 != nil:
    section.add "X-Amz-Date", valid_615936
  var valid_615937 = header.getOrDefault("X-Amz-Credential")
  valid_615937 = validateParameter(valid_615937, JString, required = false,
                                 default = nil)
  if valid_615937 != nil:
    section.add "X-Amz-Credential", valid_615937
  var valid_615938 = header.getOrDefault("X-Amz-Security-Token")
  valid_615938 = validateParameter(valid_615938, JString, required = false,
                                 default = nil)
  if valid_615938 != nil:
    section.add "X-Amz-Security-Token", valid_615938
  var valid_615939 = header.getOrDefault("X-Amz-Algorithm")
  valid_615939 = validateParameter(valid_615939, JString, required = false,
                                 default = nil)
  if valid_615939 != nil:
    section.add "X-Amz-Algorithm", valid_615939
  var valid_615940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615940 = validateParameter(valid_615940, JString, required = false,
                                 default = nil)
  if valid_615940 != nil:
    section.add "X-Amz-SignedHeaders", valid_615940
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_615941 = formData.getOrDefault("Marker")
  valid_615941 = validateParameter(valid_615941, JString, required = false,
                                 default = nil)
  if valid_615941 != nil:
    section.add "Marker", valid_615941
  var valid_615942 = formData.getOrDefault("UserName")
  valid_615942 = validateParameter(valid_615942, JString, required = false,
                                 default = nil)
  if valid_615942 != nil:
    section.add "UserName", valid_615942
  var valid_615943 = formData.getOrDefault("MaxItems")
  valid_615943 = validateParameter(valid_615943, JInt, required = false, default = nil)
  if valid_615943 != nil:
    section.add "MaxItems", valid_615943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615944: Call_PostListAccessKeys_615929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_615944.validator(path, query, header, formData, body)
  let scheme = call_615944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615944.url(scheme.get, call_615944.host, call_615944.base,
                         call_615944.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615944, url, valid)

proc call*(call_615945: Call_PostListAccessKeys_615929; Marker: string = "";
          UserName: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_615946 = newJObject()
  var formData_615947 = newJObject()
  add(formData_615947, "Marker", newJString(Marker))
  add(formData_615947, "UserName", newJString(UserName))
  add(query_615946, "Action", newJString(Action))
  add(formData_615947, "MaxItems", newJInt(MaxItems))
  add(query_615946, "Version", newJString(Version))
  result = call_615945.call(nil, query_615946, nil, formData_615947, nil)

var postListAccessKeys* = Call_PostListAccessKeys_615929(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_615930, base: "/",
    url: url_PostListAccessKeys_615931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_615911 = ref object of OpenApiRestCall_612658
proc url_GetListAccessKeys_615913(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccessKeys_615912(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615914 = query.getOrDefault("Marker")
  valid_615914 = validateParameter(valid_615914, JString, required = false,
                                 default = nil)
  if valid_615914 != nil:
    section.add "Marker", valid_615914
  var valid_615915 = query.getOrDefault("UserName")
  valid_615915 = validateParameter(valid_615915, JString, required = false,
                                 default = nil)
  if valid_615915 != nil:
    section.add "UserName", valid_615915
  var valid_615916 = query.getOrDefault("MaxItems")
  valid_615916 = validateParameter(valid_615916, JInt, required = false, default = nil)
  if valid_615916 != nil:
    section.add "MaxItems", valid_615916
  var valid_615917 = query.getOrDefault("Action")
  valid_615917 = validateParameter(valid_615917, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_615917 != nil:
    section.add "Action", valid_615917
  var valid_615918 = query.getOrDefault("Version")
  valid_615918 = validateParameter(valid_615918, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615918 != nil:
    section.add "Version", valid_615918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615919 = header.getOrDefault("X-Amz-Signature")
  valid_615919 = validateParameter(valid_615919, JString, required = false,
                                 default = nil)
  if valid_615919 != nil:
    section.add "X-Amz-Signature", valid_615919
  var valid_615920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615920 = validateParameter(valid_615920, JString, required = false,
                                 default = nil)
  if valid_615920 != nil:
    section.add "X-Amz-Content-Sha256", valid_615920
  var valid_615921 = header.getOrDefault("X-Amz-Date")
  valid_615921 = validateParameter(valid_615921, JString, required = false,
                                 default = nil)
  if valid_615921 != nil:
    section.add "X-Amz-Date", valid_615921
  var valid_615922 = header.getOrDefault("X-Amz-Credential")
  valid_615922 = validateParameter(valid_615922, JString, required = false,
                                 default = nil)
  if valid_615922 != nil:
    section.add "X-Amz-Credential", valid_615922
  var valid_615923 = header.getOrDefault("X-Amz-Security-Token")
  valid_615923 = validateParameter(valid_615923, JString, required = false,
                                 default = nil)
  if valid_615923 != nil:
    section.add "X-Amz-Security-Token", valid_615923
  var valid_615924 = header.getOrDefault("X-Amz-Algorithm")
  valid_615924 = validateParameter(valid_615924, JString, required = false,
                                 default = nil)
  if valid_615924 != nil:
    section.add "X-Amz-Algorithm", valid_615924
  var valid_615925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615925 = validateParameter(valid_615925, JString, required = false,
                                 default = nil)
  if valid_615925 != nil:
    section.add "X-Amz-SignedHeaders", valid_615925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615926: Call_GetListAccessKeys_615911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_615926.validator(path, query, header, formData, body)
  let scheme = call_615926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615926.url(scheme.get, call_615926.host, call_615926.base,
                         call_615926.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615926, url, valid)

proc call*(call_615927: Call_GetListAccessKeys_615911; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListAccessKeys";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615928 = newJObject()
  add(query_615928, "Marker", newJString(Marker))
  add(query_615928, "UserName", newJString(UserName))
  add(query_615928, "MaxItems", newJInt(MaxItems))
  add(query_615928, "Action", newJString(Action))
  add(query_615928, "Version", newJString(Version))
  result = call_615927.call(nil, query_615928, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_615911(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_615912,
    base: "/", url: url_GetListAccessKeys_615913,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_615965 = ref object of OpenApiRestCall_612658
proc url_PostListAccountAliases_615967(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAccountAliases_615966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615968 = query.getOrDefault("Action")
  valid_615968 = validateParameter(valid_615968, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_615968 != nil:
    section.add "Action", valid_615968
  var valid_615969 = query.getOrDefault("Version")
  valid_615969 = validateParameter(valid_615969, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615969 != nil:
    section.add "Version", valid_615969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615970 = header.getOrDefault("X-Amz-Signature")
  valid_615970 = validateParameter(valid_615970, JString, required = false,
                                 default = nil)
  if valid_615970 != nil:
    section.add "X-Amz-Signature", valid_615970
  var valid_615971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615971 = validateParameter(valid_615971, JString, required = false,
                                 default = nil)
  if valid_615971 != nil:
    section.add "X-Amz-Content-Sha256", valid_615971
  var valid_615972 = header.getOrDefault("X-Amz-Date")
  valid_615972 = validateParameter(valid_615972, JString, required = false,
                                 default = nil)
  if valid_615972 != nil:
    section.add "X-Amz-Date", valid_615972
  var valid_615973 = header.getOrDefault("X-Amz-Credential")
  valid_615973 = validateParameter(valid_615973, JString, required = false,
                                 default = nil)
  if valid_615973 != nil:
    section.add "X-Amz-Credential", valid_615973
  var valid_615974 = header.getOrDefault("X-Amz-Security-Token")
  valid_615974 = validateParameter(valid_615974, JString, required = false,
                                 default = nil)
  if valid_615974 != nil:
    section.add "X-Amz-Security-Token", valid_615974
  var valid_615975 = header.getOrDefault("X-Amz-Algorithm")
  valid_615975 = validateParameter(valid_615975, JString, required = false,
                                 default = nil)
  if valid_615975 != nil:
    section.add "X-Amz-Algorithm", valid_615975
  var valid_615976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615976 = validateParameter(valid_615976, JString, required = false,
                                 default = nil)
  if valid_615976 != nil:
    section.add "X-Amz-SignedHeaders", valid_615976
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_615977 = formData.getOrDefault("Marker")
  valid_615977 = validateParameter(valid_615977, JString, required = false,
                                 default = nil)
  if valid_615977 != nil:
    section.add "Marker", valid_615977
  var valid_615978 = formData.getOrDefault("MaxItems")
  valid_615978 = validateParameter(valid_615978, JInt, required = false, default = nil)
  if valid_615978 != nil:
    section.add "MaxItems", valid_615978
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615979: Call_PostListAccountAliases_615965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615979.validator(path, query, header, formData, body)
  let scheme = call_615979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615979.url(scheme.get, call_615979.host, call_615979.base,
                         call_615979.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615979, url, valid)

proc call*(call_615980: Call_PostListAccountAliases_615965; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_615981 = newJObject()
  var formData_615982 = newJObject()
  add(formData_615982, "Marker", newJString(Marker))
  add(query_615981, "Action", newJString(Action))
  add(formData_615982, "MaxItems", newJInt(MaxItems))
  add(query_615981, "Version", newJString(Version))
  result = call_615980.call(nil, query_615981, nil, formData_615982, nil)

var postListAccountAliases* = Call_PostListAccountAliases_615965(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_615966, base: "/",
    url: url_PostListAccountAliases_615967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_615948 = ref object of OpenApiRestCall_612658
proc url_GetListAccountAliases_615950(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAccountAliases_615949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615951 = query.getOrDefault("Marker")
  valid_615951 = validateParameter(valid_615951, JString, required = false,
                                 default = nil)
  if valid_615951 != nil:
    section.add "Marker", valid_615951
  var valid_615952 = query.getOrDefault("MaxItems")
  valid_615952 = validateParameter(valid_615952, JInt, required = false, default = nil)
  if valid_615952 != nil:
    section.add "MaxItems", valid_615952
  var valid_615953 = query.getOrDefault("Action")
  valid_615953 = validateParameter(valid_615953, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_615953 != nil:
    section.add "Action", valid_615953
  var valid_615954 = query.getOrDefault("Version")
  valid_615954 = validateParameter(valid_615954, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615954 != nil:
    section.add "Version", valid_615954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615955 = header.getOrDefault("X-Amz-Signature")
  valid_615955 = validateParameter(valid_615955, JString, required = false,
                                 default = nil)
  if valid_615955 != nil:
    section.add "X-Amz-Signature", valid_615955
  var valid_615956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615956 = validateParameter(valid_615956, JString, required = false,
                                 default = nil)
  if valid_615956 != nil:
    section.add "X-Amz-Content-Sha256", valid_615956
  var valid_615957 = header.getOrDefault("X-Amz-Date")
  valid_615957 = validateParameter(valid_615957, JString, required = false,
                                 default = nil)
  if valid_615957 != nil:
    section.add "X-Amz-Date", valid_615957
  var valid_615958 = header.getOrDefault("X-Amz-Credential")
  valid_615958 = validateParameter(valid_615958, JString, required = false,
                                 default = nil)
  if valid_615958 != nil:
    section.add "X-Amz-Credential", valid_615958
  var valid_615959 = header.getOrDefault("X-Amz-Security-Token")
  valid_615959 = validateParameter(valid_615959, JString, required = false,
                                 default = nil)
  if valid_615959 != nil:
    section.add "X-Amz-Security-Token", valid_615959
  var valid_615960 = header.getOrDefault("X-Amz-Algorithm")
  valid_615960 = validateParameter(valid_615960, JString, required = false,
                                 default = nil)
  if valid_615960 != nil:
    section.add "X-Amz-Algorithm", valid_615960
  var valid_615961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615961 = validateParameter(valid_615961, JString, required = false,
                                 default = nil)
  if valid_615961 != nil:
    section.add "X-Amz-SignedHeaders", valid_615961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615962: Call_GetListAccountAliases_615948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_615962.validator(path, query, header, formData, body)
  let scheme = call_615962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615962.url(scheme.get, call_615962.host, call_615962.base,
                         call_615962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615962, url, valid)

proc call*(call_615963: Call_GetListAccountAliases_615948; Marker: string = "";
          MaxItems: int = 0; Action: string = "ListAccountAliases";
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_615964 = newJObject()
  add(query_615964, "Marker", newJString(Marker))
  add(query_615964, "MaxItems", newJInt(MaxItems))
  add(query_615964, "Action", newJString(Action))
  add(query_615964, "Version", newJString(Version))
  result = call_615963.call(nil, query_615964, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_615948(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_615949, base: "/",
    url: url_GetListAccountAliases_615950, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_616002 = ref object of OpenApiRestCall_612658
proc url_PostListAttachedGroupPolicies_616004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedGroupPolicies_616003(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616005 = query.getOrDefault("Action")
  valid_616005 = validateParameter(valid_616005, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_616005 != nil:
    section.add "Action", valid_616005
  var valid_616006 = query.getOrDefault("Version")
  valid_616006 = validateParameter(valid_616006, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616006 != nil:
    section.add "Version", valid_616006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616007 = header.getOrDefault("X-Amz-Signature")
  valid_616007 = validateParameter(valid_616007, JString, required = false,
                                 default = nil)
  if valid_616007 != nil:
    section.add "X-Amz-Signature", valid_616007
  var valid_616008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616008 = validateParameter(valid_616008, JString, required = false,
                                 default = nil)
  if valid_616008 != nil:
    section.add "X-Amz-Content-Sha256", valid_616008
  var valid_616009 = header.getOrDefault("X-Amz-Date")
  valid_616009 = validateParameter(valid_616009, JString, required = false,
                                 default = nil)
  if valid_616009 != nil:
    section.add "X-Amz-Date", valid_616009
  var valid_616010 = header.getOrDefault("X-Amz-Credential")
  valid_616010 = validateParameter(valid_616010, JString, required = false,
                                 default = nil)
  if valid_616010 != nil:
    section.add "X-Amz-Credential", valid_616010
  var valid_616011 = header.getOrDefault("X-Amz-Security-Token")
  valid_616011 = validateParameter(valid_616011, JString, required = false,
                                 default = nil)
  if valid_616011 != nil:
    section.add "X-Amz-Security-Token", valid_616011
  var valid_616012 = header.getOrDefault("X-Amz-Algorithm")
  valid_616012 = validateParameter(valid_616012, JString, required = false,
                                 default = nil)
  if valid_616012 != nil:
    section.add "X-Amz-Algorithm", valid_616012
  var valid_616013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616013 = validateParameter(valid_616013, JString, required = false,
                                 default = nil)
  if valid_616013 != nil:
    section.add "X-Amz-SignedHeaders", valid_616013
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616014 = formData.getOrDefault("Marker")
  valid_616014 = validateParameter(valid_616014, JString, required = false,
                                 default = nil)
  if valid_616014 != nil:
    section.add "Marker", valid_616014
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_616015 = formData.getOrDefault("GroupName")
  valid_616015 = validateParameter(valid_616015, JString, required = true,
                                 default = nil)
  if valid_616015 != nil:
    section.add "GroupName", valid_616015
  var valid_616016 = formData.getOrDefault("PathPrefix")
  valid_616016 = validateParameter(valid_616016, JString, required = false,
                                 default = nil)
  if valid_616016 != nil:
    section.add "PathPrefix", valid_616016
  var valid_616017 = formData.getOrDefault("MaxItems")
  valid_616017 = validateParameter(valid_616017, JInt, required = false, default = nil)
  if valid_616017 != nil:
    section.add "MaxItems", valid_616017
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616018: Call_PostListAttachedGroupPolicies_616002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_616018.validator(path, query, header, formData, body)
  let scheme = call_616018.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616018.url(scheme.get, call_616018.host, call_616018.base,
                         call_616018.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616018, url, valid)

proc call*(call_616019: Call_PostListAttachedGroupPolicies_616002;
          GroupName: string; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616020 = newJObject()
  var formData_616021 = newJObject()
  add(formData_616021, "Marker", newJString(Marker))
  add(formData_616021, "GroupName", newJString(GroupName))
  add(formData_616021, "PathPrefix", newJString(PathPrefix))
  add(formData_616021, "MaxItems", newJInt(MaxItems))
  add(query_616020, "Action", newJString(Action))
  add(query_616020, "Version", newJString(Version))
  result = call_616019.call(nil, query_616020, nil, formData_616021, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_616002(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_616003, base: "/",
    url: url_PostListAttachedGroupPolicies_616004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_615983 = ref object of OpenApiRestCall_612658
proc url_GetListAttachedGroupPolicies_615985(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedGroupPolicies_615984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_615986 = query.getOrDefault("Marker")
  valid_615986 = validateParameter(valid_615986, JString, required = false,
                                 default = nil)
  if valid_615986 != nil:
    section.add "Marker", valid_615986
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_615987 = query.getOrDefault("GroupName")
  valid_615987 = validateParameter(valid_615987, JString, required = true,
                                 default = nil)
  if valid_615987 != nil:
    section.add "GroupName", valid_615987
  var valid_615988 = query.getOrDefault("MaxItems")
  valid_615988 = validateParameter(valid_615988, JInt, required = false, default = nil)
  if valid_615988 != nil:
    section.add "MaxItems", valid_615988
  var valid_615989 = query.getOrDefault("PathPrefix")
  valid_615989 = validateParameter(valid_615989, JString, required = false,
                                 default = nil)
  if valid_615989 != nil:
    section.add "PathPrefix", valid_615989
  var valid_615990 = query.getOrDefault("Action")
  valid_615990 = validateParameter(valid_615990, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_615990 != nil:
    section.add "Action", valid_615990
  var valid_615991 = query.getOrDefault("Version")
  valid_615991 = validateParameter(valid_615991, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_615991 != nil:
    section.add "Version", valid_615991
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_615992 = header.getOrDefault("X-Amz-Signature")
  valid_615992 = validateParameter(valid_615992, JString, required = false,
                                 default = nil)
  if valid_615992 != nil:
    section.add "X-Amz-Signature", valid_615992
  var valid_615993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_615993 = validateParameter(valid_615993, JString, required = false,
                                 default = nil)
  if valid_615993 != nil:
    section.add "X-Amz-Content-Sha256", valid_615993
  var valid_615994 = header.getOrDefault("X-Amz-Date")
  valid_615994 = validateParameter(valid_615994, JString, required = false,
                                 default = nil)
  if valid_615994 != nil:
    section.add "X-Amz-Date", valid_615994
  var valid_615995 = header.getOrDefault("X-Amz-Credential")
  valid_615995 = validateParameter(valid_615995, JString, required = false,
                                 default = nil)
  if valid_615995 != nil:
    section.add "X-Amz-Credential", valid_615995
  var valid_615996 = header.getOrDefault("X-Amz-Security-Token")
  valid_615996 = validateParameter(valid_615996, JString, required = false,
                                 default = nil)
  if valid_615996 != nil:
    section.add "X-Amz-Security-Token", valid_615996
  var valid_615997 = header.getOrDefault("X-Amz-Algorithm")
  valid_615997 = validateParameter(valid_615997, JString, required = false,
                                 default = nil)
  if valid_615997 != nil:
    section.add "X-Amz-Algorithm", valid_615997
  var valid_615998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_615998 = validateParameter(valid_615998, JString, required = false,
                                 default = nil)
  if valid_615998 != nil:
    section.add "X-Amz-SignedHeaders", valid_615998
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_615999: Call_GetListAttachedGroupPolicies_615983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_615999.validator(path, query, header, formData, body)
  let scheme = call_615999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_615999.url(scheme.get, call_615999.host, call_615999.base,
                         call_615999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_615999, url, valid)

proc call*(call_616000: Call_GetListAttachedGroupPolicies_615983;
          GroupName: string; Marker: string = ""; MaxItems: int = 0;
          PathPrefix: string = ""; Action: string = "ListAttachedGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616001 = newJObject()
  add(query_616001, "Marker", newJString(Marker))
  add(query_616001, "GroupName", newJString(GroupName))
  add(query_616001, "MaxItems", newJInt(MaxItems))
  add(query_616001, "PathPrefix", newJString(PathPrefix))
  add(query_616001, "Action", newJString(Action))
  add(query_616001, "Version", newJString(Version))
  result = call_616000.call(nil, query_616001, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_615983(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_615984, base: "/",
    url: url_GetListAttachedGroupPolicies_615985,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_616041 = ref object of OpenApiRestCall_612658
proc url_PostListAttachedRolePolicies_616043(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedRolePolicies_616042(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616044 = query.getOrDefault("Action")
  valid_616044 = validateParameter(valid_616044, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_616044 != nil:
    section.add "Action", valid_616044
  var valid_616045 = query.getOrDefault("Version")
  valid_616045 = validateParameter(valid_616045, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616045 != nil:
    section.add "Version", valid_616045
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616046 = header.getOrDefault("X-Amz-Signature")
  valid_616046 = validateParameter(valid_616046, JString, required = false,
                                 default = nil)
  if valid_616046 != nil:
    section.add "X-Amz-Signature", valid_616046
  var valid_616047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616047 = validateParameter(valid_616047, JString, required = false,
                                 default = nil)
  if valid_616047 != nil:
    section.add "X-Amz-Content-Sha256", valid_616047
  var valid_616048 = header.getOrDefault("X-Amz-Date")
  valid_616048 = validateParameter(valid_616048, JString, required = false,
                                 default = nil)
  if valid_616048 != nil:
    section.add "X-Amz-Date", valid_616048
  var valid_616049 = header.getOrDefault("X-Amz-Credential")
  valid_616049 = validateParameter(valid_616049, JString, required = false,
                                 default = nil)
  if valid_616049 != nil:
    section.add "X-Amz-Credential", valid_616049
  var valid_616050 = header.getOrDefault("X-Amz-Security-Token")
  valid_616050 = validateParameter(valid_616050, JString, required = false,
                                 default = nil)
  if valid_616050 != nil:
    section.add "X-Amz-Security-Token", valid_616050
  var valid_616051 = header.getOrDefault("X-Amz-Algorithm")
  valid_616051 = validateParameter(valid_616051, JString, required = false,
                                 default = nil)
  if valid_616051 != nil:
    section.add "X-Amz-Algorithm", valid_616051
  var valid_616052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616052 = validateParameter(valid_616052, JString, required = false,
                                 default = nil)
  if valid_616052 != nil:
    section.add "X-Amz-SignedHeaders", valid_616052
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_616053 = formData.getOrDefault("RoleName")
  valid_616053 = validateParameter(valid_616053, JString, required = true,
                                 default = nil)
  if valid_616053 != nil:
    section.add "RoleName", valid_616053
  var valid_616054 = formData.getOrDefault("Marker")
  valid_616054 = validateParameter(valid_616054, JString, required = false,
                                 default = nil)
  if valid_616054 != nil:
    section.add "Marker", valid_616054
  var valid_616055 = formData.getOrDefault("PathPrefix")
  valid_616055 = validateParameter(valid_616055, JString, required = false,
                                 default = nil)
  if valid_616055 != nil:
    section.add "PathPrefix", valid_616055
  var valid_616056 = formData.getOrDefault("MaxItems")
  valid_616056 = validateParameter(valid_616056, JInt, required = false, default = nil)
  if valid_616056 != nil:
    section.add "MaxItems", valid_616056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616057: Call_PostListAttachedRolePolicies_616041; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_616057.validator(path, query, header, formData, body)
  let scheme = call_616057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616057.url(scheme.get, call_616057.host, call_616057.base,
                         call_616057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616057, url, valid)

proc call*(call_616058: Call_PostListAttachedRolePolicies_616041; RoleName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616059 = newJObject()
  var formData_616060 = newJObject()
  add(formData_616060, "RoleName", newJString(RoleName))
  add(formData_616060, "Marker", newJString(Marker))
  add(formData_616060, "PathPrefix", newJString(PathPrefix))
  add(formData_616060, "MaxItems", newJInt(MaxItems))
  add(query_616059, "Action", newJString(Action))
  add(query_616059, "Version", newJString(Version))
  result = call_616058.call(nil, query_616059, nil, formData_616060, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_616041(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_616042, base: "/",
    url: url_PostListAttachedRolePolicies_616043,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_616022 = ref object of OpenApiRestCall_612658
proc url_GetListAttachedRolePolicies_616024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedRolePolicies_616023(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616025 = query.getOrDefault("Marker")
  valid_616025 = validateParameter(valid_616025, JString, required = false,
                                 default = nil)
  if valid_616025 != nil:
    section.add "Marker", valid_616025
  var valid_616026 = query.getOrDefault("MaxItems")
  valid_616026 = validateParameter(valid_616026, JInt, required = false, default = nil)
  if valid_616026 != nil:
    section.add "MaxItems", valid_616026
  var valid_616027 = query.getOrDefault("PathPrefix")
  valid_616027 = validateParameter(valid_616027, JString, required = false,
                                 default = nil)
  if valid_616027 != nil:
    section.add "PathPrefix", valid_616027
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_616028 = query.getOrDefault("RoleName")
  valid_616028 = validateParameter(valid_616028, JString, required = true,
                                 default = nil)
  if valid_616028 != nil:
    section.add "RoleName", valid_616028
  var valid_616029 = query.getOrDefault("Action")
  valid_616029 = validateParameter(valid_616029, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_616029 != nil:
    section.add "Action", valid_616029
  var valid_616030 = query.getOrDefault("Version")
  valid_616030 = validateParameter(valid_616030, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616030 != nil:
    section.add "Version", valid_616030
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616031 = header.getOrDefault("X-Amz-Signature")
  valid_616031 = validateParameter(valid_616031, JString, required = false,
                                 default = nil)
  if valid_616031 != nil:
    section.add "X-Amz-Signature", valid_616031
  var valid_616032 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616032 = validateParameter(valid_616032, JString, required = false,
                                 default = nil)
  if valid_616032 != nil:
    section.add "X-Amz-Content-Sha256", valid_616032
  var valid_616033 = header.getOrDefault("X-Amz-Date")
  valid_616033 = validateParameter(valid_616033, JString, required = false,
                                 default = nil)
  if valid_616033 != nil:
    section.add "X-Amz-Date", valid_616033
  var valid_616034 = header.getOrDefault("X-Amz-Credential")
  valid_616034 = validateParameter(valid_616034, JString, required = false,
                                 default = nil)
  if valid_616034 != nil:
    section.add "X-Amz-Credential", valid_616034
  var valid_616035 = header.getOrDefault("X-Amz-Security-Token")
  valid_616035 = validateParameter(valid_616035, JString, required = false,
                                 default = nil)
  if valid_616035 != nil:
    section.add "X-Amz-Security-Token", valid_616035
  var valid_616036 = header.getOrDefault("X-Amz-Algorithm")
  valid_616036 = validateParameter(valid_616036, JString, required = false,
                                 default = nil)
  if valid_616036 != nil:
    section.add "X-Amz-Algorithm", valid_616036
  var valid_616037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616037 = validateParameter(valid_616037, JString, required = false,
                                 default = nil)
  if valid_616037 != nil:
    section.add "X-Amz-SignedHeaders", valid_616037
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616038: Call_GetListAttachedRolePolicies_616022; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_616038.validator(path, query, header, formData, body)
  let scheme = call_616038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616038.url(scheme.get, call_616038.host, call_616038.base,
                         call_616038.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616038, url, valid)

proc call*(call_616039: Call_GetListAttachedRolePolicies_616022; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616040 = newJObject()
  add(query_616040, "Marker", newJString(Marker))
  add(query_616040, "MaxItems", newJInt(MaxItems))
  add(query_616040, "PathPrefix", newJString(PathPrefix))
  add(query_616040, "RoleName", newJString(RoleName))
  add(query_616040, "Action", newJString(Action))
  add(query_616040, "Version", newJString(Version))
  result = call_616039.call(nil, query_616040, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_616022(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_616023, base: "/",
    url: url_GetListAttachedRolePolicies_616024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_616080 = ref object of OpenApiRestCall_612658
proc url_PostListAttachedUserPolicies_616082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAttachedUserPolicies_616081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616083 = query.getOrDefault("Action")
  valid_616083 = validateParameter(valid_616083, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_616083 != nil:
    section.add "Action", valid_616083
  var valid_616084 = query.getOrDefault("Version")
  valid_616084 = validateParameter(valid_616084, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616084 != nil:
    section.add "Version", valid_616084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616085 = header.getOrDefault("X-Amz-Signature")
  valid_616085 = validateParameter(valid_616085, JString, required = false,
                                 default = nil)
  if valid_616085 != nil:
    section.add "X-Amz-Signature", valid_616085
  var valid_616086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616086 = validateParameter(valid_616086, JString, required = false,
                                 default = nil)
  if valid_616086 != nil:
    section.add "X-Amz-Content-Sha256", valid_616086
  var valid_616087 = header.getOrDefault("X-Amz-Date")
  valid_616087 = validateParameter(valid_616087, JString, required = false,
                                 default = nil)
  if valid_616087 != nil:
    section.add "X-Amz-Date", valid_616087
  var valid_616088 = header.getOrDefault("X-Amz-Credential")
  valid_616088 = validateParameter(valid_616088, JString, required = false,
                                 default = nil)
  if valid_616088 != nil:
    section.add "X-Amz-Credential", valid_616088
  var valid_616089 = header.getOrDefault("X-Amz-Security-Token")
  valid_616089 = validateParameter(valid_616089, JString, required = false,
                                 default = nil)
  if valid_616089 != nil:
    section.add "X-Amz-Security-Token", valid_616089
  var valid_616090 = header.getOrDefault("X-Amz-Algorithm")
  valid_616090 = validateParameter(valid_616090, JString, required = false,
                                 default = nil)
  if valid_616090 != nil:
    section.add "X-Amz-Algorithm", valid_616090
  var valid_616091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616091 = validateParameter(valid_616091, JString, required = false,
                                 default = nil)
  if valid_616091 != nil:
    section.add "X-Amz-SignedHeaders", valid_616091
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616092 = formData.getOrDefault("Marker")
  valid_616092 = validateParameter(valid_616092, JString, required = false,
                                 default = nil)
  if valid_616092 != nil:
    section.add "Marker", valid_616092
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_616093 = formData.getOrDefault("UserName")
  valid_616093 = validateParameter(valid_616093, JString, required = true,
                                 default = nil)
  if valid_616093 != nil:
    section.add "UserName", valid_616093
  var valid_616094 = formData.getOrDefault("PathPrefix")
  valid_616094 = validateParameter(valid_616094, JString, required = false,
                                 default = nil)
  if valid_616094 != nil:
    section.add "PathPrefix", valid_616094
  var valid_616095 = formData.getOrDefault("MaxItems")
  valid_616095 = validateParameter(valid_616095, JInt, required = false, default = nil)
  if valid_616095 != nil:
    section.add "MaxItems", valid_616095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616096: Call_PostListAttachedUserPolicies_616080; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_616096.validator(path, query, header, formData, body)
  let scheme = call_616096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616096.url(scheme.get, call_616096.host, call_616096.base,
                         call_616096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616096, url, valid)

proc call*(call_616097: Call_PostListAttachedUserPolicies_616080; UserName: string;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616098 = newJObject()
  var formData_616099 = newJObject()
  add(formData_616099, "Marker", newJString(Marker))
  add(formData_616099, "UserName", newJString(UserName))
  add(formData_616099, "PathPrefix", newJString(PathPrefix))
  add(formData_616099, "MaxItems", newJInt(MaxItems))
  add(query_616098, "Action", newJString(Action))
  add(query_616098, "Version", newJString(Version))
  result = call_616097.call(nil, query_616098, nil, formData_616099, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_616080(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_616081, base: "/",
    url: url_PostListAttachedUserPolicies_616082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_616061 = ref object of OpenApiRestCall_612658
proc url_GetListAttachedUserPolicies_616063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAttachedUserPolicies_616062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616064 = query.getOrDefault("Marker")
  valid_616064 = validateParameter(valid_616064, JString, required = false,
                                 default = nil)
  if valid_616064 != nil:
    section.add "Marker", valid_616064
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_616065 = query.getOrDefault("UserName")
  valid_616065 = validateParameter(valid_616065, JString, required = true,
                                 default = nil)
  if valid_616065 != nil:
    section.add "UserName", valid_616065
  var valid_616066 = query.getOrDefault("MaxItems")
  valid_616066 = validateParameter(valid_616066, JInt, required = false, default = nil)
  if valid_616066 != nil:
    section.add "MaxItems", valid_616066
  var valid_616067 = query.getOrDefault("PathPrefix")
  valid_616067 = validateParameter(valid_616067, JString, required = false,
                                 default = nil)
  if valid_616067 != nil:
    section.add "PathPrefix", valid_616067
  var valid_616068 = query.getOrDefault("Action")
  valid_616068 = validateParameter(valid_616068, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_616068 != nil:
    section.add "Action", valid_616068
  var valid_616069 = query.getOrDefault("Version")
  valid_616069 = validateParameter(valid_616069, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616069 != nil:
    section.add "Version", valid_616069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616070 = header.getOrDefault("X-Amz-Signature")
  valid_616070 = validateParameter(valid_616070, JString, required = false,
                                 default = nil)
  if valid_616070 != nil:
    section.add "X-Amz-Signature", valid_616070
  var valid_616071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616071 = validateParameter(valid_616071, JString, required = false,
                                 default = nil)
  if valid_616071 != nil:
    section.add "X-Amz-Content-Sha256", valid_616071
  var valid_616072 = header.getOrDefault("X-Amz-Date")
  valid_616072 = validateParameter(valid_616072, JString, required = false,
                                 default = nil)
  if valid_616072 != nil:
    section.add "X-Amz-Date", valid_616072
  var valid_616073 = header.getOrDefault("X-Amz-Credential")
  valid_616073 = validateParameter(valid_616073, JString, required = false,
                                 default = nil)
  if valid_616073 != nil:
    section.add "X-Amz-Credential", valid_616073
  var valid_616074 = header.getOrDefault("X-Amz-Security-Token")
  valid_616074 = validateParameter(valid_616074, JString, required = false,
                                 default = nil)
  if valid_616074 != nil:
    section.add "X-Amz-Security-Token", valid_616074
  var valid_616075 = header.getOrDefault("X-Amz-Algorithm")
  valid_616075 = validateParameter(valid_616075, JString, required = false,
                                 default = nil)
  if valid_616075 != nil:
    section.add "X-Amz-Algorithm", valid_616075
  var valid_616076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616076 = validateParameter(valid_616076, JString, required = false,
                                 default = nil)
  if valid_616076 != nil:
    section.add "X-Amz-SignedHeaders", valid_616076
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616077: Call_GetListAttachedUserPolicies_616061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_616077.validator(path, query, header, formData, body)
  let scheme = call_616077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616077.url(scheme.get, call_616077.host, call_616077.base,
                         call_616077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616077, url, valid)

proc call*(call_616078: Call_GetListAttachedUserPolicies_616061; UserName: string;
          Marker: string = ""; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListAttachedUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616079 = newJObject()
  add(query_616079, "Marker", newJString(Marker))
  add(query_616079, "UserName", newJString(UserName))
  add(query_616079, "MaxItems", newJInt(MaxItems))
  add(query_616079, "PathPrefix", newJString(PathPrefix))
  add(query_616079, "Action", newJString(Action))
  add(query_616079, "Version", newJString(Version))
  result = call_616078.call(nil, query_616079, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_616061(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_616062, base: "/",
    url: url_GetListAttachedUserPolicies_616063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_616121 = ref object of OpenApiRestCall_612658
proc url_PostListEntitiesForPolicy_616123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListEntitiesForPolicy_616122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616124 = query.getOrDefault("Action")
  valid_616124 = validateParameter(valid_616124, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_616124 != nil:
    section.add "Action", valid_616124
  var valid_616125 = query.getOrDefault("Version")
  valid_616125 = validateParameter(valid_616125, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616125 != nil:
    section.add "Version", valid_616125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616126 = header.getOrDefault("X-Amz-Signature")
  valid_616126 = validateParameter(valid_616126, JString, required = false,
                                 default = nil)
  if valid_616126 != nil:
    section.add "X-Amz-Signature", valid_616126
  var valid_616127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616127 = validateParameter(valid_616127, JString, required = false,
                                 default = nil)
  if valid_616127 != nil:
    section.add "X-Amz-Content-Sha256", valid_616127
  var valid_616128 = header.getOrDefault("X-Amz-Date")
  valid_616128 = validateParameter(valid_616128, JString, required = false,
                                 default = nil)
  if valid_616128 != nil:
    section.add "X-Amz-Date", valid_616128
  var valid_616129 = header.getOrDefault("X-Amz-Credential")
  valid_616129 = validateParameter(valid_616129, JString, required = false,
                                 default = nil)
  if valid_616129 != nil:
    section.add "X-Amz-Credential", valid_616129
  var valid_616130 = header.getOrDefault("X-Amz-Security-Token")
  valid_616130 = validateParameter(valid_616130, JString, required = false,
                                 default = nil)
  if valid_616130 != nil:
    section.add "X-Amz-Security-Token", valid_616130
  var valid_616131 = header.getOrDefault("X-Amz-Algorithm")
  valid_616131 = validateParameter(valid_616131, JString, required = false,
                                 default = nil)
  if valid_616131 != nil:
    section.add "X-Amz-Algorithm", valid_616131
  var valid_616132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616132 = validateParameter(valid_616132, JString, required = false,
                                 default = nil)
  if valid_616132 != nil:
    section.add "X-Amz-SignedHeaders", valid_616132
  result.add "header", section
  ## parameters in `formData` object:
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_616133 = formData.getOrDefault("EntityFilter")
  valid_616133 = validateParameter(valid_616133, JString, required = false,
                                 default = newJString("User"))
  if valid_616133 != nil:
    section.add "EntityFilter", valid_616133
  var valid_616134 = formData.getOrDefault("Marker")
  valid_616134 = validateParameter(valid_616134, JString, required = false,
                                 default = nil)
  if valid_616134 != nil:
    section.add "Marker", valid_616134
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_616135 = formData.getOrDefault("PolicyArn")
  valid_616135 = validateParameter(valid_616135, JString, required = true,
                                 default = nil)
  if valid_616135 != nil:
    section.add "PolicyArn", valid_616135
  var valid_616136 = formData.getOrDefault("PathPrefix")
  valid_616136 = validateParameter(valid_616136, JString, required = false,
                                 default = nil)
  if valid_616136 != nil:
    section.add "PathPrefix", valid_616136
  var valid_616137 = formData.getOrDefault("MaxItems")
  valid_616137 = validateParameter(valid_616137, JInt, required = false, default = nil)
  if valid_616137 != nil:
    section.add "MaxItems", valid_616137
  var valid_616138 = formData.getOrDefault("PolicyUsageFilter")
  valid_616138 = validateParameter(valid_616138, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_616138 != nil:
    section.add "PolicyUsageFilter", valid_616138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616139: Call_PostListEntitiesForPolicy_616121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616139.validator(path, query, header, formData, body)
  let scheme = call_616139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616139.url(scheme.get, call_616139.host, call_616139.base,
                         call_616139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616139, url, valid)

proc call*(call_616140: Call_PostListEntitiesForPolicy_616121; PolicyArn: string;
          EntityFilter: string = "User"; Marker: string = ""; PathPrefix: string = "";
          MaxItems: int = 0; Action: string = "ListEntitiesForPolicy";
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_616141 = newJObject()
  var formData_616142 = newJObject()
  add(formData_616142, "EntityFilter", newJString(EntityFilter))
  add(formData_616142, "Marker", newJString(Marker))
  add(formData_616142, "PolicyArn", newJString(PolicyArn))
  add(formData_616142, "PathPrefix", newJString(PathPrefix))
  add(formData_616142, "MaxItems", newJInt(MaxItems))
  add(query_616141, "Action", newJString(Action))
  add(query_616141, "Version", newJString(Version))
  add(formData_616142, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_616140.call(nil, query_616141, nil, formData_616142, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_616121(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_616122, base: "/",
    url: url_PostListEntitiesForPolicy_616123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_616100 = ref object of OpenApiRestCall_612658
proc url_GetListEntitiesForPolicy_616102(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListEntitiesForPolicy_616101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616103 = query.getOrDefault("Marker")
  valid_616103 = validateParameter(valid_616103, JString, required = false,
                                 default = nil)
  if valid_616103 != nil:
    section.add "Marker", valid_616103
  var valid_616104 = query.getOrDefault("PolicyUsageFilter")
  valid_616104 = validateParameter(valid_616104, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_616104 != nil:
    section.add "PolicyUsageFilter", valid_616104
  var valid_616105 = query.getOrDefault("EntityFilter")
  valid_616105 = validateParameter(valid_616105, JString, required = false,
                                 default = newJString("User"))
  if valid_616105 != nil:
    section.add "EntityFilter", valid_616105
  var valid_616106 = query.getOrDefault("MaxItems")
  valid_616106 = validateParameter(valid_616106, JInt, required = false, default = nil)
  if valid_616106 != nil:
    section.add "MaxItems", valid_616106
  var valid_616107 = query.getOrDefault("PathPrefix")
  valid_616107 = validateParameter(valid_616107, JString, required = false,
                                 default = nil)
  if valid_616107 != nil:
    section.add "PathPrefix", valid_616107
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_616108 = query.getOrDefault("PolicyArn")
  valid_616108 = validateParameter(valid_616108, JString, required = true,
                                 default = nil)
  if valid_616108 != nil:
    section.add "PolicyArn", valid_616108
  var valid_616109 = query.getOrDefault("Action")
  valid_616109 = validateParameter(valid_616109, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_616109 != nil:
    section.add "Action", valid_616109
  var valid_616110 = query.getOrDefault("Version")
  valid_616110 = validateParameter(valid_616110, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616110 != nil:
    section.add "Version", valid_616110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616111 = header.getOrDefault("X-Amz-Signature")
  valid_616111 = validateParameter(valid_616111, JString, required = false,
                                 default = nil)
  if valid_616111 != nil:
    section.add "X-Amz-Signature", valid_616111
  var valid_616112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616112 = validateParameter(valid_616112, JString, required = false,
                                 default = nil)
  if valid_616112 != nil:
    section.add "X-Amz-Content-Sha256", valid_616112
  var valid_616113 = header.getOrDefault("X-Amz-Date")
  valid_616113 = validateParameter(valid_616113, JString, required = false,
                                 default = nil)
  if valid_616113 != nil:
    section.add "X-Amz-Date", valid_616113
  var valid_616114 = header.getOrDefault("X-Amz-Credential")
  valid_616114 = validateParameter(valid_616114, JString, required = false,
                                 default = nil)
  if valid_616114 != nil:
    section.add "X-Amz-Credential", valid_616114
  var valid_616115 = header.getOrDefault("X-Amz-Security-Token")
  valid_616115 = validateParameter(valid_616115, JString, required = false,
                                 default = nil)
  if valid_616115 != nil:
    section.add "X-Amz-Security-Token", valid_616115
  var valid_616116 = header.getOrDefault("X-Amz-Algorithm")
  valid_616116 = validateParameter(valid_616116, JString, required = false,
                                 default = nil)
  if valid_616116 != nil:
    section.add "X-Amz-Algorithm", valid_616116
  var valid_616117 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616117 = validateParameter(valid_616117, JString, required = false,
                                 default = nil)
  if valid_616117 != nil:
    section.add "X-Amz-SignedHeaders", valid_616117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616118: Call_GetListEntitiesForPolicy_616100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616118.validator(path, query, header, formData, body)
  let scheme = call_616118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616118.url(scheme.get, call_616118.host, call_616118.base,
                         call_616118.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616118, url, valid)

proc call*(call_616119: Call_GetListEntitiesForPolicy_616100; PolicyArn: string;
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          EntityFilter: string = "User"; MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListEntitiesForPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616120 = newJObject()
  add(query_616120, "Marker", newJString(Marker))
  add(query_616120, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_616120, "EntityFilter", newJString(EntityFilter))
  add(query_616120, "MaxItems", newJInt(MaxItems))
  add(query_616120, "PathPrefix", newJString(PathPrefix))
  add(query_616120, "PolicyArn", newJString(PolicyArn))
  add(query_616120, "Action", newJString(Action))
  add(query_616120, "Version", newJString(Version))
  result = call_616119.call(nil, query_616120, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_616100(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_616101, base: "/",
    url: url_GetListEntitiesForPolicy_616102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_616161 = ref object of OpenApiRestCall_612658
proc url_PostListGroupPolicies_616163(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupPolicies_616162(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616164 = query.getOrDefault("Action")
  valid_616164 = validateParameter(valid_616164, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_616164 != nil:
    section.add "Action", valid_616164
  var valid_616165 = query.getOrDefault("Version")
  valid_616165 = validateParameter(valid_616165, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616165 != nil:
    section.add "Version", valid_616165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616166 = header.getOrDefault("X-Amz-Signature")
  valid_616166 = validateParameter(valid_616166, JString, required = false,
                                 default = nil)
  if valid_616166 != nil:
    section.add "X-Amz-Signature", valid_616166
  var valid_616167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616167 = validateParameter(valid_616167, JString, required = false,
                                 default = nil)
  if valid_616167 != nil:
    section.add "X-Amz-Content-Sha256", valid_616167
  var valid_616168 = header.getOrDefault("X-Amz-Date")
  valid_616168 = validateParameter(valid_616168, JString, required = false,
                                 default = nil)
  if valid_616168 != nil:
    section.add "X-Amz-Date", valid_616168
  var valid_616169 = header.getOrDefault("X-Amz-Credential")
  valid_616169 = validateParameter(valid_616169, JString, required = false,
                                 default = nil)
  if valid_616169 != nil:
    section.add "X-Amz-Credential", valid_616169
  var valid_616170 = header.getOrDefault("X-Amz-Security-Token")
  valid_616170 = validateParameter(valid_616170, JString, required = false,
                                 default = nil)
  if valid_616170 != nil:
    section.add "X-Amz-Security-Token", valid_616170
  var valid_616171 = header.getOrDefault("X-Amz-Algorithm")
  valid_616171 = validateParameter(valid_616171, JString, required = false,
                                 default = nil)
  if valid_616171 != nil:
    section.add "X-Amz-Algorithm", valid_616171
  var valid_616172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616172 = validateParameter(valid_616172, JString, required = false,
                                 default = nil)
  if valid_616172 != nil:
    section.add "X-Amz-SignedHeaders", valid_616172
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616173 = formData.getOrDefault("Marker")
  valid_616173 = validateParameter(valid_616173, JString, required = false,
                                 default = nil)
  if valid_616173 != nil:
    section.add "Marker", valid_616173
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_616174 = formData.getOrDefault("GroupName")
  valid_616174 = validateParameter(valid_616174, JString, required = true,
                                 default = nil)
  if valid_616174 != nil:
    section.add "GroupName", valid_616174
  var valid_616175 = formData.getOrDefault("MaxItems")
  valid_616175 = validateParameter(valid_616175, JInt, required = false, default = nil)
  if valid_616175 != nil:
    section.add "MaxItems", valid_616175
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616176: Call_PostListGroupPolicies_616161; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_616176.validator(path, query, header, formData, body)
  let scheme = call_616176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616176.url(scheme.get, call_616176.host, call_616176.base,
                         call_616176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616176, url, valid)

proc call*(call_616177: Call_PostListGroupPolicies_616161; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616178 = newJObject()
  var formData_616179 = newJObject()
  add(formData_616179, "Marker", newJString(Marker))
  add(formData_616179, "GroupName", newJString(GroupName))
  add(query_616178, "Action", newJString(Action))
  add(formData_616179, "MaxItems", newJInt(MaxItems))
  add(query_616178, "Version", newJString(Version))
  result = call_616177.call(nil, query_616178, nil, formData_616179, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_616161(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_616162, base: "/",
    url: url_PostListGroupPolicies_616163, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_616143 = ref object of OpenApiRestCall_612658
proc url_GetListGroupPolicies_616145(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupPolicies_616144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616146 = query.getOrDefault("Marker")
  valid_616146 = validateParameter(valid_616146, JString, required = false,
                                 default = nil)
  if valid_616146 != nil:
    section.add "Marker", valid_616146
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_616147 = query.getOrDefault("GroupName")
  valid_616147 = validateParameter(valid_616147, JString, required = true,
                                 default = nil)
  if valid_616147 != nil:
    section.add "GroupName", valid_616147
  var valid_616148 = query.getOrDefault("MaxItems")
  valid_616148 = validateParameter(valid_616148, JInt, required = false, default = nil)
  if valid_616148 != nil:
    section.add "MaxItems", valid_616148
  var valid_616149 = query.getOrDefault("Action")
  valid_616149 = validateParameter(valid_616149, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_616149 != nil:
    section.add "Action", valid_616149
  var valid_616150 = query.getOrDefault("Version")
  valid_616150 = validateParameter(valid_616150, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616150 != nil:
    section.add "Version", valid_616150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616151 = header.getOrDefault("X-Amz-Signature")
  valid_616151 = validateParameter(valid_616151, JString, required = false,
                                 default = nil)
  if valid_616151 != nil:
    section.add "X-Amz-Signature", valid_616151
  var valid_616152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616152 = validateParameter(valid_616152, JString, required = false,
                                 default = nil)
  if valid_616152 != nil:
    section.add "X-Amz-Content-Sha256", valid_616152
  var valid_616153 = header.getOrDefault("X-Amz-Date")
  valid_616153 = validateParameter(valid_616153, JString, required = false,
                                 default = nil)
  if valid_616153 != nil:
    section.add "X-Amz-Date", valid_616153
  var valid_616154 = header.getOrDefault("X-Amz-Credential")
  valid_616154 = validateParameter(valid_616154, JString, required = false,
                                 default = nil)
  if valid_616154 != nil:
    section.add "X-Amz-Credential", valid_616154
  var valid_616155 = header.getOrDefault("X-Amz-Security-Token")
  valid_616155 = validateParameter(valid_616155, JString, required = false,
                                 default = nil)
  if valid_616155 != nil:
    section.add "X-Amz-Security-Token", valid_616155
  var valid_616156 = header.getOrDefault("X-Amz-Algorithm")
  valid_616156 = validateParameter(valid_616156, JString, required = false,
                                 default = nil)
  if valid_616156 != nil:
    section.add "X-Amz-Algorithm", valid_616156
  var valid_616157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616157 = validateParameter(valid_616157, JString, required = false,
                                 default = nil)
  if valid_616157 != nil:
    section.add "X-Amz-SignedHeaders", valid_616157
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616158: Call_GetListGroupPolicies_616143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_616158.validator(path, query, header, formData, body)
  let scheme = call_616158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616158.url(scheme.get, call_616158.host, call_616158.base,
                         call_616158.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616158, url, valid)

proc call*(call_616159: Call_GetListGroupPolicies_616143; GroupName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616160 = newJObject()
  add(query_616160, "Marker", newJString(Marker))
  add(query_616160, "GroupName", newJString(GroupName))
  add(query_616160, "MaxItems", newJInt(MaxItems))
  add(query_616160, "Action", newJString(Action))
  add(query_616160, "Version", newJString(Version))
  result = call_616159.call(nil, query_616160, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_616143(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_616144, base: "/",
    url: url_GetListGroupPolicies_616145, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_616198 = ref object of OpenApiRestCall_612658
proc url_PostListGroups_616200(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroups_616199(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616201 = query.getOrDefault("Action")
  valid_616201 = validateParameter(valid_616201, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_616201 != nil:
    section.add "Action", valid_616201
  var valid_616202 = query.getOrDefault("Version")
  valid_616202 = validateParameter(valid_616202, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616202 != nil:
    section.add "Version", valid_616202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616203 = header.getOrDefault("X-Amz-Signature")
  valid_616203 = validateParameter(valid_616203, JString, required = false,
                                 default = nil)
  if valid_616203 != nil:
    section.add "X-Amz-Signature", valid_616203
  var valid_616204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616204 = validateParameter(valid_616204, JString, required = false,
                                 default = nil)
  if valid_616204 != nil:
    section.add "X-Amz-Content-Sha256", valid_616204
  var valid_616205 = header.getOrDefault("X-Amz-Date")
  valid_616205 = validateParameter(valid_616205, JString, required = false,
                                 default = nil)
  if valid_616205 != nil:
    section.add "X-Amz-Date", valid_616205
  var valid_616206 = header.getOrDefault("X-Amz-Credential")
  valid_616206 = validateParameter(valid_616206, JString, required = false,
                                 default = nil)
  if valid_616206 != nil:
    section.add "X-Amz-Credential", valid_616206
  var valid_616207 = header.getOrDefault("X-Amz-Security-Token")
  valid_616207 = validateParameter(valid_616207, JString, required = false,
                                 default = nil)
  if valid_616207 != nil:
    section.add "X-Amz-Security-Token", valid_616207
  var valid_616208 = header.getOrDefault("X-Amz-Algorithm")
  valid_616208 = validateParameter(valid_616208, JString, required = false,
                                 default = nil)
  if valid_616208 != nil:
    section.add "X-Amz-Algorithm", valid_616208
  var valid_616209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616209 = validateParameter(valid_616209, JString, required = false,
                                 default = nil)
  if valid_616209 != nil:
    section.add "X-Amz-SignedHeaders", valid_616209
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616210 = formData.getOrDefault("Marker")
  valid_616210 = validateParameter(valid_616210, JString, required = false,
                                 default = nil)
  if valid_616210 != nil:
    section.add "Marker", valid_616210
  var valid_616211 = formData.getOrDefault("PathPrefix")
  valid_616211 = validateParameter(valid_616211, JString, required = false,
                                 default = nil)
  if valid_616211 != nil:
    section.add "PathPrefix", valid_616211
  var valid_616212 = formData.getOrDefault("MaxItems")
  valid_616212 = validateParameter(valid_616212, JInt, required = false, default = nil)
  if valid_616212 != nil:
    section.add "MaxItems", valid_616212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616213: Call_PostListGroups_616198; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616213.validator(path, query, header, formData, body)
  let scheme = call_616213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616213.url(scheme.get, call_616213.host, call_616213.base,
                         call_616213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616213, url, valid)

proc call*(call_616214: Call_PostListGroups_616198; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616215 = newJObject()
  var formData_616216 = newJObject()
  add(formData_616216, "Marker", newJString(Marker))
  add(formData_616216, "PathPrefix", newJString(PathPrefix))
  add(formData_616216, "MaxItems", newJInt(MaxItems))
  add(query_616215, "Action", newJString(Action))
  add(query_616215, "Version", newJString(Version))
  result = call_616214.call(nil, query_616215, nil, formData_616216, nil)

var postListGroups* = Call_PostListGroups_616198(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_616199,
    base: "/", url: url_PostListGroups_616200, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_616180 = ref object of OpenApiRestCall_612658
proc url_GetListGroups_616182(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroups_616181(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616183 = query.getOrDefault("Marker")
  valid_616183 = validateParameter(valid_616183, JString, required = false,
                                 default = nil)
  if valid_616183 != nil:
    section.add "Marker", valid_616183
  var valid_616184 = query.getOrDefault("MaxItems")
  valid_616184 = validateParameter(valid_616184, JInt, required = false, default = nil)
  if valid_616184 != nil:
    section.add "MaxItems", valid_616184
  var valid_616185 = query.getOrDefault("PathPrefix")
  valid_616185 = validateParameter(valid_616185, JString, required = false,
                                 default = nil)
  if valid_616185 != nil:
    section.add "PathPrefix", valid_616185
  var valid_616186 = query.getOrDefault("Action")
  valid_616186 = validateParameter(valid_616186, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_616186 != nil:
    section.add "Action", valid_616186
  var valid_616187 = query.getOrDefault("Version")
  valid_616187 = validateParameter(valid_616187, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616187 != nil:
    section.add "Version", valid_616187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616188 = header.getOrDefault("X-Amz-Signature")
  valid_616188 = validateParameter(valid_616188, JString, required = false,
                                 default = nil)
  if valid_616188 != nil:
    section.add "X-Amz-Signature", valid_616188
  var valid_616189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616189 = validateParameter(valid_616189, JString, required = false,
                                 default = nil)
  if valid_616189 != nil:
    section.add "X-Amz-Content-Sha256", valid_616189
  var valid_616190 = header.getOrDefault("X-Amz-Date")
  valid_616190 = validateParameter(valid_616190, JString, required = false,
                                 default = nil)
  if valid_616190 != nil:
    section.add "X-Amz-Date", valid_616190
  var valid_616191 = header.getOrDefault("X-Amz-Credential")
  valid_616191 = validateParameter(valid_616191, JString, required = false,
                                 default = nil)
  if valid_616191 != nil:
    section.add "X-Amz-Credential", valid_616191
  var valid_616192 = header.getOrDefault("X-Amz-Security-Token")
  valid_616192 = validateParameter(valid_616192, JString, required = false,
                                 default = nil)
  if valid_616192 != nil:
    section.add "X-Amz-Security-Token", valid_616192
  var valid_616193 = header.getOrDefault("X-Amz-Algorithm")
  valid_616193 = validateParameter(valid_616193, JString, required = false,
                                 default = nil)
  if valid_616193 != nil:
    section.add "X-Amz-Algorithm", valid_616193
  var valid_616194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616194 = validateParameter(valid_616194, JString, required = false,
                                 default = nil)
  if valid_616194 != nil:
    section.add "X-Amz-SignedHeaders", valid_616194
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616195: Call_GetListGroups_616180; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616195.validator(path, query, header, formData, body)
  let scheme = call_616195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616195.url(scheme.get, call_616195.host, call_616195.base,
                         call_616195.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616195, url, valid)

proc call*(call_616196: Call_GetListGroups_616180; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListGroups";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616197 = newJObject()
  add(query_616197, "Marker", newJString(Marker))
  add(query_616197, "MaxItems", newJInt(MaxItems))
  add(query_616197, "PathPrefix", newJString(PathPrefix))
  add(query_616197, "Action", newJString(Action))
  add(query_616197, "Version", newJString(Version))
  result = call_616196.call(nil, query_616197, nil, nil, nil)

var getListGroups* = Call_GetListGroups_616180(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_616181,
    base: "/", url: url_GetListGroups_616182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_616235 = ref object of OpenApiRestCall_612658
proc url_PostListGroupsForUser_616237(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListGroupsForUser_616236(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616238 = query.getOrDefault("Action")
  valid_616238 = validateParameter(valid_616238, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_616238 != nil:
    section.add "Action", valid_616238
  var valid_616239 = query.getOrDefault("Version")
  valid_616239 = validateParameter(valid_616239, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616239 != nil:
    section.add "Version", valid_616239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616240 = header.getOrDefault("X-Amz-Signature")
  valid_616240 = validateParameter(valid_616240, JString, required = false,
                                 default = nil)
  if valid_616240 != nil:
    section.add "X-Amz-Signature", valid_616240
  var valid_616241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616241 = validateParameter(valid_616241, JString, required = false,
                                 default = nil)
  if valid_616241 != nil:
    section.add "X-Amz-Content-Sha256", valid_616241
  var valid_616242 = header.getOrDefault("X-Amz-Date")
  valid_616242 = validateParameter(valid_616242, JString, required = false,
                                 default = nil)
  if valid_616242 != nil:
    section.add "X-Amz-Date", valid_616242
  var valid_616243 = header.getOrDefault("X-Amz-Credential")
  valid_616243 = validateParameter(valid_616243, JString, required = false,
                                 default = nil)
  if valid_616243 != nil:
    section.add "X-Amz-Credential", valid_616243
  var valid_616244 = header.getOrDefault("X-Amz-Security-Token")
  valid_616244 = validateParameter(valid_616244, JString, required = false,
                                 default = nil)
  if valid_616244 != nil:
    section.add "X-Amz-Security-Token", valid_616244
  var valid_616245 = header.getOrDefault("X-Amz-Algorithm")
  valid_616245 = validateParameter(valid_616245, JString, required = false,
                                 default = nil)
  if valid_616245 != nil:
    section.add "X-Amz-Algorithm", valid_616245
  var valid_616246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616246 = validateParameter(valid_616246, JString, required = false,
                                 default = nil)
  if valid_616246 != nil:
    section.add "X-Amz-SignedHeaders", valid_616246
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616247 = formData.getOrDefault("Marker")
  valid_616247 = validateParameter(valid_616247, JString, required = false,
                                 default = nil)
  if valid_616247 != nil:
    section.add "Marker", valid_616247
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_616248 = formData.getOrDefault("UserName")
  valid_616248 = validateParameter(valid_616248, JString, required = true,
                                 default = nil)
  if valid_616248 != nil:
    section.add "UserName", valid_616248
  var valid_616249 = formData.getOrDefault("MaxItems")
  valid_616249 = validateParameter(valid_616249, JInt, required = false, default = nil)
  if valid_616249 != nil:
    section.add "MaxItems", valid_616249
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616250: Call_PostListGroupsForUser_616235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616250.validator(path, query, header, formData, body)
  let scheme = call_616250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616250.url(scheme.get, call_616250.host, call_616250.base,
                         call_616250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616250, url, valid)

proc call*(call_616251: Call_PostListGroupsForUser_616235; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616252 = newJObject()
  var formData_616253 = newJObject()
  add(formData_616253, "Marker", newJString(Marker))
  add(formData_616253, "UserName", newJString(UserName))
  add(query_616252, "Action", newJString(Action))
  add(formData_616253, "MaxItems", newJInt(MaxItems))
  add(query_616252, "Version", newJString(Version))
  result = call_616251.call(nil, query_616252, nil, formData_616253, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_616235(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_616236, base: "/",
    url: url_PostListGroupsForUser_616237, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_616217 = ref object of OpenApiRestCall_612658
proc url_GetListGroupsForUser_616219(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListGroupsForUser_616218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616220 = query.getOrDefault("Marker")
  valid_616220 = validateParameter(valid_616220, JString, required = false,
                                 default = nil)
  if valid_616220 != nil:
    section.add "Marker", valid_616220
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_616221 = query.getOrDefault("UserName")
  valid_616221 = validateParameter(valid_616221, JString, required = true,
                                 default = nil)
  if valid_616221 != nil:
    section.add "UserName", valid_616221
  var valid_616222 = query.getOrDefault("MaxItems")
  valid_616222 = validateParameter(valid_616222, JInt, required = false, default = nil)
  if valid_616222 != nil:
    section.add "MaxItems", valid_616222
  var valid_616223 = query.getOrDefault("Action")
  valid_616223 = validateParameter(valid_616223, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_616223 != nil:
    section.add "Action", valid_616223
  var valid_616224 = query.getOrDefault("Version")
  valid_616224 = validateParameter(valid_616224, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616224 != nil:
    section.add "Version", valid_616224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616225 = header.getOrDefault("X-Amz-Signature")
  valid_616225 = validateParameter(valid_616225, JString, required = false,
                                 default = nil)
  if valid_616225 != nil:
    section.add "X-Amz-Signature", valid_616225
  var valid_616226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616226 = validateParameter(valid_616226, JString, required = false,
                                 default = nil)
  if valid_616226 != nil:
    section.add "X-Amz-Content-Sha256", valid_616226
  var valid_616227 = header.getOrDefault("X-Amz-Date")
  valid_616227 = validateParameter(valid_616227, JString, required = false,
                                 default = nil)
  if valid_616227 != nil:
    section.add "X-Amz-Date", valid_616227
  var valid_616228 = header.getOrDefault("X-Amz-Credential")
  valid_616228 = validateParameter(valid_616228, JString, required = false,
                                 default = nil)
  if valid_616228 != nil:
    section.add "X-Amz-Credential", valid_616228
  var valid_616229 = header.getOrDefault("X-Amz-Security-Token")
  valid_616229 = validateParameter(valid_616229, JString, required = false,
                                 default = nil)
  if valid_616229 != nil:
    section.add "X-Amz-Security-Token", valid_616229
  var valid_616230 = header.getOrDefault("X-Amz-Algorithm")
  valid_616230 = validateParameter(valid_616230, JString, required = false,
                                 default = nil)
  if valid_616230 != nil:
    section.add "X-Amz-Algorithm", valid_616230
  var valid_616231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616231 = validateParameter(valid_616231, JString, required = false,
                                 default = nil)
  if valid_616231 != nil:
    section.add "X-Amz-SignedHeaders", valid_616231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616232: Call_GetListGroupsForUser_616217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616232.validator(path, query, header, formData, body)
  let scheme = call_616232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616232.url(scheme.get, call_616232.host, call_616232.base,
                         call_616232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616232, url, valid)

proc call*(call_616233: Call_GetListGroupsForUser_616217; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListGroupsForUser";
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616234 = newJObject()
  add(query_616234, "Marker", newJString(Marker))
  add(query_616234, "UserName", newJString(UserName))
  add(query_616234, "MaxItems", newJInt(MaxItems))
  add(query_616234, "Action", newJString(Action))
  add(query_616234, "Version", newJString(Version))
  result = call_616233.call(nil, query_616234, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_616217(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_616218, base: "/",
    url: url_GetListGroupsForUser_616219, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_616272 = ref object of OpenApiRestCall_612658
proc url_PostListInstanceProfiles_616274(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfiles_616273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616275 = query.getOrDefault("Action")
  valid_616275 = validateParameter(valid_616275, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_616275 != nil:
    section.add "Action", valid_616275
  var valid_616276 = query.getOrDefault("Version")
  valid_616276 = validateParameter(valid_616276, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616276 != nil:
    section.add "Version", valid_616276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616277 = header.getOrDefault("X-Amz-Signature")
  valid_616277 = validateParameter(valid_616277, JString, required = false,
                                 default = nil)
  if valid_616277 != nil:
    section.add "X-Amz-Signature", valid_616277
  var valid_616278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616278 = validateParameter(valid_616278, JString, required = false,
                                 default = nil)
  if valid_616278 != nil:
    section.add "X-Amz-Content-Sha256", valid_616278
  var valid_616279 = header.getOrDefault("X-Amz-Date")
  valid_616279 = validateParameter(valid_616279, JString, required = false,
                                 default = nil)
  if valid_616279 != nil:
    section.add "X-Amz-Date", valid_616279
  var valid_616280 = header.getOrDefault("X-Amz-Credential")
  valid_616280 = validateParameter(valid_616280, JString, required = false,
                                 default = nil)
  if valid_616280 != nil:
    section.add "X-Amz-Credential", valid_616280
  var valid_616281 = header.getOrDefault("X-Amz-Security-Token")
  valid_616281 = validateParameter(valid_616281, JString, required = false,
                                 default = nil)
  if valid_616281 != nil:
    section.add "X-Amz-Security-Token", valid_616281
  var valid_616282 = header.getOrDefault("X-Amz-Algorithm")
  valid_616282 = validateParameter(valid_616282, JString, required = false,
                                 default = nil)
  if valid_616282 != nil:
    section.add "X-Amz-Algorithm", valid_616282
  var valid_616283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616283 = validateParameter(valid_616283, JString, required = false,
                                 default = nil)
  if valid_616283 != nil:
    section.add "X-Amz-SignedHeaders", valid_616283
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616284 = formData.getOrDefault("Marker")
  valid_616284 = validateParameter(valid_616284, JString, required = false,
                                 default = nil)
  if valid_616284 != nil:
    section.add "Marker", valid_616284
  var valid_616285 = formData.getOrDefault("PathPrefix")
  valid_616285 = validateParameter(valid_616285, JString, required = false,
                                 default = nil)
  if valid_616285 != nil:
    section.add "PathPrefix", valid_616285
  var valid_616286 = formData.getOrDefault("MaxItems")
  valid_616286 = validateParameter(valid_616286, JInt, required = false, default = nil)
  if valid_616286 != nil:
    section.add "MaxItems", valid_616286
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616287: Call_PostListInstanceProfiles_616272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616287.validator(path, query, header, formData, body)
  let scheme = call_616287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616287.url(scheme.get, call_616287.host, call_616287.base,
                         call_616287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616287, url, valid)

proc call*(call_616288: Call_PostListInstanceProfiles_616272; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616289 = newJObject()
  var formData_616290 = newJObject()
  add(formData_616290, "Marker", newJString(Marker))
  add(formData_616290, "PathPrefix", newJString(PathPrefix))
  add(formData_616290, "MaxItems", newJInt(MaxItems))
  add(query_616289, "Action", newJString(Action))
  add(query_616289, "Version", newJString(Version))
  result = call_616288.call(nil, query_616289, nil, formData_616290, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_616272(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_616273, base: "/",
    url: url_PostListInstanceProfiles_616274, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_616254 = ref object of OpenApiRestCall_612658
proc url_GetListInstanceProfiles_616256(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfiles_616255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616257 = query.getOrDefault("Marker")
  valid_616257 = validateParameter(valid_616257, JString, required = false,
                                 default = nil)
  if valid_616257 != nil:
    section.add "Marker", valid_616257
  var valid_616258 = query.getOrDefault("MaxItems")
  valid_616258 = validateParameter(valid_616258, JInt, required = false, default = nil)
  if valid_616258 != nil:
    section.add "MaxItems", valid_616258
  var valid_616259 = query.getOrDefault("PathPrefix")
  valid_616259 = validateParameter(valid_616259, JString, required = false,
                                 default = nil)
  if valid_616259 != nil:
    section.add "PathPrefix", valid_616259
  var valid_616260 = query.getOrDefault("Action")
  valid_616260 = validateParameter(valid_616260, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_616260 != nil:
    section.add "Action", valid_616260
  var valid_616261 = query.getOrDefault("Version")
  valid_616261 = validateParameter(valid_616261, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616261 != nil:
    section.add "Version", valid_616261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616262 = header.getOrDefault("X-Amz-Signature")
  valid_616262 = validateParameter(valid_616262, JString, required = false,
                                 default = nil)
  if valid_616262 != nil:
    section.add "X-Amz-Signature", valid_616262
  var valid_616263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616263 = validateParameter(valid_616263, JString, required = false,
                                 default = nil)
  if valid_616263 != nil:
    section.add "X-Amz-Content-Sha256", valid_616263
  var valid_616264 = header.getOrDefault("X-Amz-Date")
  valid_616264 = validateParameter(valid_616264, JString, required = false,
                                 default = nil)
  if valid_616264 != nil:
    section.add "X-Amz-Date", valid_616264
  var valid_616265 = header.getOrDefault("X-Amz-Credential")
  valid_616265 = validateParameter(valid_616265, JString, required = false,
                                 default = nil)
  if valid_616265 != nil:
    section.add "X-Amz-Credential", valid_616265
  var valid_616266 = header.getOrDefault("X-Amz-Security-Token")
  valid_616266 = validateParameter(valid_616266, JString, required = false,
                                 default = nil)
  if valid_616266 != nil:
    section.add "X-Amz-Security-Token", valid_616266
  var valid_616267 = header.getOrDefault("X-Amz-Algorithm")
  valid_616267 = validateParameter(valid_616267, JString, required = false,
                                 default = nil)
  if valid_616267 != nil:
    section.add "X-Amz-Algorithm", valid_616267
  var valid_616268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616268 = validateParameter(valid_616268, JString, required = false,
                                 default = nil)
  if valid_616268 != nil:
    section.add "X-Amz-SignedHeaders", valid_616268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616269: Call_GetListInstanceProfiles_616254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616269.validator(path, query, header, formData, body)
  let scheme = call_616269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616269.url(scheme.get, call_616269.host, call_616269.base,
                         call_616269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616269, url, valid)

proc call*(call_616270: Call_GetListInstanceProfiles_616254; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListInstanceProfiles"; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616271 = newJObject()
  add(query_616271, "Marker", newJString(Marker))
  add(query_616271, "MaxItems", newJInt(MaxItems))
  add(query_616271, "PathPrefix", newJString(PathPrefix))
  add(query_616271, "Action", newJString(Action))
  add(query_616271, "Version", newJString(Version))
  result = call_616270.call(nil, query_616271, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_616254(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_616255, base: "/",
    url: url_GetListInstanceProfiles_616256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_616309 = ref object of OpenApiRestCall_612658
proc url_PostListInstanceProfilesForRole_616311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListInstanceProfilesForRole_616310(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616312 = query.getOrDefault("Action")
  valid_616312 = validateParameter(valid_616312, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_616312 != nil:
    section.add "Action", valid_616312
  var valid_616313 = query.getOrDefault("Version")
  valid_616313 = validateParameter(valid_616313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616313 != nil:
    section.add "Version", valid_616313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616314 = header.getOrDefault("X-Amz-Signature")
  valid_616314 = validateParameter(valid_616314, JString, required = false,
                                 default = nil)
  if valid_616314 != nil:
    section.add "X-Amz-Signature", valid_616314
  var valid_616315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616315 = validateParameter(valid_616315, JString, required = false,
                                 default = nil)
  if valid_616315 != nil:
    section.add "X-Amz-Content-Sha256", valid_616315
  var valid_616316 = header.getOrDefault("X-Amz-Date")
  valid_616316 = validateParameter(valid_616316, JString, required = false,
                                 default = nil)
  if valid_616316 != nil:
    section.add "X-Amz-Date", valid_616316
  var valid_616317 = header.getOrDefault("X-Amz-Credential")
  valid_616317 = validateParameter(valid_616317, JString, required = false,
                                 default = nil)
  if valid_616317 != nil:
    section.add "X-Amz-Credential", valid_616317
  var valid_616318 = header.getOrDefault("X-Amz-Security-Token")
  valid_616318 = validateParameter(valid_616318, JString, required = false,
                                 default = nil)
  if valid_616318 != nil:
    section.add "X-Amz-Security-Token", valid_616318
  var valid_616319 = header.getOrDefault("X-Amz-Algorithm")
  valid_616319 = validateParameter(valid_616319, JString, required = false,
                                 default = nil)
  if valid_616319 != nil:
    section.add "X-Amz-Algorithm", valid_616319
  var valid_616320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616320 = validateParameter(valid_616320, JString, required = false,
                                 default = nil)
  if valid_616320 != nil:
    section.add "X-Amz-SignedHeaders", valid_616320
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_616321 = formData.getOrDefault("RoleName")
  valid_616321 = validateParameter(valid_616321, JString, required = true,
                                 default = nil)
  if valid_616321 != nil:
    section.add "RoleName", valid_616321
  var valid_616322 = formData.getOrDefault("Marker")
  valid_616322 = validateParameter(valid_616322, JString, required = false,
                                 default = nil)
  if valid_616322 != nil:
    section.add "Marker", valid_616322
  var valid_616323 = formData.getOrDefault("MaxItems")
  valid_616323 = validateParameter(valid_616323, JInt, required = false, default = nil)
  if valid_616323 != nil:
    section.add "MaxItems", valid_616323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616324: Call_PostListInstanceProfilesForRole_616309;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616324.validator(path, query, header, formData, body)
  let scheme = call_616324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616324.url(scheme.get, call_616324.host, call_616324.base,
                         call_616324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616324, url, valid)

proc call*(call_616325: Call_PostListInstanceProfilesForRole_616309;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616326 = newJObject()
  var formData_616327 = newJObject()
  add(formData_616327, "RoleName", newJString(RoleName))
  add(formData_616327, "Marker", newJString(Marker))
  add(query_616326, "Action", newJString(Action))
  add(formData_616327, "MaxItems", newJInt(MaxItems))
  add(query_616326, "Version", newJString(Version))
  result = call_616325.call(nil, query_616326, nil, formData_616327, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_616309(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_616310, base: "/",
    url: url_PostListInstanceProfilesForRole_616311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_616291 = ref object of OpenApiRestCall_612658
proc url_GetListInstanceProfilesForRole_616293(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListInstanceProfilesForRole_616292(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616294 = query.getOrDefault("Marker")
  valid_616294 = validateParameter(valid_616294, JString, required = false,
                                 default = nil)
  if valid_616294 != nil:
    section.add "Marker", valid_616294
  var valid_616295 = query.getOrDefault("MaxItems")
  valid_616295 = validateParameter(valid_616295, JInt, required = false, default = nil)
  if valid_616295 != nil:
    section.add "MaxItems", valid_616295
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_616296 = query.getOrDefault("RoleName")
  valid_616296 = validateParameter(valid_616296, JString, required = true,
                                 default = nil)
  if valid_616296 != nil:
    section.add "RoleName", valid_616296
  var valid_616297 = query.getOrDefault("Action")
  valid_616297 = validateParameter(valid_616297, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_616297 != nil:
    section.add "Action", valid_616297
  var valid_616298 = query.getOrDefault("Version")
  valid_616298 = validateParameter(valid_616298, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616298 != nil:
    section.add "Version", valid_616298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616299 = header.getOrDefault("X-Amz-Signature")
  valid_616299 = validateParameter(valid_616299, JString, required = false,
                                 default = nil)
  if valid_616299 != nil:
    section.add "X-Amz-Signature", valid_616299
  var valid_616300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616300 = validateParameter(valid_616300, JString, required = false,
                                 default = nil)
  if valid_616300 != nil:
    section.add "X-Amz-Content-Sha256", valid_616300
  var valid_616301 = header.getOrDefault("X-Amz-Date")
  valid_616301 = validateParameter(valid_616301, JString, required = false,
                                 default = nil)
  if valid_616301 != nil:
    section.add "X-Amz-Date", valid_616301
  var valid_616302 = header.getOrDefault("X-Amz-Credential")
  valid_616302 = validateParameter(valid_616302, JString, required = false,
                                 default = nil)
  if valid_616302 != nil:
    section.add "X-Amz-Credential", valid_616302
  var valid_616303 = header.getOrDefault("X-Amz-Security-Token")
  valid_616303 = validateParameter(valid_616303, JString, required = false,
                                 default = nil)
  if valid_616303 != nil:
    section.add "X-Amz-Security-Token", valid_616303
  var valid_616304 = header.getOrDefault("X-Amz-Algorithm")
  valid_616304 = validateParameter(valid_616304, JString, required = false,
                                 default = nil)
  if valid_616304 != nil:
    section.add "X-Amz-Algorithm", valid_616304
  var valid_616305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616305 = validateParameter(valid_616305, JString, required = false,
                                 default = nil)
  if valid_616305 != nil:
    section.add "X-Amz-SignedHeaders", valid_616305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616306: Call_GetListInstanceProfilesForRole_616291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616306.validator(path, query, header, formData, body)
  let scheme = call_616306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616306.url(scheme.get, call_616306.host, call_616306.base,
                         call_616306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616306, url, valid)

proc call*(call_616307: Call_GetListInstanceProfilesForRole_616291;
          RoleName: string; Marker: string = ""; MaxItems: int = 0;
          Action: string = "ListInstanceProfilesForRole";
          Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616308 = newJObject()
  add(query_616308, "Marker", newJString(Marker))
  add(query_616308, "MaxItems", newJInt(MaxItems))
  add(query_616308, "RoleName", newJString(RoleName))
  add(query_616308, "Action", newJString(Action))
  add(query_616308, "Version", newJString(Version))
  result = call_616307.call(nil, query_616308, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_616291(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_616292, base: "/",
    url: url_GetListInstanceProfilesForRole_616293,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_616346 = ref object of OpenApiRestCall_612658
proc url_PostListMFADevices_616348(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListMFADevices_616347(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616349 = query.getOrDefault("Action")
  valid_616349 = validateParameter(valid_616349, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_616349 != nil:
    section.add "Action", valid_616349
  var valid_616350 = query.getOrDefault("Version")
  valid_616350 = validateParameter(valid_616350, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616350 != nil:
    section.add "Version", valid_616350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616351 = header.getOrDefault("X-Amz-Signature")
  valid_616351 = validateParameter(valid_616351, JString, required = false,
                                 default = nil)
  if valid_616351 != nil:
    section.add "X-Amz-Signature", valid_616351
  var valid_616352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616352 = validateParameter(valid_616352, JString, required = false,
                                 default = nil)
  if valid_616352 != nil:
    section.add "X-Amz-Content-Sha256", valid_616352
  var valid_616353 = header.getOrDefault("X-Amz-Date")
  valid_616353 = validateParameter(valid_616353, JString, required = false,
                                 default = nil)
  if valid_616353 != nil:
    section.add "X-Amz-Date", valid_616353
  var valid_616354 = header.getOrDefault("X-Amz-Credential")
  valid_616354 = validateParameter(valid_616354, JString, required = false,
                                 default = nil)
  if valid_616354 != nil:
    section.add "X-Amz-Credential", valid_616354
  var valid_616355 = header.getOrDefault("X-Amz-Security-Token")
  valid_616355 = validateParameter(valid_616355, JString, required = false,
                                 default = nil)
  if valid_616355 != nil:
    section.add "X-Amz-Security-Token", valid_616355
  var valid_616356 = header.getOrDefault("X-Amz-Algorithm")
  valid_616356 = validateParameter(valid_616356, JString, required = false,
                                 default = nil)
  if valid_616356 != nil:
    section.add "X-Amz-Algorithm", valid_616356
  var valid_616357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616357 = validateParameter(valid_616357, JString, required = false,
                                 default = nil)
  if valid_616357 != nil:
    section.add "X-Amz-SignedHeaders", valid_616357
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616358 = formData.getOrDefault("Marker")
  valid_616358 = validateParameter(valid_616358, JString, required = false,
                                 default = nil)
  if valid_616358 != nil:
    section.add "Marker", valid_616358
  var valid_616359 = formData.getOrDefault("UserName")
  valid_616359 = validateParameter(valid_616359, JString, required = false,
                                 default = nil)
  if valid_616359 != nil:
    section.add "UserName", valid_616359
  var valid_616360 = formData.getOrDefault("MaxItems")
  valid_616360 = validateParameter(valid_616360, JInt, required = false, default = nil)
  if valid_616360 != nil:
    section.add "MaxItems", valid_616360
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616361: Call_PostListMFADevices_616346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616361.validator(path, query, header, formData, body)
  let scheme = call_616361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616361.url(scheme.get, call_616361.host, call_616361.base,
                         call_616361.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616361, url, valid)

proc call*(call_616362: Call_PostListMFADevices_616346; Marker: string = "";
          UserName: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616363 = newJObject()
  var formData_616364 = newJObject()
  add(formData_616364, "Marker", newJString(Marker))
  add(formData_616364, "UserName", newJString(UserName))
  add(query_616363, "Action", newJString(Action))
  add(formData_616364, "MaxItems", newJInt(MaxItems))
  add(query_616363, "Version", newJString(Version))
  result = call_616362.call(nil, query_616363, nil, formData_616364, nil)

var postListMFADevices* = Call_PostListMFADevices_616346(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_616347, base: "/",
    url: url_PostListMFADevices_616348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_616328 = ref object of OpenApiRestCall_612658
proc url_GetListMFADevices_616330(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListMFADevices_616329(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616331 = query.getOrDefault("Marker")
  valid_616331 = validateParameter(valid_616331, JString, required = false,
                                 default = nil)
  if valid_616331 != nil:
    section.add "Marker", valid_616331
  var valid_616332 = query.getOrDefault("UserName")
  valid_616332 = validateParameter(valid_616332, JString, required = false,
                                 default = nil)
  if valid_616332 != nil:
    section.add "UserName", valid_616332
  var valid_616333 = query.getOrDefault("MaxItems")
  valid_616333 = validateParameter(valid_616333, JInt, required = false, default = nil)
  if valid_616333 != nil:
    section.add "MaxItems", valid_616333
  var valid_616334 = query.getOrDefault("Action")
  valid_616334 = validateParameter(valid_616334, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_616334 != nil:
    section.add "Action", valid_616334
  var valid_616335 = query.getOrDefault("Version")
  valid_616335 = validateParameter(valid_616335, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616335 != nil:
    section.add "Version", valid_616335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616336 = header.getOrDefault("X-Amz-Signature")
  valid_616336 = validateParameter(valid_616336, JString, required = false,
                                 default = nil)
  if valid_616336 != nil:
    section.add "X-Amz-Signature", valid_616336
  var valid_616337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616337 = validateParameter(valid_616337, JString, required = false,
                                 default = nil)
  if valid_616337 != nil:
    section.add "X-Amz-Content-Sha256", valid_616337
  var valid_616338 = header.getOrDefault("X-Amz-Date")
  valid_616338 = validateParameter(valid_616338, JString, required = false,
                                 default = nil)
  if valid_616338 != nil:
    section.add "X-Amz-Date", valid_616338
  var valid_616339 = header.getOrDefault("X-Amz-Credential")
  valid_616339 = validateParameter(valid_616339, JString, required = false,
                                 default = nil)
  if valid_616339 != nil:
    section.add "X-Amz-Credential", valid_616339
  var valid_616340 = header.getOrDefault("X-Amz-Security-Token")
  valid_616340 = validateParameter(valid_616340, JString, required = false,
                                 default = nil)
  if valid_616340 != nil:
    section.add "X-Amz-Security-Token", valid_616340
  var valid_616341 = header.getOrDefault("X-Amz-Algorithm")
  valid_616341 = validateParameter(valid_616341, JString, required = false,
                                 default = nil)
  if valid_616341 != nil:
    section.add "X-Amz-Algorithm", valid_616341
  var valid_616342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616342 = validateParameter(valid_616342, JString, required = false,
                                 default = nil)
  if valid_616342 != nil:
    section.add "X-Amz-SignedHeaders", valid_616342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616343: Call_GetListMFADevices_616328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616343.validator(path, query, header, formData, body)
  let scheme = call_616343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616343.url(scheme.get, call_616343.host, call_616343.base,
                         call_616343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616343, url, valid)

proc call*(call_616344: Call_GetListMFADevices_616328; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0; Action: string = "ListMFADevices";
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616345 = newJObject()
  add(query_616345, "Marker", newJString(Marker))
  add(query_616345, "UserName", newJString(UserName))
  add(query_616345, "MaxItems", newJInt(MaxItems))
  add(query_616345, "Action", newJString(Action))
  add(query_616345, "Version", newJString(Version))
  result = call_616344.call(nil, query_616345, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_616328(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_616329,
    base: "/", url: url_GetListMFADevices_616330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_616380 = ref object of OpenApiRestCall_612658
proc url_PostListOpenIDConnectProviders_616382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListOpenIDConnectProviders_616381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616383 = query.getOrDefault("Action")
  valid_616383 = validateParameter(valid_616383, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_616383 != nil:
    section.add "Action", valid_616383
  var valid_616384 = query.getOrDefault("Version")
  valid_616384 = validateParameter(valid_616384, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616384 != nil:
    section.add "Version", valid_616384
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616385 = header.getOrDefault("X-Amz-Signature")
  valid_616385 = validateParameter(valid_616385, JString, required = false,
                                 default = nil)
  if valid_616385 != nil:
    section.add "X-Amz-Signature", valid_616385
  var valid_616386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616386 = validateParameter(valid_616386, JString, required = false,
                                 default = nil)
  if valid_616386 != nil:
    section.add "X-Amz-Content-Sha256", valid_616386
  var valid_616387 = header.getOrDefault("X-Amz-Date")
  valid_616387 = validateParameter(valid_616387, JString, required = false,
                                 default = nil)
  if valid_616387 != nil:
    section.add "X-Amz-Date", valid_616387
  var valid_616388 = header.getOrDefault("X-Amz-Credential")
  valid_616388 = validateParameter(valid_616388, JString, required = false,
                                 default = nil)
  if valid_616388 != nil:
    section.add "X-Amz-Credential", valid_616388
  var valid_616389 = header.getOrDefault("X-Amz-Security-Token")
  valid_616389 = validateParameter(valid_616389, JString, required = false,
                                 default = nil)
  if valid_616389 != nil:
    section.add "X-Amz-Security-Token", valid_616389
  var valid_616390 = header.getOrDefault("X-Amz-Algorithm")
  valid_616390 = validateParameter(valid_616390, JString, required = false,
                                 default = nil)
  if valid_616390 != nil:
    section.add "X-Amz-Algorithm", valid_616390
  var valid_616391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616391 = validateParameter(valid_616391, JString, required = false,
                                 default = nil)
  if valid_616391 != nil:
    section.add "X-Amz-SignedHeaders", valid_616391
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616392: Call_PostListOpenIDConnectProviders_616380; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_616392.validator(path, query, header, formData, body)
  let scheme = call_616392.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616392.url(scheme.get, call_616392.host, call_616392.base,
                         call_616392.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616392, url, valid)

proc call*(call_616393: Call_PostListOpenIDConnectProviders_616380;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616394 = newJObject()
  add(query_616394, "Action", newJString(Action))
  add(query_616394, "Version", newJString(Version))
  result = call_616393.call(nil, query_616394, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_616380(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_616381, base: "/",
    url: url_PostListOpenIDConnectProviders_616382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_616365 = ref object of OpenApiRestCall_612658
proc url_GetListOpenIDConnectProviders_616367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListOpenIDConnectProviders_616366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616368 = query.getOrDefault("Action")
  valid_616368 = validateParameter(valid_616368, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_616368 != nil:
    section.add "Action", valid_616368
  var valid_616369 = query.getOrDefault("Version")
  valid_616369 = validateParameter(valid_616369, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616369 != nil:
    section.add "Version", valid_616369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616370 = header.getOrDefault("X-Amz-Signature")
  valid_616370 = validateParameter(valid_616370, JString, required = false,
                                 default = nil)
  if valid_616370 != nil:
    section.add "X-Amz-Signature", valid_616370
  var valid_616371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616371 = validateParameter(valid_616371, JString, required = false,
                                 default = nil)
  if valid_616371 != nil:
    section.add "X-Amz-Content-Sha256", valid_616371
  var valid_616372 = header.getOrDefault("X-Amz-Date")
  valid_616372 = validateParameter(valid_616372, JString, required = false,
                                 default = nil)
  if valid_616372 != nil:
    section.add "X-Amz-Date", valid_616372
  var valid_616373 = header.getOrDefault("X-Amz-Credential")
  valid_616373 = validateParameter(valid_616373, JString, required = false,
                                 default = nil)
  if valid_616373 != nil:
    section.add "X-Amz-Credential", valid_616373
  var valid_616374 = header.getOrDefault("X-Amz-Security-Token")
  valid_616374 = validateParameter(valid_616374, JString, required = false,
                                 default = nil)
  if valid_616374 != nil:
    section.add "X-Amz-Security-Token", valid_616374
  var valid_616375 = header.getOrDefault("X-Amz-Algorithm")
  valid_616375 = validateParameter(valid_616375, JString, required = false,
                                 default = nil)
  if valid_616375 != nil:
    section.add "X-Amz-Algorithm", valid_616375
  var valid_616376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616376 = validateParameter(valid_616376, JString, required = false,
                                 default = nil)
  if valid_616376 != nil:
    section.add "X-Amz-SignedHeaders", valid_616376
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616377: Call_GetListOpenIDConnectProviders_616365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_616377.validator(path, query, header, formData, body)
  let scheme = call_616377.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616377.url(scheme.get, call_616377.host, call_616377.base,
                         call_616377.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616377, url, valid)

proc call*(call_616378: Call_GetListOpenIDConnectProviders_616365;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616379 = newJObject()
  add(query_616379, "Action", newJString(Action))
  add(query_616379, "Version", newJString(Version))
  result = call_616378.call(nil, query_616379, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_616365(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_616366, base: "/",
    url: url_GetListOpenIDConnectProviders_616367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_616416 = ref object of OpenApiRestCall_612658
proc url_PostListPolicies_616418(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicies_616417(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616419 = query.getOrDefault("Action")
  valid_616419 = validateParameter(valid_616419, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_616419 != nil:
    section.add "Action", valid_616419
  var valid_616420 = query.getOrDefault("Version")
  valid_616420 = validateParameter(valid_616420, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616420 != nil:
    section.add "Version", valid_616420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616421 = header.getOrDefault("X-Amz-Signature")
  valid_616421 = validateParameter(valid_616421, JString, required = false,
                                 default = nil)
  if valid_616421 != nil:
    section.add "X-Amz-Signature", valid_616421
  var valid_616422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616422 = validateParameter(valid_616422, JString, required = false,
                                 default = nil)
  if valid_616422 != nil:
    section.add "X-Amz-Content-Sha256", valid_616422
  var valid_616423 = header.getOrDefault("X-Amz-Date")
  valid_616423 = validateParameter(valid_616423, JString, required = false,
                                 default = nil)
  if valid_616423 != nil:
    section.add "X-Amz-Date", valid_616423
  var valid_616424 = header.getOrDefault("X-Amz-Credential")
  valid_616424 = validateParameter(valid_616424, JString, required = false,
                                 default = nil)
  if valid_616424 != nil:
    section.add "X-Amz-Credential", valid_616424
  var valid_616425 = header.getOrDefault("X-Amz-Security-Token")
  valid_616425 = validateParameter(valid_616425, JString, required = false,
                                 default = nil)
  if valid_616425 != nil:
    section.add "X-Amz-Security-Token", valid_616425
  var valid_616426 = header.getOrDefault("X-Amz-Algorithm")
  valid_616426 = validateParameter(valid_616426, JString, required = false,
                                 default = nil)
  if valid_616426 != nil:
    section.add "X-Amz-Algorithm", valid_616426
  var valid_616427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616427 = validateParameter(valid_616427, JString, required = false,
                                 default = nil)
  if valid_616427 != nil:
    section.add "X-Amz-SignedHeaders", valid_616427
  result.add "header", section
  ## parameters in `formData` object:
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_616428 = formData.getOrDefault("Scope")
  valid_616428 = validateParameter(valid_616428, JString, required = false,
                                 default = newJString("All"))
  if valid_616428 != nil:
    section.add "Scope", valid_616428
  var valid_616429 = formData.getOrDefault("Marker")
  valid_616429 = validateParameter(valid_616429, JString, required = false,
                                 default = nil)
  if valid_616429 != nil:
    section.add "Marker", valid_616429
  var valid_616430 = formData.getOrDefault("PathPrefix")
  valid_616430 = validateParameter(valid_616430, JString, required = false,
                                 default = nil)
  if valid_616430 != nil:
    section.add "PathPrefix", valid_616430
  var valid_616431 = formData.getOrDefault("MaxItems")
  valid_616431 = validateParameter(valid_616431, JInt, required = false, default = nil)
  if valid_616431 != nil:
    section.add "MaxItems", valid_616431
  var valid_616432 = formData.getOrDefault("OnlyAttached")
  valid_616432 = validateParameter(valid_616432, JBool, required = false, default = nil)
  if valid_616432 != nil:
    section.add "OnlyAttached", valid_616432
  var valid_616433 = formData.getOrDefault("PolicyUsageFilter")
  valid_616433 = validateParameter(valid_616433, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_616433 != nil:
    section.add "PolicyUsageFilter", valid_616433
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616434: Call_PostListPolicies_616416; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_616434.validator(path, query, header, formData, body)
  let scheme = call_616434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616434.url(scheme.get, call_616434.host, call_616434.base,
                         call_616434.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616434, url, valid)

proc call*(call_616435: Call_PostListPolicies_616416; Scope: string = "All";
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListPolicies"; OnlyAttached: bool = false;
          Version: string = "2010-05-08";
          PolicyUsageFilter: string = "PermissionsPolicy"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  var query_616436 = newJObject()
  var formData_616437 = newJObject()
  add(formData_616437, "Scope", newJString(Scope))
  add(formData_616437, "Marker", newJString(Marker))
  add(formData_616437, "PathPrefix", newJString(PathPrefix))
  add(formData_616437, "MaxItems", newJInt(MaxItems))
  add(query_616436, "Action", newJString(Action))
  add(formData_616437, "OnlyAttached", newJBool(OnlyAttached))
  add(query_616436, "Version", newJString(Version))
  add(formData_616437, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  result = call_616435.call(nil, query_616436, nil, formData_616437, nil)

var postListPolicies* = Call_PostListPolicies_616416(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_616417,
    base: "/", url: url_PostListPolicies_616418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_616395 = ref object of OpenApiRestCall_612658
proc url_GetListPolicies_616397(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicies_616396(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616398 = query.getOrDefault("Marker")
  valid_616398 = validateParameter(valid_616398, JString, required = false,
                                 default = nil)
  if valid_616398 != nil:
    section.add "Marker", valid_616398
  var valid_616399 = query.getOrDefault("PolicyUsageFilter")
  valid_616399 = validateParameter(valid_616399, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_616399 != nil:
    section.add "PolicyUsageFilter", valid_616399
  var valid_616400 = query.getOrDefault("OnlyAttached")
  valid_616400 = validateParameter(valid_616400, JBool, required = false, default = nil)
  if valid_616400 != nil:
    section.add "OnlyAttached", valid_616400
  var valid_616401 = query.getOrDefault("MaxItems")
  valid_616401 = validateParameter(valid_616401, JInt, required = false, default = nil)
  if valid_616401 != nil:
    section.add "MaxItems", valid_616401
  var valid_616402 = query.getOrDefault("Scope")
  valid_616402 = validateParameter(valid_616402, JString, required = false,
                                 default = newJString("All"))
  if valid_616402 != nil:
    section.add "Scope", valid_616402
  var valid_616403 = query.getOrDefault("PathPrefix")
  valid_616403 = validateParameter(valid_616403, JString, required = false,
                                 default = nil)
  if valid_616403 != nil:
    section.add "PathPrefix", valid_616403
  var valid_616404 = query.getOrDefault("Action")
  valid_616404 = validateParameter(valid_616404, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_616404 != nil:
    section.add "Action", valid_616404
  var valid_616405 = query.getOrDefault("Version")
  valid_616405 = validateParameter(valid_616405, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616405 != nil:
    section.add "Version", valid_616405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616406 = header.getOrDefault("X-Amz-Signature")
  valid_616406 = validateParameter(valid_616406, JString, required = false,
                                 default = nil)
  if valid_616406 != nil:
    section.add "X-Amz-Signature", valid_616406
  var valid_616407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616407 = validateParameter(valid_616407, JString, required = false,
                                 default = nil)
  if valid_616407 != nil:
    section.add "X-Amz-Content-Sha256", valid_616407
  var valid_616408 = header.getOrDefault("X-Amz-Date")
  valid_616408 = validateParameter(valid_616408, JString, required = false,
                                 default = nil)
  if valid_616408 != nil:
    section.add "X-Amz-Date", valid_616408
  var valid_616409 = header.getOrDefault("X-Amz-Credential")
  valid_616409 = validateParameter(valid_616409, JString, required = false,
                                 default = nil)
  if valid_616409 != nil:
    section.add "X-Amz-Credential", valid_616409
  var valid_616410 = header.getOrDefault("X-Amz-Security-Token")
  valid_616410 = validateParameter(valid_616410, JString, required = false,
                                 default = nil)
  if valid_616410 != nil:
    section.add "X-Amz-Security-Token", valid_616410
  var valid_616411 = header.getOrDefault("X-Amz-Algorithm")
  valid_616411 = validateParameter(valid_616411, JString, required = false,
                                 default = nil)
  if valid_616411 != nil:
    section.add "X-Amz-Algorithm", valid_616411
  var valid_616412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616412 = validateParameter(valid_616412, JString, required = false,
                                 default = nil)
  if valid_616412 != nil:
    section.add "X-Amz-SignedHeaders", valid_616412
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616413: Call_GetListPolicies_616395; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_616413.validator(path, query, header, formData, body)
  let scheme = call_616413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616413.url(scheme.get, call_616413.host, call_616413.base,
                         call_616413.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616413, url, valid)

proc call*(call_616414: Call_GetListPolicies_616395; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          OnlyAttached: bool = false; MaxItems: int = 0; Scope: string = "All";
          PathPrefix: string = ""; Action: string = "ListPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616415 = newJObject()
  add(query_616415, "Marker", newJString(Marker))
  add(query_616415, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_616415, "OnlyAttached", newJBool(OnlyAttached))
  add(query_616415, "MaxItems", newJInt(MaxItems))
  add(query_616415, "Scope", newJString(Scope))
  add(query_616415, "PathPrefix", newJString(PathPrefix))
  add(query_616415, "Action", newJString(Action))
  add(query_616415, "Version", newJString(Version))
  result = call_616414.call(nil, query_616415, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_616395(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_616396,
    base: "/", url: url_GetListPolicies_616397, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_616456 = ref object of OpenApiRestCall_612658
proc url_PostListPoliciesGrantingServiceAccess_616458(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPoliciesGrantingServiceAccess_616457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616459 = query.getOrDefault("Action")
  valid_616459 = validateParameter(valid_616459, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_616459 != nil:
    section.add "Action", valid_616459
  var valid_616460 = query.getOrDefault("Version")
  valid_616460 = validateParameter(valid_616460, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616460 != nil:
    section.add "Version", valid_616460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616461 = header.getOrDefault("X-Amz-Signature")
  valid_616461 = validateParameter(valid_616461, JString, required = false,
                                 default = nil)
  if valid_616461 != nil:
    section.add "X-Amz-Signature", valid_616461
  var valid_616462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616462 = validateParameter(valid_616462, JString, required = false,
                                 default = nil)
  if valid_616462 != nil:
    section.add "X-Amz-Content-Sha256", valid_616462
  var valid_616463 = header.getOrDefault("X-Amz-Date")
  valid_616463 = validateParameter(valid_616463, JString, required = false,
                                 default = nil)
  if valid_616463 != nil:
    section.add "X-Amz-Date", valid_616463
  var valid_616464 = header.getOrDefault("X-Amz-Credential")
  valid_616464 = validateParameter(valid_616464, JString, required = false,
                                 default = nil)
  if valid_616464 != nil:
    section.add "X-Amz-Credential", valid_616464
  var valid_616465 = header.getOrDefault("X-Amz-Security-Token")
  valid_616465 = validateParameter(valid_616465, JString, required = false,
                                 default = nil)
  if valid_616465 != nil:
    section.add "X-Amz-Security-Token", valid_616465
  var valid_616466 = header.getOrDefault("X-Amz-Algorithm")
  valid_616466 = validateParameter(valid_616466, JString, required = false,
                                 default = nil)
  if valid_616466 != nil:
    section.add "X-Amz-Algorithm", valid_616466
  var valid_616467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616467 = validateParameter(valid_616467, JString, required = false,
                                 default = nil)
  if valid_616467 != nil:
    section.add "X-Amz-SignedHeaders", valid_616467
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespaces` field"
  var valid_616468 = formData.getOrDefault("ServiceNamespaces")
  valid_616468 = validateParameter(valid_616468, JArray, required = true, default = nil)
  if valid_616468 != nil:
    section.add "ServiceNamespaces", valid_616468
  var valid_616469 = formData.getOrDefault("Arn")
  valid_616469 = validateParameter(valid_616469, JString, required = true,
                                 default = nil)
  if valid_616469 != nil:
    section.add "Arn", valid_616469
  var valid_616470 = formData.getOrDefault("Marker")
  valid_616470 = validateParameter(valid_616470, JString, required = false,
                                 default = nil)
  if valid_616470 != nil:
    section.add "Marker", valid_616470
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616471: Call_PostListPoliciesGrantingServiceAccess_616456;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_616471.validator(path, query, header, formData, body)
  let scheme = call_616471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616471.url(scheme.get, call_616471.host, call_616471.base,
                         call_616471.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616471, url, valid)

proc call*(call_616472: Call_PostListPoliciesGrantingServiceAccess_616456;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616473 = newJObject()
  var formData_616474 = newJObject()
  if ServiceNamespaces != nil:
    formData_616474.add "ServiceNamespaces", ServiceNamespaces
  add(formData_616474, "Arn", newJString(Arn))
  add(formData_616474, "Marker", newJString(Marker))
  add(query_616473, "Action", newJString(Action))
  add(query_616473, "Version", newJString(Version))
  result = call_616472.call(nil, query_616473, nil, formData_616474, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_616456(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_616457, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_616458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_616438 = ref object of OpenApiRestCall_612658
proc url_GetListPoliciesGrantingServiceAccess_616440(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPoliciesGrantingServiceAccess_616439(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_616441 = query.getOrDefault("Marker")
  valid_616441 = validateParameter(valid_616441, JString, required = false,
                                 default = nil)
  if valid_616441 != nil:
    section.add "Marker", valid_616441
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_616442 = query.getOrDefault("ServiceNamespaces")
  valid_616442 = validateParameter(valid_616442, JArray, required = true, default = nil)
  if valid_616442 != nil:
    section.add "ServiceNamespaces", valid_616442
  var valid_616443 = query.getOrDefault("Action")
  valid_616443 = validateParameter(valid_616443, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_616443 != nil:
    section.add "Action", valid_616443
  var valid_616444 = query.getOrDefault("Version")
  valid_616444 = validateParameter(valid_616444, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616444 != nil:
    section.add "Version", valid_616444
  var valid_616445 = query.getOrDefault("Arn")
  valid_616445 = validateParameter(valid_616445, JString, required = true,
                                 default = nil)
  if valid_616445 != nil:
    section.add "Arn", valid_616445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616446 = header.getOrDefault("X-Amz-Signature")
  valid_616446 = validateParameter(valid_616446, JString, required = false,
                                 default = nil)
  if valid_616446 != nil:
    section.add "X-Amz-Signature", valid_616446
  var valid_616447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616447 = validateParameter(valid_616447, JString, required = false,
                                 default = nil)
  if valid_616447 != nil:
    section.add "X-Amz-Content-Sha256", valid_616447
  var valid_616448 = header.getOrDefault("X-Amz-Date")
  valid_616448 = validateParameter(valid_616448, JString, required = false,
                                 default = nil)
  if valid_616448 != nil:
    section.add "X-Amz-Date", valid_616448
  var valid_616449 = header.getOrDefault("X-Amz-Credential")
  valid_616449 = validateParameter(valid_616449, JString, required = false,
                                 default = nil)
  if valid_616449 != nil:
    section.add "X-Amz-Credential", valid_616449
  var valid_616450 = header.getOrDefault("X-Amz-Security-Token")
  valid_616450 = validateParameter(valid_616450, JString, required = false,
                                 default = nil)
  if valid_616450 != nil:
    section.add "X-Amz-Security-Token", valid_616450
  var valid_616451 = header.getOrDefault("X-Amz-Algorithm")
  valid_616451 = validateParameter(valid_616451, JString, required = false,
                                 default = nil)
  if valid_616451 != nil:
    section.add "X-Amz-Algorithm", valid_616451
  var valid_616452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616452 = validateParameter(valid_616452, JString, required = false,
                                 default = nil)
  if valid_616452 != nil:
    section.add "X-Amz-SignedHeaders", valid_616452
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616453: Call_GetListPoliciesGrantingServiceAccess_616438;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_616453.validator(path, query, header, formData, body)
  let scheme = call_616453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616453.url(scheme.get, call_616453.host, call_616453.base,
                         call_616453.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616453, url, valid)

proc call*(call_616454: Call_GetListPoliciesGrantingServiceAccess_616438;
          ServiceNamespaces: JsonNode; Arn: string; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_616455 = newJObject()
  add(query_616455, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    query_616455.add "ServiceNamespaces", ServiceNamespaces
  add(query_616455, "Action", newJString(Action))
  add(query_616455, "Version", newJString(Version))
  add(query_616455, "Arn", newJString(Arn))
  result = call_616454.call(nil, query_616455, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_616438(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_616439, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_616440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_616493 = ref object of OpenApiRestCall_612658
proc url_PostListPolicyVersions_616495(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListPolicyVersions_616494(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616496 = query.getOrDefault("Action")
  valid_616496 = validateParameter(valid_616496, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_616496 != nil:
    section.add "Action", valid_616496
  var valid_616497 = query.getOrDefault("Version")
  valid_616497 = validateParameter(valid_616497, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616497 != nil:
    section.add "Version", valid_616497
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616498 = header.getOrDefault("X-Amz-Signature")
  valid_616498 = validateParameter(valid_616498, JString, required = false,
                                 default = nil)
  if valid_616498 != nil:
    section.add "X-Amz-Signature", valid_616498
  var valid_616499 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616499 = validateParameter(valid_616499, JString, required = false,
                                 default = nil)
  if valid_616499 != nil:
    section.add "X-Amz-Content-Sha256", valid_616499
  var valid_616500 = header.getOrDefault("X-Amz-Date")
  valid_616500 = validateParameter(valid_616500, JString, required = false,
                                 default = nil)
  if valid_616500 != nil:
    section.add "X-Amz-Date", valid_616500
  var valid_616501 = header.getOrDefault("X-Amz-Credential")
  valid_616501 = validateParameter(valid_616501, JString, required = false,
                                 default = nil)
  if valid_616501 != nil:
    section.add "X-Amz-Credential", valid_616501
  var valid_616502 = header.getOrDefault("X-Amz-Security-Token")
  valid_616502 = validateParameter(valid_616502, JString, required = false,
                                 default = nil)
  if valid_616502 != nil:
    section.add "X-Amz-Security-Token", valid_616502
  var valid_616503 = header.getOrDefault("X-Amz-Algorithm")
  valid_616503 = validateParameter(valid_616503, JString, required = false,
                                 default = nil)
  if valid_616503 != nil:
    section.add "X-Amz-Algorithm", valid_616503
  var valid_616504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616504 = validateParameter(valid_616504, JString, required = false,
                                 default = nil)
  if valid_616504 != nil:
    section.add "X-Amz-SignedHeaders", valid_616504
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616505 = formData.getOrDefault("Marker")
  valid_616505 = validateParameter(valid_616505, JString, required = false,
                                 default = nil)
  if valid_616505 != nil:
    section.add "Marker", valid_616505
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_616506 = formData.getOrDefault("PolicyArn")
  valid_616506 = validateParameter(valid_616506, JString, required = true,
                                 default = nil)
  if valid_616506 != nil:
    section.add "PolicyArn", valid_616506
  var valid_616507 = formData.getOrDefault("MaxItems")
  valid_616507 = validateParameter(valid_616507, JInt, required = false, default = nil)
  if valid_616507 != nil:
    section.add "MaxItems", valid_616507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616508: Call_PostListPolicyVersions_616493; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_616508.validator(path, query, header, formData, body)
  let scheme = call_616508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616508.url(scheme.get, call_616508.host, call_616508.base,
                         call_616508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616508, url, valid)

proc call*(call_616509: Call_PostListPolicyVersions_616493; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616510 = newJObject()
  var formData_616511 = newJObject()
  add(formData_616511, "Marker", newJString(Marker))
  add(formData_616511, "PolicyArn", newJString(PolicyArn))
  add(query_616510, "Action", newJString(Action))
  add(formData_616511, "MaxItems", newJInt(MaxItems))
  add(query_616510, "Version", newJString(Version))
  result = call_616509.call(nil, query_616510, nil, formData_616511, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_616493(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_616494, base: "/",
    url: url_PostListPolicyVersions_616495, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_616475 = ref object of OpenApiRestCall_612658
proc url_GetListPolicyVersions_616477(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListPolicyVersions_616476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616478 = query.getOrDefault("Marker")
  valid_616478 = validateParameter(valid_616478, JString, required = false,
                                 default = nil)
  if valid_616478 != nil:
    section.add "Marker", valid_616478
  var valid_616479 = query.getOrDefault("MaxItems")
  valid_616479 = validateParameter(valid_616479, JInt, required = false, default = nil)
  if valid_616479 != nil:
    section.add "MaxItems", valid_616479
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_616480 = query.getOrDefault("PolicyArn")
  valid_616480 = validateParameter(valid_616480, JString, required = true,
                                 default = nil)
  if valid_616480 != nil:
    section.add "PolicyArn", valid_616480
  var valid_616481 = query.getOrDefault("Action")
  valid_616481 = validateParameter(valid_616481, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_616481 != nil:
    section.add "Action", valid_616481
  var valid_616482 = query.getOrDefault("Version")
  valid_616482 = validateParameter(valid_616482, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616482 != nil:
    section.add "Version", valid_616482
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616483 = header.getOrDefault("X-Amz-Signature")
  valid_616483 = validateParameter(valid_616483, JString, required = false,
                                 default = nil)
  if valid_616483 != nil:
    section.add "X-Amz-Signature", valid_616483
  var valid_616484 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616484 = validateParameter(valid_616484, JString, required = false,
                                 default = nil)
  if valid_616484 != nil:
    section.add "X-Amz-Content-Sha256", valid_616484
  var valid_616485 = header.getOrDefault("X-Amz-Date")
  valid_616485 = validateParameter(valid_616485, JString, required = false,
                                 default = nil)
  if valid_616485 != nil:
    section.add "X-Amz-Date", valid_616485
  var valid_616486 = header.getOrDefault("X-Amz-Credential")
  valid_616486 = validateParameter(valid_616486, JString, required = false,
                                 default = nil)
  if valid_616486 != nil:
    section.add "X-Amz-Credential", valid_616486
  var valid_616487 = header.getOrDefault("X-Amz-Security-Token")
  valid_616487 = validateParameter(valid_616487, JString, required = false,
                                 default = nil)
  if valid_616487 != nil:
    section.add "X-Amz-Security-Token", valid_616487
  var valid_616488 = header.getOrDefault("X-Amz-Algorithm")
  valid_616488 = validateParameter(valid_616488, JString, required = false,
                                 default = nil)
  if valid_616488 != nil:
    section.add "X-Amz-Algorithm", valid_616488
  var valid_616489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616489 = validateParameter(valid_616489, JString, required = false,
                                 default = nil)
  if valid_616489 != nil:
    section.add "X-Amz-SignedHeaders", valid_616489
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616490: Call_GetListPolicyVersions_616475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_616490.validator(path, query, header, formData, body)
  let scheme = call_616490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616490.url(scheme.get, call_616490.host, call_616490.base,
                         call_616490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616490, url, valid)

proc call*(call_616491: Call_GetListPolicyVersions_616475; PolicyArn: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListPolicyVersions";
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616492 = newJObject()
  add(query_616492, "Marker", newJString(Marker))
  add(query_616492, "MaxItems", newJInt(MaxItems))
  add(query_616492, "PolicyArn", newJString(PolicyArn))
  add(query_616492, "Action", newJString(Action))
  add(query_616492, "Version", newJString(Version))
  result = call_616491.call(nil, query_616492, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_616475(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_616476, base: "/",
    url: url_GetListPolicyVersions_616477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_616530 = ref object of OpenApiRestCall_612658
proc url_PostListRolePolicies_616532(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRolePolicies_616531(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616533 = query.getOrDefault("Action")
  valid_616533 = validateParameter(valid_616533, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_616533 != nil:
    section.add "Action", valid_616533
  var valid_616534 = query.getOrDefault("Version")
  valid_616534 = validateParameter(valid_616534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616534 != nil:
    section.add "Version", valid_616534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616535 = header.getOrDefault("X-Amz-Signature")
  valid_616535 = validateParameter(valid_616535, JString, required = false,
                                 default = nil)
  if valid_616535 != nil:
    section.add "X-Amz-Signature", valid_616535
  var valid_616536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616536 = validateParameter(valid_616536, JString, required = false,
                                 default = nil)
  if valid_616536 != nil:
    section.add "X-Amz-Content-Sha256", valid_616536
  var valid_616537 = header.getOrDefault("X-Amz-Date")
  valid_616537 = validateParameter(valid_616537, JString, required = false,
                                 default = nil)
  if valid_616537 != nil:
    section.add "X-Amz-Date", valid_616537
  var valid_616538 = header.getOrDefault("X-Amz-Credential")
  valid_616538 = validateParameter(valid_616538, JString, required = false,
                                 default = nil)
  if valid_616538 != nil:
    section.add "X-Amz-Credential", valid_616538
  var valid_616539 = header.getOrDefault("X-Amz-Security-Token")
  valid_616539 = validateParameter(valid_616539, JString, required = false,
                                 default = nil)
  if valid_616539 != nil:
    section.add "X-Amz-Security-Token", valid_616539
  var valid_616540 = header.getOrDefault("X-Amz-Algorithm")
  valid_616540 = validateParameter(valid_616540, JString, required = false,
                                 default = nil)
  if valid_616540 != nil:
    section.add "X-Amz-Algorithm", valid_616540
  var valid_616541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616541 = validateParameter(valid_616541, JString, required = false,
                                 default = nil)
  if valid_616541 != nil:
    section.add "X-Amz-SignedHeaders", valid_616541
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_616542 = formData.getOrDefault("RoleName")
  valid_616542 = validateParameter(valid_616542, JString, required = true,
                                 default = nil)
  if valid_616542 != nil:
    section.add "RoleName", valid_616542
  var valid_616543 = formData.getOrDefault("Marker")
  valid_616543 = validateParameter(valid_616543, JString, required = false,
                                 default = nil)
  if valid_616543 != nil:
    section.add "Marker", valid_616543
  var valid_616544 = formData.getOrDefault("MaxItems")
  valid_616544 = validateParameter(valid_616544, JInt, required = false, default = nil)
  if valid_616544 != nil:
    section.add "MaxItems", valid_616544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616545: Call_PostListRolePolicies_616530; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_616545.validator(path, query, header, formData, body)
  let scheme = call_616545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616545.url(scheme.get, call_616545.host, call_616545.base,
                         call_616545.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616545, url, valid)

proc call*(call_616546: Call_PostListRolePolicies_616530; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616547 = newJObject()
  var formData_616548 = newJObject()
  add(formData_616548, "RoleName", newJString(RoleName))
  add(formData_616548, "Marker", newJString(Marker))
  add(query_616547, "Action", newJString(Action))
  add(formData_616548, "MaxItems", newJInt(MaxItems))
  add(query_616547, "Version", newJString(Version))
  result = call_616546.call(nil, query_616547, nil, formData_616548, nil)

var postListRolePolicies* = Call_PostListRolePolicies_616530(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_616531, base: "/",
    url: url_PostListRolePolicies_616532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_616512 = ref object of OpenApiRestCall_612658
proc url_GetListRolePolicies_616514(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRolePolicies_616513(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616515 = query.getOrDefault("Marker")
  valid_616515 = validateParameter(valid_616515, JString, required = false,
                                 default = nil)
  if valid_616515 != nil:
    section.add "Marker", valid_616515
  var valid_616516 = query.getOrDefault("MaxItems")
  valid_616516 = validateParameter(valid_616516, JInt, required = false, default = nil)
  if valid_616516 != nil:
    section.add "MaxItems", valid_616516
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_616517 = query.getOrDefault("RoleName")
  valid_616517 = validateParameter(valid_616517, JString, required = true,
                                 default = nil)
  if valid_616517 != nil:
    section.add "RoleName", valid_616517
  var valid_616518 = query.getOrDefault("Action")
  valid_616518 = validateParameter(valid_616518, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_616518 != nil:
    section.add "Action", valid_616518
  var valid_616519 = query.getOrDefault("Version")
  valid_616519 = validateParameter(valid_616519, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616519 != nil:
    section.add "Version", valid_616519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616520 = header.getOrDefault("X-Amz-Signature")
  valid_616520 = validateParameter(valid_616520, JString, required = false,
                                 default = nil)
  if valid_616520 != nil:
    section.add "X-Amz-Signature", valid_616520
  var valid_616521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616521 = validateParameter(valid_616521, JString, required = false,
                                 default = nil)
  if valid_616521 != nil:
    section.add "X-Amz-Content-Sha256", valid_616521
  var valid_616522 = header.getOrDefault("X-Amz-Date")
  valid_616522 = validateParameter(valid_616522, JString, required = false,
                                 default = nil)
  if valid_616522 != nil:
    section.add "X-Amz-Date", valid_616522
  var valid_616523 = header.getOrDefault("X-Amz-Credential")
  valid_616523 = validateParameter(valid_616523, JString, required = false,
                                 default = nil)
  if valid_616523 != nil:
    section.add "X-Amz-Credential", valid_616523
  var valid_616524 = header.getOrDefault("X-Amz-Security-Token")
  valid_616524 = validateParameter(valid_616524, JString, required = false,
                                 default = nil)
  if valid_616524 != nil:
    section.add "X-Amz-Security-Token", valid_616524
  var valid_616525 = header.getOrDefault("X-Amz-Algorithm")
  valid_616525 = validateParameter(valid_616525, JString, required = false,
                                 default = nil)
  if valid_616525 != nil:
    section.add "X-Amz-Algorithm", valid_616525
  var valid_616526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616526 = validateParameter(valid_616526, JString, required = false,
                                 default = nil)
  if valid_616526 != nil:
    section.add "X-Amz-SignedHeaders", valid_616526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616527: Call_GetListRolePolicies_616512; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_616527.validator(path, query, header, formData, body)
  let scheme = call_616527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616527.url(scheme.get, call_616527.host, call_616527.base,
                         call_616527.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616527, url, valid)

proc call*(call_616528: Call_GetListRolePolicies_616512; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRolePolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616529 = newJObject()
  add(query_616529, "Marker", newJString(Marker))
  add(query_616529, "MaxItems", newJInt(MaxItems))
  add(query_616529, "RoleName", newJString(RoleName))
  add(query_616529, "Action", newJString(Action))
  add(query_616529, "Version", newJString(Version))
  result = call_616528.call(nil, query_616529, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_616512(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_616513, base: "/",
    url: url_GetListRolePolicies_616514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_616567 = ref object of OpenApiRestCall_612658
proc url_PostListRoleTags_616569(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoleTags_616568(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616570 = query.getOrDefault("Action")
  valid_616570 = validateParameter(valid_616570, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_616570 != nil:
    section.add "Action", valid_616570
  var valid_616571 = query.getOrDefault("Version")
  valid_616571 = validateParameter(valid_616571, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616571 != nil:
    section.add "Version", valid_616571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616572 = header.getOrDefault("X-Amz-Signature")
  valid_616572 = validateParameter(valid_616572, JString, required = false,
                                 default = nil)
  if valid_616572 != nil:
    section.add "X-Amz-Signature", valid_616572
  var valid_616573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616573 = validateParameter(valid_616573, JString, required = false,
                                 default = nil)
  if valid_616573 != nil:
    section.add "X-Amz-Content-Sha256", valid_616573
  var valid_616574 = header.getOrDefault("X-Amz-Date")
  valid_616574 = validateParameter(valid_616574, JString, required = false,
                                 default = nil)
  if valid_616574 != nil:
    section.add "X-Amz-Date", valid_616574
  var valid_616575 = header.getOrDefault("X-Amz-Credential")
  valid_616575 = validateParameter(valid_616575, JString, required = false,
                                 default = nil)
  if valid_616575 != nil:
    section.add "X-Amz-Credential", valid_616575
  var valid_616576 = header.getOrDefault("X-Amz-Security-Token")
  valid_616576 = validateParameter(valid_616576, JString, required = false,
                                 default = nil)
  if valid_616576 != nil:
    section.add "X-Amz-Security-Token", valid_616576
  var valid_616577 = header.getOrDefault("X-Amz-Algorithm")
  valid_616577 = validateParameter(valid_616577, JString, required = false,
                                 default = nil)
  if valid_616577 != nil:
    section.add "X-Amz-Algorithm", valid_616577
  var valid_616578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616578 = validateParameter(valid_616578, JString, required = false,
                                 default = nil)
  if valid_616578 != nil:
    section.add "X-Amz-SignedHeaders", valid_616578
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_616579 = formData.getOrDefault("RoleName")
  valid_616579 = validateParameter(valid_616579, JString, required = true,
                                 default = nil)
  if valid_616579 != nil:
    section.add "RoleName", valid_616579
  var valid_616580 = formData.getOrDefault("Marker")
  valid_616580 = validateParameter(valid_616580, JString, required = false,
                                 default = nil)
  if valid_616580 != nil:
    section.add "Marker", valid_616580
  var valid_616581 = formData.getOrDefault("MaxItems")
  valid_616581 = validateParameter(valid_616581, JInt, required = false, default = nil)
  if valid_616581 != nil:
    section.add "MaxItems", valid_616581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616582: Call_PostListRoleTags_616567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_616582.validator(path, query, header, formData, body)
  let scheme = call_616582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616582.url(scheme.get, call_616582.host, call_616582.base,
                         call_616582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616582, url, valid)

proc call*(call_616583: Call_PostListRoleTags_616567; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616584 = newJObject()
  var formData_616585 = newJObject()
  add(formData_616585, "RoleName", newJString(RoleName))
  add(formData_616585, "Marker", newJString(Marker))
  add(query_616584, "Action", newJString(Action))
  add(formData_616585, "MaxItems", newJInt(MaxItems))
  add(query_616584, "Version", newJString(Version))
  result = call_616583.call(nil, query_616584, nil, formData_616585, nil)

var postListRoleTags* = Call_PostListRoleTags_616567(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_616568,
    base: "/", url: url_PostListRoleTags_616569,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_616549 = ref object of OpenApiRestCall_612658
proc url_GetListRoleTags_616551(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoleTags_616550(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616552 = query.getOrDefault("Marker")
  valid_616552 = validateParameter(valid_616552, JString, required = false,
                                 default = nil)
  if valid_616552 != nil:
    section.add "Marker", valid_616552
  var valid_616553 = query.getOrDefault("MaxItems")
  valid_616553 = validateParameter(valid_616553, JInt, required = false, default = nil)
  if valid_616553 != nil:
    section.add "MaxItems", valid_616553
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_616554 = query.getOrDefault("RoleName")
  valid_616554 = validateParameter(valid_616554, JString, required = true,
                                 default = nil)
  if valid_616554 != nil:
    section.add "RoleName", valid_616554
  var valid_616555 = query.getOrDefault("Action")
  valid_616555 = validateParameter(valid_616555, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_616555 != nil:
    section.add "Action", valid_616555
  var valid_616556 = query.getOrDefault("Version")
  valid_616556 = validateParameter(valid_616556, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616556 != nil:
    section.add "Version", valid_616556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616557 = header.getOrDefault("X-Amz-Signature")
  valid_616557 = validateParameter(valid_616557, JString, required = false,
                                 default = nil)
  if valid_616557 != nil:
    section.add "X-Amz-Signature", valid_616557
  var valid_616558 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616558 = validateParameter(valid_616558, JString, required = false,
                                 default = nil)
  if valid_616558 != nil:
    section.add "X-Amz-Content-Sha256", valid_616558
  var valid_616559 = header.getOrDefault("X-Amz-Date")
  valid_616559 = validateParameter(valid_616559, JString, required = false,
                                 default = nil)
  if valid_616559 != nil:
    section.add "X-Amz-Date", valid_616559
  var valid_616560 = header.getOrDefault("X-Amz-Credential")
  valid_616560 = validateParameter(valid_616560, JString, required = false,
                                 default = nil)
  if valid_616560 != nil:
    section.add "X-Amz-Credential", valid_616560
  var valid_616561 = header.getOrDefault("X-Amz-Security-Token")
  valid_616561 = validateParameter(valid_616561, JString, required = false,
                                 default = nil)
  if valid_616561 != nil:
    section.add "X-Amz-Security-Token", valid_616561
  var valid_616562 = header.getOrDefault("X-Amz-Algorithm")
  valid_616562 = validateParameter(valid_616562, JString, required = false,
                                 default = nil)
  if valid_616562 != nil:
    section.add "X-Amz-Algorithm", valid_616562
  var valid_616563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616563 = validateParameter(valid_616563, JString, required = false,
                                 default = nil)
  if valid_616563 != nil:
    section.add "X-Amz-SignedHeaders", valid_616563
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616564: Call_GetListRoleTags_616549; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_616564.validator(path, query, header, formData, body)
  let scheme = call_616564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616564.url(scheme.get, call_616564.host, call_616564.base,
                         call_616564.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616564, url, valid)

proc call*(call_616565: Call_GetListRoleTags_616549; RoleName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListRoleTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616566 = newJObject()
  add(query_616566, "Marker", newJString(Marker))
  add(query_616566, "MaxItems", newJInt(MaxItems))
  add(query_616566, "RoleName", newJString(RoleName))
  add(query_616566, "Action", newJString(Action))
  add(query_616566, "Version", newJString(Version))
  result = call_616565.call(nil, query_616566, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_616549(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_616550,
    base: "/", url: url_GetListRoleTags_616551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_616604 = ref object of OpenApiRestCall_612658
proc url_PostListRoles_616606(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListRoles_616605(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616607 = query.getOrDefault("Action")
  valid_616607 = validateParameter(valid_616607, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_616607 != nil:
    section.add "Action", valid_616607
  var valid_616608 = query.getOrDefault("Version")
  valid_616608 = validateParameter(valid_616608, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616608 != nil:
    section.add "Version", valid_616608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616609 = header.getOrDefault("X-Amz-Signature")
  valid_616609 = validateParameter(valid_616609, JString, required = false,
                                 default = nil)
  if valid_616609 != nil:
    section.add "X-Amz-Signature", valid_616609
  var valid_616610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616610 = validateParameter(valid_616610, JString, required = false,
                                 default = nil)
  if valid_616610 != nil:
    section.add "X-Amz-Content-Sha256", valid_616610
  var valid_616611 = header.getOrDefault("X-Amz-Date")
  valid_616611 = validateParameter(valid_616611, JString, required = false,
                                 default = nil)
  if valid_616611 != nil:
    section.add "X-Amz-Date", valid_616611
  var valid_616612 = header.getOrDefault("X-Amz-Credential")
  valid_616612 = validateParameter(valid_616612, JString, required = false,
                                 default = nil)
  if valid_616612 != nil:
    section.add "X-Amz-Credential", valid_616612
  var valid_616613 = header.getOrDefault("X-Amz-Security-Token")
  valid_616613 = validateParameter(valid_616613, JString, required = false,
                                 default = nil)
  if valid_616613 != nil:
    section.add "X-Amz-Security-Token", valid_616613
  var valid_616614 = header.getOrDefault("X-Amz-Algorithm")
  valid_616614 = validateParameter(valid_616614, JString, required = false,
                                 default = nil)
  if valid_616614 != nil:
    section.add "X-Amz-Algorithm", valid_616614
  var valid_616615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616615 = validateParameter(valid_616615, JString, required = false,
                                 default = nil)
  if valid_616615 != nil:
    section.add "X-Amz-SignedHeaders", valid_616615
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616616 = formData.getOrDefault("Marker")
  valid_616616 = validateParameter(valid_616616, JString, required = false,
                                 default = nil)
  if valid_616616 != nil:
    section.add "Marker", valid_616616
  var valid_616617 = formData.getOrDefault("PathPrefix")
  valid_616617 = validateParameter(valid_616617, JString, required = false,
                                 default = nil)
  if valid_616617 != nil:
    section.add "PathPrefix", valid_616617
  var valid_616618 = formData.getOrDefault("MaxItems")
  valid_616618 = validateParameter(valid_616618, JInt, required = false, default = nil)
  if valid_616618 != nil:
    section.add "MaxItems", valid_616618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616619: Call_PostListRoles_616604; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616619.validator(path, query, header, formData, body)
  let scheme = call_616619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616619.url(scheme.get, call_616619.host, call_616619.base,
                         call_616619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616619, url, valid)

proc call*(call_616620: Call_PostListRoles_616604; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616621 = newJObject()
  var formData_616622 = newJObject()
  add(formData_616622, "Marker", newJString(Marker))
  add(formData_616622, "PathPrefix", newJString(PathPrefix))
  add(formData_616622, "MaxItems", newJInt(MaxItems))
  add(query_616621, "Action", newJString(Action))
  add(query_616621, "Version", newJString(Version))
  result = call_616620.call(nil, query_616621, nil, formData_616622, nil)

var postListRoles* = Call_PostListRoles_616604(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_616605,
    base: "/", url: url_PostListRoles_616606, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_616586 = ref object of OpenApiRestCall_612658
proc url_GetListRoles_616588(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListRoles_616587(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616589 = query.getOrDefault("Marker")
  valid_616589 = validateParameter(valid_616589, JString, required = false,
                                 default = nil)
  if valid_616589 != nil:
    section.add "Marker", valid_616589
  var valid_616590 = query.getOrDefault("MaxItems")
  valid_616590 = validateParameter(valid_616590, JInt, required = false, default = nil)
  if valid_616590 != nil:
    section.add "MaxItems", valid_616590
  var valid_616591 = query.getOrDefault("PathPrefix")
  valid_616591 = validateParameter(valid_616591, JString, required = false,
                                 default = nil)
  if valid_616591 != nil:
    section.add "PathPrefix", valid_616591
  var valid_616592 = query.getOrDefault("Action")
  valid_616592 = validateParameter(valid_616592, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_616592 != nil:
    section.add "Action", valid_616592
  var valid_616593 = query.getOrDefault("Version")
  valid_616593 = validateParameter(valid_616593, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616593 != nil:
    section.add "Version", valid_616593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616594 = header.getOrDefault("X-Amz-Signature")
  valid_616594 = validateParameter(valid_616594, JString, required = false,
                                 default = nil)
  if valid_616594 != nil:
    section.add "X-Amz-Signature", valid_616594
  var valid_616595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616595 = validateParameter(valid_616595, JString, required = false,
                                 default = nil)
  if valid_616595 != nil:
    section.add "X-Amz-Content-Sha256", valid_616595
  var valid_616596 = header.getOrDefault("X-Amz-Date")
  valid_616596 = validateParameter(valid_616596, JString, required = false,
                                 default = nil)
  if valid_616596 != nil:
    section.add "X-Amz-Date", valid_616596
  var valid_616597 = header.getOrDefault("X-Amz-Credential")
  valid_616597 = validateParameter(valid_616597, JString, required = false,
                                 default = nil)
  if valid_616597 != nil:
    section.add "X-Amz-Credential", valid_616597
  var valid_616598 = header.getOrDefault("X-Amz-Security-Token")
  valid_616598 = validateParameter(valid_616598, JString, required = false,
                                 default = nil)
  if valid_616598 != nil:
    section.add "X-Amz-Security-Token", valid_616598
  var valid_616599 = header.getOrDefault("X-Amz-Algorithm")
  valid_616599 = validateParameter(valid_616599, JString, required = false,
                                 default = nil)
  if valid_616599 != nil:
    section.add "X-Amz-Algorithm", valid_616599
  var valid_616600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616600 = validateParameter(valid_616600, JString, required = false,
                                 default = nil)
  if valid_616600 != nil:
    section.add "X-Amz-SignedHeaders", valid_616600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616601: Call_GetListRoles_616586; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616601.validator(path, query, header, formData, body)
  let scheme = call_616601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616601.url(scheme.get, call_616601.host, call_616601.base,
                         call_616601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616601, url, valid)

proc call*(call_616602: Call_GetListRoles_616586; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListRoles";
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616603 = newJObject()
  add(query_616603, "Marker", newJString(Marker))
  add(query_616603, "MaxItems", newJInt(MaxItems))
  add(query_616603, "PathPrefix", newJString(PathPrefix))
  add(query_616603, "Action", newJString(Action))
  add(query_616603, "Version", newJString(Version))
  result = call_616602.call(nil, query_616603, nil, nil, nil)

var getListRoles* = Call_GetListRoles_616586(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_616587, base: "/",
    url: url_GetListRoles_616588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_616638 = ref object of OpenApiRestCall_612658
proc url_PostListSAMLProviders_616640(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSAMLProviders_616639(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616641 = query.getOrDefault("Action")
  valid_616641 = validateParameter(valid_616641, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_616641 != nil:
    section.add "Action", valid_616641
  var valid_616642 = query.getOrDefault("Version")
  valid_616642 = validateParameter(valid_616642, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616642 != nil:
    section.add "Version", valid_616642
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616643 = header.getOrDefault("X-Amz-Signature")
  valid_616643 = validateParameter(valid_616643, JString, required = false,
                                 default = nil)
  if valid_616643 != nil:
    section.add "X-Amz-Signature", valid_616643
  var valid_616644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616644 = validateParameter(valid_616644, JString, required = false,
                                 default = nil)
  if valid_616644 != nil:
    section.add "X-Amz-Content-Sha256", valid_616644
  var valid_616645 = header.getOrDefault("X-Amz-Date")
  valid_616645 = validateParameter(valid_616645, JString, required = false,
                                 default = nil)
  if valid_616645 != nil:
    section.add "X-Amz-Date", valid_616645
  var valid_616646 = header.getOrDefault("X-Amz-Credential")
  valid_616646 = validateParameter(valid_616646, JString, required = false,
                                 default = nil)
  if valid_616646 != nil:
    section.add "X-Amz-Credential", valid_616646
  var valid_616647 = header.getOrDefault("X-Amz-Security-Token")
  valid_616647 = validateParameter(valid_616647, JString, required = false,
                                 default = nil)
  if valid_616647 != nil:
    section.add "X-Amz-Security-Token", valid_616647
  var valid_616648 = header.getOrDefault("X-Amz-Algorithm")
  valid_616648 = validateParameter(valid_616648, JString, required = false,
                                 default = nil)
  if valid_616648 != nil:
    section.add "X-Amz-Algorithm", valid_616648
  var valid_616649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616649 = validateParameter(valid_616649, JString, required = false,
                                 default = nil)
  if valid_616649 != nil:
    section.add "X-Amz-SignedHeaders", valid_616649
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616650: Call_PostListSAMLProviders_616638; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_616650.validator(path, query, header, formData, body)
  let scheme = call_616650.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616650.url(scheme.get, call_616650.host, call_616650.base,
                         call_616650.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616650, url, valid)

proc call*(call_616651: Call_PostListSAMLProviders_616638;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616652 = newJObject()
  add(query_616652, "Action", newJString(Action))
  add(query_616652, "Version", newJString(Version))
  result = call_616651.call(nil, query_616652, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_616638(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_616639, base: "/",
    url: url_PostListSAMLProviders_616640, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_616623 = ref object of OpenApiRestCall_612658
proc url_GetListSAMLProviders_616625(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSAMLProviders_616624(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616626 = query.getOrDefault("Action")
  valid_616626 = validateParameter(valid_616626, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_616626 != nil:
    section.add "Action", valid_616626
  var valid_616627 = query.getOrDefault("Version")
  valid_616627 = validateParameter(valid_616627, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616627 != nil:
    section.add "Version", valid_616627
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616628 = header.getOrDefault("X-Amz-Signature")
  valid_616628 = validateParameter(valid_616628, JString, required = false,
                                 default = nil)
  if valid_616628 != nil:
    section.add "X-Amz-Signature", valid_616628
  var valid_616629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616629 = validateParameter(valid_616629, JString, required = false,
                                 default = nil)
  if valid_616629 != nil:
    section.add "X-Amz-Content-Sha256", valid_616629
  var valid_616630 = header.getOrDefault("X-Amz-Date")
  valid_616630 = validateParameter(valid_616630, JString, required = false,
                                 default = nil)
  if valid_616630 != nil:
    section.add "X-Amz-Date", valid_616630
  var valid_616631 = header.getOrDefault("X-Amz-Credential")
  valid_616631 = validateParameter(valid_616631, JString, required = false,
                                 default = nil)
  if valid_616631 != nil:
    section.add "X-Amz-Credential", valid_616631
  var valid_616632 = header.getOrDefault("X-Amz-Security-Token")
  valid_616632 = validateParameter(valid_616632, JString, required = false,
                                 default = nil)
  if valid_616632 != nil:
    section.add "X-Amz-Security-Token", valid_616632
  var valid_616633 = header.getOrDefault("X-Amz-Algorithm")
  valid_616633 = validateParameter(valid_616633, JString, required = false,
                                 default = nil)
  if valid_616633 != nil:
    section.add "X-Amz-Algorithm", valid_616633
  var valid_616634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616634 = validateParameter(valid_616634, JString, required = false,
                                 default = nil)
  if valid_616634 != nil:
    section.add "X-Amz-SignedHeaders", valid_616634
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616635: Call_GetListSAMLProviders_616623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_616635.validator(path, query, header, formData, body)
  let scheme = call_616635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616635.url(scheme.get, call_616635.host, call_616635.base,
                         call_616635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616635, url, valid)

proc call*(call_616636: Call_GetListSAMLProviders_616623;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616637 = newJObject()
  add(query_616637, "Action", newJString(Action))
  add(query_616637, "Version", newJString(Version))
  result = call_616636.call(nil, query_616637, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_616623(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_616624, base: "/",
    url: url_GetListSAMLProviders_616625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_616671 = ref object of OpenApiRestCall_612658
proc url_PostListSSHPublicKeys_616673(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSSHPublicKeys_616672(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616674 = query.getOrDefault("Action")
  valid_616674 = validateParameter(valid_616674, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_616674 != nil:
    section.add "Action", valid_616674
  var valid_616675 = query.getOrDefault("Version")
  valid_616675 = validateParameter(valid_616675, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616675 != nil:
    section.add "Version", valid_616675
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616676 = header.getOrDefault("X-Amz-Signature")
  valid_616676 = validateParameter(valid_616676, JString, required = false,
                                 default = nil)
  if valid_616676 != nil:
    section.add "X-Amz-Signature", valid_616676
  var valid_616677 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616677 = validateParameter(valid_616677, JString, required = false,
                                 default = nil)
  if valid_616677 != nil:
    section.add "X-Amz-Content-Sha256", valid_616677
  var valid_616678 = header.getOrDefault("X-Amz-Date")
  valid_616678 = validateParameter(valid_616678, JString, required = false,
                                 default = nil)
  if valid_616678 != nil:
    section.add "X-Amz-Date", valid_616678
  var valid_616679 = header.getOrDefault("X-Amz-Credential")
  valid_616679 = validateParameter(valid_616679, JString, required = false,
                                 default = nil)
  if valid_616679 != nil:
    section.add "X-Amz-Credential", valid_616679
  var valid_616680 = header.getOrDefault("X-Amz-Security-Token")
  valid_616680 = validateParameter(valid_616680, JString, required = false,
                                 default = nil)
  if valid_616680 != nil:
    section.add "X-Amz-Security-Token", valid_616680
  var valid_616681 = header.getOrDefault("X-Amz-Algorithm")
  valid_616681 = validateParameter(valid_616681, JString, required = false,
                                 default = nil)
  if valid_616681 != nil:
    section.add "X-Amz-Algorithm", valid_616681
  var valid_616682 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616682 = validateParameter(valid_616682, JString, required = false,
                                 default = nil)
  if valid_616682 != nil:
    section.add "X-Amz-SignedHeaders", valid_616682
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616683 = formData.getOrDefault("Marker")
  valid_616683 = validateParameter(valid_616683, JString, required = false,
                                 default = nil)
  if valid_616683 != nil:
    section.add "Marker", valid_616683
  var valid_616684 = formData.getOrDefault("UserName")
  valid_616684 = validateParameter(valid_616684, JString, required = false,
                                 default = nil)
  if valid_616684 != nil:
    section.add "UserName", valid_616684
  var valid_616685 = formData.getOrDefault("MaxItems")
  valid_616685 = validateParameter(valid_616685, JInt, required = false, default = nil)
  if valid_616685 != nil:
    section.add "MaxItems", valid_616685
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616686: Call_PostListSSHPublicKeys_616671; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616686.validator(path, query, header, formData, body)
  let scheme = call_616686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616686.url(scheme.get, call_616686.host, call_616686.base,
                         call_616686.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616686, url, valid)

proc call*(call_616687: Call_PostListSSHPublicKeys_616671; Marker: string = "";
          UserName: string = ""; Action: string = "ListSSHPublicKeys";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616688 = newJObject()
  var formData_616689 = newJObject()
  add(formData_616689, "Marker", newJString(Marker))
  add(formData_616689, "UserName", newJString(UserName))
  add(query_616688, "Action", newJString(Action))
  add(formData_616689, "MaxItems", newJInt(MaxItems))
  add(query_616688, "Version", newJString(Version))
  result = call_616687.call(nil, query_616688, nil, formData_616689, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_616671(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_616672, base: "/",
    url: url_PostListSSHPublicKeys_616673, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_616653 = ref object of OpenApiRestCall_612658
proc url_GetListSSHPublicKeys_616655(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSSHPublicKeys_616654(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616656 = query.getOrDefault("Marker")
  valid_616656 = validateParameter(valid_616656, JString, required = false,
                                 default = nil)
  if valid_616656 != nil:
    section.add "Marker", valid_616656
  var valid_616657 = query.getOrDefault("UserName")
  valid_616657 = validateParameter(valid_616657, JString, required = false,
                                 default = nil)
  if valid_616657 != nil:
    section.add "UserName", valid_616657
  var valid_616658 = query.getOrDefault("MaxItems")
  valid_616658 = validateParameter(valid_616658, JInt, required = false, default = nil)
  if valid_616658 != nil:
    section.add "MaxItems", valid_616658
  var valid_616659 = query.getOrDefault("Action")
  valid_616659 = validateParameter(valid_616659, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_616659 != nil:
    section.add "Action", valid_616659
  var valid_616660 = query.getOrDefault("Version")
  valid_616660 = validateParameter(valid_616660, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616660 != nil:
    section.add "Version", valid_616660
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616661 = header.getOrDefault("X-Amz-Signature")
  valid_616661 = validateParameter(valid_616661, JString, required = false,
                                 default = nil)
  if valid_616661 != nil:
    section.add "X-Amz-Signature", valid_616661
  var valid_616662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616662 = validateParameter(valid_616662, JString, required = false,
                                 default = nil)
  if valid_616662 != nil:
    section.add "X-Amz-Content-Sha256", valid_616662
  var valid_616663 = header.getOrDefault("X-Amz-Date")
  valid_616663 = validateParameter(valid_616663, JString, required = false,
                                 default = nil)
  if valid_616663 != nil:
    section.add "X-Amz-Date", valid_616663
  var valid_616664 = header.getOrDefault("X-Amz-Credential")
  valid_616664 = validateParameter(valid_616664, JString, required = false,
                                 default = nil)
  if valid_616664 != nil:
    section.add "X-Amz-Credential", valid_616664
  var valid_616665 = header.getOrDefault("X-Amz-Security-Token")
  valid_616665 = validateParameter(valid_616665, JString, required = false,
                                 default = nil)
  if valid_616665 != nil:
    section.add "X-Amz-Security-Token", valid_616665
  var valid_616666 = header.getOrDefault("X-Amz-Algorithm")
  valid_616666 = validateParameter(valid_616666, JString, required = false,
                                 default = nil)
  if valid_616666 != nil:
    section.add "X-Amz-Algorithm", valid_616666
  var valid_616667 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616667 = validateParameter(valid_616667, JString, required = false,
                                 default = nil)
  if valid_616667 != nil:
    section.add "X-Amz-SignedHeaders", valid_616667
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616668: Call_GetListSSHPublicKeys_616653; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616668.validator(path, query, header, formData, body)
  let scheme = call_616668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616668.url(scheme.get, call_616668.host, call_616668.base,
                         call_616668.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616668, url, valid)

proc call*(call_616669: Call_GetListSSHPublicKeys_616653; Marker: string = "";
          UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSSHPublicKeys"; Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616670 = newJObject()
  add(query_616670, "Marker", newJString(Marker))
  add(query_616670, "UserName", newJString(UserName))
  add(query_616670, "MaxItems", newJInt(MaxItems))
  add(query_616670, "Action", newJString(Action))
  add(query_616670, "Version", newJString(Version))
  result = call_616669.call(nil, query_616670, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_616653(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_616654, base: "/",
    url: url_GetListSSHPublicKeys_616655, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_616708 = ref object of OpenApiRestCall_612658
proc url_PostListServerCertificates_616710(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServerCertificates_616709(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616711 = query.getOrDefault("Action")
  valid_616711 = validateParameter(valid_616711, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_616711 != nil:
    section.add "Action", valid_616711
  var valid_616712 = query.getOrDefault("Version")
  valid_616712 = validateParameter(valid_616712, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616712 != nil:
    section.add "Version", valid_616712
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616713 = header.getOrDefault("X-Amz-Signature")
  valid_616713 = validateParameter(valid_616713, JString, required = false,
                                 default = nil)
  if valid_616713 != nil:
    section.add "X-Amz-Signature", valid_616713
  var valid_616714 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616714 = validateParameter(valid_616714, JString, required = false,
                                 default = nil)
  if valid_616714 != nil:
    section.add "X-Amz-Content-Sha256", valid_616714
  var valid_616715 = header.getOrDefault("X-Amz-Date")
  valid_616715 = validateParameter(valid_616715, JString, required = false,
                                 default = nil)
  if valid_616715 != nil:
    section.add "X-Amz-Date", valid_616715
  var valid_616716 = header.getOrDefault("X-Amz-Credential")
  valid_616716 = validateParameter(valid_616716, JString, required = false,
                                 default = nil)
  if valid_616716 != nil:
    section.add "X-Amz-Credential", valid_616716
  var valid_616717 = header.getOrDefault("X-Amz-Security-Token")
  valid_616717 = validateParameter(valid_616717, JString, required = false,
                                 default = nil)
  if valid_616717 != nil:
    section.add "X-Amz-Security-Token", valid_616717
  var valid_616718 = header.getOrDefault("X-Amz-Algorithm")
  valid_616718 = validateParameter(valid_616718, JString, required = false,
                                 default = nil)
  if valid_616718 != nil:
    section.add "X-Amz-Algorithm", valid_616718
  var valid_616719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616719 = validateParameter(valid_616719, JString, required = false,
                                 default = nil)
  if valid_616719 != nil:
    section.add "X-Amz-SignedHeaders", valid_616719
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616720 = formData.getOrDefault("Marker")
  valid_616720 = validateParameter(valid_616720, JString, required = false,
                                 default = nil)
  if valid_616720 != nil:
    section.add "Marker", valid_616720
  var valid_616721 = formData.getOrDefault("PathPrefix")
  valid_616721 = validateParameter(valid_616721, JString, required = false,
                                 default = nil)
  if valid_616721 != nil:
    section.add "PathPrefix", valid_616721
  var valid_616722 = formData.getOrDefault("MaxItems")
  valid_616722 = validateParameter(valid_616722, JInt, required = false, default = nil)
  if valid_616722 != nil:
    section.add "MaxItems", valid_616722
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616723: Call_PostListServerCertificates_616708; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_616723.validator(path, query, header, formData, body)
  let scheme = call_616723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616723.url(scheme.get, call_616723.host, call_616723.base,
                         call_616723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616723, url, valid)

proc call*(call_616724: Call_PostListServerCertificates_616708;
          Marker: string = ""; PathPrefix: string = ""; MaxItems: int = 0;
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616725 = newJObject()
  var formData_616726 = newJObject()
  add(formData_616726, "Marker", newJString(Marker))
  add(formData_616726, "PathPrefix", newJString(PathPrefix))
  add(formData_616726, "MaxItems", newJInt(MaxItems))
  add(query_616725, "Action", newJString(Action))
  add(query_616725, "Version", newJString(Version))
  result = call_616724.call(nil, query_616725, nil, formData_616726, nil)

var postListServerCertificates* = Call_PostListServerCertificates_616708(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_616709, base: "/",
    url: url_PostListServerCertificates_616710,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_616690 = ref object of OpenApiRestCall_612658
proc url_GetListServerCertificates_616692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServerCertificates_616691(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616693 = query.getOrDefault("Marker")
  valid_616693 = validateParameter(valid_616693, JString, required = false,
                                 default = nil)
  if valid_616693 != nil:
    section.add "Marker", valid_616693
  var valid_616694 = query.getOrDefault("MaxItems")
  valid_616694 = validateParameter(valid_616694, JInt, required = false, default = nil)
  if valid_616694 != nil:
    section.add "MaxItems", valid_616694
  var valid_616695 = query.getOrDefault("PathPrefix")
  valid_616695 = validateParameter(valid_616695, JString, required = false,
                                 default = nil)
  if valid_616695 != nil:
    section.add "PathPrefix", valid_616695
  var valid_616696 = query.getOrDefault("Action")
  valid_616696 = validateParameter(valid_616696, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_616696 != nil:
    section.add "Action", valid_616696
  var valid_616697 = query.getOrDefault("Version")
  valid_616697 = validateParameter(valid_616697, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616697 != nil:
    section.add "Version", valid_616697
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616698 = header.getOrDefault("X-Amz-Signature")
  valid_616698 = validateParameter(valid_616698, JString, required = false,
                                 default = nil)
  if valid_616698 != nil:
    section.add "X-Amz-Signature", valid_616698
  var valid_616699 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616699 = validateParameter(valid_616699, JString, required = false,
                                 default = nil)
  if valid_616699 != nil:
    section.add "X-Amz-Content-Sha256", valid_616699
  var valid_616700 = header.getOrDefault("X-Amz-Date")
  valid_616700 = validateParameter(valid_616700, JString, required = false,
                                 default = nil)
  if valid_616700 != nil:
    section.add "X-Amz-Date", valid_616700
  var valid_616701 = header.getOrDefault("X-Amz-Credential")
  valid_616701 = validateParameter(valid_616701, JString, required = false,
                                 default = nil)
  if valid_616701 != nil:
    section.add "X-Amz-Credential", valid_616701
  var valid_616702 = header.getOrDefault("X-Amz-Security-Token")
  valid_616702 = validateParameter(valid_616702, JString, required = false,
                                 default = nil)
  if valid_616702 != nil:
    section.add "X-Amz-Security-Token", valid_616702
  var valid_616703 = header.getOrDefault("X-Amz-Algorithm")
  valid_616703 = validateParameter(valid_616703, JString, required = false,
                                 default = nil)
  if valid_616703 != nil:
    section.add "X-Amz-Algorithm", valid_616703
  var valid_616704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616704 = validateParameter(valid_616704, JString, required = false,
                                 default = nil)
  if valid_616704 != nil:
    section.add "X-Amz-SignedHeaders", valid_616704
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616705: Call_GetListServerCertificates_616690; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_616705.validator(path, query, header, formData, body)
  let scheme = call_616705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616705.url(scheme.get, call_616705.host, call_616705.base,
                         call_616705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616705, url, valid)

proc call*(call_616706: Call_GetListServerCertificates_616690; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = "";
          Action: string = "ListServerCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616707 = newJObject()
  add(query_616707, "Marker", newJString(Marker))
  add(query_616707, "MaxItems", newJInt(MaxItems))
  add(query_616707, "PathPrefix", newJString(PathPrefix))
  add(query_616707, "Action", newJString(Action))
  add(query_616707, "Version", newJString(Version))
  result = call_616706.call(nil, query_616707, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_616690(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_616691, base: "/",
    url: url_GetListServerCertificates_616692,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_616744 = ref object of OpenApiRestCall_612658
proc url_PostListServiceSpecificCredentials_616746(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListServiceSpecificCredentials_616745(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616747 = query.getOrDefault("Action")
  valid_616747 = validateParameter(valid_616747, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_616747 != nil:
    section.add "Action", valid_616747
  var valid_616748 = query.getOrDefault("Version")
  valid_616748 = validateParameter(valid_616748, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616748 != nil:
    section.add "Version", valid_616748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616749 = header.getOrDefault("X-Amz-Signature")
  valid_616749 = validateParameter(valid_616749, JString, required = false,
                                 default = nil)
  if valid_616749 != nil:
    section.add "X-Amz-Signature", valid_616749
  var valid_616750 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616750 = validateParameter(valid_616750, JString, required = false,
                                 default = nil)
  if valid_616750 != nil:
    section.add "X-Amz-Content-Sha256", valid_616750
  var valid_616751 = header.getOrDefault("X-Amz-Date")
  valid_616751 = validateParameter(valid_616751, JString, required = false,
                                 default = nil)
  if valid_616751 != nil:
    section.add "X-Amz-Date", valid_616751
  var valid_616752 = header.getOrDefault("X-Amz-Credential")
  valid_616752 = validateParameter(valid_616752, JString, required = false,
                                 default = nil)
  if valid_616752 != nil:
    section.add "X-Amz-Credential", valid_616752
  var valid_616753 = header.getOrDefault("X-Amz-Security-Token")
  valid_616753 = validateParameter(valid_616753, JString, required = false,
                                 default = nil)
  if valid_616753 != nil:
    section.add "X-Amz-Security-Token", valid_616753
  var valid_616754 = header.getOrDefault("X-Amz-Algorithm")
  valid_616754 = validateParameter(valid_616754, JString, required = false,
                                 default = nil)
  if valid_616754 != nil:
    section.add "X-Amz-Algorithm", valid_616754
  var valid_616755 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616755 = validateParameter(valid_616755, JString, required = false,
                                 default = nil)
  if valid_616755 != nil:
    section.add "X-Amz-SignedHeaders", valid_616755
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_616756 = formData.getOrDefault("ServiceName")
  valid_616756 = validateParameter(valid_616756, JString, required = false,
                                 default = nil)
  if valid_616756 != nil:
    section.add "ServiceName", valid_616756
  var valid_616757 = formData.getOrDefault("UserName")
  valid_616757 = validateParameter(valid_616757, JString, required = false,
                                 default = nil)
  if valid_616757 != nil:
    section.add "UserName", valid_616757
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616758: Call_PostListServiceSpecificCredentials_616744;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_616758.validator(path, query, header, formData, body)
  let scheme = call_616758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616758.url(scheme.get, call_616758.host, call_616758.base,
                         call_616758.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616758, url, valid)

proc call*(call_616759: Call_PostListServiceSpecificCredentials_616744;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616760 = newJObject()
  var formData_616761 = newJObject()
  add(formData_616761, "ServiceName", newJString(ServiceName))
  add(formData_616761, "UserName", newJString(UserName))
  add(query_616760, "Action", newJString(Action))
  add(query_616760, "Version", newJString(Version))
  result = call_616759.call(nil, query_616760, nil, formData_616761, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_616744(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_616745, base: "/",
    url: url_PostListServiceSpecificCredentials_616746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_616727 = ref object of OpenApiRestCall_612658
proc url_GetListServiceSpecificCredentials_616729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListServiceSpecificCredentials_616728(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616730 = query.getOrDefault("UserName")
  valid_616730 = validateParameter(valid_616730, JString, required = false,
                                 default = nil)
  if valid_616730 != nil:
    section.add "UserName", valid_616730
  var valid_616731 = query.getOrDefault("ServiceName")
  valid_616731 = validateParameter(valid_616731, JString, required = false,
                                 default = nil)
  if valid_616731 != nil:
    section.add "ServiceName", valid_616731
  var valid_616732 = query.getOrDefault("Action")
  valid_616732 = validateParameter(valid_616732, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_616732 != nil:
    section.add "Action", valid_616732
  var valid_616733 = query.getOrDefault("Version")
  valid_616733 = validateParameter(valid_616733, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616733 != nil:
    section.add "Version", valid_616733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616734 = header.getOrDefault("X-Amz-Signature")
  valid_616734 = validateParameter(valid_616734, JString, required = false,
                                 default = nil)
  if valid_616734 != nil:
    section.add "X-Amz-Signature", valid_616734
  var valid_616735 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616735 = validateParameter(valid_616735, JString, required = false,
                                 default = nil)
  if valid_616735 != nil:
    section.add "X-Amz-Content-Sha256", valid_616735
  var valid_616736 = header.getOrDefault("X-Amz-Date")
  valid_616736 = validateParameter(valid_616736, JString, required = false,
                                 default = nil)
  if valid_616736 != nil:
    section.add "X-Amz-Date", valid_616736
  var valid_616737 = header.getOrDefault("X-Amz-Credential")
  valid_616737 = validateParameter(valid_616737, JString, required = false,
                                 default = nil)
  if valid_616737 != nil:
    section.add "X-Amz-Credential", valid_616737
  var valid_616738 = header.getOrDefault("X-Amz-Security-Token")
  valid_616738 = validateParameter(valid_616738, JString, required = false,
                                 default = nil)
  if valid_616738 != nil:
    section.add "X-Amz-Security-Token", valid_616738
  var valid_616739 = header.getOrDefault("X-Amz-Algorithm")
  valid_616739 = validateParameter(valid_616739, JString, required = false,
                                 default = nil)
  if valid_616739 != nil:
    section.add "X-Amz-Algorithm", valid_616739
  var valid_616740 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616740 = validateParameter(valid_616740, JString, required = false,
                                 default = nil)
  if valid_616740 != nil:
    section.add "X-Amz-SignedHeaders", valid_616740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616741: Call_GetListServiceSpecificCredentials_616727;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_616741.validator(path, query, header, formData, body)
  let scheme = call_616741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616741.url(scheme.get, call_616741.host, call_616741.base,
                         call_616741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616741, url, valid)

proc call*(call_616742: Call_GetListServiceSpecificCredentials_616727;
          UserName: string = ""; ServiceName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616743 = newJObject()
  add(query_616743, "UserName", newJString(UserName))
  add(query_616743, "ServiceName", newJString(ServiceName))
  add(query_616743, "Action", newJString(Action))
  add(query_616743, "Version", newJString(Version))
  result = call_616742.call(nil, query_616743, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_616727(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_616728, base: "/",
    url: url_GetListServiceSpecificCredentials_616729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_616780 = ref object of OpenApiRestCall_612658
proc url_PostListSigningCertificates_616782(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListSigningCertificates_616781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616783 = query.getOrDefault("Action")
  valid_616783 = validateParameter(valid_616783, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_616783 != nil:
    section.add "Action", valid_616783
  var valid_616784 = query.getOrDefault("Version")
  valid_616784 = validateParameter(valid_616784, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616784 != nil:
    section.add "Version", valid_616784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616785 = header.getOrDefault("X-Amz-Signature")
  valid_616785 = validateParameter(valid_616785, JString, required = false,
                                 default = nil)
  if valid_616785 != nil:
    section.add "X-Amz-Signature", valid_616785
  var valid_616786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616786 = validateParameter(valid_616786, JString, required = false,
                                 default = nil)
  if valid_616786 != nil:
    section.add "X-Amz-Content-Sha256", valid_616786
  var valid_616787 = header.getOrDefault("X-Amz-Date")
  valid_616787 = validateParameter(valid_616787, JString, required = false,
                                 default = nil)
  if valid_616787 != nil:
    section.add "X-Amz-Date", valid_616787
  var valid_616788 = header.getOrDefault("X-Amz-Credential")
  valid_616788 = validateParameter(valid_616788, JString, required = false,
                                 default = nil)
  if valid_616788 != nil:
    section.add "X-Amz-Credential", valid_616788
  var valid_616789 = header.getOrDefault("X-Amz-Security-Token")
  valid_616789 = validateParameter(valid_616789, JString, required = false,
                                 default = nil)
  if valid_616789 != nil:
    section.add "X-Amz-Security-Token", valid_616789
  var valid_616790 = header.getOrDefault("X-Amz-Algorithm")
  valid_616790 = validateParameter(valid_616790, JString, required = false,
                                 default = nil)
  if valid_616790 != nil:
    section.add "X-Amz-Algorithm", valid_616790
  var valid_616791 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616791 = validateParameter(valid_616791, JString, required = false,
                                 default = nil)
  if valid_616791 != nil:
    section.add "X-Amz-SignedHeaders", valid_616791
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616792 = formData.getOrDefault("Marker")
  valid_616792 = validateParameter(valid_616792, JString, required = false,
                                 default = nil)
  if valid_616792 != nil:
    section.add "Marker", valid_616792
  var valid_616793 = formData.getOrDefault("UserName")
  valid_616793 = validateParameter(valid_616793, JString, required = false,
                                 default = nil)
  if valid_616793 != nil:
    section.add "UserName", valid_616793
  var valid_616794 = formData.getOrDefault("MaxItems")
  valid_616794 = validateParameter(valid_616794, JInt, required = false, default = nil)
  if valid_616794 != nil:
    section.add "MaxItems", valid_616794
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616795: Call_PostListSigningCertificates_616780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_616795.validator(path, query, header, formData, body)
  let scheme = call_616795.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616795.url(scheme.get, call_616795.host, call_616795.base,
                         call_616795.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616795, url, valid)

proc call*(call_616796: Call_PostListSigningCertificates_616780;
          Marker: string = ""; UserName: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616797 = newJObject()
  var formData_616798 = newJObject()
  add(formData_616798, "Marker", newJString(Marker))
  add(formData_616798, "UserName", newJString(UserName))
  add(query_616797, "Action", newJString(Action))
  add(formData_616798, "MaxItems", newJInt(MaxItems))
  add(query_616797, "Version", newJString(Version))
  result = call_616796.call(nil, query_616797, nil, formData_616798, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_616780(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_616781, base: "/",
    url: url_PostListSigningCertificates_616782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_616762 = ref object of OpenApiRestCall_612658
proc url_GetListSigningCertificates_616764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListSigningCertificates_616763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616765 = query.getOrDefault("Marker")
  valid_616765 = validateParameter(valid_616765, JString, required = false,
                                 default = nil)
  if valid_616765 != nil:
    section.add "Marker", valid_616765
  var valid_616766 = query.getOrDefault("UserName")
  valid_616766 = validateParameter(valid_616766, JString, required = false,
                                 default = nil)
  if valid_616766 != nil:
    section.add "UserName", valid_616766
  var valid_616767 = query.getOrDefault("MaxItems")
  valid_616767 = validateParameter(valid_616767, JInt, required = false, default = nil)
  if valid_616767 != nil:
    section.add "MaxItems", valid_616767
  var valid_616768 = query.getOrDefault("Action")
  valid_616768 = validateParameter(valid_616768, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_616768 != nil:
    section.add "Action", valid_616768
  var valid_616769 = query.getOrDefault("Version")
  valid_616769 = validateParameter(valid_616769, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616769 != nil:
    section.add "Version", valid_616769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616770 = header.getOrDefault("X-Amz-Signature")
  valid_616770 = validateParameter(valid_616770, JString, required = false,
                                 default = nil)
  if valid_616770 != nil:
    section.add "X-Amz-Signature", valid_616770
  var valid_616771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616771 = validateParameter(valid_616771, JString, required = false,
                                 default = nil)
  if valid_616771 != nil:
    section.add "X-Amz-Content-Sha256", valid_616771
  var valid_616772 = header.getOrDefault("X-Amz-Date")
  valid_616772 = validateParameter(valid_616772, JString, required = false,
                                 default = nil)
  if valid_616772 != nil:
    section.add "X-Amz-Date", valid_616772
  var valid_616773 = header.getOrDefault("X-Amz-Credential")
  valid_616773 = validateParameter(valid_616773, JString, required = false,
                                 default = nil)
  if valid_616773 != nil:
    section.add "X-Amz-Credential", valid_616773
  var valid_616774 = header.getOrDefault("X-Amz-Security-Token")
  valid_616774 = validateParameter(valid_616774, JString, required = false,
                                 default = nil)
  if valid_616774 != nil:
    section.add "X-Amz-Security-Token", valid_616774
  var valid_616775 = header.getOrDefault("X-Amz-Algorithm")
  valid_616775 = validateParameter(valid_616775, JString, required = false,
                                 default = nil)
  if valid_616775 != nil:
    section.add "X-Amz-Algorithm", valid_616775
  var valid_616776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616776 = validateParameter(valid_616776, JString, required = false,
                                 default = nil)
  if valid_616776 != nil:
    section.add "X-Amz-SignedHeaders", valid_616776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616777: Call_GetListSigningCertificates_616762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_616777.validator(path, query, header, formData, body)
  let scheme = call_616777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616777.url(scheme.get, call_616777.host, call_616777.base,
                         call_616777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616777, url, valid)

proc call*(call_616778: Call_GetListSigningCertificates_616762;
          Marker: string = ""; UserName: string = ""; MaxItems: int = 0;
          Action: string = "ListSigningCertificates"; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616779 = newJObject()
  add(query_616779, "Marker", newJString(Marker))
  add(query_616779, "UserName", newJString(UserName))
  add(query_616779, "MaxItems", newJInt(MaxItems))
  add(query_616779, "Action", newJString(Action))
  add(query_616779, "Version", newJString(Version))
  result = call_616778.call(nil, query_616779, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_616762(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_616763, base: "/",
    url: url_GetListSigningCertificates_616764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_616817 = ref object of OpenApiRestCall_612658
proc url_PostListUserPolicies_616819(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserPolicies_616818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616820 = query.getOrDefault("Action")
  valid_616820 = validateParameter(valid_616820, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_616820 != nil:
    section.add "Action", valid_616820
  var valid_616821 = query.getOrDefault("Version")
  valid_616821 = validateParameter(valid_616821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616821 != nil:
    section.add "Version", valid_616821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616822 = header.getOrDefault("X-Amz-Signature")
  valid_616822 = validateParameter(valid_616822, JString, required = false,
                                 default = nil)
  if valid_616822 != nil:
    section.add "X-Amz-Signature", valid_616822
  var valid_616823 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616823 = validateParameter(valid_616823, JString, required = false,
                                 default = nil)
  if valid_616823 != nil:
    section.add "X-Amz-Content-Sha256", valid_616823
  var valid_616824 = header.getOrDefault("X-Amz-Date")
  valid_616824 = validateParameter(valid_616824, JString, required = false,
                                 default = nil)
  if valid_616824 != nil:
    section.add "X-Amz-Date", valid_616824
  var valid_616825 = header.getOrDefault("X-Amz-Credential")
  valid_616825 = validateParameter(valid_616825, JString, required = false,
                                 default = nil)
  if valid_616825 != nil:
    section.add "X-Amz-Credential", valid_616825
  var valid_616826 = header.getOrDefault("X-Amz-Security-Token")
  valid_616826 = validateParameter(valid_616826, JString, required = false,
                                 default = nil)
  if valid_616826 != nil:
    section.add "X-Amz-Security-Token", valid_616826
  var valid_616827 = header.getOrDefault("X-Amz-Algorithm")
  valid_616827 = validateParameter(valid_616827, JString, required = false,
                                 default = nil)
  if valid_616827 != nil:
    section.add "X-Amz-Algorithm", valid_616827
  var valid_616828 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616828 = validateParameter(valid_616828, JString, required = false,
                                 default = nil)
  if valid_616828 != nil:
    section.add "X-Amz-SignedHeaders", valid_616828
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616829 = formData.getOrDefault("Marker")
  valid_616829 = validateParameter(valid_616829, JString, required = false,
                                 default = nil)
  if valid_616829 != nil:
    section.add "Marker", valid_616829
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_616830 = formData.getOrDefault("UserName")
  valid_616830 = validateParameter(valid_616830, JString, required = true,
                                 default = nil)
  if valid_616830 != nil:
    section.add "UserName", valid_616830
  var valid_616831 = formData.getOrDefault("MaxItems")
  valid_616831 = validateParameter(valid_616831, JInt, required = false, default = nil)
  if valid_616831 != nil:
    section.add "MaxItems", valid_616831
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616832: Call_PostListUserPolicies_616817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_616832.validator(path, query, header, formData, body)
  let scheme = call_616832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616832.url(scheme.get, call_616832.host, call_616832.base,
                         call_616832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616832, url, valid)

proc call*(call_616833: Call_PostListUserPolicies_616817; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616834 = newJObject()
  var formData_616835 = newJObject()
  add(formData_616835, "Marker", newJString(Marker))
  add(formData_616835, "UserName", newJString(UserName))
  add(query_616834, "Action", newJString(Action))
  add(formData_616835, "MaxItems", newJInt(MaxItems))
  add(query_616834, "Version", newJString(Version))
  result = call_616833.call(nil, query_616834, nil, formData_616835, nil)

var postListUserPolicies* = Call_PostListUserPolicies_616817(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_616818, base: "/",
    url: url_PostListUserPolicies_616819, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_616799 = ref object of OpenApiRestCall_612658
proc url_GetListUserPolicies_616801(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserPolicies_616800(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616802 = query.getOrDefault("Marker")
  valid_616802 = validateParameter(valid_616802, JString, required = false,
                                 default = nil)
  if valid_616802 != nil:
    section.add "Marker", valid_616802
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_616803 = query.getOrDefault("UserName")
  valid_616803 = validateParameter(valid_616803, JString, required = true,
                                 default = nil)
  if valid_616803 != nil:
    section.add "UserName", valid_616803
  var valid_616804 = query.getOrDefault("MaxItems")
  valid_616804 = validateParameter(valid_616804, JInt, required = false, default = nil)
  if valid_616804 != nil:
    section.add "MaxItems", valid_616804
  var valid_616805 = query.getOrDefault("Action")
  valid_616805 = validateParameter(valid_616805, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_616805 != nil:
    section.add "Action", valid_616805
  var valid_616806 = query.getOrDefault("Version")
  valid_616806 = validateParameter(valid_616806, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616806 != nil:
    section.add "Version", valid_616806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616807 = header.getOrDefault("X-Amz-Signature")
  valid_616807 = validateParameter(valid_616807, JString, required = false,
                                 default = nil)
  if valid_616807 != nil:
    section.add "X-Amz-Signature", valid_616807
  var valid_616808 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616808 = validateParameter(valid_616808, JString, required = false,
                                 default = nil)
  if valid_616808 != nil:
    section.add "X-Amz-Content-Sha256", valid_616808
  var valid_616809 = header.getOrDefault("X-Amz-Date")
  valid_616809 = validateParameter(valid_616809, JString, required = false,
                                 default = nil)
  if valid_616809 != nil:
    section.add "X-Amz-Date", valid_616809
  var valid_616810 = header.getOrDefault("X-Amz-Credential")
  valid_616810 = validateParameter(valid_616810, JString, required = false,
                                 default = nil)
  if valid_616810 != nil:
    section.add "X-Amz-Credential", valid_616810
  var valid_616811 = header.getOrDefault("X-Amz-Security-Token")
  valid_616811 = validateParameter(valid_616811, JString, required = false,
                                 default = nil)
  if valid_616811 != nil:
    section.add "X-Amz-Security-Token", valid_616811
  var valid_616812 = header.getOrDefault("X-Amz-Algorithm")
  valid_616812 = validateParameter(valid_616812, JString, required = false,
                                 default = nil)
  if valid_616812 != nil:
    section.add "X-Amz-Algorithm", valid_616812
  var valid_616813 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616813 = validateParameter(valid_616813, JString, required = false,
                                 default = nil)
  if valid_616813 != nil:
    section.add "X-Amz-SignedHeaders", valid_616813
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616814: Call_GetListUserPolicies_616799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_616814.validator(path, query, header, formData, body)
  let scheme = call_616814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616814.url(scheme.get, call_616814.host, call_616814.base,
                         call_616814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616814, url, valid)

proc call*(call_616815: Call_GetListUserPolicies_616799; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserPolicies";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616816 = newJObject()
  add(query_616816, "Marker", newJString(Marker))
  add(query_616816, "UserName", newJString(UserName))
  add(query_616816, "MaxItems", newJInt(MaxItems))
  add(query_616816, "Action", newJString(Action))
  add(query_616816, "Version", newJString(Version))
  result = call_616815.call(nil, query_616816, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_616799(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_616800, base: "/",
    url: url_GetListUserPolicies_616801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_616854 = ref object of OpenApiRestCall_612658
proc url_PostListUserTags_616856(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUserTags_616855(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616857 = query.getOrDefault("Action")
  valid_616857 = validateParameter(valid_616857, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_616857 != nil:
    section.add "Action", valid_616857
  var valid_616858 = query.getOrDefault("Version")
  valid_616858 = validateParameter(valid_616858, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616858 != nil:
    section.add "Version", valid_616858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616859 = header.getOrDefault("X-Amz-Signature")
  valid_616859 = validateParameter(valid_616859, JString, required = false,
                                 default = nil)
  if valid_616859 != nil:
    section.add "X-Amz-Signature", valid_616859
  var valid_616860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616860 = validateParameter(valid_616860, JString, required = false,
                                 default = nil)
  if valid_616860 != nil:
    section.add "X-Amz-Content-Sha256", valid_616860
  var valid_616861 = header.getOrDefault("X-Amz-Date")
  valid_616861 = validateParameter(valid_616861, JString, required = false,
                                 default = nil)
  if valid_616861 != nil:
    section.add "X-Amz-Date", valid_616861
  var valid_616862 = header.getOrDefault("X-Amz-Credential")
  valid_616862 = validateParameter(valid_616862, JString, required = false,
                                 default = nil)
  if valid_616862 != nil:
    section.add "X-Amz-Credential", valid_616862
  var valid_616863 = header.getOrDefault("X-Amz-Security-Token")
  valid_616863 = validateParameter(valid_616863, JString, required = false,
                                 default = nil)
  if valid_616863 != nil:
    section.add "X-Amz-Security-Token", valid_616863
  var valid_616864 = header.getOrDefault("X-Amz-Algorithm")
  valid_616864 = validateParameter(valid_616864, JString, required = false,
                                 default = nil)
  if valid_616864 != nil:
    section.add "X-Amz-Algorithm", valid_616864
  var valid_616865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616865 = validateParameter(valid_616865, JString, required = false,
                                 default = nil)
  if valid_616865 != nil:
    section.add "X-Amz-SignedHeaders", valid_616865
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616866 = formData.getOrDefault("Marker")
  valid_616866 = validateParameter(valid_616866, JString, required = false,
                                 default = nil)
  if valid_616866 != nil:
    section.add "Marker", valid_616866
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_616867 = formData.getOrDefault("UserName")
  valid_616867 = validateParameter(valid_616867, JString, required = true,
                                 default = nil)
  if valid_616867 != nil:
    section.add "UserName", valid_616867
  var valid_616868 = formData.getOrDefault("MaxItems")
  valid_616868 = validateParameter(valid_616868, JInt, required = false, default = nil)
  if valid_616868 != nil:
    section.add "MaxItems", valid_616868
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616869: Call_PostListUserTags_616854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_616869.validator(path, query, header, formData, body)
  let scheme = call_616869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616869.url(scheme.get, call_616869.host, call_616869.base,
                         call_616869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616869, url, valid)

proc call*(call_616870: Call_PostListUserTags_616854; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616871 = newJObject()
  var formData_616872 = newJObject()
  add(formData_616872, "Marker", newJString(Marker))
  add(formData_616872, "UserName", newJString(UserName))
  add(query_616871, "Action", newJString(Action))
  add(formData_616872, "MaxItems", newJInt(MaxItems))
  add(query_616871, "Version", newJString(Version))
  result = call_616870.call(nil, query_616871, nil, formData_616872, nil)

var postListUserTags* = Call_PostListUserTags_616854(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_616855,
    base: "/", url: url_PostListUserTags_616856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_616836 = ref object of OpenApiRestCall_612658
proc url_GetListUserTags_616838(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUserTags_616837(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616839 = query.getOrDefault("Marker")
  valid_616839 = validateParameter(valid_616839, JString, required = false,
                                 default = nil)
  if valid_616839 != nil:
    section.add "Marker", valid_616839
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_616840 = query.getOrDefault("UserName")
  valid_616840 = validateParameter(valid_616840, JString, required = true,
                                 default = nil)
  if valid_616840 != nil:
    section.add "UserName", valid_616840
  var valid_616841 = query.getOrDefault("MaxItems")
  valid_616841 = validateParameter(valid_616841, JInt, required = false, default = nil)
  if valid_616841 != nil:
    section.add "MaxItems", valid_616841
  var valid_616842 = query.getOrDefault("Action")
  valid_616842 = validateParameter(valid_616842, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_616842 != nil:
    section.add "Action", valid_616842
  var valid_616843 = query.getOrDefault("Version")
  valid_616843 = validateParameter(valid_616843, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616843 != nil:
    section.add "Version", valid_616843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616844 = header.getOrDefault("X-Amz-Signature")
  valid_616844 = validateParameter(valid_616844, JString, required = false,
                                 default = nil)
  if valid_616844 != nil:
    section.add "X-Amz-Signature", valid_616844
  var valid_616845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616845 = validateParameter(valid_616845, JString, required = false,
                                 default = nil)
  if valid_616845 != nil:
    section.add "X-Amz-Content-Sha256", valid_616845
  var valid_616846 = header.getOrDefault("X-Amz-Date")
  valid_616846 = validateParameter(valid_616846, JString, required = false,
                                 default = nil)
  if valid_616846 != nil:
    section.add "X-Amz-Date", valid_616846
  var valid_616847 = header.getOrDefault("X-Amz-Credential")
  valid_616847 = validateParameter(valid_616847, JString, required = false,
                                 default = nil)
  if valid_616847 != nil:
    section.add "X-Amz-Credential", valid_616847
  var valid_616848 = header.getOrDefault("X-Amz-Security-Token")
  valid_616848 = validateParameter(valid_616848, JString, required = false,
                                 default = nil)
  if valid_616848 != nil:
    section.add "X-Amz-Security-Token", valid_616848
  var valid_616849 = header.getOrDefault("X-Amz-Algorithm")
  valid_616849 = validateParameter(valid_616849, JString, required = false,
                                 default = nil)
  if valid_616849 != nil:
    section.add "X-Amz-Algorithm", valid_616849
  var valid_616850 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616850 = validateParameter(valid_616850, JString, required = false,
                                 default = nil)
  if valid_616850 != nil:
    section.add "X-Amz-SignedHeaders", valid_616850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616851: Call_GetListUserTags_616836; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_616851.validator(path, query, header, formData, body)
  let scheme = call_616851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616851.url(scheme.get, call_616851.host, call_616851.base,
                         call_616851.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616851, url, valid)

proc call*(call_616852: Call_GetListUserTags_616836; UserName: string;
          Marker: string = ""; MaxItems: int = 0; Action: string = "ListUserTags";
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616853 = newJObject()
  add(query_616853, "Marker", newJString(Marker))
  add(query_616853, "UserName", newJString(UserName))
  add(query_616853, "MaxItems", newJInt(MaxItems))
  add(query_616853, "Action", newJString(Action))
  add(query_616853, "Version", newJString(Version))
  result = call_616852.call(nil, query_616853, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_616836(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_616837,
    base: "/", url: url_GetListUserTags_616838, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_616891 = ref object of OpenApiRestCall_612658
proc url_PostListUsers_616893(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListUsers_616892(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616894 = query.getOrDefault("Action")
  valid_616894 = validateParameter(valid_616894, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_616894 != nil:
    section.add "Action", valid_616894
  var valid_616895 = query.getOrDefault("Version")
  valid_616895 = validateParameter(valid_616895, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616895 != nil:
    section.add "Version", valid_616895
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616896 = header.getOrDefault("X-Amz-Signature")
  valid_616896 = validateParameter(valid_616896, JString, required = false,
                                 default = nil)
  if valid_616896 != nil:
    section.add "X-Amz-Signature", valid_616896
  var valid_616897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616897 = validateParameter(valid_616897, JString, required = false,
                                 default = nil)
  if valid_616897 != nil:
    section.add "X-Amz-Content-Sha256", valid_616897
  var valid_616898 = header.getOrDefault("X-Amz-Date")
  valid_616898 = validateParameter(valid_616898, JString, required = false,
                                 default = nil)
  if valid_616898 != nil:
    section.add "X-Amz-Date", valid_616898
  var valid_616899 = header.getOrDefault("X-Amz-Credential")
  valid_616899 = validateParameter(valid_616899, JString, required = false,
                                 default = nil)
  if valid_616899 != nil:
    section.add "X-Amz-Credential", valid_616899
  var valid_616900 = header.getOrDefault("X-Amz-Security-Token")
  valid_616900 = validateParameter(valid_616900, JString, required = false,
                                 default = nil)
  if valid_616900 != nil:
    section.add "X-Amz-Security-Token", valid_616900
  var valid_616901 = header.getOrDefault("X-Amz-Algorithm")
  valid_616901 = validateParameter(valid_616901, JString, required = false,
                                 default = nil)
  if valid_616901 != nil:
    section.add "X-Amz-Algorithm", valid_616901
  var valid_616902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616902 = validateParameter(valid_616902, JString, required = false,
                                 default = nil)
  if valid_616902 != nil:
    section.add "X-Amz-SignedHeaders", valid_616902
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616903 = formData.getOrDefault("Marker")
  valid_616903 = validateParameter(valid_616903, JString, required = false,
                                 default = nil)
  if valid_616903 != nil:
    section.add "Marker", valid_616903
  var valid_616904 = formData.getOrDefault("PathPrefix")
  valid_616904 = validateParameter(valid_616904, JString, required = false,
                                 default = nil)
  if valid_616904 != nil:
    section.add "PathPrefix", valid_616904
  var valid_616905 = formData.getOrDefault("MaxItems")
  valid_616905 = validateParameter(valid_616905, JInt, required = false, default = nil)
  if valid_616905 != nil:
    section.add "MaxItems", valid_616905
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616906: Call_PostListUsers_616891; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616906.validator(path, query, header, formData, body)
  let scheme = call_616906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616906.url(scheme.get, call_616906.host, call_616906.base,
                         call_616906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616906, url, valid)

proc call*(call_616907: Call_PostListUsers_616891; Marker: string = "";
          PathPrefix: string = ""; MaxItems: int = 0; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616908 = newJObject()
  var formData_616909 = newJObject()
  add(formData_616909, "Marker", newJString(Marker))
  add(formData_616909, "PathPrefix", newJString(PathPrefix))
  add(formData_616909, "MaxItems", newJInt(MaxItems))
  add(query_616908, "Action", newJString(Action))
  add(query_616908, "Version", newJString(Version))
  result = call_616907.call(nil, query_616908, nil, formData_616909, nil)

var postListUsers* = Call_PostListUsers_616891(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_616892,
    base: "/", url: url_PostListUsers_616893, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_616873 = ref object of OpenApiRestCall_612658
proc url_GetListUsers_616875(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListUsers_616874(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616876 = query.getOrDefault("Marker")
  valid_616876 = validateParameter(valid_616876, JString, required = false,
                                 default = nil)
  if valid_616876 != nil:
    section.add "Marker", valid_616876
  var valid_616877 = query.getOrDefault("MaxItems")
  valid_616877 = validateParameter(valid_616877, JInt, required = false, default = nil)
  if valid_616877 != nil:
    section.add "MaxItems", valid_616877
  var valid_616878 = query.getOrDefault("PathPrefix")
  valid_616878 = validateParameter(valid_616878, JString, required = false,
                                 default = nil)
  if valid_616878 != nil:
    section.add "PathPrefix", valid_616878
  var valid_616879 = query.getOrDefault("Action")
  valid_616879 = validateParameter(valid_616879, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_616879 != nil:
    section.add "Action", valid_616879
  var valid_616880 = query.getOrDefault("Version")
  valid_616880 = validateParameter(valid_616880, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616880 != nil:
    section.add "Version", valid_616880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616881 = header.getOrDefault("X-Amz-Signature")
  valid_616881 = validateParameter(valid_616881, JString, required = false,
                                 default = nil)
  if valid_616881 != nil:
    section.add "X-Amz-Signature", valid_616881
  var valid_616882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616882 = validateParameter(valid_616882, JString, required = false,
                                 default = nil)
  if valid_616882 != nil:
    section.add "X-Amz-Content-Sha256", valid_616882
  var valid_616883 = header.getOrDefault("X-Amz-Date")
  valid_616883 = validateParameter(valid_616883, JString, required = false,
                                 default = nil)
  if valid_616883 != nil:
    section.add "X-Amz-Date", valid_616883
  var valid_616884 = header.getOrDefault("X-Amz-Credential")
  valid_616884 = validateParameter(valid_616884, JString, required = false,
                                 default = nil)
  if valid_616884 != nil:
    section.add "X-Amz-Credential", valid_616884
  var valid_616885 = header.getOrDefault("X-Amz-Security-Token")
  valid_616885 = validateParameter(valid_616885, JString, required = false,
                                 default = nil)
  if valid_616885 != nil:
    section.add "X-Amz-Security-Token", valid_616885
  var valid_616886 = header.getOrDefault("X-Amz-Algorithm")
  valid_616886 = validateParameter(valid_616886, JString, required = false,
                                 default = nil)
  if valid_616886 != nil:
    section.add "X-Amz-Algorithm", valid_616886
  var valid_616887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616887 = validateParameter(valid_616887, JString, required = false,
                                 default = nil)
  if valid_616887 != nil:
    section.add "X-Amz-SignedHeaders", valid_616887
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616888: Call_GetListUsers_616873; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616888.validator(path, query, header, formData, body)
  let scheme = call_616888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616888.url(scheme.get, call_616888.host, call_616888.base,
                         call_616888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616888, url, valid)

proc call*(call_616889: Call_GetListUsers_616873; Marker: string = "";
          MaxItems: int = 0; PathPrefix: string = ""; Action: string = "ListUsers";
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616890 = newJObject()
  add(query_616890, "Marker", newJString(Marker))
  add(query_616890, "MaxItems", newJInt(MaxItems))
  add(query_616890, "PathPrefix", newJString(PathPrefix))
  add(query_616890, "Action", newJString(Action))
  add(query_616890, "Version", newJString(Version))
  result = call_616889.call(nil, query_616890, nil, nil, nil)

var getListUsers* = Call_GetListUsers_616873(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_616874, base: "/",
    url: url_GetListUsers_616875, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_616928 = ref object of OpenApiRestCall_612658
proc url_PostListVirtualMFADevices_616930(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListVirtualMFADevices_616929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616931 = query.getOrDefault("Action")
  valid_616931 = validateParameter(valid_616931, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_616931 != nil:
    section.add "Action", valid_616931
  var valid_616932 = query.getOrDefault("Version")
  valid_616932 = validateParameter(valid_616932, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616932 != nil:
    section.add "Version", valid_616932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616933 = header.getOrDefault("X-Amz-Signature")
  valid_616933 = validateParameter(valid_616933, JString, required = false,
                                 default = nil)
  if valid_616933 != nil:
    section.add "X-Amz-Signature", valid_616933
  var valid_616934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616934 = validateParameter(valid_616934, JString, required = false,
                                 default = nil)
  if valid_616934 != nil:
    section.add "X-Amz-Content-Sha256", valid_616934
  var valid_616935 = header.getOrDefault("X-Amz-Date")
  valid_616935 = validateParameter(valid_616935, JString, required = false,
                                 default = nil)
  if valid_616935 != nil:
    section.add "X-Amz-Date", valid_616935
  var valid_616936 = header.getOrDefault("X-Amz-Credential")
  valid_616936 = validateParameter(valid_616936, JString, required = false,
                                 default = nil)
  if valid_616936 != nil:
    section.add "X-Amz-Credential", valid_616936
  var valid_616937 = header.getOrDefault("X-Amz-Security-Token")
  valid_616937 = validateParameter(valid_616937, JString, required = false,
                                 default = nil)
  if valid_616937 != nil:
    section.add "X-Amz-Security-Token", valid_616937
  var valid_616938 = header.getOrDefault("X-Amz-Algorithm")
  valid_616938 = validateParameter(valid_616938, JString, required = false,
                                 default = nil)
  if valid_616938 != nil:
    section.add "X-Amz-Algorithm", valid_616938
  var valid_616939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616939 = validateParameter(valid_616939, JString, required = false,
                                 default = nil)
  if valid_616939 != nil:
    section.add "X-Amz-SignedHeaders", valid_616939
  result.add "header", section
  ## parameters in `formData` object:
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_616940 = formData.getOrDefault("AssignmentStatus")
  valid_616940 = validateParameter(valid_616940, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_616940 != nil:
    section.add "AssignmentStatus", valid_616940
  var valid_616941 = formData.getOrDefault("Marker")
  valid_616941 = validateParameter(valid_616941, JString, required = false,
                                 default = nil)
  if valid_616941 != nil:
    section.add "Marker", valid_616941
  var valid_616942 = formData.getOrDefault("MaxItems")
  valid_616942 = validateParameter(valid_616942, JInt, required = false, default = nil)
  if valid_616942 != nil:
    section.add "MaxItems", valid_616942
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616943: Call_PostListVirtualMFADevices_616928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616943.validator(path, query, header, formData, body)
  let scheme = call_616943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616943.url(scheme.get, call_616943.host, call_616943.base,
                         call_616943.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616943, url, valid)

proc call*(call_616944: Call_PostListVirtualMFADevices_616928;
          AssignmentStatus: string = "Assigned"; Marker: string = "";
          Action: string = "ListVirtualMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_616945 = newJObject()
  var formData_616946 = newJObject()
  add(formData_616946, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_616946, "Marker", newJString(Marker))
  add(query_616945, "Action", newJString(Action))
  add(formData_616946, "MaxItems", newJInt(MaxItems))
  add(query_616945, "Version", newJString(Version))
  result = call_616944.call(nil, query_616945, nil, formData_616946, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_616928(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_616929, base: "/",
    url: url_PostListVirtualMFADevices_616930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_616910 = ref object of OpenApiRestCall_612658
proc url_GetListVirtualMFADevices_616912(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListVirtualMFADevices_616911(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616913 = query.getOrDefault("Marker")
  valid_616913 = validateParameter(valid_616913, JString, required = false,
                                 default = nil)
  if valid_616913 != nil:
    section.add "Marker", valid_616913
  var valid_616914 = query.getOrDefault("MaxItems")
  valid_616914 = validateParameter(valid_616914, JInt, required = false, default = nil)
  if valid_616914 != nil:
    section.add "MaxItems", valid_616914
  var valid_616915 = query.getOrDefault("AssignmentStatus")
  valid_616915 = validateParameter(valid_616915, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_616915 != nil:
    section.add "AssignmentStatus", valid_616915
  var valid_616916 = query.getOrDefault("Action")
  valid_616916 = validateParameter(valid_616916, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_616916 != nil:
    section.add "Action", valid_616916
  var valid_616917 = query.getOrDefault("Version")
  valid_616917 = validateParameter(valid_616917, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616917 != nil:
    section.add "Version", valid_616917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616918 = header.getOrDefault("X-Amz-Signature")
  valid_616918 = validateParameter(valid_616918, JString, required = false,
                                 default = nil)
  if valid_616918 != nil:
    section.add "X-Amz-Signature", valid_616918
  var valid_616919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616919 = validateParameter(valid_616919, JString, required = false,
                                 default = nil)
  if valid_616919 != nil:
    section.add "X-Amz-Content-Sha256", valid_616919
  var valid_616920 = header.getOrDefault("X-Amz-Date")
  valid_616920 = validateParameter(valid_616920, JString, required = false,
                                 default = nil)
  if valid_616920 != nil:
    section.add "X-Amz-Date", valid_616920
  var valid_616921 = header.getOrDefault("X-Amz-Credential")
  valid_616921 = validateParameter(valid_616921, JString, required = false,
                                 default = nil)
  if valid_616921 != nil:
    section.add "X-Amz-Credential", valid_616921
  var valid_616922 = header.getOrDefault("X-Amz-Security-Token")
  valid_616922 = validateParameter(valid_616922, JString, required = false,
                                 default = nil)
  if valid_616922 != nil:
    section.add "X-Amz-Security-Token", valid_616922
  var valid_616923 = header.getOrDefault("X-Amz-Algorithm")
  valid_616923 = validateParameter(valid_616923, JString, required = false,
                                 default = nil)
  if valid_616923 != nil:
    section.add "X-Amz-Algorithm", valid_616923
  var valid_616924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616924 = validateParameter(valid_616924, JString, required = false,
                                 default = nil)
  if valid_616924 != nil:
    section.add "X-Amz-SignedHeaders", valid_616924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616925: Call_GetListVirtualMFADevices_616910; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_616925.validator(path, query, header, formData, body)
  let scheme = call_616925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616925.url(scheme.get, call_616925.host, call_616925.base,
                         call_616925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616925, url, valid)

proc call*(call_616926: Call_GetListVirtualMFADevices_616910; Marker: string = "";
          MaxItems: int = 0; AssignmentStatus: string = "Assigned";
          Action: string = "ListVirtualMFADevices"; Version: string = "2010-05-08"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616927 = newJObject()
  add(query_616927, "Marker", newJString(Marker))
  add(query_616927, "MaxItems", newJInt(MaxItems))
  add(query_616927, "AssignmentStatus", newJString(AssignmentStatus))
  add(query_616927, "Action", newJString(Action))
  add(query_616927, "Version", newJString(Version))
  result = call_616926.call(nil, query_616927, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_616910(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_616911, base: "/",
    url: url_GetListVirtualMFADevices_616912, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_616965 = ref object of OpenApiRestCall_612658
proc url_PostPutGroupPolicy_616967(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutGroupPolicy_616966(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_616968 = query.getOrDefault("Action")
  valid_616968 = validateParameter(valid_616968, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_616968 != nil:
    section.add "Action", valid_616968
  var valid_616969 = query.getOrDefault("Version")
  valid_616969 = validateParameter(valid_616969, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616969 != nil:
    section.add "Version", valid_616969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616970 = header.getOrDefault("X-Amz-Signature")
  valid_616970 = validateParameter(valid_616970, JString, required = false,
                                 default = nil)
  if valid_616970 != nil:
    section.add "X-Amz-Signature", valid_616970
  var valid_616971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616971 = validateParameter(valid_616971, JString, required = false,
                                 default = nil)
  if valid_616971 != nil:
    section.add "X-Amz-Content-Sha256", valid_616971
  var valid_616972 = header.getOrDefault("X-Amz-Date")
  valid_616972 = validateParameter(valid_616972, JString, required = false,
                                 default = nil)
  if valid_616972 != nil:
    section.add "X-Amz-Date", valid_616972
  var valid_616973 = header.getOrDefault("X-Amz-Credential")
  valid_616973 = validateParameter(valid_616973, JString, required = false,
                                 default = nil)
  if valid_616973 != nil:
    section.add "X-Amz-Credential", valid_616973
  var valid_616974 = header.getOrDefault("X-Amz-Security-Token")
  valid_616974 = validateParameter(valid_616974, JString, required = false,
                                 default = nil)
  if valid_616974 != nil:
    section.add "X-Amz-Security-Token", valid_616974
  var valid_616975 = header.getOrDefault("X-Amz-Algorithm")
  valid_616975 = validateParameter(valid_616975, JString, required = false,
                                 default = nil)
  if valid_616975 != nil:
    section.add "X-Amz-Algorithm", valid_616975
  var valid_616976 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616976 = validateParameter(valid_616976, JString, required = false,
                                 default = nil)
  if valid_616976 != nil:
    section.add "X-Amz-SignedHeaders", valid_616976
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_616977 = formData.getOrDefault("PolicyDocument")
  valid_616977 = validateParameter(valid_616977, JString, required = true,
                                 default = nil)
  if valid_616977 != nil:
    section.add "PolicyDocument", valid_616977
  var valid_616978 = formData.getOrDefault("GroupName")
  valid_616978 = validateParameter(valid_616978, JString, required = true,
                                 default = nil)
  if valid_616978 != nil:
    section.add "GroupName", valid_616978
  var valid_616979 = formData.getOrDefault("PolicyName")
  valid_616979 = validateParameter(valid_616979, JString, required = true,
                                 default = nil)
  if valid_616979 != nil:
    section.add "PolicyName", valid_616979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616980: Call_PostPutGroupPolicy_616965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616980.validator(path, query, header, formData, body)
  let scheme = call_616980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616980.url(scheme.get, call_616980.host, call_616980.base,
                         call_616980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616980, url, valid)

proc call*(call_616981: Call_PostPutGroupPolicy_616965; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_616982 = newJObject()
  var formData_616983 = newJObject()
  add(formData_616983, "PolicyDocument", newJString(PolicyDocument))
  add(formData_616983, "GroupName", newJString(GroupName))
  add(query_616982, "Action", newJString(Action))
  add(query_616982, "Version", newJString(Version))
  add(formData_616983, "PolicyName", newJString(PolicyName))
  result = call_616981.call(nil, query_616982, nil, formData_616983, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_616965(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_616966, base: "/",
    url: url_PostPutGroupPolicy_616967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_616947 = ref object of OpenApiRestCall_612658
proc url_GetPutGroupPolicy_616949(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutGroupPolicy_616948(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_616950 = query.getOrDefault("GroupName")
  valid_616950 = validateParameter(valid_616950, JString, required = true,
                                 default = nil)
  if valid_616950 != nil:
    section.add "GroupName", valid_616950
  var valid_616951 = query.getOrDefault("PolicyName")
  valid_616951 = validateParameter(valid_616951, JString, required = true,
                                 default = nil)
  if valid_616951 != nil:
    section.add "PolicyName", valid_616951
  var valid_616952 = query.getOrDefault("PolicyDocument")
  valid_616952 = validateParameter(valid_616952, JString, required = true,
                                 default = nil)
  if valid_616952 != nil:
    section.add "PolicyDocument", valid_616952
  var valid_616953 = query.getOrDefault("Action")
  valid_616953 = validateParameter(valid_616953, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_616953 != nil:
    section.add "Action", valid_616953
  var valid_616954 = query.getOrDefault("Version")
  valid_616954 = validateParameter(valid_616954, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616954 != nil:
    section.add "Version", valid_616954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616955 = header.getOrDefault("X-Amz-Signature")
  valid_616955 = validateParameter(valid_616955, JString, required = false,
                                 default = nil)
  if valid_616955 != nil:
    section.add "X-Amz-Signature", valid_616955
  var valid_616956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616956 = validateParameter(valid_616956, JString, required = false,
                                 default = nil)
  if valid_616956 != nil:
    section.add "X-Amz-Content-Sha256", valid_616956
  var valid_616957 = header.getOrDefault("X-Amz-Date")
  valid_616957 = validateParameter(valid_616957, JString, required = false,
                                 default = nil)
  if valid_616957 != nil:
    section.add "X-Amz-Date", valid_616957
  var valid_616958 = header.getOrDefault("X-Amz-Credential")
  valid_616958 = validateParameter(valid_616958, JString, required = false,
                                 default = nil)
  if valid_616958 != nil:
    section.add "X-Amz-Credential", valid_616958
  var valid_616959 = header.getOrDefault("X-Amz-Security-Token")
  valid_616959 = validateParameter(valid_616959, JString, required = false,
                                 default = nil)
  if valid_616959 != nil:
    section.add "X-Amz-Security-Token", valid_616959
  var valid_616960 = header.getOrDefault("X-Amz-Algorithm")
  valid_616960 = validateParameter(valid_616960, JString, required = false,
                                 default = nil)
  if valid_616960 != nil:
    section.add "X-Amz-Algorithm", valid_616960
  var valid_616961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616961 = validateParameter(valid_616961, JString, required = false,
                                 default = nil)
  if valid_616961 != nil:
    section.add "X-Amz-SignedHeaders", valid_616961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616962: Call_GetPutGroupPolicy_616947; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_616962.validator(path, query, header, formData, body)
  let scheme = call_616962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616962.url(scheme.get, call_616962.host, call_616962.base,
                         call_616962.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616962, url, valid)

proc call*(call_616963: Call_GetPutGroupPolicy_616947; GroupName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_616964 = newJObject()
  add(query_616964, "GroupName", newJString(GroupName))
  add(query_616964, "PolicyName", newJString(PolicyName))
  add(query_616964, "PolicyDocument", newJString(PolicyDocument))
  add(query_616964, "Action", newJString(Action))
  add(query_616964, "Version", newJString(Version))
  result = call_616963.call(nil, query_616964, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_616947(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_616948,
    base: "/", url: url_GetPutGroupPolicy_616949,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_617001 = ref object of OpenApiRestCall_612658
proc url_PostPutRolePermissionsBoundary_617003(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePermissionsBoundary_617002(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617004 = query.getOrDefault("Action")
  valid_617004 = validateParameter(valid_617004, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_617004 != nil:
    section.add "Action", valid_617004
  var valid_617005 = query.getOrDefault("Version")
  valid_617005 = validateParameter(valid_617005, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617005 != nil:
    section.add "Version", valid_617005
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617006 = header.getOrDefault("X-Amz-Signature")
  valid_617006 = validateParameter(valid_617006, JString, required = false,
                                 default = nil)
  if valid_617006 != nil:
    section.add "X-Amz-Signature", valid_617006
  var valid_617007 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617007 = validateParameter(valid_617007, JString, required = false,
                                 default = nil)
  if valid_617007 != nil:
    section.add "X-Amz-Content-Sha256", valid_617007
  var valid_617008 = header.getOrDefault("X-Amz-Date")
  valid_617008 = validateParameter(valid_617008, JString, required = false,
                                 default = nil)
  if valid_617008 != nil:
    section.add "X-Amz-Date", valid_617008
  var valid_617009 = header.getOrDefault("X-Amz-Credential")
  valid_617009 = validateParameter(valid_617009, JString, required = false,
                                 default = nil)
  if valid_617009 != nil:
    section.add "X-Amz-Credential", valid_617009
  var valid_617010 = header.getOrDefault("X-Amz-Security-Token")
  valid_617010 = validateParameter(valid_617010, JString, required = false,
                                 default = nil)
  if valid_617010 != nil:
    section.add "X-Amz-Security-Token", valid_617010
  var valid_617011 = header.getOrDefault("X-Amz-Algorithm")
  valid_617011 = validateParameter(valid_617011, JString, required = false,
                                 default = nil)
  if valid_617011 != nil:
    section.add "X-Amz-Algorithm", valid_617011
  var valid_617012 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617012 = validateParameter(valid_617012, JString, required = false,
                                 default = nil)
  if valid_617012 != nil:
    section.add "X-Amz-SignedHeaders", valid_617012
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_617013 = formData.getOrDefault("RoleName")
  valid_617013 = validateParameter(valid_617013, JString, required = true,
                                 default = nil)
  if valid_617013 != nil:
    section.add "RoleName", valid_617013
  var valid_617014 = formData.getOrDefault("PermissionsBoundary")
  valid_617014 = validateParameter(valid_617014, JString, required = true,
                                 default = nil)
  if valid_617014 != nil:
    section.add "PermissionsBoundary", valid_617014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617015: Call_PostPutRolePermissionsBoundary_617001; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_617015.validator(path, query, header, formData, body)
  let scheme = call_617015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617015.url(scheme.get, call_617015.host, call_617015.base,
                         call_617015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617015, url, valid)

proc call*(call_617016: Call_PostPutRolePermissionsBoundary_617001;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_617017 = newJObject()
  var formData_617018 = newJObject()
  add(formData_617018, "RoleName", newJString(RoleName))
  add(query_617017, "Action", newJString(Action))
  add(formData_617018, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_617017, "Version", newJString(Version))
  result = call_617016.call(nil, query_617017, nil, formData_617018, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_617001(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_617002, base: "/",
    url: url_PostPutRolePermissionsBoundary_617003,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_616984 = ref object of OpenApiRestCall_612658
proc url_GetPutRolePermissionsBoundary_616986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePermissionsBoundary_616985(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `PermissionsBoundary` field"
  var valid_616987 = query.getOrDefault("PermissionsBoundary")
  valid_616987 = validateParameter(valid_616987, JString, required = true,
                                 default = nil)
  if valid_616987 != nil:
    section.add "PermissionsBoundary", valid_616987
  var valid_616988 = query.getOrDefault("RoleName")
  valid_616988 = validateParameter(valid_616988, JString, required = true,
                                 default = nil)
  if valid_616988 != nil:
    section.add "RoleName", valid_616988
  var valid_616989 = query.getOrDefault("Action")
  valid_616989 = validateParameter(valid_616989, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_616989 != nil:
    section.add "Action", valid_616989
  var valid_616990 = query.getOrDefault("Version")
  valid_616990 = validateParameter(valid_616990, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_616990 != nil:
    section.add "Version", valid_616990
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_616991 = header.getOrDefault("X-Amz-Signature")
  valid_616991 = validateParameter(valid_616991, JString, required = false,
                                 default = nil)
  if valid_616991 != nil:
    section.add "X-Amz-Signature", valid_616991
  var valid_616992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_616992 = validateParameter(valid_616992, JString, required = false,
                                 default = nil)
  if valid_616992 != nil:
    section.add "X-Amz-Content-Sha256", valid_616992
  var valid_616993 = header.getOrDefault("X-Amz-Date")
  valid_616993 = validateParameter(valid_616993, JString, required = false,
                                 default = nil)
  if valid_616993 != nil:
    section.add "X-Amz-Date", valid_616993
  var valid_616994 = header.getOrDefault("X-Amz-Credential")
  valid_616994 = validateParameter(valid_616994, JString, required = false,
                                 default = nil)
  if valid_616994 != nil:
    section.add "X-Amz-Credential", valid_616994
  var valid_616995 = header.getOrDefault("X-Amz-Security-Token")
  valid_616995 = validateParameter(valid_616995, JString, required = false,
                                 default = nil)
  if valid_616995 != nil:
    section.add "X-Amz-Security-Token", valid_616995
  var valid_616996 = header.getOrDefault("X-Amz-Algorithm")
  valid_616996 = validateParameter(valid_616996, JString, required = false,
                                 default = nil)
  if valid_616996 != nil:
    section.add "X-Amz-Algorithm", valid_616996
  var valid_616997 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_616997 = validateParameter(valid_616997, JString, required = false,
                                 default = nil)
  if valid_616997 != nil:
    section.add "X-Amz-SignedHeaders", valid_616997
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_616998: Call_GetPutRolePermissionsBoundary_616984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_616998.validator(path, query, header, formData, body)
  let scheme = call_616998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_616998.url(scheme.get, call_616998.host, call_616998.base,
                         call_616998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_616998, url, valid)

proc call*(call_616999: Call_GetPutRolePermissionsBoundary_616984;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617000 = newJObject()
  add(query_617000, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_617000, "RoleName", newJString(RoleName))
  add(query_617000, "Action", newJString(Action))
  add(query_617000, "Version", newJString(Version))
  result = call_616999.call(nil, query_617000, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_616984(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_616985, base: "/",
    url: url_GetPutRolePermissionsBoundary_616986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_617037 = ref object of OpenApiRestCall_612658
proc url_PostPutRolePolicy_617039(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutRolePolicy_617038(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617040 = query.getOrDefault("Action")
  valid_617040 = validateParameter(valid_617040, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_617040 != nil:
    section.add "Action", valid_617040
  var valid_617041 = query.getOrDefault("Version")
  valid_617041 = validateParameter(valid_617041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617041 != nil:
    section.add "Version", valid_617041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617042 = header.getOrDefault("X-Amz-Signature")
  valid_617042 = validateParameter(valid_617042, JString, required = false,
                                 default = nil)
  if valid_617042 != nil:
    section.add "X-Amz-Signature", valid_617042
  var valid_617043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617043 = validateParameter(valid_617043, JString, required = false,
                                 default = nil)
  if valid_617043 != nil:
    section.add "X-Amz-Content-Sha256", valid_617043
  var valid_617044 = header.getOrDefault("X-Amz-Date")
  valid_617044 = validateParameter(valid_617044, JString, required = false,
                                 default = nil)
  if valid_617044 != nil:
    section.add "X-Amz-Date", valid_617044
  var valid_617045 = header.getOrDefault("X-Amz-Credential")
  valid_617045 = validateParameter(valid_617045, JString, required = false,
                                 default = nil)
  if valid_617045 != nil:
    section.add "X-Amz-Credential", valid_617045
  var valid_617046 = header.getOrDefault("X-Amz-Security-Token")
  valid_617046 = validateParameter(valid_617046, JString, required = false,
                                 default = nil)
  if valid_617046 != nil:
    section.add "X-Amz-Security-Token", valid_617046
  var valid_617047 = header.getOrDefault("X-Amz-Algorithm")
  valid_617047 = validateParameter(valid_617047, JString, required = false,
                                 default = nil)
  if valid_617047 != nil:
    section.add "X-Amz-Algorithm", valid_617047
  var valid_617048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617048 = validateParameter(valid_617048, JString, required = false,
                                 default = nil)
  if valid_617048 != nil:
    section.add "X-Amz-SignedHeaders", valid_617048
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_617049 = formData.getOrDefault("PolicyDocument")
  valid_617049 = validateParameter(valid_617049, JString, required = true,
                                 default = nil)
  if valid_617049 != nil:
    section.add "PolicyDocument", valid_617049
  var valid_617050 = formData.getOrDefault("RoleName")
  valid_617050 = validateParameter(valid_617050, JString, required = true,
                                 default = nil)
  if valid_617050 != nil:
    section.add "RoleName", valid_617050
  var valid_617051 = formData.getOrDefault("PolicyName")
  valid_617051 = validateParameter(valid_617051, JString, required = true,
                                 default = nil)
  if valid_617051 != nil:
    section.add "PolicyName", valid_617051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617052: Call_PostPutRolePolicy_617037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_617052.validator(path, query, header, formData, body)
  let scheme = call_617052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617052.url(scheme.get, call_617052.host, call_617052.base,
                         call_617052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617052, url, valid)

proc call*(call_617053: Call_PostPutRolePolicy_617037; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_617054 = newJObject()
  var formData_617055 = newJObject()
  add(formData_617055, "PolicyDocument", newJString(PolicyDocument))
  add(formData_617055, "RoleName", newJString(RoleName))
  add(query_617054, "Action", newJString(Action))
  add(query_617054, "Version", newJString(Version))
  add(formData_617055, "PolicyName", newJString(PolicyName))
  result = call_617053.call(nil, query_617054, nil, formData_617055, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_617037(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_617038,
    base: "/", url: url_PostPutRolePolicy_617039,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_617019 = ref object of OpenApiRestCall_612658
proc url_GetPutRolePolicy_617021(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutRolePolicy_617020(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyName` field"
  var valid_617022 = query.getOrDefault("PolicyName")
  valid_617022 = validateParameter(valid_617022, JString, required = true,
                                 default = nil)
  if valid_617022 != nil:
    section.add "PolicyName", valid_617022
  var valid_617023 = query.getOrDefault("RoleName")
  valid_617023 = validateParameter(valid_617023, JString, required = true,
                                 default = nil)
  if valid_617023 != nil:
    section.add "RoleName", valid_617023
  var valid_617024 = query.getOrDefault("PolicyDocument")
  valid_617024 = validateParameter(valid_617024, JString, required = true,
                                 default = nil)
  if valid_617024 != nil:
    section.add "PolicyDocument", valid_617024
  var valid_617025 = query.getOrDefault("Action")
  valid_617025 = validateParameter(valid_617025, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_617025 != nil:
    section.add "Action", valid_617025
  var valid_617026 = query.getOrDefault("Version")
  valid_617026 = validateParameter(valid_617026, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617026 != nil:
    section.add "Version", valid_617026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617027 = header.getOrDefault("X-Amz-Signature")
  valid_617027 = validateParameter(valid_617027, JString, required = false,
                                 default = nil)
  if valid_617027 != nil:
    section.add "X-Amz-Signature", valid_617027
  var valid_617028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617028 = validateParameter(valid_617028, JString, required = false,
                                 default = nil)
  if valid_617028 != nil:
    section.add "X-Amz-Content-Sha256", valid_617028
  var valid_617029 = header.getOrDefault("X-Amz-Date")
  valid_617029 = validateParameter(valid_617029, JString, required = false,
                                 default = nil)
  if valid_617029 != nil:
    section.add "X-Amz-Date", valid_617029
  var valid_617030 = header.getOrDefault("X-Amz-Credential")
  valid_617030 = validateParameter(valid_617030, JString, required = false,
                                 default = nil)
  if valid_617030 != nil:
    section.add "X-Amz-Credential", valid_617030
  var valid_617031 = header.getOrDefault("X-Amz-Security-Token")
  valid_617031 = validateParameter(valid_617031, JString, required = false,
                                 default = nil)
  if valid_617031 != nil:
    section.add "X-Amz-Security-Token", valid_617031
  var valid_617032 = header.getOrDefault("X-Amz-Algorithm")
  valid_617032 = validateParameter(valid_617032, JString, required = false,
                                 default = nil)
  if valid_617032 != nil:
    section.add "X-Amz-Algorithm", valid_617032
  var valid_617033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617033 = validateParameter(valid_617033, JString, required = false,
                                 default = nil)
  if valid_617033 != nil:
    section.add "X-Amz-SignedHeaders", valid_617033
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617034: Call_GetPutRolePolicy_617019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_617034.validator(path, query, header, formData, body)
  let scheme = call_617034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617034.url(scheme.get, call_617034.host, call_617034.base,
                         call_617034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617034, url, valid)

proc call*(call_617035: Call_GetPutRolePolicy_617019; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617036 = newJObject()
  add(query_617036, "PolicyName", newJString(PolicyName))
  add(query_617036, "RoleName", newJString(RoleName))
  add(query_617036, "PolicyDocument", newJString(PolicyDocument))
  add(query_617036, "Action", newJString(Action))
  add(query_617036, "Version", newJString(Version))
  result = call_617035.call(nil, query_617036, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_617019(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_617020,
    base: "/", url: url_GetPutRolePolicy_617021,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_617073 = ref object of OpenApiRestCall_612658
proc url_PostPutUserPermissionsBoundary_617075(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPermissionsBoundary_617074(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617076 = query.getOrDefault("Action")
  valid_617076 = validateParameter(valid_617076, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_617076 != nil:
    section.add "Action", valid_617076
  var valid_617077 = query.getOrDefault("Version")
  valid_617077 = validateParameter(valid_617077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617077 != nil:
    section.add "Version", valid_617077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617078 = header.getOrDefault("X-Amz-Signature")
  valid_617078 = validateParameter(valid_617078, JString, required = false,
                                 default = nil)
  if valid_617078 != nil:
    section.add "X-Amz-Signature", valid_617078
  var valid_617079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617079 = validateParameter(valid_617079, JString, required = false,
                                 default = nil)
  if valid_617079 != nil:
    section.add "X-Amz-Content-Sha256", valid_617079
  var valid_617080 = header.getOrDefault("X-Amz-Date")
  valid_617080 = validateParameter(valid_617080, JString, required = false,
                                 default = nil)
  if valid_617080 != nil:
    section.add "X-Amz-Date", valid_617080
  var valid_617081 = header.getOrDefault("X-Amz-Credential")
  valid_617081 = validateParameter(valid_617081, JString, required = false,
                                 default = nil)
  if valid_617081 != nil:
    section.add "X-Amz-Credential", valid_617081
  var valid_617082 = header.getOrDefault("X-Amz-Security-Token")
  valid_617082 = validateParameter(valid_617082, JString, required = false,
                                 default = nil)
  if valid_617082 != nil:
    section.add "X-Amz-Security-Token", valid_617082
  var valid_617083 = header.getOrDefault("X-Amz-Algorithm")
  valid_617083 = validateParameter(valid_617083, JString, required = false,
                                 default = nil)
  if valid_617083 != nil:
    section.add "X-Amz-Algorithm", valid_617083
  var valid_617084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617084 = validateParameter(valid_617084, JString, required = false,
                                 default = nil)
  if valid_617084 != nil:
    section.add "X-Amz-SignedHeaders", valid_617084
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_617085 = formData.getOrDefault("UserName")
  valid_617085 = validateParameter(valid_617085, JString, required = true,
                                 default = nil)
  if valid_617085 != nil:
    section.add "UserName", valid_617085
  var valid_617086 = formData.getOrDefault("PermissionsBoundary")
  valid_617086 = validateParameter(valid_617086, JString, required = true,
                                 default = nil)
  if valid_617086 != nil:
    section.add "PermissionsBoundary", valid_617086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617087: Call_PostPutUserPermissionsBoundary_617073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_617087.validator(path, query, header, formData, body)
  let scheme = call_617087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617087.url(scheme.get, call_617087.host, call_617087.base,
                         call_617087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617087, url, valid)

proc call*(call_617088: Call_PostPutUserPermissionsBoundary_617073;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_617089 = newJObject()
  var formData_617090 = newJObject()
  add(formData_617090, "UserName", newJString(UserName))
  add(query_617089, "Action", newJString(Action))
  add(formData_617090, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_617089, "Version", newJString(Version))
  result = call_617088.call(nil, query_617089, nil, formData_617090, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_617073(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_617074, base: "/",
    url: url_PostPutUserPermissionsBoundary_617075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_617056 = ref object of OpenApiRestCall_612658
proc url_GetPutUserPermissionsBoundary_617058(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPermissionsBoundary_617057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617059 = query.getOrDefault("UserName")
  valid_617059 = validateParameter(valid_617059, JString, required = true,
                                 default = nil)
  if valid_617059 != nil:
    section.add "UserName", valid_617059
  var valid_617060 = query.getOrDefault("PermissionsBoundary")
  valid_617060 = validateParameter(valid_617060, JString, required = true,
                                 default = nil)
  if valid_617060 != nil:
    section.add "PermissionsBoundary", valid_617060
  var valid_617061 = query.getOrDefault("Action")
  valid_617061 = validateParameter(valid_617061, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_617061 != nil:
    section.add "Action", valid_617061
  var valid_617062 = query.getOrDefault("Version")
  valid_617062 = validateParameter(valid_617062, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617062 != nil:
    section.add "Version", valid_617062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617063 = header.getOrDefault("X-Amz-Signature")
  valid_617063 = validateParameter(valid_617063, JString, required = false,
                                 default = nil)
  if valid_617063 != nil:
    section.add "X-Amz-Signature", valid_617063
  var valid_617064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617064 = validateParameter(valid_617064, JString, required = false,
                                 default = nil)
  if valid_617064 != nil:
    section.add "X-Amz-Content-Sha256", valid_617064
  var valid_617065 = header.getOrDefault("X-Amz-Date")
  valid_617065 = validateParameter(valid_617065, JString, required = false,
                                 default = nil)
  if valid_617065 != nil:
    section.add "X-Amz-Date", valid_617065
  var valid_617066 = header.getOrDefault("X-Amz-Credential")
  valid_617066 = validateParameter(valid_617066, JString, required = false,
                                 default = nil)
  if valid_617066 != nil:
    section.add "X-Amz-Credential", valid_617066
  var valid_617067 = header.getOrDefault("X-Amz-Security-Token")
  valid_617067 = validateParameter(valid_617067, JString, required = false,
                                 default = nil)
  if valid_617067 != nil:
    section.add "X-Amz-Security-Token", valid_617067
  var valid_617068 = header.getOrDefault("X-Amz-Algorithm")
  valid_617068 = validateParameter(valid_617068, JString, required = false,
                                 default = nil)
  if valid_617068 != nil:
    section.add "X-Amz-Algorithm", valid_617068
  var valid_617069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617069 = validateParameter(valid_617069, JString, required = false,
                                 default = nil)
  if valid_617069 != nil:
    section.add "X-Amz-SignedHeaders", valid_617069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617070: Call_GetPutUserPermissionsBoundary_617056; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_617070.validator(path, query, header, formData, body)
  let scheme = call_617070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617070.url(scheme.get, call_617070.host, call_617070.base,
                         call_617070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617070, url, valid)

proc call*(call_617071: Call_GetPutUserPermissionsBoundary_617056;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617072 = newJObject()
  add(query_617072, "UserName", newJString(UserName))
  add(query_617072, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_617072, "Action", newJString(Action))
  add(query_617072, "Version", newJString(Version))
  result = call_617071.call(nil, query_617072, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_617056(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_617057, base: "/",
    url: url_GetPutUserPermissionsBoundary_617058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_617109 = ref object of OpenApiRestCall_612658
proc url_PostPutUserPolicy_617111(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPutUserPolicy_617110(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617112 = query.getOrDefault("Action")
  valid_617112 = validateParameter(valid_617112, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_617112 != nil:
    section.add "Action", valid_617112
  var valid_617113 = query.getOrDefault("Version")
  valid_617113 = validateParameter(valid_617113, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617113 != nil:
    section.add "Version", valid_617113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617114 = header.getOrDefault("X-Amz-Signature")
  valid_617114 = validateParameter(valid_617114, JString, required = false,
                                 default = nil)
  if valid_617114 != nil:
    section.add "X-Amz-Signature", valid_617114
  var valid_617115 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617115 = validateParameter(valid_617115, JString, required = false,
                                 default = nil)
  if valid_617115 != nil:
    section.add "X-Amz-Content-Sha256", valid_617115
  var valid_617116 = header.getOrDefault("X-Amz-Date")
  valid_617116 = validateParameter(valid_617116, JString, required = false,
                                 default = nil)
  if valid_617116 != nil:
    section.add "X-Amz-Date", valid_617116
  var valid_617117 = header.getOrDefault("X-Amz-Credential")
  valid_617117 = validateParameter(valid_617117, JString, required = false,
                                 default = nil)
  if valid_617117 != nil:
    section.add "X-Amz-Credential", valid_617117
  var valid_617118 = header.getOrDefault("X-Amz-Security-Token")
  valid_617118 = validateParameter(valid_617118, JString, required = false,
                                 default = nil)
  if valid_617118 != nil:
    section.add "X-Amz-Security-Token", valid_617118
  var valid_617119 = header.getOrDefault("X-Amz-Algorithm")
  valid_617119 = validateParameter(valid_617119, JString, required = false,
                                 default = nil)
  if valid_617119 != nil:
    section.add "X-Amz-Algorithm", valid_617119
  var valid_617120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617120 = validateParameter(valid_617120, JString, required = false,
                                 default = nil)
  if valid_617120 != nil:
    section.add "X-Amz-SignedHeaders", valid_617120
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_617121 = formData.getOrDefault("PolicyDocument")
  valid_617121 = validateParameter(valid_617121, JString, required = true,
                                 default = nil)
  if valid_617121 != nil:
    section.add "PolicyDocument", valid_617121
  var valid_617122 = formData.getOrDefault("UserName")
  valid_617122 = validateParameter(valid_617122, JString, required = true,
                                 default = nil)
  if valid_617122 != nil:
    section.add "UserName", valid_617122
  var valid_617123 = formData.getOrDefault("PolicyName")
  valid_617123 = validateParameter(valid_617123, JString, required = true,
                                 default = nil)
  if valid_617123 != nil:
    section.add "PolicyName", valid_617123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617124: Call_PostPutUserPolicy_617109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_617124.validator(path, query, header, formData, body)
  let scheme = call_617124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617124.url(scheme.get, call_617124.host, call_617124.base,
                         call_617124.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617124, url, valid)

proc call*(call_617125: Call_PostPutUserPolicy_617109; PolicyDocument: string;
          UserName: string; PolicyName: string; Action: string = "PutUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_617126 = newJObject()
  var formData_617127 = newJObject()
  add(formData_617127, "PolicyDocument", newJString(PolicyDocument))
  add(formData_617127, "UserName", newJString(UserName))
  add(query_617126, "Action", newJString(Action))
  add(query_617126, "Version", newJString(Version))
  add(formData_617127, "PolicyName", newJString(PolicyName))
  result = call_617125.call(nil, query_617126, nil, formData_617127, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_617109(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_617110,
    base: "/", url: url_PostPutUserPolicy_617111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_617091 = ref object of OpenApiRestCall_612658
proc url_GetPutUserPolicy_617093(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPutUserPolicy_617092(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617094 = query.getOrDefault("UserName")
  valid_617094 = validateParameter(valid_617094, JString, required = true,
                                 default = nil)
  if valid_617094 != nil:
    section.add "UserName", valid_617094
  var valid_617095 = query.getOrDefault("PolicyName")
  valid_617095 = validateParameter(valid_617095, JString, required = true,
                                 default = nil)
  if valid_617095 != nil:
    section.add "PolicyName", valid_617095
  var valid_617096 = query.getOrDefault("PolicyDocument")
  valid_617096 = validateParameter(valid_617096, JString, required = true,
                                 default = nil)
  if valid_617096 != nil:
    section.add "PolicyDocument", valid_617096
  var valid_617097 = query.getOrDefault("Action")
  valid_617097 = validateParameter(valid_617097, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_617097 != nil:
    section.add "Action", valid_617097
  var valid_617098 = query.getOrDefault("Version")
  valid_617098 = validateParameter(valid_617098, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617098 != nil:
    section.add "Version", valid_617098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617099 = header.getOrDefault("X-Amz-Signature")
  valid_617099 = validateParameter(valid_617099, JString, required = false,
                                 default = nil)
  if valid_617099 != nil:
    section.add "X-Amz-Signature", valid_617099
  var valid_617100 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617100 = validateParameter(valid_617100, JString, required = false,
                                 default = nil)
  if valid_617100 != nil:
    section.add "X-Amz-Content-Sha256", valid_617100
  var valid_617101 = header.getOrDefault("X-Amz-Date")
  valid_617101 = validateParameter(valid_617101, JString, required = false,
                                 default = nil)
  if valid_617101 != nil:
    section.add "X-Amz-Date", valid_617101
  var valid_617102 = header.getOrDefault("X-Amz-Credential")
  valid_617102 = validateParameter(valid_617102, JString, required = false,
                                 default = nil)
  if valid_617102 != nil:
    section.add "X-Amz-Credential", valid_617102
  var valid_617103 = header.getOrDefault("X-Amz-Security-Token")
  valid_617103 = validateParameter(valid_617103, JString, required = false,
                                 default = nil)
  if valid_617103 != nil:
    section.add "X-Amz-Security-Token", valid_617103
  var valid_617104 = header.getOrDefault("X-Amz-Algorithm")
  valid_617104 = validateParameter(valid_617104, JString, required = false,
                                 default = nil)
  if valid_617104 != nil:
    section.add "X-Amz-Algorithm", valid_617104
  var valid_617105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617105 = validateParameter(valid_617105, JString, required = false,
                                 default = nil)
  if valid_617105 != nil:
    section.add "X-Amz-SignedHeaders", valid_617105
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617106: Call_GetPutUserPolicy_617091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_617106.validator(path, query, header, formData, body)
  let scheme = call_617106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617106.url(scheme.get, call_617106.host, call_617106.base,
                         call_617106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617106, url, valid)

proc call*(call_617107: Call_GetPutUserPolicy_617091; UserName: string;
          PolicyName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617108 = newJObject()
  add(query_617108, "UserName", newJString(UserName))
  add(query_617108, "PolicyName", newJString(PolicyName))
  add(query_617108, "PolicyDocument", newJString(PolicyDocument))
  add(query_617108, "Action", newJString(Action))
  add(query_617108, "Version", newJString(Version))
  result = call_617107.call(nil, query_617108, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_617091(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_617092,
    base: "/", url: url_GetPutUserPolicy_617093,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_617145 = ref object of OpenApiRestCall_612658
proc url_PostRemoveClientIDFromOpenIDConnectProvider_617147(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_617146(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617148 = query.getOrDefault("Action")
  valid_617148 = validateParameter(valid_617148, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_617148 != nil:
    section.add "Action", valid_617148
  var valid_617149 = query.getOrDefault("Version")
  valid_617149 = validateParameter(valid_617149, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617149 != nil:
    section.add "Version", valid_617149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617150 = header.getOrDefault("X-Amz-Signature")
  valid_617150 = validateParameter(valid_617150, JString, required = false,
                                 default = nil)
  if valid_617150 != nil:
    section.add "X-Amz-Signature", valid_617150
  var valid_617151 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617151 = validateParameter(valid_617151, JString, required = false,
                                 default = nil)
  if valid_617151 != nil:
    section.add "X-Amz-Content-Sha256", valid_617151
  var valid_617152 = header.getOrDefault("X-Amz-Date")
  valid_617152 = validateParameter(valid_617152, JString, required = false,
                                 default = nil)
  if valid_617152 != nil:
    section.add "X-Amz-Date", valid_617152
  var valid_617153 = header.getOrDefault("X-Amz-Credential")
  valid_617153 = validateParameter(valid_617153, JString, required = false,
                                 default = nil)
  if valid_617153 != nil:
    section.add "X-Amz-Credential", valid_617153
  var valid_617154 = header.getOrDefault("X-Amz-Security-Token")
  valid_617154 = validateParameter(valid_617154, JString, required = false,
                                 default = nil)
  if valid_617154 != nil:
    section.add "X-Amz-Security-Token", valid_617154
  var valid_617155 = header.getOrDefault("X-Amz-Algorithm")
  valid_617155 = validateParameter(valid_617155, JString, required = false,
                                 default = nil)
  if valid_617155 != nil:
    section.add "X-Amz-Algorithm", valid_617155
  var valid_617156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617156 = validateParameter(valid_617156, JString, required = false,
                                 default = nil)
  if valid_617156 != nil:
    section.add "X-Amz-SignedHeaders", valid_617156
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ClientID` field"
  var valid_617157 = formData.getOrDefault("ClientID")
  valid_617157 = validateParameter(valid_617157, JString, required = true,
                                 default = nil)
  if valid_617157 != nil:
    section.add "ClientID", valid_617157
  var valid_617158 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_617158 = validateParameter(valid_617158, JString, required = true,
                                 default = nil)
  if valid_617158 != nil:
    section.add "OpenIDConnectProviderArn", valid_617158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617159: Call_PostRemoveClientIDFromOpenIDConnectProvider_617145;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_617159.validator(path, query, header, formData, body)
  let scheme = call_617159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617159.url(scheme.get, call_617159.host, call_617159.base,
                         call_617159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617159, url, valid)

proc call*(call_617160: Call_PostRemoveClientIDFromOpenIDConnectProvider_617145;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_617161 = newJObject()
  var formData_617162 = newJObject()
  add(formData_617162, "ClientID", newJString(ClientID))
  add(query_617161, "Action", newJString(Action))
  add(query_617161, "Version", newJString(Version))
  add(formData_617162, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_617160.call(nil, query_617161, nil, formData_617162, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_617145(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_617146,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_617147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_617128 = ref object of OpenApiRestCall_612658
proc url_GetRemoveClientIDFromOpenIDConnectProvider_617130(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_617129(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ClientID` field"
  var valid_617131 = query.getOrDefault("ClientID")
  valid_617131 = validateParameter(valid_617131, JString, required = true,
                                 default = nil)
  if valid_617131 != nil:
    section.add "ClientID", valid_617131
  var valid_617132 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_617132 = validateParameter(valid_617132, JString, required = true,
                                 default = nil)
  if valid_617132 != nil:
    section.add "OpenIDConnectProviderArn", valid_617132
  var valid_617133 = query.getOrDefault("Action")
  valid_617133 = validateParameter(valid_617133, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_617133 != nil:
    section.add "Action", valid_617133
  var valid_617134 = query.getOrDefault("Version")
  valid_617134 = validateParameter(valid_617134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617134 != nil:
    section.add "Version", valid_617134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617135 = header.getOrDefault("X-Amz-Signature")
  valid_617135 = validateParameter(valid_617135, JString, required = false,
                                 default = nil)
  if valid_617135 != nil:
    section.add "X-Amz-Signature", valid_617135
  var valid_617136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617136 = validateParameter(valid_617136, JString, required = false,
                                 default = nil)
  if valid_617136 != nil:
    section.add "X-Amz-Content-Sha256", valid_617136
  var valid_617137 = header.getOrDefault("X-Amz-Date")
  valid_617137 = validateParameter(valid_617137, JString, required = false,
                                 default = nil)
  if valid_617137 != nil:
    section.add "X-Amz-Date", valid_617137
  var valid_617138 = header.getOrDefault("X-Amz-Credential")
  valid_617138 = validateParameter(valid_617138, JString, required = false,
                                 default = nil)
  if valid_617138 != nil:
    section.add "X-Amz-Credential", valid_617138
  var valid_617139 = header.getOrDefault("X-Amz-Security-Token")
  valid_617139 = validateParameter(valid_617139, JString, required = false,
                                 default = nil)
  if valid_617139 != nil:
    section.add "X-Amz-Security-Token", valid_617139
  var valid_617140 = header.getOrDefault("X-Amz-Algorithm")
  valid_617140 = validateParameter(valid_617140, JString, required = false,
                                 default = nil)
  if valid_617140 != nil:
    section.add "X-Amz-Algorithm", valid_617140
  var valid_617141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617141 = validateParameter(valid_617141, JString, required = false,
                                 default = nil)
  if valid_617141 != nil:
    section.add "X-Amz-SignedHeaders", valid_617141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617142: Call_GetRemoveClientIDFromOpenIDConnectProvider_617128;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_617142.validator(path, query, header, formData, body)
  let scheme = call_617142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617142.url(scheme.get, call_617142.host, call_617142.base,
                         call_617142.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617142, url, valid)

proc call*(call_617143: Call_GetRemoveClientIDFromOpenIDConnectProvider_617128;
          ClientID: string; OpenIDConnectProviderArn: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617144 = newJObject()
  add(query_617144, "ClientID", newJString(ClientID))
  add(query_617144, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_617144, "Action", newJString(Action))
  add(query_617144, "Version", newJString(Version))
  result = call_617143.call(nil, query_617144, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_617128(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_617129,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_617130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_617180 = ref object of OpenApiRestCall_612658
proc url_PostRemoveRoleFromInstanceProfile_617182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromInstanceProfile_617181(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617183 = query.getOrDefault("Action")
  valid_617183 = validateParameter(valid_617183, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_617183 != nil:
    section.add "Action", valid_617183
  var valid_617184 = query.getOrDefault("Version")
  valid_617184 = validateParameter(valid_617184, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617184 != nil:
    section.add "Version", valid_617184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617185 = header.getOrDefault("X-Amz-Signature")
  valid_617185 = validateParameter(valid_617185, JString, required = false,
                                 default = nil)
  if valid_617185 != nil:
    section.add "X-Amz-Signature", valid_617185
  var valid_617186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617186 = validateParameter(valid_617186, JString, required = false,
                                 default = nil)
  if valid_617186 != nil:
    section.add "X-Amz-Content-Sha256", valid_617186
  var valid_617187 = header.getOrDefault("X-Amz-Date")
  valid_617187 = validateParameter(valid_617187, JString, required = false,
                                 default = nil)
  if valid_617187 != nil:
    section.add "X-Amz-Date", valid_617187
  var valid_617188 = header.getOrDefault("X-Amz-Credential")
  valid_617188 = validateParameter(valid_617188, JString, required = false,
                                 default = nil)
  if valid_617188 != nil:
    section.add "X-Amz-Credential", valid_617188
  var valid_617189 = header.getOrDefault("X-Amz-Security-Token")
  valid_617189 = validateParameter(valid_617189, JString, required = false,
                                 default = nil)
  if valid_617189 != nil:
    section.add "X-Amz-Security-Token", valid_617189
  var valid_617190 = header.getOrDefault("X-Amz-Algorithm")
  valid_617190 = validateParameter(valid_617190, JString, required = false,
                                 default = nil)
  if valid_617190 != nil:
    section.add "X-Amz-Algorithm", valid_617190
  var valid_617191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617191 = validateParameter(valid_617191, JString, required = false,
                                 default = nil)
  if valid_617191 != nil:
    section.add "X-Amz-SignedHeaders", valid_617191
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_617192 = formData.getOrDefault("RoleName")
  valid_617192 = validateParameter(valid_617192, JString, required = true,
                                 default = nil)
  if valid_617192 != nil:
    section.add "RoleName", valid_617192
  var valid_617193 = formData.getOrDefault("InstanceProfileName")
  valid_617193 = validateParameter(valid_617193, JString, required = true,
                                 default = nil)
  if valid_617193 != nil:
    section.add "InstanceProfileName", valid_617193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617194: Call_PostRemoveRoleFromInstanceProfile_617180;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_617194.validator(path, query, header, formData, body)
  let scheme = call_617194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617194.url(scheme.get, call_617194.host, call_617194.base,
                         call_617194.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617194, url, valid)

proc call*(call_617195: Call_PostRemoveRoleFromInstanceProfile_617180;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_617196 = newJObject()
  var formData_617197 = newJObject()
  add(formData_617197, "RoleName", newJString(RoleName))
  add(query_617196, "Action", newJString(Action))
  add(formData_617197, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_617196, "Version", newJString(Version))
  result = call_617195.call(nil, query_617196, nil, formData_617197, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_617180(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_617181, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_617182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_617163 = ref object of OpenApiRestCall_612658
proc url_GetRemoveRoleFromInstanceProfile_617165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromInstanceProfile_617164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_617166 = query.getOrDefault("RoleName")
  valid_617166 = validateParameter(valid_617166, JString, required = true,
                                 default = nil)
  if valid_617166 != nil:
    section.add "RoleName", valid_617166
  var valid_617167 = query.getOrDefault("Action")
  valid_617167 = validateParameter(valid_617167, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_617167 != nil:
    section.add "Action", valid_617167
  var valid_617168 = query.getOrDefault("InstanceProfileName")
  valid_617168 = validateParameter(valid_617168, JString, required = true,
                                 default = nil)
  if valid_617168 != nil:
    section.add "InstanceProfileName", valid_617168
  var valid_617169 = query.getOrDefault("Version")
  valid_617169 = validateParameter(valid_617169, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617169 != nil:
    section.add "Version", valid_617169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617170 = header.getOrDefault("X-Amz-Signature")
  valid_617170 = validateParameter(valid_617170, JString, required = false,
                                 default = nil)
  if valid_617170 != nil:
    section.add "X-Amz-Signature", valid_617170
  var valid_617171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617171 = validateParameter(valid_617171, JString, required = false,
                                 default = nil)
  if valid_617171 != nil:
    section.add "X-Amz-Content-Sha256", valid_617171
  var valid_617172 = header.getOrDefault("X-Amz-Date")
  valid_617172 = validateParameter(valid_617172, JString, required = false,
                                 default = nil)
  if valid_617172 != nil:
    section.add "X-Amz-Date", valid_617172
  var valid_617173 = header.getOrDefault("X-Amz-Credential")
  valid_617173 = validateParameter(valid_617173, JString, required = false,
                                 default = nil)
  if valid_617173 != nil:
    section.add "X-Amz-Credential", valid_617173
  var valid_617174 = header.getOrDefault("X-Amz-Security-Token")
  valid_617174 = validateParameter(valid_617174, JString, required = false,
                                 default = nil)
  if valid_617174 != nil:
    section.add "X-Amz-Security-Token", valid_617174
  var valid_617175 = header.getOrDefault("X-Amz-Algorithm")
  valid_617175 = validateParameter(valid_617175, JString, required = false,
                                 default = nil)
  if valid_617175 != nil:
    section.add "X-Amz-Algorithm", valid_617175
  var valid_617176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617176 = validateParameter(valid_617176, JString, required = false,
                                 default = nil)
  if valid_617176 != nil:
    section.add "X-Amz-SignedHeaders", valid_617176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617177: Call_GetRemoveRoleFromInstanceProfile_617163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_617177.validator(path, query, header, formData, body)
  let scheme = call_617177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617177.url(scheme.get, call_617177.host, call_617177.base,
                         call_617177.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617177, url, valid)

proc call*(call_617178: Call_GetRemoveRoleFromInstanceProfile_617163;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_617179 = newJObject()
  add(query_617179, "RoleName", newJString(RoleName))
  add(query_617179, "Action", newJString(Action))
  add(query_617179, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_617179, "Version", newJString(Version))
  result = call_617178.call(nil, query_617179, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_617163(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_617164, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_617165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_617215 = ref object of OpenApiRestCall_612658
proc url_PostRemoveUserFromGroup_617217(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveUserFromGroup_617216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617218 = query.getOrDefault("Action")
  valid_617218 = validateParameter(valid_617218, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_617218 != nil:
    section.add "Action", valid_617218
  var valid_617219 = query.getOrDefault("Version")
  valid_617219 = validateParameter(valid_617219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617219 != nil:
    section.add "Version", valid_617219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617220 = header.getOrDefault("X-Amz-Signature")
  valid_617220 = validateParameter(valid_617220, JString, required = false,
                                 default = nil)
  if valid_617220 != nil:
    section.add "X-Amz-Signature", valid_617220
  var valid_617221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617221 = validateParameter(valid_617221, JString, required = false,
                                 default = nil)
  if valid_617221 != nil:
    section.add "X-Amz-Content-Sha256", valid_617221
  var valid_617222 = header.getOrDefault("X-Amz-Date")
  valid_617222 = validateParameter(valid_617222, JString, required = false,
                                 default = nil)
  if valid_617222 != nil:
    section.add "X-Amz-Date", valid_617222
  var valid_617223 = header.getOrDefault("X-Amz-Credential")
  valid_617223 = validateParameter(valid_617223, JString, required = false,
                                 default = nil)
  if valid_617223 != nil:
    section.add "X-Amz-Credential", valid_617223
  var valid_617224 = header.getOrDefault("X-Amz-Security-Token")
  valid_617224 = validateParameter(valid_617224, JString, required = false,
                                 default = nil)
  if valid_617224 != nil:
    section.add "X-Amz-Security-Token", valid_617224
  var valid_617225 = header.getOrDefault("X-Amz-Algorithm")
  valid_617225 = validateParameter(valid_617225, JString, required = false,
                                 default = nil)
  if valid_617225 != nil:
    section.add "X-Amz-Algorithm", valid_617225
  var valid_617226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617226 = validateParameter(valid_617226, JString, required = false,
                                 default = nil)
  if valid_617226 != nil:
    section.add "X-Amz-SignedHeaders", valid_617226
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_617227 = formData.getOrDefault("GroupName")
  valid_617227 = validateParameter(valid_617227, JString, required = true,
                                 default = nil)
  if valid_617227 != nil:
    section.add "GroupName", valid_617227
  var valid_617228 = formData.getOrDefault("UserName")
  valid_617228 = validateParameter(valid_617228, JString, required = true,
                                 default = nil)
  if valid_617228 != nil:
    section.add "UserName", valid_617228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617229: Call_PostRemoveUserFromGroup_617215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_617229.validator(path, query, header, formData, body)
  let scheme = call_617229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617229.url(scheme.get, call_617229.host, call_617229.base,
                         call_617229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617229, url, valid)

proc call*(call_617230: Call_PostRemoveUserFromGroup_617215; GroupName: string;
          UserName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617231 = newJObject()
  var formData_617232 = newJObject()
  add(formData_617232, "GroupName", newJString(GroupName))
  add(formData_617232, "UserName", newJString(UserName))
  add(query_617231, "Action", newJString(Action))
  add(query_617231, "Version", newJString(Version))
  result = call_617230.call(nil, query_617231, nil, formData_617232, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_617215(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_617216, base: "/",
    url: url_PostRemoveUserFromGroup_617217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_617198 = ref object of OpenApiRestCall_612658
proc url_GetRemoveUserFromGroup_617200(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveUserFromGroup_617199(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617201 = query.getOrDefault("UserName")
  valid_617201 = validateParameter(valid_617201, JString, required = true,
                                 default = nil)
  if valid_617201 != nil:
    section.add "UserName", valid_617201
  var valid_617202 = query.getOrDefault("GroupName")
  valid_617202 = validateParameter(valid_617202, JString, required = true,
                                 default = nil)
  if valid_617202 != nil:
    section.add "GroupName", valid_617202
  var valid_617203 = query.getOrDefault("Action")
  valid_617203 = validateParameter(valid_617203, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_617203 != nil:
    section.add "Action", valid_617203
  var valid_617204 = query.getOrDefault("Version")
  valid_617204 = validateParameter(valid_617204, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617204 != nil:
    section.add "Version", valid_617204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617205 = header.getOrDefault("X-Amz-Signature")
  valid_617205 = validateParameter(valid_617205, JString, required = false,
                                 default = nil)
  if valid_617205 != nil:
    section.add "X-Amz-Signature", valid_617205
  var valid_617206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617206 = validateParameter(valid_617206, JString, required = false,
                                 default = nil)
  if valid_617206 != nil:
    section.add "X-Amz-Content-Sha256", valid_617206
  var valid_617207 = header.getOrDefault("X-Amz-Date")
  valid_617207 = validateParameter(valid_617207, JString, required = false,
                                 default = nil)
  if valid_617207 != nil:
    section.add "X-Amz-Date", valid_617207
  var valid_617208 = header.getOrDefault("X-Amz-Credential")
  valid_617208 = validateParameter(valid_617208, JString, required = false,
                                 default = nil)
  if valid_617208 != nil:
    section.add "X-Amz-Credential", valid_617208
  var valid_617209 = header.getOrDefault("X-Amz-Security-Token")
  valid_617209 = validateParameter(valid_617209, JString, required = false,
                                 default = nil)
  if valid_617209 != nil:
    section.add "X-Amz-Security-Token", valid_617209
  var valid_617210 = header.getOrDefault("X-Amz-Algorithm")
  valid_617210 = validateParameter(valid_617210, JString, required = false,
                                 default = nil)
  if valid_617210 != nil:
    section.add "X-Amz-Algorithm", valid_617210
  var valid_617211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617211 = validateParameter(valid_617211, JString, required = false,
                                 default = nil)
  if valid_617211 != nil:
    section.add "X-Amz-SignedHeaders", valid_617211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617212: Call_GetRemoveUserFromGroup_617198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_617212.validator(path, query, header, formData, body)
  let scheme = call_617212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617212.url(scheme.get, call_617212.host, call_617212.base,
                         call_617212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617212, url, valid)

proc call*(call_617213: Call_GetRemoveUserFromGroup_617198; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617214 = newJObject()
  add(query_617214, "UserName", newJString(UserName))
  add(query_617214, "GroupName", newJString(GroupName))
  add(query_617214, "Action", newJString(Action))
  add(query_617214, "Version", newJString(Version))
  result = call_617213.call(nil, query_617214, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_617198(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_617199, base: "/",
    url: url_GetRemoveUserFromGroup_617200, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_617250 = ref object of OpenApiRestCall_612658
proc url_PostResetServiceSpecificCredential_617252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetServiceSpecificCredential_617251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617253 = query.getOrDefault("Action")
  valid_617253 = validateParameter(valid_617253, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_617253 != nil:
    section.add "Action", valid_617253
  var valid_617254 = query.getOrDefault("Version")
  valid_617254 = validateParameter(valid_617254, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617254 != nil:
    section.add "Version", valid_617254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617255 = header.getOrDefault("X-Amz-Signature")
  valid_617255 = validateParameter(valid_617255, JString, required = false,
                                 default = nil)
  if valid_617255 != nil:
    section.add "X-Amz-Signature", valid_617255
  var valid_617256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617256 = validateParameter(valid_617256, JString, required = false,
                                 default = nil)
  if valid_617256 != nil:
    section.add "X-Amz-Content-Sha256", valid_617256
  var valid_617257 = header.getOrDefault("X-Amz-Date")
  valid_617257 = validateParameter(valid_617257, JString, required = false,
                                 default = nil)
  if valid_617257 != nil:
    section.add "X-Amz-Date", valid_617257
  var valid_617258 = header.getOrDefault("X-Amz-Credential")
  valid_617258 = validateParameter(valid_617258, JString, required = false,
                                 default = nil)
  if valid_617258 != nil:
    section.add "X-Amz-Credential", valid_617258
  var valid_617259 = header.getOrDefault("X-Amz-Security-Token")
  valid_617259 = validateParameter(valid_617259, JString, required = false,
                                 default = nil)
  if valid_617259 != nil:
    section.add "X-Amz-Security-Token", valid_617259
  var valid_617260 = header.getOrDefault("X-Amz-Algorithm")
  valid_617260 = validateParameter(valid_617260, JString, required = false,
                                 default = nil)
  if valid_617260 != nil:
    section.add "X-Amz-Algorithm", valid_617260
  var valid_617261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617261 = validateParameter(valid_617261, JString, required = false,
                                 default = nil)
  if valid_617261 != nil:
    section.add "X-Amz-SignedHeaders", valid_617261
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_617262 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_617262 = validateParameter(valid_617262, JString, required = true,
                                 default = nil)
  if valid_617262 != nil:
    section.add "ServiceSpecificCredentialId", valid_617262
  var valid_617263 = formData.getOrDefault("UserName")
  valid_617263 = validateParameter(valid_617263, JString, required = false,
                                 default = nil)
  if valid_617263 != nil:
    section.add "UserName", valid_617263
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617264: Call_PostResetServiceSpecificCredential_617250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_617264.validator(path, query, header, formData, body)
  let scheme = call_617264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617264.url(scheme.get, call_617264.host, call_617264.base,
                         call_617264.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617264, url, valid)

proc call*(call_617265: Call_PostResetServiceSpecificCredential_617250;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617266 = newJObject()
  var formData_617267 = newJObject()
  add(formData_617267, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_617267, "UserName", newJString(UserName))
  add(query_617266, "Action", newJString(Action))
  add(query_617266, "Version", newJString(Version))
  result = call_617265.call(nil, query_617266, nil, formData_617267, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_617250(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_617251, base: "/",
    url: url_PostResetServiceSpecificCredential_617252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_617233 = ref object of OpenApiRestCall_612658
proc url_GetResetServiceSpecificCredential_617235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetServiceSpecificCredential_617234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617236 = query.getOrDefault("UserName")
  valid_617236 = validateParameter(valid_617236, JString, required = false,
                                 default = nil)
  if valid_617236 != nil:
    section.add "UserName", valid_617236
  assert query != nil, "query argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_617237 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_617237 = validateParameter(valid_617237, JString, required = true,
                                 default = nil)
  if valid_617237 != nil:
    section.add "ServiceSpecificCredentialId", valid_617237
  var valid_617238 = query.getOrDefault("Action")
  valid_617238 = validateParameter(valid_617238, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_617238 != nil:
    section.add "Action", valid_617238
  var valid_617239 = query.getOrDefault("Version")
  valid_617239 = validateParameter(valid_617239, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617239 != nil:
    section.add "Version", valid_617239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617240 = header.getOrDefault("X-Amz-Signature")
  valid_617240 = validateParameter(valid_617240, JString, required = false,
                                 default = nil)
  if valid_617240 != nil:
    section.add "X-Amz-Signature", valid_617240
  var valid_617241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617241 = validateParameter(valid_617241, JString, required = false,
                                 default = nil)
  if valid_617241 != nil:
    section.add "X-Amz-Content-Sha256", valid_617241
  var valid_617242 = header.getOrDefault("X-Amz-Date")
  valid_617242 = validateParameter(valid_617242, JString, required = false,
                                 default = nil)
  if valid_617242 != nil:
    section.add "X-Amz-Date", valid_617242
  var valid_617243 = header.getOrDefault("X-Amz-Credential")
  valid_617243 = validateParameter(valid_617243, JString, required = false,
                                 default = nil)
  if valid_617243 != nil:
    section.add "X-Amz-Credential", valid_617243
  var valid_617244 = header.getOrDefault("X-Amz-Security-Token")
  valid_617244 = validateParameter(valid_617244, JString, required = false,
                                 default = nil)
  if valid_617244 != nil:
    section.add "X-Amz-Security-Token", valid_617244
  var valid_617245 = header.getOrDefault("X-Amz-Algorithm")
  valid_617245 = validateParameter(valid_617245, JString, required = false,
                                 default = nil)
  if valid_617245 != nil:
    section.add "X-Amz-Algorithm", valid_617245
  var valid_617246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617246 = validateParameter(valid_617246, JString, required = false,
                                 default = nil)
  if valid_617246 != nil:
    section.add "X-Amz-SignedHeaders", valid_617246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617247: Call_GetResetServiceSpecificCredential_617233;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_617247.validator(path, query, header, formData, body)
  let scheme = call_617247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617247.url(scheme.get, call_617247.host, call_617247.base,
                         call_617247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617247, url, valid)

proc call*(call_617248: Call_GetResetServiceSpecificCredential_617233;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617249 = newJObject()
  add(query_617249, "UserName", newJString(UserName))
  add(query_617249, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_617249, "Action", newJString(Action))
  add(query_617249, "Version", newJString(Version))
  result = call_617248.call(nil, query_617249, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_617233(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_617234, base: "/",
    url: url_GetResetServiceSpecificCredential_617235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_617287 = ref object of OpenApiRestCall_612658
proc url_PostResyncMFADevice_617289(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResyncMFADevice_617288(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617290 = query.getOrDefault("Action")
  valid_617290 = validateParameter(valid_617290, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_617290 != nil:
    section.add "Action", valid_617290
  var valid_617291 = query.getOrDefault("Version")
  valid_617291 = validateParameter(valid_617291, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617291 != nil:
    section.add "Version", valid_617291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617292 = header.getOrDefault("X-Amz-Signature")
  valid_617292 = validateParameter(valid_617292, JString, required = false,
                                 default = nil)
  if valid_617292 != nil:
    section.add "X-Amz-Signature", valid_617292
  var valid_617293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617293 = validateParameter(valid_617293, JString, required = false,
                                 default = nil)
  if valid_617293 != nil:
    section.add "X-Amz-Content-Sha256", valid_617293
  var valid_617294 = header.getOrDefault("X-Amz-Date")
  valid_617294 = validateParameter(valid_617294, JString, required = false,
                                 default = nil)
  if valid_617294 != nil:
    section.add "X-Amz-Date", valid_617294
  var valid_617295 = header.getOrDefault("X-Amz-Credential")
  valid_617295 = validateParameter(valid_617295, JString, required = false,
                                 default = nil)
  if valid_617295 != nil:
    section.add "X-Amz-Credential", valid_617295
  var valid_617296 = header.getOrDefault("X-Amz-Security-Token")
  valid_617296 = validateParameter(valid_617296, JString, required = false,
                                 default = nil)
  if valid_617296 != nil:
    section.add "X-Amz-Security-Token", valid_617296
  var valid_617297 = header.getOrDefault("X-Amz-Algorithm")
  valid_617297 = validateParameter(valid_617297, JString, required = false,
                                 default = nil)
  if valid_617297 != nil:
    section.add "X-Amz-Algorithm", valid_617297
  var valid_617298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617298 = validateParameter(valid_617298, JString, required = false,
                                 default = nil)
  if valid_617298 != nil:
    section.add "X-Amz-SignedHeaders", valid_617298
  result.add "header", section
  ## parameters in `formData` object:
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `AuthenticationCode2` field"
  var valid_617299 = formData.getOrDefault("AuthenticationCode2")
  valid_617299 = validateParameter(valid_617299, JString, required = true,
                                 default = nil)
  if valid_617299 != nil:
    section.add "AuthenticationCode2", valid_617299
  var valid_617300 = formData.getOrDefault("SerialNumber")
  valid_617300 = validateParameter(valid_617300, JString, required = true,
                                 default = nil)
  if valid_617300 != nil:
    section.add "SerialNumber", valid_617300
  var valid_617301 = formData.getOrDefault("UserName")
  valid_617301 = validateParameter(valid_617301, JString, required = true,
                                 default = nil)
  if valid_617301 != nil:
    section.add "UserName", valid_617301
  var valid_617302 = formData.getOrDefault("AuthenticationCode1")
  valid_617302 = validateParameter(valid_617302, JString, required = true,
                                 default = nil)
  if valid_617302 != nil:
    section.add "AuthenticationCode1", valid_617302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617303: Call_PostResyncMFADevice_617287; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617303.validator(path, query, header, formData, body)
  let scheme = call_617303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617303.url(scheme.get, call_617303.host, call_617303.base,
                         call_617303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617303, url, valid)

proc call*(call_617304: Call_PostResyncMFADevice_617287;
          AuthenticationCode2: string; SerialNumber: string; UserName: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_617305 = newJObject()
  var formData_617306 = newJObject()
  add(formData_617306, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(formData_617306, "SerialNumber", newJString(SerialNumber))
  add(formData_617306, "UserName", newJString(UserName))
  add(query_617305, "Action", newJString(Action))
  add(formData_617306, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_617305, "Version", newJString(Version))
  result = call_617304.call(nil, query_617305, nil, formData_617306, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_617287(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_617288, base: "/",
    url: url_PostResyncMFADevice_617289, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_617268 = ref object of OpenApiRestCall_612658
proc url_GetResyncMFADevice_617270(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResyncMFADevice_617269(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617271 = query.getOrDefault("UserName")
  valid_617271 = validateParameter(valid_617271, JString, required = true,
                                 default = nil)
  if valid_617271 != nil:
    section.add "UserName", valid_617271
  var valid_617272 = query.getOrDefault("AuthenticationCode1")
  valid_617272 = validateParameter(valid_617272, JString, required = true,
                                 default = nil)
  if valid_617272 != nil:
    section.add "AuthenticationCode1", valid_617272
  var valid_617273 = query.getOrDefault("AuthenticationCode2")
  valid_617273 = validateParameter(valid_617273, JString, required = true,
                                 default = nil)
  if valid_617273 != nil:
    section.add "AuthenticationCode2", valid_617273
  var valid_617274 = query.getOrDefault("SerialNumber")
  valid_617274 = validateParameter(valid_617274, JString, required = true,
                                 default = nil)
  if valid_617274 != nil:
    section.add "SerialNumber", valid_617274
  var valid_617275 = query.getOrDefault("Action")
  valid_617275 = validateParameter(valid_617275, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_617275 != nil:
    section.add "Action", valid_617275
  var valid_617276 = query.getOrDefault("Version")
  valid_617276 = validateParameter(valid_617276, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617276 != nil:
    section.add "Version", valid_617276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617277 = header.getOrDefault("X-Amz-Signature")
  valid_617277 = validateParameter(valid_617277, JString, required = false,
                                 default = nil)
  if valid_617277 != nil:
    section.add "X-Amz-Signature", valid_617277
  var valid_617278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617278 = validateParameter(valid_617278, JString, required = false,
                                 default = nil)
  if valid_617278 != nil:
    section.add "X-Amz-Content-Sha256", valid_617278
  var valid_617279 = header.getOrDefault("X-Amz-Date")
  valid_617279 = validateParameter(valid_617279, JString, required = false,
                                 default = nil)
  if valid_617279 != nil:
    section.add "X-Amz-Date", valid_617279
  var valid_617280 = header.getOrDefault("X-Amz-Credential")
  valid_617280 = validateParameter(valid_617280, JString, required = false,
                                 default = nil)
  if valid_617280 != nil:
    section.add "X-Amz-Credential", valid_617280
  var valid_617281 = header.getOrDefault("X-Amz-Security-Token")
  valid_617281 = validateParameter(valid_617281, JString, required = false,
                                 default = nil)
  if valid_617281 != nil:
    section.add "X-Amz-Security-Token", valid_617281
  var valid_617282 = header.getOrDefault("X-Amz-Algorithm")
  valid_617282 = validateParameter(valid_617282, JString, required = false,
                                 default = nil)
  if valid_617282 != nil:
    section.add "X-Amz-Algorithm", valid_617282
  var valid_617283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617283 = validateParameter(valid_617283, JString, required = false,
                                 default = nil)
  if valid_617283 != nil:
    section.add "X-Amz-SignedHeaders", valid_617283
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617284: Call_GetResyncMFADevice_617268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617284.validator(path, query, header, formData, body)
  let scheme = call_617284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617284.url(scheme.get, call_617284.host, call_617284.base,
                         call_617284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617284, url, valid)

proc call*(call_617285: Call_GetResyncMFADevice_617268; UserName: string;
          AuthenticationCode1: string; AuthenticationCode2: string;
          SerialNumber: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617286 = newJObject()
  add(query_617286, "UserName", newJString(UserName))
  add(query_617286, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_617286, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_617286, "SerialNumber", newJString(SerialNumber))
  add(query_617286, "Action", newJString(Action))
  add(query_617286, "Version", newJString(Version))
  result = call_617285.call(nil, query_617286, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_617268(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_617269,
    base: "/", url: url_GetResyncMFADevice_617270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_617324 = ref object of OpenApiRestCall_612658
proc url_PostSetDefaultPolicyVersion_617326(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetDefaultPolicyVersion_617325(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617327 = query.getOrDefault("Action")
  valid_617327 = validateParameter(valid_617327, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_617327 != nil:
    section.add "Action", valid_617327
  var valid_617328 = query.getOrDefault("Version")
  valid_617328 = validateParameter(valid_617328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617328 != nil:
    section.add "Version", valid_617328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617329 = header.getOrDefault("X-Amz-Signature")
  valid_617329 = validateParameter(valid_617329, JString, required = false,
                                 default = nil)
  if valid_617329 != nil:
    section.add "X-Amz-Signature", valid_617329
  var valid_617330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617330 = validateParameter(valid_617330, JString, required = false,
                                 default = nil)
  if valid_617330 != nil:
    section.add "X-Amz-Content-Sha256", valid_617330
  var valid_617331 = header.getOrDefault("X-Amz-Date")
  valid_617331 = validateParameter(valid_617331, JString, required = false,
                                 default = nil)
  if valid_617331 != nil:
    section.add "X-Amz-Date", valid_617331
  var valid_617332 = header.getOrDefault("X-Amz-Credential")
  valid_617332 = validateParameter(valid_617332, JString, required = false,
                                 default = nil)
  if valid_617332 != nil:
    section.add "X-Amz-Credential", valid_617332
  var valid_617333 = header.getOrDefault("X-Amz-Security-Token")
  valid_617333 = validateParameter(valid_617333, JString, required = false,
                                 default = nil)
  if valid_617333 != nil:
    section.add "X-Amz-Security-Token", valid_617333
  var valid_617334 = header.getOrDefault("X-Amz-Algorithm")
  valid_617334 = validateParameter(valid_617334, JString, required = false,
                                 default = nil)
  if valid_617334 != nil:
    section.add "X-Amz-Algorithm", valid_617334
  var valid_617335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617335 = validateParameter(valid_617335, JString, required = false,
                                 default = nil)
  if valid_617335 != nil:
    section.add "X-Amz-SignedHeaders", valid_617335
  result.add "header", section
  ## parameters in `formData` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `VersionId` field"
  var valid_617336 = formData.getOrDefault("VersionId")
  valid_617336 = validateParameter(valid_617336, JString, required = true,
                                 default = nil)
  if valid_617336 != nil:
    section.add "VersionId", valid_617336
  var valid_617337 = formData.getOrDefault("PolicyArn")
  valid_617337 = validateParameter(valid_617337, JString, required = true,
                                 default = nil)
  if valid_617337 != nil:
    section.add "PolicyArn", valid_617337
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617338: Call_PostSetDefaultPolicyVersion_617324; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617338.validator(path, query, header, formData, body)
  let scheme = call_617338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617338.url(scheme.get, call_617338.host, call_617338.base,
                         call_617338.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617338, url, valid)

proc call*(call_617339: Call_PostSetDefaultPolicyVersion_617324; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617340 = newJObject()
  var formData_617341 = newJObject()
  add(formData_617341, "VersionId", newJString(VersionId))
  add(formData_617341, "PolicyArn", newJString(PolicyArn))
  add(query_617340, "Action", newJString(Action))
  add(query_617340, "Version", newJString(Version))
  result = call_617339.call(nil, query_617340, nil, formData_617341, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_617324(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_617325, base: "/",
    url: url_PostSetDefaultPolicyVersion_617326,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_617307 = ref object of OpenApiRestCall_612658
proc url_GetSetDefaultPolicyVersion_617309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetDefaultPolicyVersion_617308(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `VersionId` field"
  var valid_617310 = query.getOrDefault("VersionId")
  valid_617310 = validateParameter(valid_617310, JString, required = true,
                                 default = nil)
  if valid_617310 != nil:
    section.add "VersionId", valid_617310
  var valid_617311 = query.getOrDefault("PolicyArn")
  valid_617311 = validateParameter(valid_617311, JString, required = true,
                                 default = nil)
  if valid_617311 != nil:
    section.add "PolicyArn", valid_617311
  var valid_617312 = query.getOrDefault("Action")
  valid_617312 = validateParameter(valid_617312, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_617312 != nil:
    section.add "Action", valid_617312
  var valid_617313 = query.getOrDefault("Version")
  valid_617313 = validateParameter(valid_617313, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617313 != nil:
    section.add "Version", valid_617313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617314 = header.getOrDefault("X-Amz-Signature")
  valid_617314 = validateParameter(valid_617314, JString, required = false,
                                 default = nil)
  if valid_617314 != nil:
    section.add "X-Amz-Signature", valid_617314
  var valid_617315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617315 = validateParameter(valid_617315, JString, required = false,
                                 default = nil)
  if valid_617315 != nil:
    section.add "X-Amz-Content-Sha256", valid_617315
  var valid_617316 = header.getOrDefault("X-Amz-Date")
  valid_617316 = validateParameter(valid_617316, JString, required = false,
                                 default = nil)
  if valid_617316 != nil:
    section.add "X-Amz-Date", valid_617316
  var valid_617317 = header.getOrDefault("X-Amz-Credential")
  valid_617317 = validateParameter(valid_617317, JString, required = false,
                                 default = nil)
  if valid_617317 != nil:
    section.add "X-Amz-Credential", valid_617317
  var valid_617318 = header.getOrDefault("X-Amz-Security-Token")
  valid_617318 = validateParameter(valid_617318, JString, required = false,
                                 default = nil)
  if valid_617318 != nil:
    section.add "X-Amz-Security-Token", valid_617318
  var valid_617319 = header.getOrDefault("X-Amz-Algorithm")
  valid_617319 = validateParameter(valid_617319, JString, required = false,
                                 default = nil)
  if valid_617319 != nil:
    section.add "X-Amz-Algorithm", valid_617319
  var valid_617320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617320 = validateParameter(valid_617320, JString, required = false,
                                 default = nil)
  if valid_617320 != nil:
    section.add "X-Amz-SignedHeaders", valid_617320
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617321: Call_GetSetDefaultPolicyVersion_617307; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617321.validator(path, query, header, formData, body)
  let scheme = call_617321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617321.url(scheme.get, call_617321.host, call_617321.base,
                         call_617321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617321, url, valid)

proc call*(call_617322: Call_GetSetDefaultPolicyVersion_617307; VersionId: string;
          PolicyArn: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617323 = newJObject()
  add(query_617323, "VersionId", newJString(VersionId))
  add(query_617323, "PolicyArn", newJString(PolicyArn))
  add(query_617323, "Action", newJString(Action))
  add(query_617323, "Version", newJString(Version))
  result = call_617322.call(nil, query_617323, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_617307(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_617308, base: "/",
    url: url_GetSetDefaultPolicyVersion_617309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_617358 = ref object of OpenApiRestCall_612658
proc url_PostSetSecurityTokenServicePreferences_617360(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSetSecurityTokenServicePreferences_617359(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617361 = query.getOrDefault("Action")
  valid_617361 = validateParameter(valid_617361, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_617361 != nil:
    section.add "Action", valid_617361
  var valid_617362 = query.getOrDefault("Version")
  valid_617362 = validateParameter(valid_617362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617362 != nil:
    section.add "Version", valid_617362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617363 = header.getOrDefault("X-Amz-Signature")
  valid_617363 = validateParameter(valid_617363, JString, required = false,
                                 default = nil)
  if valid_617363 != nil:
    section.add "X-Amz-Signature", valid_617363
  var valid_617364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617364 = validateParameter(valid_617364, JString, required = false,
                                 default = nil)
  if valid_617364 != nil:
    section.add "X-Amz-Content-Sha256", valid_617364
  var valid_617365 = header.getOrDefault("X-Amz-Date")
  valid_617365 = validateParameter(valid_617365, JString, required = false,
                                 default = nil)
  if valid_617365 != nil:
    section.add "X-Amz-Date", valid_617365
  var valid_617366 = header.getOrDefault("X-Amz-Credential")
  valid_617366 = validateParameter(valid_617366, JString, required = false,
                                 default = nil)
  if valid_617366 != nil:
    section.add "X-Amz-Credential", valid_617366
  var valid_617367 = header.getOrDefault("X-Amz-Security-Token")
  valid_617367 = validateParameter(valid_617367, JString, required = false,
                                 default = nil)
  if valid_617367 != nil:
    section.add "X-Amz-Security-Token", valid_617367
  var valid_617368 = header.getOrDefault("X-Amz-Algorithm")
  valid_617368 = validateParameter(valid_617368, JString, required = false,
                                 default = nil)
  if valid_617368 != nil:
    section.add "X-Amz-Algorithm", valid_617368
  var valid_617369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617369 = validateParameter(valid_617369, JString, required = false,
                                 default = nil)
  if valid_617369 != nil:
    section.add "X-Amz-SignedHeaders", valid_617369
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_617370 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_617370 = validateParameter(valid_617370, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_617370 != nil:
    section.add "GlobalEndpointTokenVersion", valid_617370
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617371: Call_PostSetSecurityTokenServicePreferences_617358;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_617371.validator(path, query, header, formData, body)
  let scheme = call_617371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617371.url(scheme.get, call_617371.host, call_617371.base,
                         call_617371.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617371, url, valid)

proc call*(call_617372: Call_PostSetSecurityTokenServicePreferences_617358;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617373 = newJObject()
  var formData_617374 = newJObject()
  add(formData_617374, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_617373, "Action", newJString(Action))
  add(query_617373, "Version", newJString(Version))
  result = call_617372.call(nil, query_617373, nil, formData_617374, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_617358(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_617359, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_617360,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_617342 = ref object of OpenApiRestCall_612658
proc url_GetSetSecurityTokenServicePreferences_617344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSetSecurityTokenServicePreferences_617343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617345 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_617345 = validateParameter(valid_617345, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_617345 != nil:
    section.add "GlobalEndpointTokenVersion", valid_617345
  var valid_617346 = query.getOrDefault("Action")
  valid_617346 = validateParameter(valid_617346, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_617346 != nil:
    section.add "Action", valid_617346
  var valid_617347 = query.getOrDefault("Version")
  valid_617347 = validateParameter(valid_617347, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617347 != nil:
    section.add "Version", valid_617347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617348 = header.getOrDefault("X-Amz-Signature")
  valid_617348 = validateParameter(valid_617348, JString, required = false,
                                 default = nil)
  if valid_617348 != nil:
    section.add "X-Amz-Signature", valid_617348
  var valid_617349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617349 = validateParameter(valid_617349, JString, required = false,
                                 default = nil)
  if valid_617349 != nil:
    section.add "X-Amz-Content-Sha256", valid_617349
  var valid_617350 = header.getOrDefault("X-Amz-Date")
  valid_617350 = validateParameter(valid_617350, JString, required = false,
                                 default = nil)
  if valid_617350 != nil:
    section.add "X-Amz-Date", valid_617350
  var valid_617351 = header.getOrDefault("X-Amz-Credential")
  valid_617351 = validateParameter(valid_617351, JString, required = false,
                                 default = nil)
  if valid_617351 != nil:
    section.add "X-Amz-Credential", valid_617351
  var valid_617352 = header.getOrDefault("X-Amz-Security-Token")
  valid_617352 = validateParameter(valid_617352, JString, required = false,
                                 default = nil)
  if valid_617352 != nil:
    section.add "X-Amz-Security-Token", valid_617352
  var valid_617353 = header.getOrDefault("X-Amz-Algorithm")
  valid_617353 = validateParameter(valid_617353, JString, required = false,
                                 default = nil)
  if valid_617353 != nil:
    section.add "X-Amz-Algorithm", valid_617353
  var valid_617354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617354 = validateParameter(valid_617354, JString, required = false,
                                 default = nil)
  if valid_617354 != nil:
    section.add "X-Amz-SignedHeaders", valid_617354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617355: Call_GetSetSecurityTokenServicePreferences_617342;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_617355.validator(path, query, header, formData, body)
  let scheme = call_617355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617355.url(scheme.get, call_617355.host, call_617355.base,
                         call_617355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617355, url, valid)

proc call*(call_617356: Call_GetSetSecurityTokenServicePreferences_617342;
          GlobalEndpointTokenVersion: string = "v1Token";
          Action: string = "SetSecurityTokenServicePreferences";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617357 = newJObject()
  add(query_617357, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_617357, "Action", newJString(Action))
  add(query_617357, "Version", newJString(Version))
  result = call_617356.call(nil, query_617357, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_617342(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_617343, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_617344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_617401 = ref object of OpenApiRestCall_612658
proc url_PostSimulateCustomPolicy_617403(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulateCustomPolicy_617402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617404 = query.getOrDefault("Action")
  valid_617404 = validateParameter(valid_617404, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_617404 != nil:
    section.add "Action", valid_617404
  var valid_617405 = query.getOrDefault("Version")
  valid_617405 = validateParameter(valid_617405, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617405 != nil:
    section.add "Version", valid_617405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617406 = header.getOrDefault("X-Amz-Signature")
  valid_617406 = validateParameter(valid_617406, JString, required = false,
                                 default = nil)
  if valid_617406 != nil:
    section.add "X-Amz-Signature", valid_617406
  var valid_617407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617407 = validateParameter(valid_617407, JString, required = false,
                                 default = nil)
  if valid_617407 != nil:
    section.add "X-Amz-Content-Sha256", valid_617407
  var valid_617408 = header.getOrDefault("X-Amz-Date")
  valid_617408 = validateParameter(valid_617408, JString, required = false,
                                 default = nil)
  if valid_617408 != nil:
    section.add "X-Amz-Date", valid_617408
  var valid_617409 = header.getOrDefault("X-Amz-Credential")
  valid_617409 = validateParameter(valid_617409, JString, required = false,
                                 default = nil)
  if valid_617409 != nil:
    section.add "X-Amz-Credential", valid_617409
  var valid_617410 = header.getOrDefault("X-Amz-Security-Token")
  valid_617410 = validateParameter(valid_617410, JString, required = false,
                                 default = nil)
  if valid_617410 != nil:
    section.add "X-Amz-Security-Token", valid_617410
  var valid_617411 = header.getOrDefault("X-Amz-Algorithm")
  valid_617411 = validateParameter(valid_617411, JString, required = false,
                                 default = nil)
  if valid_617411 != nil:
    section.add "X-Amz-Algorithm", valid_617411
  var valid_617412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617412 = validateParameter(valid_617412, JString, required = false,
                                 default = nil)
  if valid_617412 != nil:
    section.add "X-Amz-SignedHeaders", valid_617412
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  section = newJObject()
  var valid_617413 = formData.getOrDefault("ResourceArns")
  valid_617413 = validateParameter(valid_617413, JArray, required = false,
                                 default = nil)
  if valid_617413 != nil:
    section.add "ResourceArns", valid_617413
  var valid_617414 = formData.getOrDefault("ContextEntries")
  valid_617414 = validateParameter(valid_617414, JArray, required = false,
                                 default = nil)
  if valid_617414 != nil:
    section.add "ContextEntries", valid_617414
  var valid_617415 = formData.getOrDefault("CallerArn")
  valid_617415 = validateParameter(valid_617415, JString, required = false,
                                 default = nil)
  if valid_617415 != nil:
    section.add "CallerArn", valid_617415
  var valid_617416 = formData.getOrDefault("ResourceHandlingOption")
  valid_617416 = validateParameter(valid_617416, JString, required = false,
                                 default = nil)
  if valid_617416 != nil:
    section.add "ResourceHandlingOption", valid_617416
  var valid_617417 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_617417 = validateParameter(valid_617417, JArray, required = false,
                                 default = nil)
  if valid_617417 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_617417
  var valid_617418 = formData.getOrDefault("Marker")
  valid_617418 = validateParameter(valid_617418, JString, required = false,
                                 default = nil)
  if valid_617418 != nil:
    section.add "Marker", valid_617418
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_617419 = formData.getOrDefault("ActionNames")
  valid_617419 = validateParameter(valid_617419, JArray, required = true, default = nil)
  if valid_617419 != nil:
    section.add "ActionNames", valid_617419
  var valid_617420 = formData.getOrDefault("MaxItems")
  valid_617420 = validateParameter(valid_617420, JInt, required = false, default = nil)
  if valid_617420 != nil:
    section.add "MaxItems", valid_617420
  var valid_617421 = formData.getOrDefault("ResourcePolicy")
  valid_617421 = validateParameter(valid_617421, JString, required = false,
                                 default = nil)
  if valid_617421 != nil:
    section.add "ResourcePolicy", valid_617421
  var valid_617422 = formData.getOrDefault("PolicyInputList")
  valid_617422 = validateParameter(valid_617422, JArray, required = true, default = nil)
  if valid_617422 != nil:
    section.add "PolicyInputList", valid_617422
  var valid_617423 = formData.getOrDefault("ResourceOwner")
  valid_617423 = validateParameter(valid_617423, JString, required = false,
                                 default = nil)
  if valid_617423 != nil:
    section.add "ResourceOwner", valid_617423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617424: Call_PostSimulateCustomPolicy_617401; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_617424.validator(path, query, header, formData, body)
  let scheme = call_617424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617424.url(scheme.get, call_617424.host, call_617424.base,
                         call_617424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617424, url, valid)

proc call*(call_617425: Call_PostSimulateCustomPolicy_617401;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulateCustomPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          ResourceOwner: string = ""): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  var query_617426 = newJObject()
  var formData_617427 = newJObject()
  if ResourceArns != nil:
    formData_617427.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_617427.add "ContextEntries", ContextEntries
  add(formData_617427, "CallerArn", newJString(CallerArn))
  add(formData_617427, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_617427.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_617427, "Marker", newJString(Marker))
  if ActionNames != nil:
    formData_617427.add "ActionNames", ActionNames
  add(query_617426, "Action", newJString(Action))
  add(formData_617427, "MaxItems", newJInt(MaxItems))
  add(formData_617427, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_617426, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_617427.add "PolicyInputList", PolicyInputList
  add(formData_617427, "ResourceOwner", newJString(ResourceOwner))
  result = call_617425.call(nil, query_617426, nil, formData_617427, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_617401(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_617402, base: "/",
    url: url_PostSimulateCustomPolicy_617403, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_617375 = ref object of OpenApiRestCall_612658
proc url_GetSimulateCustomPolicy_617377(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulateCustomPolicy_617376(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_617378 = query.getOrDefault("Marker")
  valid_617378 = validateParameter(valid_617378, JString, required = false,
                                 default = nil)
  if valid_617378 != nil:
    section.add "Marker", valid_617378
  var valid_617379 = query.getOrDefault("ResourceOwner")
  valid_617379 = validateParameter(valid_617379, JString, required = false,
                                 default = nil)
  if valid_617379 != nil:
    section.add "ResourceOwner", valid_617379
  var valid_617380 = query.getOrDefault("MaxItems")
  valid_617380 = validateParameter(valid_617380, JInt, required = false, default = nil)
  if valid_617380 != nil:
    section.add "MaxItems", valid_617380
  var valid_617381 = query.getOrDefault("ResourceArns")
  valid_617381 = validateParameter(valid_617381, JArray, required = false,
                                 default = nil)
  if valid_617381 != nil:
    section.add "ResourceArns", valid_617381
  var valid_617382 = query.getOrDefault("ResourcePolicy")
  valid_617382 = validateParameter(valid_617382, JString, required = false,
                                 default = nil)
  if valid_617382 != nil:
    section.add "ResourcePolicy", valid_617382
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_617383 = query.getOrDefault("PolicyInputList")
  valid_617383 = validateParameter(valid_617383, JArray, required = true, default = nil)
  if valid_617383 != nil:
    section.add "PolicyInputList", valid_617383
  var valid_617384 = query.getOrDefault("CallerArn")
  valid_617384 = validateParameter(valid_617384, JString, required = false,
                                 default = nil)
  if valid_617384 != nil:
    section.add "CallerArn", valid_617384
  var valid_617385 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_617385 = validateParameter(valid_617385, JArray, required = false,
                                 default = nil)
  if valid_617385 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_617385
  var valid_617386 = query.getOrDefault("ResourceHandlingOption")
  valid_617386 = validateParameter(valid_617386, JString, required = false,
                                 default = nil)
  if valid_617386 != nil:
    section.add "ResourceHandlingOption", valid_617386
  var valid_617387 = query.getOrDefault("Action")
  valid_617387 = validateParameter(valid_617387, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_617387 != nil:
    section.add "Action", valid_617387
  var valid_617388 = query.getOrDefault("Version")
  valid_617388 = validateParameter(valid_617388, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617388 != nil:
    section.add "Version", valid_617388
  var valid_617389 = query.getOrDefault("ActionNames")
  valid_617389 = validateParameter(valid_617389, JArray, required = true, default = nil)
  if valid_617389 != nil:
    section.add "ActionNames", valid_617389
  var valid_617390 = query.getOrDefault("ContextEntries")
  valid_617390 = validateParameter(valid_617390, JArray, required = false,
                                 default = nil)
  if valid_617390 != nil:
    section.add "ContextEntries", valid_617390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617391 = header.getOrDefault("X-Amz-Signature")
  valid_617391 = validateParameter(valid_617391, JString, required = false,
                                 default = nil)
  if valid_617391 != nil:
    section.add "X-Amz-Signature", valid_617391
  var valid_617392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617392 = validateParameter(valid_617392, JString, required = false,
                                 default = nil)
  if valid_617392 != nil:
    section.add "X-Amz-Content-Sha256", valid_617392
  var valid_617393 = header.getOrDefault("X-Amz-Date")
  valid_617393 = validateParameter(valid_617393, JString, required = false,
                                 default = nil)
  if valid_617393 != nil:
    section.add "X-Amz-Date", valid_617393
  var valid_617394 = header.getOrDefault("X-Amz-Credential")
  valid_617394 = validateParameter(valid_617394, JString, required = false,
                                 default = nil)
  if valid_617394 != nil:
    section.add "X-Amz-Credential", valid_617394
  var valid_617395 = header.getOrDefault("X-Amz-Security-Token")
  valid_617395 = validateParameter(valid_617395, JString, required = false,
                                 default = nil)
  if valid_617395 != nil:
    section.add "X-Amz-Security-Token", valid_617395
  var valid_617396 = header.getOrDefault("X-Amz-Algorithm")
  valid_617396 = validateParameter(valid_617396, JString, required = false,
                                 default = nil)
  if valid_617396 != nil:
    section.add "X-Amz-Algorithm", valid_617396
  var valid_617397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617397 = validateParameter(valid_617397, JString, required = false,
                                 default = nil)
  if valid_617397 != nil:
    section.add "X-Amz-SignedHeaders", valid_617397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617398: Call_GetSimulateCustomPolicy_617375; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_617398.validator(path, query, header, formData, body)
  let scheme = call_617398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617398.url(scheme.get, call_617398.host, call_617398.base,
                         call_617398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617398, url, valid)

proc call*(call_617399: Call_GetSimulateCustomPolicy_617375;
          PolicyInputList: JsonNode; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulateCustomPolicy"; Version: string = "2010-05-08";
          ContextEntries: JsonNode = nil): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by AWS and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_617400 = newJObject()
  add(query_617400, "Marker", newJString(Marker))
  add(query_617400, "ResourceOwner", newJString(ResourceOwner))
  add(query_617400, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_617400.add "ResourceArns", ResourceArns
  add(query_617400, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_617400.add "PolicyInputList", PolicyInputList
  add(query_617400, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_617400.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_617400, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_617400, "Action", newJString(Action))
  add(query_617400, "Version", newJString(Version))
  if ActionNames != nil:
    query_617400.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_617400.add "ContextEntries", ContextEntries
  result = call_617399.call(nil, query_617400, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_617375(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_617376, base: "/",
    url: url_GetSimulateCustomPolicy_617377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_617455 = ref object of OpenApiRestCall_612658
proc url_PostSimulatePrincipalPolicy_617457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostSimulatePrincipalPolicy_617456(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617458 = query.getOrDefault("Action")
  valid_617458 = validateParameter(valid_617458, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_617458 != nil:
    section.add "Action", valid_617458
  var valid_617459 = query.getOrDefault("Version")
  valid_617459 = validateParameter(valid_617459, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617459 != nil:
    section.add "Version", valid_617459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617460 = header.getOrDefault("X-Amz-Signature")
  valid_617460 = validateParameter(valid_617460, JString, required = false,
                                 default = nil)
  if valid_617460 != nil:
    section.add "X-Amz-Signature", valid_617460
  var valid_617461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617461 = validateParameter(valid_617461, JString, required = false,
                                 default = nil)
  if valid_617461 != nil:
    section.add "X-Amz-Content-Sha256", valid_617461
  var valid_617462 = header.getOrDefault("X-Amz-Date")
  valid_617462 = validateParameter(valid_617462, JString, required = false,
                                 default = nil)
  if valid_617462 != nil:
    section.add "X-Amz-Date", valid_617462
  var valid_617463 = header.getOrDefault("X-Amz-Credential")
  valid_617463 = validateParameter(valid_617463, JString, required = false,
                                 default = nil)
  if valid_617463 != nil:
    section.add "X-Amz-Credential", valid_617463
  var valid_617464 = header.getOrDefault("X-Amz-Security-Token")
  valid_617464 = validateParameter(valid_617464, JString, required = false,
                                 default = nil)
  if valid_617464 != nil:
    section.add "X-Amz-Security-Token", valid_617464
  var valid_617465 = header.getOrDefault("X-Amz-Algorithm")
  valid_617465 = validateParameter(valid_617465, JString, required = false,
                                 default = nil)
  if valid_617465 != nil:
    section.add "X-Amz-Algorithm", valid_617465
  var valid_617466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617466 = validateParameter(valid_617466, JString, required = false,
                                 default = nil)
  if valid_617466 != nil:
    section.add "X-Amz-SignedHeaders", valid_617466
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  section = newJObject()
  var valid_617467 = formData.getOrDefault("ResourceArns")
  valid_617467 = validateParameter(valid_617467, JArray, required = false,
                                 default = nil)
  if valid_617467 != nil:
    section.add "ResourceArns", valid_617467
  var valid_617468 = formData.getOrDefault("ContextEntries")
  valid_617468 = validateParameter(valid_617468, JArray, required = false,
                                 default = nil)
  if valid_617468 != nil:
    section.add "ContextEntries", valid_617468
  var valid_617469 = formData.getOrDefault("CallerArn")
  valid_617469 = validateParameter(valid_617469, JString, required = false,
                                 default = nil)
  if valid_617469 != nil:
    section.add "CallerArn", valid_617469
  var valid_617470 = formData.getOrDefault("ResourceHandlingOption")
  valid_617470 = validateParameter(valid_617470, JString, required = false,
                                 default = nil)
  if valid_617470 != nil:
    section.add "ResourceHandlingOption", valid_617470
  var valid_617471 = formData.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_617471 = validateParameter(valid_617471, JArray, required = false,
                                 default = nil)
  if valid_617471 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_617471
  var valid_617472 = formData.getOrDefault("Marker")
  valid_617472 = validateParameter(valid_617472, JString, required = false,
                                 default = nil)
  if valid_617472 != nil:
    section.add "Marker", valid_617472
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_617473 = formData.getOrDefault("PolicySourceArn")
  valid_617473 = validateParameter(valid_617473, JString, required = true,
                                 default = nil)
  if valid_617473 != nil:
    section.add "PolicySourceArn", valid_617473
  var valid_617474 = formData.getOrDefault("ActionNames")
  valid_617474 = validateParameter(valid_617474, JArray, required = true, default = nil)
  if valid_617474 != nil:
    section.add "ActionNames", valid_617474
  var valid_617475 = formData.getOrDefault("MaxItems")
  valid_617475 = validateParameter(valid_617475, JInt, required = false, default = nil)
  if valid_617475 != nil:
    section.add "MaxItems", valid_617475
  var valid_617476 = formData.getOrDefault("ResourcePolicy")
  valid_617476 = validateParameter(valid_617476, JString, required = false,
                                 default = nil)
  if valid_617476 != nil:
    section.add "ResourcePolicy", valid_617476
  var valid_617477 = formData.getOrDefault("PolicyInputList")
  valid_617477 = validateParameter(valid_617477, JArray, required = false,
                                 default = nil)
  if valid_617477 != nil:
    section.add "PolicyInputList", valid_617477
  var valid_617478 = formData.getOrDefault("ResourceOwner")
  valid_617478 = validateParameter(valid_617478, JString, required = false,
                                 default = nil)
  if valid_617478 != nil:
    section.add "ResourceOwner", valid_617478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617479: Call_PostSimulatePrincipalPolicy_617455; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_617479.validator(path, query, header, formData, body)
  let scheme = call_617479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617479.url(scheme.get, call_617479.host, call_617479.base,
                         call_617479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617479, url, valid)

proc call*(call_617480: Call_PostSimulatePrincipalPolicy_617455;
          PolicySourceArn: string; ActionNames: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy"; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08";
          PolicyInputList: JsonNode = nil; ResourceOwner: string = ""): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  var query_617481 = newJObject()
  var formData_617482 = newJObject()
  if ResourceArns != nil:
    formData_617482.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_617482.add "ContextEntries", ContextEntries
  add(formData_617482, "CallerArn", newJString(CallerArn))
  add(formData_617482, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  if PermissionsBoundaryPolicyInputList != nil:
    formData_617482.add "PermissionsBoundaryPolicyInputList",
                       PermissionsBoundaryPolicyInputList
  add(formData_617482, "Marker", newJString(Marker))
  add(formData_617482, "PolicySourceArn", newJString(PolicySourceArn))
  if ActionNames != nil:
    formData_617482.add "ActionNames", ActionNames
  add(query_617481, "Action", newJString(Action))
  add(formData_617482, "MaxItems", newJInt(MaxItems))
  add(formData_617482, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_617481, "Version", newJString(Version))
  if PolicyInputList != nil:
    formData_617482.add "PolicyInputList", PolicyInputList
  add(formData_617482, "ResourceOwner", newJString(ResourceOwner))
  result = call_617480.call(nil, query_617481, nil, formData_617482, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_617455(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_617456, base: "/",
    url: url_PostSimulatePrincipalPolicy_617457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_617428 = ref object of OpenApiRestCall_612658
proc url_GetSimulatePrincipalPolicy_617430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetSimulatePrincipalPolicy_617429(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  section = newJObject()
  var valid_617431 = query.getOrDefault("Marker")
  valid_617431 = validateParameter(valid_617431, JString, required = false,
                                 default = nil)
  if valid_617431 != nil:
    section.add "Marker", valid_617431
  var valid_617432 = query.getOrDefault("ResourceOwner")
  valid_617432 = validateParameter(valid_617432, JString, required = false,
                                 default = nil)
  if valid_617432 != nil:
    section.add "ResourceOwner", valid_617432
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_617433 = query.getOrDefault("PolicySourceArn")
  valid_617433 = validateParameter(valid_617433, JString, required = true,
                                 default = nil)
  if valid_617433 != nil:
    section.add "PolicySourceArn", valid_617433
  var valid_617434 = query.getOrDefault("MaxItems")
  valid_617434 = validateParameter(valid_617434, JInt, required = false, default = nil)
  if valid_617434 != nil:
    section.add "MaxItems", valid_617434
  var valid_617435 = query.getOrDefault("ResourceArns")
  valid_617435 = validateParameter(valid_617435, JArray, required = false,
                                 default = nil)
  if valid_617435 != nil:
    section.add "ResourceArns", valid_617435
  var valid_617436 = query.getOrDefault("ResourcePolicy")
  valid_617436 = validateParameter(valid_617436, JString, required = false,
                                 default = nil)
  if valid_617436 != nil:
    section.add "ResourcePolicy", valid_617436
  var valid_617437 = query.getOrDefault("PolicyInputList")
  valid_617437 = validateParameter(valid_617437, JArray, required = false,
                                 default = nil)
  if valid_617437 != nil:
    section.add "PolicyInputList", valid_617437
  var valid_617438 = query.getOrDefault("CallerArn")
  valid_617438 = validateParameter(valid_617438, JString, required = false,
                                 default = nil)
  if valid_617438 != nil:
    section.add "CallerArn", valid_617438
  var valid_617439 = query.getOrDefault("PermissionsBoundaryPolicyInputList")
  valid_617439 = validateParameter(valid_617439, JArray, required = false,
                                 default = nil)
  if valid_617439 != nil:
    section.add "PermissionsBoundaryPolicyInputList", valid_617439
  var valid_617440 = query.getOrDefault("ResourceHandlingOption")
  valid_617440 = validateParameter(valid_617440, JString, required = false,
                                 default = nil)
  if valid_617440 != nil:
    section.add "ResourceHandlingOption", valid_617440
  var valid_617441 = query.getOrDefault("Action")
  valid_617441 = validateParameter(valid_617441, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_617441 != nil:
    section.add "Action", valid_617441
  var valid_617442 = query.getOrDefault("Version")
  valid_617442 = validateParameter(valid_617442, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617442 != nil:
    section.add "Version", valid_617442
  var valid_617443 = query.getOrDefault("ActionNames")
  valid_617443 = validateParameter(valid_617443, JArray, required = true, default = nil)
  if valid_617443 != nil:
    section.add "ActionNames", valid_617443
  var valid_617444 = query.getOrDefault("ContextEntries")
  valid_617444 = validateParameter(valid_617444, JArray, required = false,
                                 default = nil)
  if valid_617444 != nil:
    section.add "ContextEntries", valid_617444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617445 = header.getOrDefault("X-Amz-Signature")
  valid_617445 = validateParameter(valid_617445, JString, required = false,
                                 default = nil)
  if valid_617445 != nil:
    section.add "X-Amz-Signature", valid_617445
  var valid_617446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617446 = validateParameter(valid_617446, JString, required = false,
                                 default = nil)
  if valid_617446 != nil:
    section.add "X-Amz-Content-Sha256", valid_617446
  var valid_617447 = header.getOrDefault("X-Amz-Date")
  valid_617447 = validateParameter(valid_617447, JString, required = false,
                                 default = nil)
  if valid_617447 != nil:
    section.add "X-Amz-Date", valid_617447
  var valid_617448 = header.getOrDefault("X-Amz-Credential")
  valid_617448 = validateParameter(valid_617448, JString, required = false,
                                 default = nil)
  if valid_617448 != nil:
    section.add "X-Amz-Credential", valid_617448
  var valid_617449 = header.getOrDefault("X-Amz-Security-Token")
  valid_617449 = validateParameter(valid_617449, JString, required = false,
                                 default = nil)
  if valid_617449 != nil:
    section.add "X-Amz-Security-Token", valid_617449
  var valid_617450 = header.getOrDefault("X-Amz-Algorithm")
  valid_617450 = validateParameter(valid_617450, JString, required = false,
                                 default = nil)
  if valid_617450 != nil:
    section.add "X-Amz-Algorithm", valid_617450
  var valid_617451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617451 = validateParameter(valid_617451, JString, required = false,
                                 default = nil)
  if valid_617451 != nil:
    section.add "X-Amz-SignedHeaders", valid_617451
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617452: Call_GetSimulatePrincipalPolicy_617428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_617452.validator(path, query, header, formData, body)
  let scheme = call_617452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617452.url(scheme.get, call_617452.host, call_617452.base,
                         call_617452.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617452, url, valid)

proc call*(call_617453: Call_GetSimulatePrincipalPolicy_617428;
          PolicySourceArn: string; ActionNames: JsonNode; Marker: string = "";
          ResourceOwner: string = ""; MaxItems: int = 0; ResourceArns: JsonNode = nil;
          ResourcePolicy: string = ""; PolicyInputList: JsonNode = nil;
          CallerArn: string = "";
          PermissionsBoundaryPolicyInputList: JsonNode = nil;
          ResourceHandlingOption: string = "";
          Action: string = "SimulatePrincipalPolicy";
          Version: string = "2010-05-08"; ContextEntries: JsonNode = nil): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   PermissionsBoundaryPolicyInputList: JArray
  ##                                     : <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permission boundary policy is used for the simulation. For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  var query_617454 = newJObject()
  add(query_617454, "Marker", newJString(Marker))
  add(query_617454, "ResourceOwner", newJString(ResourceOwner))
  add(query_617454, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_617454, "MaxItems", newJInt(MaxItems))
  if ResourceArns != nil:
    query_617454.add "ResourceArns", ResourceArns
  add(query_617454, "ResourcePolicy", newJString(ResourcePolicy))
  if PolicyInputList != nil:
    query_617454.add "PolicyInputList", PolicyInputList
  add(query_617454, "CallerArn", newJString(CallerArn))
  if PermissionsBoundaryPolicyInputList != nil:
    query_617454.add "PermissionsBoundaryPolicyInputList",
                    PermissionsBoundaryPolicyInputList
  add(query_617454, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_617454, "Action", newJString(Action))
  add(query_617454, "Version", newJString(Version))
  if ActionNames != nil:
    query_617454.add "ActionNames", ActionNames
  if ContextEntries != nil:
    query_617454.add "ContextEntries", ContextEntries
  result = call_617453.call(nil, query_617454, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_617428(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_617429, base: "/",
    url: url_GetSimulatePrincipalPolicy_617430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_617500 = ref object of OpenApiRestCall_612658
proc url_PostTagRole_617502(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagRole_617501(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617503 = query.getOrDefault("Action")
  valid_617503 = validateParameter(valid_617503, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_617503 != nil:
    section.add "Action", valid_617503
  var valid_617504 = query.getOrDefault("Version")
  valid_617504 = validateParameter(valid_617504, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617504 != nil:
    section.add "Version", valid_617504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617505 = header.getOrDefault("X-Amz-Signature")
  valid_617505 = validateParameter(valid_617505, JString, required = false,
                                 default = nil)
  if valid_617505 != nil:
    section.add "X-Amz-Signature", valid_617505
  var valid_617506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617506 = validateParameter(valid_617506, JString, required = false,
                                 default = nil)
  if valid_617506 != nil:
    section.add "X-Amz-Content-Sha256", valid_617506
  var valid_617507 = header.getOrDefault("X-Amz-Date")
  valid_617507 = validateParameter(valid_617507, JString, required = false,
                                 default = nil)
  if valid_617507 != nil:
    section.add "X-Amz-Date", valid_617507
  var valid_617508 = header.getOrDefault("X-Amz-Credential")
  valid_617508 = validateParameter(valid_617508, JString, required = false,
                                 default = nil)
  if valid_617508 != nil:
    section.add "X-Amz-Credential", valid_617508
  var valid_617509 = header.getOrDefault("X-Amz-Security-Token")
  valid_617509 = validateParameter(valid_617509, JString, required = false,
                                 default = nil)
  if valid_617509 != nil:
    section.add "X-Amz-Security-Token", valid_617509
  var valid_617510 = header.getOrDefault("X-Amz-Algorithm")
  valid_617510 = validateParameter(valid_617510, JString, required = false,
                                 default = nil)
  if valid_617510 != nil:
    section.add "X-Amz-Algorithm", valid_617510
  var valid_617511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617511 = validateParameter(valid_617511, JString, required = false,
                                 default = nil)
  if valid_617511 != nil:
    section.add "X-Amz-SignedHeaders", valid_617511
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_617512 = formData.getOrDefault("RoleName")
  valid_617512 = validateParameter(valid_617512, JString, required = true,
                                 default = nil)
  if valid_617512 != nil:
    section.add "RoleName", valid_617512
  var valid_617513 = formData.getOrDefault("Tags")
  valid_617513 = validateParameter(valid_617513, JArray, required = true, default = nil)
  if valid_617513 != nil:
    section.add "Tags", valid_617513
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617514: Call_PostTagRole_617500; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617514.validator(path, query, header, formData, body)
  let scheme = call_617514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617514.url(scheme.get, call_617514.host, call_617514.base,
                         call_617514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617514, url, valid)

proc call*(call_617515: Call_PostTagRole_617500; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Version: string (required)
  var query_617516 = newJObject()
  var formData_617517 = newJObject()
  add(formData_617517, "RoleName", newJString(RoleName))
  add(query_617516, "Action", newJString(Action))
  if Tags != nil:
    formData_617517.add "Tags", Tags
  add(query_617516, "Version", newJString(Version))
  result = call_617515.call(nil, query_617516, nil, formData_617517, nil)

var postTagRole* = Call_PostTagRole_617500(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_617501,
                                        base: "/", url: url_PostTagRole_617502,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_617483 = ref object of OpenApiRestCall_612658
proc url_GetTagRole_617485(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagRole_617484(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_617486 = query.getOrDefault("Tags")
  valid_617486 = validateParameter(valid_617486, JArray, required = true, default = nil)
  if valid_617486 != nil:
    section.add "Tags", valid_617486
  var valid_617487 = query.getOrDefault("RoleName")
  valid_617487 = validateParameter(valid_617487, JString, required = true,
                                 default = nil)
  if valid_617487 != nil:
    section.add "RoleName", valid_617487
  var valid_617488 = query.getOrDefault("Action")
  valid_617488 = validateParameter(valid_617488, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_617488 != nil:
    section.add "Action", valid_617488
  var valid_617489 = query.getOrDefault("Version")
  valid_617489 = validateParameter(valid_617489, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617489 != nil:
    section.add "Version", valid_617489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617490 = header.getOrDefault("X-Amz-Signature")
  valid_617490 = validateParameter(valid_617490, JString, required = false,
                                 default = nil)
  if valid_617490 != nil:
    section.add "X-Amz-Signature", valid_617490
  var valid_617491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617491 = validateParameter(valid_617491, JString, required = false,
                                 default = nil)
  if valid_617491 != nil:
    section.add "X-Amz-Content-Sha256", valid_617491
  var valid_617492 = header.getOrDefault("X-Amz-Date")
  valid_617492 = validateParameter(valid_617492, JString, required = false,
                                 default = nil)
  if valid_617492 != nil:
    section.add "X-Amz-Date", valid_617492
  var valid_617493 = header.getOrDefault("X-Amz-Credential")
  valid_617493 = validateParameter(valid_617493, JString, required = false,
                                 default = nil)
  if valid_617493 != nil:
    section.add "X-Amz-Credential", valid_617493
  var valid_617494 = header.getOrDefault("X-Amz-Security-Token")
  valid_617494 = validateParameter(valid_617494, JString, required = false,
                                 default = nil)
  if valid_617494 != nil:
    section.add "X-Amz-Security-Token", valid_617494
  var valid_617495 = header.getOrDefault("X-Amz-Algorithm")
  valid_617495 = validateParameter(valid_617495, JString, required = false,
                                 default = nil)
  if valid_617495 != nil:
    section.add "X-Amz-Algorithm", valid_617495
  var valid_617496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617496 = validateParameter(valid_617496, JString, required = false,
                                 default = nil)
  if valid_617496 != nil:
    section.add "X-Amz-SignedHeaders", valid_617496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617497: Call_GetTagRole_617483; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617497.validator(path, query, header, formData, body)
  let scheme = call_617497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617497.url(scheme.get, call_617497.host, call_617497.base,
                         call_617497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617497, url, valid)

proc call*(call_617498: Call_GetTagRole_617483; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617499 = newJObject()
  if Tags != nil:
    query_617499.add "Tags", Tags
  add(query_617499, "RoleName", newJString(RoleName))
  add(query_617499, "Action", newJString(Action))
  add(query_617499, "Version", newJString(Version))
  result = call_617498.call(nil, query_617499, nil, nil, nil)

var getTagRole* = Call_GetTagRole_617483(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_617484,
                                      base: "/", url: url_GetTagRole_617485,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_617535 = ref object of OpenApiRestCall_612658
proc url_PostTagUser_617537(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTagUser_617536(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617538 = query.getOrDefault("Action")
  valid_617538 = validateParameter(valid_617538, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_617538 != nil:
    section.add "Action", valid_617538
  var valid_617539 = query.getOrDefault("Version")
  valid_617539 = validateParameter(valid_617539, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617539 != nil:
    section.add "Version", valid_617539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617540 = header.getOrDefault("X-Amz-Signature")
  valid_617540 = validateParameter(valid_617540, JString, required = false,
                                 default = nil)
  if valid_617540 != nil:
    section.add "X-Amz-Signature", valid_617540
  var valid_617541 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617541 = validateParameter(valid_617541, JString, required = false,
                                 default = nil)
  if valid_617541 != nil:
    section.add "X-Amz-Content-Sha256", valid_617541
  var valid_617542 = header.getOrDefault("X-Amz-Date")
  valid_617542 = validateParameter(valid_617542, JString, required = false,
                                 default = nil)
  if valid_617542 != nil:
    section.add "X-Amz-Date", valid_617542
  var valid_617543 = header.getOrDefault("X-Amz-Credential")
  valid_617543 = validateParameter(valid_617543, JString, required = false,
                                 default = nil)
  if valid_617543 != nil:
    section.add "X-Amz-Credential", valid_617543
  var valid_617544 = header.getOrDefault("X-Amz-Security-Token")
  valid_617544 = validateParameter(valid_617544, JString, required = false,
                                 default = nil)
  if valid_617544 != nil:
    section.add "X-Amz-Security-Token", valid_617544
  var valid_617545 = header.getOrDefault("X-Amz-Algorithm")
  valid_617545 = validateParameter(valid_617545, JString, required = false,
                                 default = nil)
  if valid_617545 != nil:
    section.add "X-Amz-Algorithm", valid_617545
  var valid_617546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617546 = validateParameter(valid_617546, JString, required = false,
                                 default = nil)
  if valid_617546 != nil:
    section.add "X-Amz-SignedHeaders", valid_617546
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_617547 = formData.getOrDefault("UserName")
  valid_617547 = validateParameter(valid_617547, JString, required = true,
                                 default = nil)
  if valid_617547 != nil:
    section.add "UserName", valid_617547
  var valid_617548 = formData.getOrDefault("Tags")
  valid_617548 = validateParameter(valid_617548, JArray, required = true, default = nil)
  if valid_617548 != nil:
    section.add "Tags", valid_617548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617549: Call_PostTagUser_617535; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617549.validator(path, query, header, formData, body)
  let scheme = call_617549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617549.url(scheme.get, call_617549.host, call_617549.base,
                         call_617549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617549, url, valid)

proc call*(call_617550: Call_PostTagUser_617535; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Version: string (required)
  var query_617551 = newJObject()
  var formData_617552 = newJObject()
  add(formData_617552, "UserName", newJString(UserName))
  add(query_617551, "Action", newJString(Action))
  if Tags != nil:
    formData_617552.add "Tags", Tags
  add(query_617551, "Version", newJString(Version))
  result = call_617550.call(nil, query_617551, nil, formData_617552, nil)

var postTagUser* = Call_PostTagUser_617535(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_617536,
                                        base: "/", url: url_PostTagUser_617537,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_617518 = ref object of OpenApiRestCall_612658
proc url_GetTagUser_617520(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTagUser_617519(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617521 = query.getOrDefault("UserName")
  valid_617521 = validateParameter(valid_617521, JString, required = true,
                                 default = nil)
  if valid_617521 != nil:
    section.add "UserName", valid_617521
  var valid_617522 = query.getOrDefault("Tags")
  valid_617522 = validateParameter(valid_617522, JArray, required = true, default = nil)
  if valid_617522 != nil:
    section.add "Tags", valid_617522
  var valid_617523 = query.getOrDefault("Action")
  valid_617523 = validateParameter(valid_617523, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_617523 != nil:
    section.add "Action", valid_617523
  var valid_617524 = query.getOrDefault("Version")
  valid_617524 = validateParameter(valid_617524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617524 != nil:
    section.add "Version", valid_617524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617525 = header.getOrDefault("X-Amz-Signature")
  valid_617525 = validateParameter(valid_617525, JString, required = false,
                                 default = nil)
  if valid_617525 != nil:
    section.add "X-Amz-Signature", valid_617525
  var valid_617526 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617526 = validateParameter(valid_617526, JString, required = false,
                                 default = nil)
  if valid_617526 != nil:
    section.add "X-Amz-Content-Sha256", valid_617526
  var valid_617527 = header.getOrDefault("X-Amz-Date")
  valid_617527 = validateParameter(valid_617527, JString, required = false,
                                 default = nil)
  if valid_617527 != nil:
    section.add "X-Amz-Date", valid_617527
  var valid_617528 = header.getOrDefault("X-Amz-Credential")
  valid_617528 = validateParameter(valid_617528, JString, required = false,
                                 default = nil)
  if valid_617528 != nil:
    section.add "X-Amz-Credential", valid_617528
  var valid_617529 = header.getOrDefault("X-Amz-Security-Token")
  valid_617529 = validateParameter(valid_617529, JString, required = false,
                                 default = nil)
  if valid_617529 != nil:
    section.add "X-Amz-Security-Token", valid_617529
  var valid_617530 = header.getOrDefault("X-Amz-Algorithm")
  valid_617530 = validateParameter(valid_617530, JString, required = false,
                                 default = nil)
  if valid_617530 != nil:
    section.add "X-Amz-Algorithm", valid_617530
  var valid_617531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617531 = validateParameter(valid_617531, JString, required = false,
                                 default = nil)
  if valid_617531 != nil:
    section.add "X-Amz-SignedHeaders", valid_617531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617532: Call_GetTagUser_617518; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617532.validator(path, query, header, formData, body)
  let scheme = call_617532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617532.url(scheme.get, call_617532.host, call_617532.base,
                         call_617532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617532, url, valid)

proc call*(call_617533: Call_GetTagUser_617518; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617534 = newJObject()
  add(query_617534, "UserName", newJString(UserName))
  if Tags != nil:
    query_617534.add "Tags", Tags
  add(query_617534, "Action", newJString(Action))
  add(query_617534, "Version", newJString(Version))
  result = call_617533.call(nil, query_617534, nil, nil, nil)

var getTagUser* = Call_GetTagUser_617518(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_617519,
                                      base: "/", url: url_GetTagUser_617520,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_617570 = ref object of OpenApiRestCall_612658
proc url_PostUntagRole_617572(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagRole_617571(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617573 = query.getOrDefault("Action")
  valid_617573 = validateParameter(valid_617573, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_617573 != nil:
    section.add "Action", valid_617573
  var valid_617574 = query.getOrDefault("Version")
  valid_617574 = validateParameter(valid_617574, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617574 != nil:
    section.add "Version", valid_617574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617575 = header.getOrDefault("X-Amz-Signature")
  valid_617575 = validateParameter(valid_617575, JString, required = false,
                                 default = nil)
  if valid_617575 != nil:
    section.add "X-Amz-Signature", valid_617575
  var valid_617576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617576 = validateParameter(valid_617576, JString, required = false,
                                 default = nil)
  if valid_617576 != nil:
    section.add "X-Amz-Content-Sha256", valid_617576
  var valid_617577 = header.getOrDefault("X-Amz-Date")
  valid_617577 = validateParameter(valid_617577, JString, required = false,
                                 default = nil)
  if valid_617577 != nil:
    section.add "X-Amz-Date", valid_617577
  var valid_617578 = header.getOrDefault("X-Amz-Credential")
  valid_617578 = validateParameter(valid_617578, JString, required = false,
                                 default = nil)
  if valid_617578 != nil:
    section.add "X-Amz-Credential", valid_617578
  var valid_617579 = header.getOrDefault("X-Amz-Security-Token")
  valid_617579 = validateParameter(valid_617579, JString, required = false,
                                 default = nil)
  if valid_617579 != nil:
    section.add "X-Amz-Security-Token", valid_617579
  var valid_617580 = header.getOrDefault("X-Amz-Algorithm")
  valid_617580 = validateParameter(valid_617580, JString, required = false,
                                 default = nil)
  if valid_617580 != nil:
    section.add "X-Amz-Algorithm", valid_617580
  var valid_617581 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617581 = validateParameter(valid_617581, JString, required = false,
                                 default = nil)
  if valid_617581 != nil:
    section.add "X-Amz-SignedHeaders", valid_617581
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_617582 = formData.getOrDefault("TagKeys")
  valid_617582 = validateParameter(valid_617582, JArray, required = true, default = nil)
  if valid_617582 != nil:
    section.add "TagKeys", valid_617582
  var valid_617583 = formData.getOrDefault("RoleName")
  valid_617583 = validateParameter(valid_617583, JString, required = true,
                                 default = nil)
  if valid_617583 != nil:
    section.add "RoleName", valid_617583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617584: Call_PostUntagRole_617570; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_617584.validator(path, query, header, formData, body)
  let scheme = call_617584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617584.url(scheme.get, call_617584.host, call_617584.base,
                         call_617584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617584, url, valid)

proc call*(call_617585: Call_PostUntagRole_617570; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617586 = newJObject()
  var formData_617587 = newJObject()
  if TagKeys != nil:
    formData_617587.add "TagKeys", TagKeys
  add(formData_617587, "RoleName", newJString(RoleName))
  add(query_617586, "Action", newJString(Action))
  add(query_617586, "Version", newJString(Version))
  result = call_617585.call(nil, query_617586, nil, formData_617587, nil)

var postUntagRole* = Call_PostUntagRole_617570(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_617571,
    base: "/", url: url_PostUntagRole_617572, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_617553 = ref object of OpenApiRestCall_612658
proc url_GetUntagRole_617555(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagRole_617554(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TagKeys` field"
  var valid_617556 = query.getOrDefault("TagKeys")
  valid_617556 = validateParameter(valid_617556, JArray, required = true, default = nil)
  if valid_617556 != nil:
    section.add "TagKeys", valid_617556
  var valid_617557 = query.getOrDefault("RoleName")
  valid_617557 = validateParameter(valid_617557, JString, required = true,
                                 default = nil)
  if valid_617557 != nil:
    section.add "RoleName", valid_617557
  var valid_617558 = query.getOrDefault("Action")
  valid_617558 = validateParameter(valid_617558, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_617558 != nil:
    section.add "Action", valid_617558
  var valid_617559 = query.getOrDefault("Version")
  valid_617559 = validateParameter(valid_617559, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617559 != nil:
    section.add "Version", valid_617559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617560 = header.getOrDefault("X-Amz-Signature")
  valid_617560 = validateParameter(valid_617560, JString, required = false,
                                 default = nil)
  if valid_617560 != nil:
    section.add "X-Amz-Signature", valid_617560
  var valid_617561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617561 = validateParameter(valid_617561, JString, required = false,
                                 default = nil)
  if valid_617561 != nil:
    section.add "X-Amz-Content-Sha256", valid_617561
  var valid_617562 = header.getOrDefault("X-Amz-Date")
  valid_617562 = validateParameter(valid_617562, JString, required = false,
                                 default = nil)
  if valid_617562 != nil:
    section.add "X-Amz-Date", valid_617562
  var valid_617563 = header.getOrDefault("X-Amz-Credential")
  valid_617563 = validateParameter(valid_617563, JString, required = false,
                                 default = nil)
  if valid_617563 != nil:
    section.add "X-Amz-Credential", valid_617563
  var valid_617564 = header.getOrDefault("X-Amz-Security-Token")
  valid_617564 = validateParameter(valid_617564, JString, required = false,
                                 default = nil)
  if valid_617564 != nil:
    section.add "X-Amz-Security-Token", valid_617564
  var valid_617565 = header.getOrDefault("X-Amz-Algorithm")
  valid_617565 = validateParameter(valid_617565, JString, required = false,
                                 default = nil)
  if valid_617565 != nil:
    section.add "X-Amz-Algorithm", valid_617565
  var valid_617566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617566 = validateParameter(valid_617566, JString, required = false,
                                 default = nil)
  if valid_617566 != nil:
    section.add "X-Amz-SignedHeaders", valid_617566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617567: Call_GetUntagRole_617553; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_617567.validator(path, query, header, formData, body)
  let scheme = call_617567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617567.url(scheme.get, call_617567.host, call_617567.base,
                         call_617567.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617567, url, valid)

proc call*(call_617568: Call_GetUntagRole_617553; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617569 = newJObject()
  if TagKeys != nil:
    query_617569.add "TagKeys", TagKeys
  add(query_617569, "RoleName", newJString(RoleName))
  add(query_617569, "Action", newJString(Action))
  add(query_617569, "Version", newJString(Version))
  result = call_617568.call(nil, query_617569, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_617553(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_617554, base: "/",
    url: url_GetUntagRole_617555, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_617605 = ref object of OpenApiRestCall_612658
proc url_PostUntagUser_617607(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUntagUser_617606(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617608 = query.getOrDefault("Action")
  valid_617608 = validateParameter(valid_617608, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_617608 != nil:
    section.add "Action", valid_617608
  var valid_617609 = query.getOrDefault("Version")
  valid_617609 = validateParameter(valid_617609, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617609 != nil:
    section.add "Version", valid_617609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617610 = header.getOrDefault("X-Amz-Signature")
  valid_617610 = validateParameter(valid_617610, JString, required = false,
                                 default = nil)
  if valid_617610 != nil:
    section.add "X-Amz-Signature", valid_617610
  var valid_617611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617611 = validateParameter(valid_617611, JString, required = false,
                                 default = nil)
  if valid_617611 != nil:
    section.add "X-Amz-Content-Sha256", valid_617611
  var valid_617612 = header.getOrDefault("X-Amz-Date")
  valid_617612 = validateParameter(valid_617612, JString, required = false,
                                 default = nil)
  if valid_617612 != nil:
    section.add "X-Amz-Date", valid_617612
  var valid_617613 = header.getOrDefault("X-Amz-Credential")
  valid_617613 = validateParameter(valid_617613, JString, required = false,
                                 default = nil)
  if valid_617613 != nil:
    section.add "X-Amz-Credential", valid_617613
  var valid_617614 = header.getOrDefault("X-Amz-Security-Token")
  valid_617614 = validateParameter(valid_617614, JString, required = false,
                                 default = nil)
  if valid_617614 != nil:
    section.add "X-Amz-Security-Token", valid_617614
  var valid_617615 = header.getOrDefault("X-Amz-Algorithm")
  valid_617615 = validateParameter(valid_617615, JString, required = false,
                                 default = nil)
  if valid_617615 != nil:
    section.add "X-Amz-Algorithm", valid_617615
  var valid_617616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617616 = validateParameter(valid_617616, JString, required = false,
                                 default = nil)
  if valid_617616 != nil:
    section.add "X-Amz-SignedHeaders", valid_617616
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_617617 = formData.getOrDefault("TagKeys")
  valid_617617 = validateParameter(valid_617617, JArray, required = true, default = nil)
  if valid_617617 != nil:
    section.add "TagKeys", valid_617617
  var valid_617618 = formData.getOrDefault("UserName")
  valid_617618 = validateParameter(valid_617618, JString, required = true,
                                 default = nil)
  if valid_617618 != nil:
    section.add "UserName", valid_617618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617619: Call_PostUntagUser_617605; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_617619.validator(path, query, header, formData, body)
  let scheme = call_617619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617619.url(scheme.get, call_617619.host, call_617619.base,
                         call_617619.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617619, url, valid)

proc call*(call_617620: Call_PostUntagUser_617605; TagKeys: JsonNode;
          UserName: string; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617621 = newJObject()
  var formData_617622 = newJObject()
  if TagKeys != nil:
    formData_617622.add "TagKeys", TagKeys
  add(formData_617622, "UserName", newJString(UserName))
  add(query_617621, "Action", newJString(Action))
  add(query_617621, "Version", newJString(Version))
  result = call_617620.call(nil, query_617621, nil, formData_617622, nil)

var postUntagUser* = Call_PostUntagUser_617605(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_617606,
    base: "/", url: url_PostUntagUser_617607, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_617588 = ref object of OpenApiRestCall_612658
proc url_GetUntagUser_617590(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUntagUser_617589(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617591 = query.getOrDefault("UserName")
  valid_617591 = validateParameter(valid_617591, JString, required = true,
                                 default = nil)
  if valid_617591 != nil:
    section.add "UserName", valid_617591
  var valid_617592 = query.getOrDefault("TagKeys")
  valid_617592 = validateParameter(valid_617592, JArray, required = true, default = nil)
  if valid_617592 != nil:
    section.add "TagKeys", valid_617592
  var valid_617593 = query.getOrDefault("Action")
  valid_617593 = validateParameter(valid_617593, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_617593 != nil:
    section.add "Action", valid_617593
  var valid_617594 = query.getOrDefault("Version")
  valid_617594 = validateParameter(valid_617594, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617594 != nil:
    section.add "Version", valid_617594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617595 = header.getOrDefault("X-Amz-Signature")
  valid_617595 = validateParameter(valid_617595, JString, required = false,
                                 default = nil)
  if valid_617595 != nil:
    section.add "X-Amz-Signature", valid_617595
  var valid_617596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617596 = validateParameter(valid_617596, JString, required = false,
                                 default = nil)
  if valid_617596 != nil:
    section.add "X-Amz-Content-Sha256", valid_617596
  var valid_617597 = header.getOrDefault("X-Amz-Date")
  valid_617597 = validateParameter(valid_617597, JString, required = false,
                                 default = nil)
  if valid_617597 != nil:
    section.add "X-Amz-Date", valid_617597
  var valid_617598 = header.getOrDefault("X-Amz-Credential")
  valid_617598 = validateParameter(valid_617598, JString, required = false,
                                 default = nil)
  if valid_617598 != nil:
    section.add "X-Amz-Credential", valid_617598
  var valid_617599 = header.getOrDefault("X-Amz-Security-Token")
  valid_617599 = validateParameter(valid_617599, JString, required = false,
                                 default = nil)
  if valid_617599 != nil:
    section.add "X-Amz-Security-Token", valid_617599
  var valid_617600 = header.getOrDefault("X-Amz-Algorithm")
  valid_617600 = validateParameter(valid_617600, JString, required = false,
                                 default = nil)
  if valid_617600 != nil:
    section.add "X-Amz-Algorithm", valid_617600
  var valid_617601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617601 = validateParameter(valid_617601, JString, required = false,
                                 default = nil)
  if valid_617601 != nil:
    section.add "X-Amz-SignedHeaders", valid_617601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617602: Call_GetUntagUser_617588; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_617602.validator(path, query, header, formData, body)
  let scheme = call_617602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617602.url(scheme.get, call_617602.host, call_617602.base,
                         call_617602.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617602, url, valid)

proc call*(call_617603: Call_GetUntagUser_617588; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617604 = newJObject()
  add(query_617604, "UserName", newJString(UserName))
  if TagKeys != nil:
    query_617604.add "TagKeys", TagKeys
  add(query_617604, "Action", newJString(Action))
  add(query_617604, "Version", newJString(Version))
  result = call_617603.call(nil, query_617604, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_617588(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_617589, base: "/",
    url: url_GetUntagUser_617590, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_617641 = ref object of OpenApiRestCall_612658
proc url_PostUpdateAccessKey_617643(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccessKey_617642(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617644 = query.getOrDefault("Action")
  valid_617644 = validateParameter(valid_617644, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_617644 != nil:
    section.add "Action", valid_617644
  var valid_617645 = query.getOrDefault("Version")
  valid_617645 = validateParameter(valid_617645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617645 != nil:
    section.add "Version", valid_617645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617646 = header.getOrDefault("X-Amz-Signature")
  valid_617646 = validateParameter(valid_617646, JString, required = false,
                                 default = nil)
  if valid_617646 != nil:
    section.add "X-Amz-Signature", valid_617646
  var valid_617647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617647 = validateParameter(valid_617647, JString, required = false,
                                 default = nil)
  if valid_617647 != nil:
    section.add "X-Amz-Content-Sha256", valid_617647
  var valid_617648 = header.getOrDefault("X-Amz-Date")
  valid_617648 = validateParameter(valid_617648, JString, required = false,
                                 default = nil)
  if valid_617648 != nil:
    section.add "X-Amz-Date", valid_617648
  var valid_617649 = header.getOrDefault("X-Amz-Credential")
  valid_617649 = validateParameter(valid_617649, JString, required = false,
                                 default = nil)
  if valid_617649 != nil:
    section.add "X-Amz-Credential", valid_617649
  var valid_617650 = header.getOrDefault("X-Amz-Security-Token")
  valid_617650 = validateParameter(valid_617650, JString, required = false,
                                 default = nil)
  if valid_617650 != nil:
    section.add "X-Amz-Security-Token", valid_617650
  var valid_617651 = header.getOrDefault("X-Amz-Algorithm")
  valid_617651 = validateParameter(valid_617651, JString, required = false,
                                 default = nil)
  if valid_617651 != nil:
    section.add "X-Amz-Algorithm", valid_617651
  var valid_617652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617652 = validateParameter(valid_617652, JString, required = false,
                                 default = nil)
  if valid_617652 != nil:
    section.add "X-Amz-SignedHeaders", valid_617652
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_617653 = formData.getOrDefault("AccessKeyId")
  valid_617653 = validateParameter(valid_617653, JString, required = true,
                                 default = nil)
  if valid_617653 != nil:
    section.add "AccessKeyId", valid_617653
  var valid_617654 = formData.getOrDefault("UserName")
  valid_617654 = validateParameter(valid_617654, JString, required = false,
                                 default = nil)
  if valid_617654 != nil:
    section.add "UserName", valid_617654
  var valid_617655 = formData.getOrDefault("Status")
  valid_617655 = validateParameter(valid_617655, JString, required = true,
                                 default = newJString("Active"))
  if valid_617655 != nil:
    section.add "Status", valid_617655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617656: Call_PostUpdateAccessKey_617641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617656.validator(path, query, header, formData, body)
  let scheme = call_617656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617656.url(scheme.get, call_617656.host, call_617656.base,
                         call_617656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617656, url, valid)

proc call*(call_617657: Call_PostUpdateAccessKey_617641; AccessKeyId: string;
          UserName: string = ""; Action: string = "UpdateAccessKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_617658 = newJObject()
  var formData_617659 = newJObject()
  add(formData_617659, "AccessKeyId", newJString(AccessKeyId))
  add(formData_617659, "UserName", newJString(UserName))
  add(query_617658, "Action", newJString(Action))
  add(formData_617659, "Status", newJString(Status))
  add(query_617658, "Version", newJString(Version))
  result = call_617657.call(nil, query_617658, nil, formData_617659, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_617641(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_617642, base: "/",
    url: url_PostUpdateAccessKey_617643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_617623 = ref object of OpenApiRestCall_612658
proc url_GetUpdateAccessKey_617625(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccessKey_617624(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617626 = query.getOrDefault("UserName")
  valid_617626 = validateParameter(valid_617626, JString, required = false,
                                 default = nil)
  if valid_617626 != nil:
    section.add "UserName", valid_617626
  var valid_617627 = query.getOrDefault("Status")
  valid_617627 = validateParameter(valid_617627, JString, required = true,
                                 default = newJString("Active"))
  if valid_617627 != nil:
    section.add "Status", valid_617627
  var valid_617628 = query.getOrDefault("Action")
  valid_617628 = validateParameter(valid_617628, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_617628 != nil:
    section.add "Action", valid_617628
  var valid_617629 = query.getOrDefault("AccessKeyId")
  valid_617629 = validateParameter(valid_617629, JString, required = true,
                                 default = nil)
  if valid_617629 != nil:
    section.add "AccessKeyId", valid_617629
  var valid_617630 = query.getOrDefault("Version")
  valid_617630 = validateParameter(valid_617630, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617630 != nil:
    section.add "Version", valid_617630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617631 = header.getOrDefault("X-Amz-Signature")
  valid_617631 = validateParameter(valid_617631, JString, required = false,
                                 default = nil)
  if valid_617631 != nil:
    section.add "X-Amz-Signature", valid_617631
  var valid_617632 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617632 = validateParameter(valid_617632, JString, required = false,
                                 default = nil)
  if valid_617632 != nil:
    section.add "X-Amz-Content-Sha256", valid_617632
  var valid_617633 = header.getOrDefault("X-Amz-Date")
  valid_617633 = validateParameter(valid_617633, JString, required = false,
                                 default = nil)
  if valid_617633 != nil:
    section.add "X-Amz-Date", valid_617633
  var valid_617634 = header.getOrDefault("X-Amz-Credential")
  valid_617634 = validateParameter(valid_617634, JString, required = false,
                                 default = nil)
  if valid_617634 != nil:
    section.add "X-Amz-Credential", valid_617634
  var valid_617635 = header.getOrDefault("X-Amz-Security-Token")
  valid_617635 = validateParameter(valid_617635, JString, required = false,
                                 default = nil)
  if valid_617635 != nil:
    section.add "X-Amz-Security-Token", valid_617635
  var valid_617636 = header.getOrDefault("X-Amz-Algorithm")
  valid_617636 = validateParameter(valid_617636, JString, required = false,
                                 default = nil)
  if valid_617636 != nil:
    section.add "X-Amz-Algorithm", valid_617636
  var valid_617637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617637 = validateParameter(valid_617637, JString, required = false,
                                 default = nil)
  if valid_617637 != nil:
    section.add "X-Amz-SignedHeaders", valid_617637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617638: Call_GetUpdateAccessKey_617623; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617638.validator(path, query, header, formData, body)
  let scheme = call_617638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617638.url(scheme.get, call_617638.host, call_617638.base,
                         call_617638.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617638, url, valid)

proc call*(call_617639: Call_GetUpdateAccessKey_617623; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_617640 = newJObject()
  add(query_617640, "UserName", newJString(UserName))
  add(query_617640, "Status", newJString(Status))
  add(query_617640, "Action", newJString(Action))
  add(query_617640, "AccessKeyId", newJString(AccessKeyId))
  add(query_617640, "Version", newJString(Version))
  result = call_617639.call(nil, query_617640, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_617623(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_617624,
    base: "/", url: url_GetUpdateAccessKey_617625,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_617684 = ref object of OpenApiRestCall_612658
proc url_PostUpdateAccountPasswordPolicy_617686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAccountPasswordPolicy_617685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617687 = query.getOrDefault("Action")
  valid_617687 = validateParameter(valid_617687, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_617687 != nil:
    section.add "Action", valid_617687
  var valid_617688 = query.getOrDefault("Version")
  valid_617688 = validateParameter(valid_617688, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617688 != nil:
    section.add "Version", valid_617688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617689 = header.getOrDefault("X-Amz-Signature")
  valid_617689 = validateParameter(valid_617689, JString, required = false,
                                 default = nil)
  if valid_617689 != nil:
    section.add "X-Amz-Signature", valid_617689
  var valid_617690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617690 = validateParameter(valid_617690, JString, required = false,
                                 default = nil)
  if valid_617690 != nil:
    section.add "X-Amz-Content-Sha256", valid_617690
  var valid_617691 = header.getOrDefault("X-Amz-Date")
  valid_617691 = validateParameter(valid_617691, JString, required = false,
                                 default = nil)
  if valid_617691 != nil:
    section.add "X-Amz-Date", valid_617691
  var valid_617692 = header.getOrDefault("X-Amz-Credential")
  valid_617692 = validateParameter(valid_617692, JString, required = false,
                                 default = nil)
  if valid_617692 != nil:
    section.add "X-Amz-Credential", valid_617692
  var valid_617693 = header.getOrDefault("X-Amz-Security-Token")
  valid_617693 = validateParameter(valid_617693, JString, required = false,
                                 default = nil)
  if valid_617693 != nil:
    section.add "X-Amz-Security-Token", valid_617693
  var valid_617694 = header.getOrDefault("X-Amz-Algorithm")
  valid_617694 = validateParameter(valid_617694, JString, required = false,
                                 default = nil)
  if valid_617694 != nil:
    section.add "X-Amz-Algorithm", valid_617694
  var valid_617695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617695 = validateParameter(valid_617695, JString, required = false,
                                 default = nil)
  if valid_617695 != nil:
    section.add "X-Amz-SignedHeaders", valid_617695
  result.add "header", section
  ## parameters in `formData` object:
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_617696 = formData.getOrDefault("HardExpiry")
  valid_617696 = validateParameter(valid_617696, JBool, required = false, default = nil)
  if valid_617696 != nil:
    section.add "HardExpiry", valid_617696
  var valid_617697 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_617697 = validateParameter(valid_617697, JBool, required = false, default = nil)
  if valid_617697 != nil:
    section.add "AllowUsersToChangePassword", valid_617697
  var valid_617698 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_617698 = validateParameter(valid_617698, JBool, required = false, default = nil)
  if valid_617698 != nil:
    section.add "RequireLowercaseCharacters", valid_617698
  var valid_617699 = formData.getOrDefault("RequireNumbers")
  valid_617699 = validateParameter(valid_617699, JBool, required = false, default = nil)
  if valid_617699 != nil:
    section.add "RequireNumbers", valid_617699
  var valid_617700 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_617700 = validateParameter(valid_617700, JBool, required = false, default = nil)
  if valid_617700 != nil:
    section.add "RequireUppercaseCharacters", valid_617700
  var valid_617701 = formData.getOrDefault("MaxPasswordAge")
  valid_617701 = validateParameter(valid_617701, JInt, required = false, default = nil)
  if valid_617701 != nil:
    section.add "MaxPasswordAge", valid_617701
  var valid_617702 = formData.getOrDefault("PasswordReusePrevention")
  valid_617702 = validateParameter(valid_617702, JInt, required = false, default = nil)
  if valid_617702 != nil:
    section.add "PasswordReusePrevention", valid_617702
  var valid_617703 = formData.getOrDefault("RequireSymbols")
  valid_617703 = validateParameter(valid_617703, JBool, required = false, default = nil)
  if valid_617703 != nil:
    section.add "RequireSymbols", valid_617703
  var valid_617704 = formData.getOrDefault("MinimumPasswordLength")
  valid_617704 = validateParameter(valid_617704, JInt, required = false, default = nil)
  if valid_617704 != nil:
    section.add "MinimumPasswordLength", valid_617704
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617705: Call_PostUpdateAccountPasswordPolicy_617684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617705.validator(path, query, header, formData, body)
  let scheme = call_617705.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617705.url(scheme.get, call_617705.host, call_617705.base,
                         call_617705.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617705, url, valid)

proc call*(call_617706: Call_PostUpdateAccountPasswordPolicy_617684;
          HardExpiry: bool = false; AllowUsersToChangePassword: bool = false;
          RequireLowercaseCharacters: bool = false; RequireNumbers: bool = false;
          RequireUppercaseCharacters: bool = false; MaxPasswordAge: int = 0;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0; Version: string = "2010-05-08";
          RequireSymbols: bool = false; MinimumPasswordLength: int = 0): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Version: string (required)
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_617707 = newJObject()
  var formData_617708 = newJObject()
  add(formData_617708, "HardExpiry", newJBool(HardExpiry))
  add(formData_617708, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_617708, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_617708, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_617708, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_617708, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_617707, "Action", newJString(Action))
  add(formData_617708, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_617707, "Version", newJString(Version))
  add(formData_617708, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_617708, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_617706.call(nil, query_617707, nil, formData_617708, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_617684(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_617685, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_617686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_617660 = ref object of OpenApiRestCall_612658
proc url_GetUpdateAccountPasswordPolicy_617662(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAccountPasswordPolicy_617661(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617663 = query.getOrDefault("RequireUppercaseCharacters")
  valid_617663 = validateParameter(valid_617663, JBool, required = false, default = nil)
  if valid_617663 != nil:
    section.add "RequireUppercaseCharacters", valid_617663
  var valid_617664 = query.getOrDefault("MinimumPasswordLength")
  valid_617664 = validateParameter(valid_617664, JInt, required = false, default = nil)
  if valid_617664 != nil:
    section.add "MinimumPasswordLength", valid_617664
  var valid_617665 = query.getOrDefault("RequireNumbers")
  valid_617665 = validateParameter(valid_617665, JBool, required = false, default = nil)
  if valid_617665 != nil:
    section.add "RequireNumbers", valid_617665
  var valid_617666 = query.getOrDefault("AllowUsersToChangePassword")
  valid_617666 = validateParameter(valid_617666, JBool, required = false, default = nil)
  if valid_617666 != nil:
    section.add "AllowUsersToChangePassword", valid_617666
  var valid_617667 = query.getOrDefault("MaxPasswordAge")
  valid_617667 = validateParameter(valid_617667, JInt, required = false, default = nil)
  if valid_617667 != nil:
    section.add "MaxPasswordAge", valid_617667
  var valid_617668 = query.getOrDefault("RequireSymbols")
  valid_617668 = validateParameter(valid_617668, JBool, required = false, default = nil)
  if valid_617668 != nil:
    section.add "RequireSymbols", valid_617668
  var valid_617669 = query.getOrDefault("Action")
  valid_617669 = validateParameter(valid_617669, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_617669 != nil:
    section.add "Action", valid_617669
  var valid_617670 = query.getOrDefault("PasswordReusePrevention")
  valid_617670 = validateParameter(valid_617670, JInt, required = false, default = nil)
  if valid_617670 != nil:
    section.add "PasswordReusePrevention", valid_617670
  var valid_617671 = query.getOrDefault("RequireLowercaseCharacters")
  valid_617671 = validateParameter(valid_617671, JBool, required = false, default = nil)
  if valid_617671 != nil:
    section.add "RequireLowercaseCharacters", valid_617671
  var valid_617672 = query.getOrDefault("HardExpiry")
  valid_617672 = validateParameter(valid_617672, JBool, required = false, default = nil)
  if valid_617672 != nil:
    section.add "HardExpiry", valid_617672
  var valid_617673 = query.getOrDefault("Version")
  valid_617673 = validateParameter(valid_617673, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617673 != nil:
    section.add "Version", valid_617673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617674 = header.getOrDefault("X-Amz-Signature")
  valid_617674 = validateParameter(valid_617674, JString, required = false,
                                 default = nil)
  if valid_617674 != nil:
    section.add "X-Amz-Signature", valid_617674
  var valid_617675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617675 = validateParameter(valid_617675, JString, required = false,
                                 default = nil)
  if valid_617675 != nil:
    section.add "X-Amz-Content-Sha256", valid_617675
  var valid_617676 = header.getOrDefault("X-Amz-Date")
  valid_617676 = validateParameter(valid_617676, JString, required = false,
                                 default = nil)
  if valid_617676 != nil:
    section.add "X-Amz-Date", valid_617676
  var valid_617677 = header.getOrDefault("X-Amz-Credential")
  valid_617677 = validateParameter(valid_617677, JString, required = false,
                                 default = nil)
  if valid_617677 != nil:
    section.add "X-Amz-Credential", valid_617677
  var valid_617678 = header.getOrDefault("X-Amz-Security-Token")
  valid_617678 = validateParameter(valid_617678, JString, required = false,
                                 default = nil)
  if valid_617678 != nil:
    section.add "X-Amz-Security-Token", valid_617678
  var valid_617679 = header.getOrDefault("X-Amz-Algorithm")
  valid_617679 = validateParameter(valid_617679, JString, required = false,
                                 default = nil)
  if valid_617679 != nil:
    section.add "X-Amz-Algorithm", valid_617679
  var valid_617680 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617680 = validateParameter(valid_617680, JString, required = false,
                                 default = nil)
  if valid_617680 != nil:
    section.add "X-Amz-SignedHeaders", valid_617680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617681: Call_GetUpdateAccountPasswordPolicy_617660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617681.validator(path, query, header, formData, body)
  let scheme = call_617681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617681.url(scheme.get, call_617681.host, call_617681.base,
                         call_617681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617681, url, valid)

proc call*(call_617682: Call_GetUpdateAccountPasswordPolicy_617660;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireNumbers: bool = false; AllowUsersToChangePassword: bool = false;
          MaxPasswordAge: int = 0; RequireSymbols: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireLowercaseCharacters: bool = false; HardExpiry: bool = false;
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Version: string (required)
  var query_617683 = newJObject()
  add(query_617683, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_617683, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(query_617683, "RequireNumbers", newJBool(RequireNumbers))
  add(query_617683, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_617683, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_617683, "RequireSymbols", newJBool(RequireSymbols))
  add(query_617683, "Action", newJString(Action))
  add(query_617683, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_617683, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_617683, "HardExpiry", newJBool(HardExpiry))
  add(query_617683, "Version", newJString(Version))
  result = call_617682.call(nil, query_617683, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_617660(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_617661, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_617662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_617726 = ref object of OpenApiRestCall_612658
proc url_PostUpdateAssumeRolePolicy_617728(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateAssumeRolePolicy_617727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617729 = query.getOrDefault("Action")
  valid_617729 = validateParameter(valid_617729, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_617729 != nil:
    section.add "Action", valid_617729
  var valid_617730 = query.getOrDefault("Version")
  valid_617730 = validateParameter(valid_617730, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617730 != nil:
    section.add "Version", valid_617730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617731 = header.getOrDefault("X-Amz-Signature")
  valid_617731 = validateParameter(valid_617731, JString, required = false,
                                 default = nil)
  if valid_617731 != nil:
    section.add "X-Amz-Signature", valid_617731
  var valid_617732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617732 = validateParameter(valid_617732, JString, required = false,
                                 default = nil)
  if valid_617732 != nil:
    section.add "X-Amz-Content-Sha256", valid_617732
  var valid_617733 = header.getOrDefault("X-Amz-Date")
  valid_617733 = validateParameter(valid_617733, JString, required = false,
                                 default = nil)
  if valid_617733 != nil:
    section.add "X-Amz-Date", valid_617733
  var valid_617734 = header.getOrDefault("X-Amz-Credential")
  valid_617734 = validateParameter(valid_617734, JString, required = false,
                                 default = nil)
  if valid_617734 != nil:
    section.add "X-Amz-Credential", valid_617734
  var valid_617735 = header.getOrDefault("X-Amz-Security-Token")
  valid_617735 = validateParameter(valid_617735, JString, required = false,
                                 default = nil)
  if valid_617735 != nil:
    section.add "X-Amz-Security-Token", valid_617735
  var valid_617736 = header.getOrDefault("X-Amz-Algorithm")
  valid_617736 = validateParameter(valid_617736, JString, required = false,
                                 default = nil)
  if valid_617736 != nil:
    section.add "X-Amz-Algorithm", valid_617736
  var valid_617737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617737 = validateParameter(valid_617737, JString, required = false,
                                 default = nil)
  if valid_617737 != nil:
    section.add "X-Amz-SignedHeaders", valid_617737
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyDocument` field"
  var valid_617738 = formData.getOrDefault("PolicyDocument")
  valid_617738 = validateParameter(valid_617738, JString, required = true,
                                 default = nil)
  if valid_617738 != nil:
    section.add "PolicyDocument", valid_617738
  var valid_617739 = formData.getOrDefault("RoleName")
  valid_617739 = validateParameter(valid_617739, JString, required = true,
                                 default = nil)
  if valid_617739 != nil:
    section.add "RoleName", valid_617739
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617740: Call_PostUpdateAssumeRolePolicy_617726; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_617740.validator(path, query, header, formData, body)
  let scheme = call_617740.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617740.url(scheme.get, call_617740.host, call_617740.base,
                         call_617740.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617740, url, valid)

proc call*(call_617741: Call_PostUpdateAssumeRolePolicy_617726;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617742 = newJObject()
  var formData_617743 = newJObject()
  add(formData_617743, "PolicyDocument", newJString(PolicyDocument))
  add(formData_617743, "RoleName", newJString(RoleName))
  add(query_617742, "Action", newJString(Action))
  add(query_617742, "Version", newJString(Version))
  result = call_617741.call(nil, query_617742, nil, formData_617743, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_617726(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_617727, base: "/",
    url: url_PostUpdateAssumeRolePolicy_617728,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_617709 = ref object of OpenApiRestCall_612658
proc url_GetUpdateAssumeRolePolicy_617711(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateAssumeRolePolicy_617710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_617712 = query.getOrDefault("RoleName")
  valid_617712 = validateParameter(valid_617712, JString, required = true,
                                 default = nil)
  if valid_617712 != nil:
    section.add "RoleName", valid_617712
  var valid_617713 = query.getOrDefault("PolicyDocument")
  valid_617713 = validateParameter(valid_617713, JString, required = true,
                                 default = nil)
  if valid_617713 != nil:
    section.add "PolicyDocument", valid_617713
  var valid_617714 = query.getOrDefault("Action")
  valid_617714 = validateParameter(valid_617714, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_617714 != nil:
    section.add "Action", valid_617714
  var valid_617715 = query.getOrDefault("Version")
  valid_617715 = validateParameter(valid_617715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617715 != nil:
    section.add "Version", valid_617715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617716 = header.getOrDefault("X-Amz-Signature")
  valid_617716 = validateParameter(valid_617716, JString, required = false,
                                 default = nil)
  if valid_617716 != nil:
    section.add "X-Amz-Signature", valid_617716
  var valid_617717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617717 = validateParameter(valid_617717, JString, required = false,
                                 default = nil)
  if valid_617717 != nil:
    section.add "X-Amz-Content-Sha256", valid_617717
  var valid_617718 = header.getOrDefault("X-Amz-Date")
  valid_617718 = validateParameter(valid_617718, JString, required = false,
                                 default = nil)
  if valid_617718 != nil:
    section.add "X-Amz-Date", valid_617718
  var valid_617719 = header.getOrDefault("X-Amz-Credential")
  valid_617719 = validateParameter(valid_617719, JString, required = false,
                                 default = nil)
  if valid_617719 != nil:
    section.add "X-Amz-Credential", valid_617719
  var valid_617720 = header.getOrDefault("X-Amz-Security-Token")
  valid_617720 = validateParameter(valid_617720, JString, required = false,
                                 default = nil)
  if valid_617720 != nil:
    section.add "X-Amz-Security-Token", valid_617720
  var valid_617721 = header.getOrDefault("X-Amz-Algorithm")
  valid_617721 = validateParameter(valid_617721, JString, required = false,
                                 default = nil)
  if valid_617721 != nil:
    section.add "X-Amz-Algorithm", valid_617721
  var valid_617722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617722 = validateParameter(valid_617722, JString, required = false,
                                 default = nil)
  if valid_617722 != nil:
    section.add "X-Amz-SignedHeaders", valid_617722
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617723: Call_GetUpdateAssumeRolePolicy_617709; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_617723.validator(path, query, header, formData, body)
  let scheme = call_617723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617723.url(scheme.get, call_617723.host, call_617723.base,
                         call_617723.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617723, url, valid)

proc call*(call_617724: Call_GetUpdateAssumeRolePolicy_617709; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617725 = newJObject()
  add(query_617725, "RoleName", newJString(RoleName))
  add(query_617725, "PolicyDocument", newJString(PolicyDocument))
  add(query_617725, "Action", newJString(Action))
  add(query_617725, "Version", newJString(Version))
  result = call_617724.call(nil, query_617725, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_617709(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_617710, base: "/",
    url: url_GetUpdateAssumeRolePolicy_617711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_617762 = ref object of OpenApiRestCall_612658
proc url_PostUpdateGroup_617764(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateGroup_617763(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617765 = query.getOrDefault("Action")
  valid_617765 = validateParameter(valid_617765, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_617765 != nil:
    section.add "Action", valid_617765
  var valid_617766 = query.getOrDefault("Version")
  valid_617766 = validateParameter(valid_617766, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617766 != nil:
    section.add "Version", valid_617766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617767 = header.getOrDefault("X-Amz-Signature")
  valid_617767 = validateParameter(valid_617767, JString, required = false,
                                 default = nil)
  if valid_617767 != nil:
    section.add "X-Amz-Signature", valid_617767
  var valid_617768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617768 = validateParameter(valid_617768, JString, required = false,
                                 default = nil)
  if valid_617768 != nil:
    section.add "X-Amz-Content-Sha256", valid_617768
  var valid_617769 = header.getOrDefault("X-Amz-Date")
  valid_617769 = validateParameter(valid_617769, JString, required = false,
                                 default = nil)
  if valid_617769 != nil:
    section.add "X-Amz-Date", valid_617769
  var valid_617770 = header.getOrDefault("X-Amz-Credential")
  valid_617770 = validateParameter(valid_617770, JString, required = false,
                                 default = nil)
  if valid_617770 != nil:
    section.add "X-Amz-Credential", valid_617770
  var valid_617771 = header.getOrDefault("X-Amz-Security-Token")
  valid_617771 = validateParameter(valid_617771, JString, required = false,
                                 default = nil)
  if valid_617771 != nil:
    section.add "X-Amz-Security-Token", valid_617771
  var valid_617772 = header.getOrDefault("X-Amz-Algorithm")
  valid_617772 = validateParameter(valid_617772, JString, required = false,
                                 default = nil)
  if valid_617772 != nil:
    section.add "X-Amz-Algorithm", valid_617772
  var valid_617773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617773 = validateParameter(valid_617773, JString, required = false,
                                 default = nil)
  if valid_617773 != nil:
    section.add "X-Amz-SignedHeaders", valid_617773
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_617774 = formData.getOrDefault("NewGroupName")
  valid_617774 = validateParameter(valid_617774, JString, required = false,
                                 default = nil)
  if valid_617774 != nil:
    section.add "NewGroupName", valid_617774
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_617775 = formData.getOrDefault("GroupName")
  valid_617775 = validateParameter(valid_617775, JString, required = true,
                                 default = nil)
  if valid_617775 != nil:
    section.add "GroupName", valid_617775
  var valid_617776 = formData.getOrDefault("NewPath")
  valid_617776 = validateParameter(valid_617776, JString, required = false,
                                 default = nil)
  if valid_617776 != nil:
    section.add "NewPath", valid_617776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617777: Call_PostUpdateGroup_617762; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_617777.validator(path, query, header, formData, body)
  let scheme = call_617777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617777.url(scheme.get, call_617777.host, call_617777.base,
                         call_617777.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617777, url, valid)

proc call*(call_617778: Call_PostUpdateGroup_617762; GroupName: string;
          NewGroupName: string = ""; NewPath: string = "";
          Action: string = "UpdateGroup"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617779 = newJObject()
  var formData_617780 = newJObject()
  add(formData_617780, "NewGroupName", newJString(NewGroupName))
  add(formData_617780, "GroupName", newJString(GroupName))
  add(formData_617780, "NewPath", newJString(NewPath))
  add(query_617779, "Action", newJString(Action))
  add(query_617779, "Version", newJString(Version))
  result = call_617778.call(nil, query_617779, nil, formData_617780, nil)

var postUpdateGroup* = Call_PostUpdateGroup_617762(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_617763,
    base: "/", url: url_PostUpdateGroup_617764, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_617744 = ref object of OpenApiRestCall_612658
proc url_GetUpdateGroup_617746(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateGroup_617745(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `GroupName` field"
  var valid_617747 = query.getOrDefault("GroupName")
  valid_617747 = validateParameter(valid_617747, JString, required = true,
                                 default = nil)
  if valid_617747 != nil:
    section.add "GroupName", valid_617747
  var valid_617748 = query.getOrDefault("NewPath")
  valid_617748 = validateParameter(valid_617748, JString, required = false,
                                 default = nil)
  if valid_617748 != nil:
    section.add "NewPath", valid_617748
  var valid_617749 = query.getOrDefault("Action")
  valid_617749 = validateParameter(valid_617749, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_617749 != nil:
    section.add "Action", valid_617749
  var valid_617750 = query.getOrDefault("NewGroupName")
  valid_617750 = validateParameter(valid_617750, JString, required = false,
                                 default = nil)
  if valid_617750 != nil:
    section.add "NewGroupName", valid_617750
  var valid_617751 = query.getOrDefault("Version")
  valid_617751 = validateParameter(valid_617751, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617751 != nil:
    section.add "Version", valid_617751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617752 = header.getOrDefault("X-Amz-Signature")
  valid_617752 = validateParameter(valid_617752, JString, required = false,
                                 default = nil)
  if valid_617752 != nil:
    section.add "X-Amz-Signature", valid_617752
  var valid_617753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617753 = validateParameter(valid_617753, JString, required = false,
                                 default = nil)
  if valid_617753 != nil:
    section.add "X-Amz-Content-Sha256", valid_617753
  var valid_617754 = header.getOrDefault("X-Amz-Date")
  valid_617754 = validateParameter(valid_617754, JString, required = false,
                                 default = nil)
  if valid_617754 != nil:
    section.add "X-Amz-Date", valid_617754
  var valid_617755 = header.getOrDefault("X-Amz-Credential")
  valid_617755 = validateParameter(valid_617755, JString, required = false,
                                 default = nil)
  if valid_617755 != nil:
    section.add "X-Amz-Credential", valid_617755
  var valid_617756 = header.getOrDefault("X-Amz-Security-Token")
  valid_617756 = validateParameter(valid_617756, JString, required = false,
                                 default = nil)
  if valid_617756 != nil:
    section.add "X-Amz-Security-Token", valid_617756
  var valid_617757 = header.getOrDefault("X-Amz-Algorithm")
  valid_617757 = validateParameter(valid_617757, JString, required = false,
                                 default = nil)
  if valid_617757 != nil:
    section.add "X-Amz-Algorithm", valid_617757
  var valid_617758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617758 = validateParameter(valid_617758, JString, required = false,
                                 default = nil)
  if valid_617758 != nil:
    section.add "X-Amz-SignedHeaders", valid_617758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617759: Call_GetUpdateGroup_617744; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_617759.validator(path, query, header, formData, body)
  let scheme = call_617759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617759.url(scheme.get, call_617759.host, call_617759.base,
                         call_617759.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617759, url, valid)

proc call*(call_617760: Call_GetUpdateGroup_617744; GroupName: string;
          NewPath: string = ""; Action: string = "UpdateGroup";
          NewGroupName: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_617761 = newJObject()
  add(query_617761, "GroupName", newJString(GroupName))
  add(query_617761, "NewPath", newJString(NewPath))
  add(query_617761, "Action", newJString(Action))
  add(query_617761, "NewGroupName", newJString(NewGroupName))
  add(query_617761, "Version", newJString(Version))
  result = call_617760.call(nil, query_617761, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_617744(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_617745,
    base: "/", url: url_GetUpdateGroup_617746, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_617799 = ref object of OpenApiRestCall_612658
proc url_PostUpdateLoginProfile_617801(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateLoginProfile_617800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617802 = query.getOrDefault("Action")
  valid_617802 = validateParameter(valid_617802, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_617802 != nil:
    section.add "Action", valid_617802
  var valid_617803 = query.getOrDefault("Version")
  valid_617803 = validateParameter(valid_617803, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617803 != nil:
    section.add "Version", valid_617803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617804 = header.getOrDefault("X-Amz-Signature")
  valid_617804 = validateParameter(valid_617804, JString, required = false,
                                 default = nil)
  if valid_617804 != nil:
    section.add "X-Amz-Signature", valid_617804
  var valid_617805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617805 = validateParameter(valid_617805, JString, required = false,
                                 default = nil)
  if valid_617805 != nil:
    section.add "X-Amz-Content-Sha256", valid_617805
  var valid_617806 = header.getOrDefault("X-Amz-Date")
  valid_617806 = validateParameter(valid_617806, JString, required = false,
                                 default = nil)
  if valid_617806 != nil:
    section.add "X-Amz-Date", valid_617806
  var valid_617807 = header.getOrDefault("X-Amz-Credential")
  valid_617807 = validateParameter(valid_617807, JString, required = false,
                                 default = nil)
  if valid_617807 != nil:
    section.add "X-Amz-Credential", valid_617807
  var valid_617808 = header.getOrDefault("X-Amz-Security-Token")
  valid_617808 = validateParameter(valid_617808, JString, required = false,
                                 default = nil)
  if valid_617808 != nil:
    section.add "X-Amz-Security-Token", valid_617808
  var valid_617809 = header.getOrDefault("X-Amz-Algorithm")
  valid_617809 = validateParameter(valid_617809, JString, required = false,
                                 default = nil)
  if valid_617809 != nil:
    section.add "X-Amz-Algorithm", valid_617809
  var valid_617810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617810 = validateParameter(valid_617810, JString, required = false,
                                 default = nil)
  if valid_617810 != nil:
    section.add "X-Amz-SignedHeaders", valid_617810
  result.add "header", section
  ## parameters in `formData` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  var valid_617811 = formData.getOrDefault("Password")
  valid_617811 = validateParameter(valid_617811, JString, required = false,
                                 default = nil)
  if valid_617811 != nil:
    section.add "Password", valid_617811
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_617812 = formData.getOrDefault("UserName")
  valid_617812 = validateParameter(valid_617812, JString, required = true,
                                 default = nil)
  if valid_617812 != nil:
    section.add "UserName", valid_617812
  var valid_617813 = formData.getOrDefault("PasswordResetRequired")
  valid_617813 = validateParameter(valid_617813, JBool, required = false, default = nil)
  if valid_617813 != nil:
    section.add "PasswordResetRequired", valid_617813
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617814: Call_PostUpdateLoginProfile_617799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617814.validator(path, query, header, formData, body)
  let scheme = call_617814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617814.url(scheme.get, call_617814.host, call_617814.base,
                         call_617814.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617814, url, valid)

proc call*(call_617815: Call_PostUpdateLoginProfile_617799; UserName: string;
          Password: string = ""; Action: string = "UpdateLoginProfile";
          PasswordResetRequired: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Version: string (required)
  var query_617816 = newJObject()
  var formData_617817 = newJObject()
  add(formData_617817, "Password", newJString(Password))
  add(formData_617817, "UserName", newJString(UserName))
  add(query_617816, "Action", newJString(Action))
  add(formData_617817, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_617816, "Version", newJString(Version))
  result = call_617815.call(nil, query_617816, nil, formData_617817, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_617799(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_617800, base: "/",
    url: url_PostUpdateLoginProfile_617801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_617781 = ref object of OpenApiRestCall_612658
proc url_GetUpdateLoginProfile_617783(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateLoginProfile_617782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617784 = query.getOrDefault("Password")
  valid_617784 = validateParameter(valid_617784, JString, required = false,
                                 default = nil)
  if valid_617784 != nil:
    section.add "Password", valid_617784
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_617785 = query.getOrDefault("UserName")
  valid_617785 = validateParameter(valid_617785, JString, required = true,
                                 default = nil)
  if valid_617785 != nil:
    section.add "UserName", valid_617785
  var valid_617786 = query.getOrDefault("PasswordResetRequired")
  valid_617786 = validateParameter(valid_617786, JBool, required = false, default = nil)
  if valid_617786 != nil:
    section.add "PasswordResetRequired", valid_617786
  var valid_617787 = query.getOrDefault("Action")
  valid_617787 = validateParameter(valid_617787, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_617787 != nil:
    section.add "Action", valid_617787
  var valid_617788 = query.getOrDefault("Version")
  valid_617788 = validateParameter(valid_617788, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617788 != nil:
    section.add "Version", valid_617788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617789 = header.getOrDefault("X-Amz-Signature")
  valid_617789 = validateParameter(valid_617789, JString, required = false,
                                 default = nil)
  if valid_617789 != nil:
    section.add "X-Amz-Signature", valid_617789
  var valid_617790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617790 = validateParameter(valid_617790, JString, required = false,
                                 default = nil)
  if valid_617790 != nil:
    section.add "X-Amz-Content-Sha256", valid_617790
  var valid_617791 = header.getOrDefault("X-Amz-Date")
  valid_617791 = validateParameter(valid_617791, JString, required = false,
                                 default = nil)
  if valid_617791 != nil:
    section.add "X-Amz-Date", valid_617791
  var valid_617792 = header.getOrDefault("X-Amz-Credential")
  valid_617792 = validateParameter(valid_617792, JString, required = false,
                                 default = nil)
  if valid_617792 != nil:
    section.add "X-Amz-Credential", valid_617792
  var valid_617793 = header.getOrDefault("X-Amz-Security-Token")
  valid_617793 = validateParameter(valid_617793, JString, required = false,
                                 default = nil)
  if valid_617793 != nil:
    section.add "X-Amz-Security-Token", valid_617793
  var valid_617794 = header.getOrDefault("X-Amz-Algorithm")
  valid_617794 = validateParameter(valid_617794, JString, required = false,
                                 default = nil)
  if valid_617794 != nil:
    section.add "X-Amz-Algorithm", valid_617794
  var valid_617795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617795 = validateParameter(valid_617795, JString, required = false,
                                 default = nil)
  if valid_617795 != nil:
    section.add "X-Amz-SignedHeaders", valid_617795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617796: Call_GetUpdateLoginProfile_617781; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_617796.validator(path, query, header, formData, body)
  let scheme = call_617796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617796.url(scheme.get, call_617796.host, call_617796.base,
                         call_617796.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617796, url, valid)

proc call*(call_617797: Call_GetUpdateLoginProfile_617781; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617798 = newJObject()
  add(query_617798, "Password", newJString(Password))
  add(query_617798, "UserName", newJString(UserName))
  add(query_617798, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_617798, "Action", newJString(Action))
  add(query_617798, "Version", newJString(Version))
  result = call_617797.call(nil, query_617798, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_617781(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_617782, base: "/",
    url: url_GetUpdateLoginProfile_617783, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_617835 = ref object of OpenApiRestCall_612658
proc url_PostUpdateOpenIDConnectProviderThumbprint_617837(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_617836(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617838 = query.getOrDefault("Action")
  valid_617838 = validateParameter(valid_617838, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_617838 != nil:
    section.add "Action", valid_617838
  var valid_617839 = query.getOrDefault("Version")
  valid_617839 = validateParameter(valid_617839, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617839 != nil:
    section.add "Version", valid_617839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617840 = header.getOrDefault("X-Amz-Signature")
  valid_617840 = validateParameter(valid_617840, JString, required = false,
                                 default = nil)
  if valid_617840 != nil:
    section.add "X-Amz-Signature", valid_617840
  var valid_617841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617841 = validateParameter(valid_617841, JString, required = false,
                                 default = nil)
  if valid_617841 != nil:
    section.add "X-Amz-Content-Sha256", valid_617841
  var valid_617842 = header.getOrDefault("X-Amz-Date")
  valid_617842 = validateParameter(valid_617842, JString, required = false,
                                 default = nil)
  if valid_617842 != nil:
    section.add "X-Amz-Date", valid_617842
  var valid_617843 = header.getOrDefault("X-Amz-Credential")
  valid_617843 = validateParameter(valid_617843, JString, required = false,
                                 default = nil)
  if valid_617843 != nil:
    section.add "X-Amz-Credential", valid_617843
  var valid_617844 = header.getOrDefault("X-Amz-Security-Token")
  valid_617844 = validateParameter(valid_617844, JString, required = false,
                                 default = nil)
  if valid_617844 != nil:
    section.add "X-Amz-Security-Token", valid_617844
  var valid_617845 = header.getOrDefault("X-Amz-Algorithm")
  valid_617845 = validateParameter(valid_617845, JString, required = false,
                                 default = nil)
  if valid_617845 != nil:
    section.add "X-Amz-Algorithm", valid_617845
  var valid_617846 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617846 = validateParameter(valid_617846, JString, required = false,
                                 default = nil)
  if valid_617846 != nil:
    section.add "X-Amz-SignedHeaders", valid_617846
  result.add "header", section
  ## parameters in `formData` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_617847 = formData.getOrDefault("ThumbprintList")
  valid_617847 = validateParameter(valid_617847, JArray, required = true, default = nil)
  if valid_617847 != nil:
    section.add "ThumbprintList", valid_617847
  var valid_617848 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_617848 = validateParameter(valid_617848, JString, required = true,
                                 default = nil)
  if valid_617848 != nil:
    section.add "OpenIDConnectProviderArn", valid_617848
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617849: Call_PostUpdateOpenIDConnectProviderThumbprint_617835;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_617849.validator(path, query, header, formData, body)
  let scheme = call_617849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617849.url(scheme.get, call_617849.host, call_617849.base,
                         call_617849.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617849, url, valid)

proc call*(call_617850: Call_PostUpdateOpenIDConnectProviderThumbprint_617835;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  var query_617851 = newJObject()
  var formData_617852 = newJObject()
  if ThumbprintList != nil:
    formData_617852.add "ThumbprintList", ThumbprintList
  add(query_617851, "Action", newJString(Action))
  add(query_617851, "Version", newJString(Version))
  add(formData_617852, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  result = call_617850.call(nil, query_617851, nil, formData_617852, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_617835(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_617836,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_617837,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_617818 = ref object of OpenApiRestCall_612658
proc url_GetUpdateOpenIDConnectProviderThumbprint_617820(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_617819(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_617821 = query.getOrDefault("ThumbprintList")
  valid_617821 = validateParameter(valid_617821, JArray, required = true, default = nil)
  if valid_617821 != nil:
    section.add "ThumbprintList", valid_617821
  var valid_617822 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_617822 = validateParameter(valid_617822, JString, required = true,
                                 default = nil)
  if valid_617822 != nil:
    section.add "OpenIDConnectProviderArn", valid_617822
  var valid_617823 = query.getOrDefault("Action")
  valid_617823 = validateParameter(valid_617823, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_617823 != nil:
    section.add "Action", valid_617823
  var valid_617824 = query.getOrDefault("Version")
  valid_617824 = validateParameter(valid_617824, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617824 != nil:
    section.add "Version", valid_617824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617825 = header.getOrDefault("X-Amz-Signature")
  valid_617825 = validateParameter(valid_617825, JString, required = false,
                                 default = nil)
  if valid_617825 != nil:
    section.add "X-Amz-Signature", valid_617825
  var valid_617826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617826 = validateParameter(valid_617826, JString, required = false,
                                 default = nil)
  if valid_617826 != nil:
    section.add "X-Amz-Content-Sha256", valid_617826
  var valid_617827 = header.getOrDefault("X-Amz-Date")
  valid_617827 = validateParameter(valid_617827, JString, required = false,
                                 default = nil)
  if valid_617827 != nil:
    section.add "X-Amz-Date", valid_617827
  var valid_617828 = header.getOrDefault("X-Amz-Credential")
  valid_617828 = validateParameter(valid_617828, JString, required = false,
                                 default = nil)
  if valid_617828 != nil:
    section.add "X-Amz-Credential", valid_617828
  var valid_617829 = header.getOrDefault("X-Amz-Security-Token")
  valid_617829 = validateParameter(valid_617829, JString, required = false,
                                 default = nil)
  if valid_617829 != nil:
    section.add "X-Amz-Security-Token", valid_617829
  var valid_617830 = header.getOrDefault("X-Amz-Algorithm")
  valid_617830 = validateParameter(valid_617830, JString, required = false,
                                 default = nil)
  if valid_617830 != nil:
    section.add "X-Amz-Algorithm", valid_617830
  var valid_617831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617831 = validateParameter(valid_617831, JString, required = false,
                                 default = nil)
  if valid_617831 != nil:
    section.add "X-Amz-SignedHeaders", valid_617831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617832: Call_GetUpdateOpenIDConnectProviderThumbprint_617818;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_617832.validator(path, query, header, formData, body)
  let scheme = call_617832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617832.url(scheme.get, call_617832.host, call_617832.base,
                         call_617832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617832, url, valid)

proc call*(call_617833: Call_GetUpdateOpenIDConnectProviderThumbprint_617818;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617834 = newJObject()
  if ThumbprintList != nil:
    query_617834.add "ThumbprintList", ThumbprintList
  add(query_617834, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_617834, "Action", newJString(Action))
  add(query_617834, "Version", newJString(Version))
  result = call_617833.call(nil, query_617834, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_617818(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_617819,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_617820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_617871 = ref object of OpenApiRestCall_612658
proc url_PostUpdateRole_617873(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRole_617872(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617874 = query.getOrDefault("Action")
  valid_617874 = validateParameter(valid_617874, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_617874 != nil:
    section.add "Action", valid_617874
  var valid_617875 = query.getOrDefault("Version")
  valid_617875 = validateParameter(valid_617875, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617875 != nil:
    section.add "Version", valid_617875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617876 = header.getOrDefault("X-Amz-Signature")
  valid_617876 = validateParameter(valid_617876, JString, required = false,
                                 default = nil)
  if valid_617876 != nil:
    section.add "X-Amz-Signature", valid_617876
  var valid_617877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617877 = validateParameter(valid_617877, JString, required = false,
                                 default = nil)
  if valid_617877 != nil:
    section.add "X-Amz-Content-Sha256", valid_617877
  var valid_617878 = header.getOrDefault("X-Amz-Date")
  valid_617878 = validateParameter(valid_617878, JString, required = false,
                                 default = nil)
  if valid_617878 != nil:
    section.add "X-Amz-Date", valid_617878
  var valid_617879 = header.getOrDefault("X-Amz-Credential")
  valid_617879 = validateParameter(valid_617879, JString, required = false,
                                 default = nil)
  if valid_617879 != nil:
    section.add "X-Amz-Credential", valid_617879
  var valid_617880 = header.getOrDefault("X-Amz-Security-Token")
  valid_617880 = validateParameter(valid_617880, JString, required = false,
                                 default = nil)
  if valid_617880 != nil:
    section.add "X-Amz-Security-Token", valid_617880
  var valid_617881 = header.getOrDefault("X-Amz-Algorithm")
  valid_617881 = validateParameter(valid_617881, JString, required = false,
                                 default = nil)
  if valid_617881 != nil:
    section.add "X-Amz-Algorithm", valid_617881
  var valid_617882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617882 = validateParameter(valid_617882, JString, required = false,
                                 default = nil)
  if valid_617882 != nil:
    section.add "X-Amz-SignedHeaders", valid_617882
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  var valid_617883 = formData.getOrDefault("Description")
  valid_617883 = validateParameter(valid_617883, JString, required = false,
                                 default = nil)
  if valid_617883 != nil:
    section.add "Description", valid_617883
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_617884 = formData.getOrDefault("RoleName")
  valid_617884 = validateParameter(valid_617884, JString, required = true,
                                 default = nil)
  if valid_617884 != nil:
    section.add "RoleName", valid_617884
  var valid_617885 = formData.getOrDefault("MaxSessionDuration")
  valid_617885 = validateParameter(valid_617885, JInt, required = false, default = nil)
  if valid_617885 != nil:
    section.add "MaxSessionDuration", valid_617885
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617886: Call_PostUpdateRole_617871; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_617886.validator(path, query, header, formData, body)
  let scheme = call_617886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617886.url(scheme.get, call_617886.host, call_617886.base,
                         call_617886.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617886, url, valid)

proc call*(call_617887: Call_PostUpdateRole_617871; RoleName: string;
          Description: string = ""; Action: string = "UpdateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_617888 = newJObject()
  var formData_617889 = newJObject()
  add(formData_617889, "Description", newJString(Description))
  add(formData_617889, "RoleName", newJString(RoleName))
  add(query_617888, "Action", newJString(Action))
  add(formData_617889, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_617888, "Version", newJString(Version))
  result = call_617887.call(nil, query_617888, nil, formData_617889, nil)

var postUpdateRole* = Call_PostUpdateRole_617871(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_617872,
    base: "/", url: url_PostUpdateRole_617873, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_617853 = ref object of OpenApiRestCall_612658
proc url_GetUpdateRole_617855(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRole_617854(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_617856 = query.getOrDefault("RoleName")
  valid_617856 = validateParameter(valid_617856, JString, required = true,
                                 default = nil)
  if valid_617856 != nil:
    section.add "RoleName", valid_617856
  var valid_617857 = query.getOrDefault("MaxSessionDuration")
  valid_617857 = validateParameter(valid_617857, JInt, required = false, default = nil)
  if valid_617857 != nil:
    section.add "MaxSessionDuration", valid_617857
  var valid_617858 = query.getOrDefault("Action")
  valid_617858 = validateParameter(valid_617858, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_617858 != nil:
    section.add "Action", valid_617858
  var valid_617859 = query.getOrDefault("Description")
  valid_617859 = validateParameter(valid_617859, JString, required = false,
                                 default = nil)
  if valid_617859 != nil:
    section.add "Description", valid_617859
  var valid_617860 = query.getOrDefault("Version")
  valid_617860 = validateParameter(valid_617860, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617860 != nil:
    section.add "Version", valid_617860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617861 = header.getOrDefault("X-Amz-Signature")
  valid_617861 = validateParameter(valid_617861, JString, required = false,
                                 default = nil)
  if valid_617861 != nil:
    section.add "X-Amz-Signature", valid_617861
  var valid_617862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617862 = validateParameter(valid_617862, JString, required = false,
                                 default = nil)
  if valid_617862 != nil:
    section.add "X-Amz-Content-Sha256", valid_617862
  var valid_617863 = header.getOrDefault("X-Amz-Date")
  valid_617863 = validateParameter(valid_617863, JString, required = false,
                                 default = nil)
  if valid_617863 != nil:
    section.add "X-Amz-Date", valid_617863
  var valid_617864 = header.getOrDefault("X-Amz-Credential")
  valid_617864 = validateParameter(valid_617864, JString, required = false,
                                 default = nil)
  if valid_617864 != nil:
    section.add "X-Amz-Credential", valid_617864
  var valid_617865 = header.getOrDefault("X-Amz-Security-Token")
  valid_617865 = validateParameter(valid_617865, JString, required = false,
                                 default = nil)
  if valid_617865 != nil:
    section.add "X-Amz-Security-Token", valid_617865
  var valid_617866 = header.getOrDefault("X-Amz-Algorithm")
  valid_617866 = validateParameter(valid_617866, JString, required = false,
                                 default = nil)
  if valid_617866 != nil:
    section.add "X-Amz-Algorithm", valid_617866
  var valid_617867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617867 = validateParameter(valid_617867, JString, required = false,
                                 default = nil)
  if valid_617867 != nil:
    section.add "X-Amz-SignedHeaders", valid_617867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617868: Call_GetUpdateRole_617853; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_617868.validator(path, query, header, formData, body)
  let scheme = call_617868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617868.url(scheme.get, call_617868.host, call_617868.base,
                         call_617868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617868, url, valid)

proc call*(call_617869: Call_GetUpdateRole_617853; RoleName: string;
          MaxSessionDuration: int = 0; Action: string = "UpdateRole";
          Description: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_617870 = newJObject()
  add(query_617870, "RoleName", newJString(RoleName))
  add(query_617870, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_617870, "Action", newJString(Action))
  add(query_617870, "Description", newJString(Description))
  add(query_617870, "Version", newJString(Version))
  result = call_617869.call(nil, query_617870, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_617853(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_617854,
    base: "/", url: url_GetUpdateRole_617855, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_617907 = ref object of OpenApiRestCall_612658
proc url_PostUpdateRoleDescription_617909(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateRoleDescription_617908(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617910 = query.getOrDefault("Action")
  valid_617910 = validateParameter(valid_617910, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_617910 != nil:
    section.add "Action", valid_617910
  var valid_617911 = query.getOrDefault("Version")
  valid_617911 = validateParameter(valid_617911, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617911 != nil:
    section.add "Version", valid_617911
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617912 = header.getOrDefault("X-Amz-Signature")
  valid_617912 = validateParameter(valid_617912, JString, required = false,
                                 default = nil)
  if valid_617912 != nil:
    section.add "X-Amz-Signature", valid_617912
  var valid_617913 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617913 = validateParameter(valid_617913, JString, required = false,
                                 default = nil)
  if valid_617913 != nil:
    section.add "X-Amz-Content-Sha256", valid_617913
  var valid_617914 = header.getOrDefault("X-Amz-Date")
  valid_617914 = validateParameter(valid_617914, JString, required = false,
                                 default = nil)
  if valid_617914 != nil:
    section.add "X-Amz-Date", valid_617914
  var valid_617915 = header.getOrDefault("X-Amz-Credential")
  valid_617915 = validateParameter(valid_617915, JString, required = false,
                                 default = nil)
  if valid_617915 != nil:
    section.add "X-Amz-Credential", valid_617915
  var valid_617916 = header.getOrDefault("X-Amz-Security-Token")
  valid_617916 = validateParameter(valid_617916, JString, required = false,
                                 default = nil)
  if valid_617916 != nil:
    section.add "X-Amz-Security-Token", valid_617916
  var valid_617917 = header.getOrDefault("X-Amz-Algorithm")
  valid_617917 = validateParameter(valid_617917, JString, required = false,
                                 default = nil)
  if valid_617917 != nil:
    section.add "X-Amz-Algorithm", valid_617917
  var valid_617918 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617918 = validateParameter(valid_617918, JString, required = false,
                                 default = nil)
  if valid_617918 != nil:
    section.add "X-Amz-SignedHeaders", valid_617918
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_617919 = formData.getOrDefault("Description")
  valid_617919 = validateParameter(valid_617919, JString, required = true,
                                 default = nil)
  if valid_617919 != nil:
    section.add "Description", valid_617919
  var valid_617920 = formData.getOrDefault("RoleName")
  valid_617920 = validateParameter(valid_617920, JString, required = true,
                                 default = nil)
  if valid_617920 != nil:
    section.add "RoleName", valid_617920
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617921: Call_PostUpdateRoleDescription_617907; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_617921.validator(path, query, header, formData, body)
  let scheme = call_617921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617921.url(scheme.get, call_617921.host, call_617921.base,
                         call_617921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617921, url, valid)

proc call*(call_617922: Call_PostUpdateRoleDescription_617907; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617923 = newJObject()
  var formData_617924 = newJObject()
  add(formData_617924, "Description", newJString(Description))
  add(formData_617924, "RoleName", newJString(RoleName))
  add(query_617923, "Action", newJString(Action))
  add(query_617923, "Version", newJString(Version))
  result = call_617922.call(nil, query_617923, nil, formData_617924, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_617907(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_617908, base: "/",
    url: url_PostUpdateRoleDescription_617909,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_617890 = ref object of OpenApiRestCall_612658
proc url_GetUpdateRoleDescription_617892(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateRoleDescription_617891(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `RoleName` field"
  var valid_617893 = query.getOrDefault("RoleName")
  valid_617893 = validateParameter(valid_617893, JString, required = true,
                                 default = nil)
  if valid_617893 != nil:
    section.add "RoleName", valid_617893
  var valid_617894 = query.getOrDefault("Action")
  valid_617894 = validateParameter(valid_617894, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_617894 != nil:
    section.add "Action", valid_617894
  var valid_617895 = query.getOrDefault("Description")
  valid_617895 = validateParameter(valid_617895, JString, required = true,
                                 default = nil)
  if valid_617895 != nil:
    section.add "Description", valid_617895
  var valid_617896 = query.getOrDefault("Version")
  valid_617896 = validateParameter(valid_617896, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617896 != nil:
    section.add "Version", valid_617896
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617897 = header.getOrDefault("X-Amz-Signature")
  valid_617897 = validateParameter(valid_617897, JString, required = false,
                                 default = nil)
  if valid_617897 != nil:
    section.add "X-Amz-Signature", valid_617897
  var valid_617898 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617898 = validateParameter(valid_617898, JString, required = false,
                                 default = nil)
  if valid_617898 != nil:
    section.add "X-Amz-Content-Sha256", valid_617898
  var valid_617899 = header.getOrDefault("X-Amz-Date")
  valid_617899 = validateParameter(valid_617899, JString, required = false,
                                 default = nil)
  if valid_617899 != nil:
    section.add "X-Amz-Date", valid_617899
  var valid_617900 = header.getOrDefault("X-Amz-Credential")
  valid_617900 = validateParameter(valid_617900, JString, required = false,
                                 default = nil)
  if valid_617900 != nil:
    section.add "X-Amz-Credential", valid_617900
  var valid_617901 = header.getOrDefault("X-Amz-Security-Token")
  valid_617901 = validateParameter(valid_617901, JString, required = false,
                                 default = nil)
  if valid_617901 != nil:
    section.add "X-Amz-Security-Token", valid_617901
  var valid_617902 = header.getOrDefault("X-Amz-Algorithm")
  valid_617902 = validateParameter(valid_617902, JString, required = false,
                                 default = nil)
  if valid_617902 != nil:
    section.add "X-Amz-Algorithm", valid_617902
  var valid_617903 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617903 = validateParameter(valid_617903, JString, required = false,
                                 default = nil)
  if valid_617903 != nil:
    section.add "X-Amz-SignedHeaders", valid_617903
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617904: Call_GetUpdateRoleDescription_617890; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_617904.validator(path, query, header, formData, body)
  let scheme = call_617904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617904.url(scheme.get, call_617904.host, call_617904.base,
                         call_617904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617904, url, valid)

proc call*(call_617905: Call_GetUpdateRoleDescription_617890; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Version: string (required)
  var query_617906 = newJObject()
  add(query_617906, "RoleName", newJString(RoleName))
  add(query_617906, "Action", newJString(Action))
  add(query_617906, "Description", newJString(Description))
  add(query_617906, "Version", newJString(Version))
  result = call_617905.call(nil, query_617906, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_617890(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_617891, base: "/",
    url: url_GetUpdateRoleDescription_617892, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_617942 = ref object of OpenApiRestCall_612658
proc url_PostUpdateSAMLProvider_617944(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSAMLProvider_617943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617945 = query.getOrDefault("Action")
  valid_617945 = validateParameter(valid_617945, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_617945 != nil:
    section.add "Action", valid_617945
  var valid_617946 = query.getOrDefault("Version")
  valid_617946 = validateParameter(valid_617946, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617946 != nil:
    section.add "Version", valid_617946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617947 = header.getOrDefault("X-Amz-Signature")
  valid_617947 = validateParameter(valid_617947, JString, required = false,
                                 default = nil)
  if valid_617947 != nil:
    section.add "X-Amz-Signature", valid_617947
  var valid_617948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617948 = validateParameter(valid_617948, JString, required = false,
                                 default = nil)
  if valid_617948 != nil:
    section.add "X-Amz-Content-Sha256", valid_617948
  var valid_617949 = header.getOrDefault("X-Amz-Date")
  valid_617949 = validateParameter(valid_617949, JString, required = false,
                                 default = nil)
  if valid_617949 != nil:
    section.add "X-Amz-Date", valid_617949
  var valid_617950 = header.getOrDefault("X-Amz-Credential")
  valid_617950 = validateParameter(valid_617950, JString, required = false,
                                 default = nil)
  if valid_617950 != nil:
    section.add "X-Amz-Credential", valid_617950
  var valid_617951 = header.getOrDefault("X-Amz-Security-Token")
  valid_617951 = validateParameter(valid_617951, JString, required = false,
                                 default = nil)
  if valid_617951 != nil:
    section.add "X-Amz-Security-Token", valid_617951
  var valid_617952 = header.getOrDefault("X-Amz-Algorithm")
  valid_617952 = validateParameter(valid_617952, JString, required = false,
                                 default = nil)
  if valid_617952 != nil:
    section.add "X-Amz-Algorithm", valid_617952
  var valid_617953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617953 = validateParameter(valid_617953, JString, required = false,
                                 default = nil)
  if valid_617953 != nil:
    section.add "X-Amz-SignedHeaders", valid_617953
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_617954 = formData.getOrDefault("SAMLProviderArn")
  valid_617954 = validateParameter(valid_617954, JString, required = true,
                                 default = nil)
  if valid_617954 != nil:
    section.add "SAMLProviderArn", valid_617954
  var valid_617955 = formData.getOrDefault("SAMLMetadataDocument")
  valid_617955 = validateParameter(valid_617955, JString, required = true,
                                 default = nil)
  if valid_617955 != nil:
    section.add "SAMLMetadataDocument", valid_617955
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617956: Call_PostUpdateSAMLProvider_617942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_617956.validator(path, query, header, formData, body)
  let scheme = call_617956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617956.url(scheme.get, call_617956.host, call_617956.base,
                         call_617956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617956, url, valid)

proc call*(call_617957: Call_PostUpdateSAMLProvider_617942;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617958 = newJObject()
  var formData_617959 = newJObject()
  add(formData_617959, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(formData_617959, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_617958, "Action", newJString(Action))
  add(query_617958, "Version", newJString(Version))
  result = call_617957.call(nil, query_617958, nil, formData_617959, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_617942(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_617943, base: "/",
    url: url_PostUpdateSAMLProvider_617944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_617925 = ref object of OpenApiRestCall_612658
proc url_GetUpdateSAMLProvider_617927(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSAMLProvider_617926(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_617928 = query.getOrDefault("Action")
  valid_617928 = validateParameter(valid_617928, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_617928 != nil:
    section.add "Action", valid_617928
  var valid_617929 = query.getOrDefault("SAMLMetadataDocument")
  valid_617929 = validateParameter(valid_617929, JString, required = true,
                                 default = nil)
  if valid_617929 != nil:
    section.add "SAMLMetadataDocument", valid_617929
  var valid_617930 = query.getOrDefault("SAMLProviderArn")
  valid_617930 = validateParameter(valid_617930, JString, required = true,
                                 default = nil)
  if valid_617930 != nil:
    section.add "SAMLProviderArn", valid_617930
  var valid_617931 = query.getOrDefault("Version")
  valid_617931 = validateParameter(valid_617931, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617931 != nil:
    section.add "Version", valid_617931
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617932 = header.getOrDefault("X-Amz-Signature")
  valid_617932 = validateParameter(valid_617932, JString, required = false,
                                 default = nil)
  if valid_617932 != nil:
    section.add "X-Amz-Signature", valid_617932
  var valid_617933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617933 = validateParameter(valid_617933, JString, required = false,
                                 default = nil)
  if valid_617933 != nil:
    section.add "X-Amz-Content-Sha256", valid_617933
  var valid_617934 = header.getOrDefault("X-Amz-Date")
  valid_617934 = validateParameter(valid_617934, JString, required = false,
                                 default = nil)
  if valid_617934 != nil:
    section.add "X-Amz-Date", valid_617934
  var valid_617935 = header.getOrDefault("X-Amz-Credential")
  valid_617935 = validateParameter(valid_617935, JString, required = false,
                                 default = nil)
  if valid_617935 != nil:
    section.add "X-Amz-Credential", valid_617935
  var valid_617936 = header.getOrDefault("X-Amz-Security-Token")
  valid_617936 = validateParameter(valid_617936, JString, required = false,
                                 default = nil)
  if valid_617936 != nil:
    section.add "X-Amz-Security-Token", valid_617936
  var valid_617937 = header.getOrDefault("X-Amz-Algorithm")
  valid_617937 = validateParameter(valid_617937, JString, required = false,
                                 default = nil)
  if valid_617937 != nil:
    section.add "X-Amz-Algorithm", valid_617937
  var valid_617938 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617938 = validateParameter(valid_617938, JString, required = false,
                                 default = nil)
  if valid_617938 != nil:
    section.add "X-Amz-SignedHeaders", valid_617938
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617939: Call_GetUpdateSAMLProvider_617925; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_617939.validator(path, query, header, formData, body)
  let scheme = call_617939.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617939.url(scheme.get, call_617939.host, call_617939.base,
                         call_617939.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617939, url, valid)

proc call*(call_617940: Call_GetUpdateSAMLProvider_617925;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_617941 = newJObject()
  add(query_617941, "Action", newJString(Action))
  add(query_617941, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_617941, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_617941, "Version", newJString(Version))
  result = call_617940.call(nil, query_617941, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_617925(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_617926, base: "/",
    url: url_GetUpdateSAMLProvider_617927, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_617978 = ref object of OpenApiRestCall_612658
proc url_PostUpdateSSHPublicKey_617980(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSSHPublicKey_617979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_617981 = query.getOrDefault("Action")
  valid_617981 = validateParameter(valid_617981, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_617981 != nil:
    section.add "Action", valid_617981
  var valid_617982 = query.getOrDefault("Version")
  valid_617982 = validateParameter(valid_617982, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617982 != nil:
    section.add "Version", valid_617982
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617983 = header.getOrDefault("X-Amz-Signature")
  valid_617983 = validateParameter(valid_617983, JString, required = false,
                                 default = nil)
  if valid_617983 != nil:
    section.add "X-Amz-Signature", valid_617983
  var valid_617984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617984 = validateParameter(valid_617984, JString, required = false,
                                 default = nil)
  if valid_617984 != nil:
    section.add "X-Amz-Content-Sha256", valid_617984
  var valid_617985 = header.getOrDefault("X-Amz-Date")
  valid_617985 = validateParameter(valid_617985, JString, required = false,
                                 default = nil)
  if valid_617985 != nil:
    section.add "X-Amz-Date", valid_617985
  var valid_617986 = header.getOrDefault("X-Amz-Credential")
  valid_617986 = validateParameter(valid_617986, JString, required = false,
                                 default = nil)
  if valid_617986 != nil:
    section.add "X-Amz-Credential", valid_617986
  var valid_617987 = header.getOrDefault("X-Amz-Security-Token")
  valid_617987 = validateParameter(valid_617987, JString, required = false,
                                 default = nil)
  if valid_617987 != nil:
    section.add "X-Amz-Security-Token", valid_617987
  var valid_617988 = header.getOrDefault("X-Amz-Algorithm")
  valid_617988 = validateParameter(valid_617988, JString, required = false,
                                 default = nil)
  if valid_617988 != nil:
    section.add "X-Amz-Algorithm", valid_617988
  var valid_617989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617989 = validateParameter(valid_617989, JString, required = false,
                                 default = nil)
  if valid_617989 != nil:
    section.add "X-Amz-SignedHeaders", valid_617989
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SSHPublicKeyId` field"
  var valid_617990 = formData.getOrDefault("SSHPublicKeyId")
  valid_617990 = validateParameter(valid_617990, JString, required = true,
                                 default = nil)
  if valid_617990 != nil:
    section.add "SSHPublicKeyId", valid_617990
  var valid_617991 = formData.getOrDefault("UserName")
  valid_617991 = validateParameter(valid_617991, JString, required = true,
                                 default = nil)
  if valid_617991 != nil:
    section.add "UserName", valid_617991
  var valid_617992 = formData.getOrDefault("Status")
  valid_617992 = validateParameter(valid_617992, JString, required = true,
                                 default = newJString("Active"))
  if valid_617992 != nil:
    section.add "Status", valid_617992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617993: Call_PostUpdateSSHPublicKey_617978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_617993.validator(path, query, header, formData, body)
  let scheme = call_617993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617993.url(scheme.get, call_617993.host, call_617993.base,
                         call_617993.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617993, url, valid)

proc call*(call_617994: Call_PostUpdateSSHPublicKey_617978; SSHPublicKeyId: string;
          UserName: string; Action: string = "UpdateSSHPublicKey";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Version: string (required)
  var query_617995 = newJObject()
  var formData_617996 = newJObject()
  add(formData_617996, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_617996, "UserName", newJString(UserName))
  add(query_617995, "Action", newJString(Action))
  add(formData_617996, "Status", newJString(Status))
  add(query_617995, "Version", newJString(Version))
  result = call_617994.call(nil, query_617995, nil, formData_617996, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_617978(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_617979, base: "/",
    url: url_PostUpdateSSHPublicKey_617980, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_617960 = ref object of OpenApiRestCall_612658
proc url_GetUpdateSSHPublicKey_617962(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSSHPublicKey_617961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_617963 = query.getOrDefault("SSHPublicKeyId")
  valid_617963 = validateParameter(valid_617963, JString, required = true,
                                 default = nil)
  if valid_617963 != nil:
    section.add "SSHPublicKeyId", valid_617963
  var valid_617964 = query.getOrDefault("UserName")
  valid_617964 = validateParameter(valid_617964, JString, required = true,
                                 default = nil)
  if valid_617964 != nil:
    section.add "UserName", valid_617964
  var valid_617965 = query.getOrDefault("Status")
  valid_617965 = validateParameter(valid_617965, JString, required = true,
                                 default = newJString("Active"))
  if valid_617965 != nil:
    section.add "Status", valid_617965
  var valid_617966 = query.getOrDefault("Action")
  valid_617966 = validateParameter(valid_617966, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_617966 != nil:
    section.add "Action", valid_617966
  var valid_617967 = query.getOrDefault("Version")
  valid_617967 = validateParameter(valid_617967, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_617967 != nil:
    section.add "Version", valid_617967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_617968 = header.getOrDefault("X-Amz-Signature")
  valid_617968 = validateParameter(valid_617968, JString, required = false,
                                 default = nil)
  if valid_617968 != nil:
    section.add "X-Amz-Signature", valid_617968
  var valid_617969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_617969 = validateParameter(valid_617969, JString, required = false,
                                 default = nil)
  if valid_617969 != nil:
    section.add "X-Amz-Content-Sha256", valid_617969
  var valid_617970 = header.getOrDefault("X-Amz-Date")
  valid_617970 = validateParameter(valid_617970, JString, required = false,
                                 default = nil)
  if valid_617970 != nil:
    section.add "X-Amz-Date", valid_617970
  var valid_617971 = header.getOrDefault("X-Amz-Credential")
  valid_617971 = validateParameter(valid_617971, JString, required = false,
                                 default = nil)
  if valid_617971 != nil:
    section.add "X-Amz-Credential", valid_617971
  var valid_617972 = header.getOrDefault("X-Amz-Security-Token")
  valid_617972 = validateParameter(valid_617972, JString, required = false,
                                 default = nil)
  if valid_617972 != nil:
    section.add "X-Amz-Security-Token", valid_617972
  var valid_617973 = header.getOrDefault("X-Amz-Algorithm")
  valid_617973 = validateParameter(valid_617973, JString, required = false,
                                 default = nil)
  if valid_617973 != nil:
    section.add "X-Amz-Algorithm", valid_617973
  var valid_617974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_617974 = validateParameter(valid_617974, JString, required = false,
                                 default = nil)
  if valid_617974 != nil:
    section.add "X-Amz-SignedHeaders", valid_617974
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_617975: Call_GetUpdateSSHPublicKey_617960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_617975.validator(path, query, header, formData, body)
  let scheme = call_617975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_617975.url(scheme.get, call_617975.host, call_617975.base,
                         call_617975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_617975, url, valid)

proc call*(call_617976: Call_GetUpdateSSHPublicKey_617960; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_617977 = newJObject()
  add(query_617977, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_617977, "UserName", newJString(UserName))
  add(query_617977, "Status", newJString(Status))
  add(query_617977, "Action", newJString(Action))
  add(query_617977, "Version", newJString(Version))
  result = call_617976.call(nil, query_617977, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_617960(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_617961, base: "/",
    url: url_GetUpdateSSHPublicKey_617962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_618015 = ref object of OpenApiRestCall_612658
proc url_PostUpdateServerCertificate_618017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServerCertificate_618016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618018 = query.getOrDefault("Action")
  valid_618018 = validateParameter(valid_618018, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_618018 != nil:
    section.add "Action", valid_618018
  var valid_618019 = query.getOrDefault("Version")
  valid_618019 = validateParameter(valid_618019, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618019 != nil:
    section.add "Version", valid_618019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618020 = header.getOrDefault("X-Amz-Signature")
  valid_618020 = validateParameter(valid_618020, JString, required = false,
                                 default = nil)
  if valid_618020 != nil:
    section.add "X-Amz-Signature", valid_618020
  var valid_618021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618021 = validateParameter(valid_618021, JString, required = false,
                                 default = nil)
  if valid_618021 != nil:
    section.add "X-Amz-Content-Sha256", valid_618021
  var valid_618022 = header.getOrDefault("X-Amz-Date")
  valid_618022 = validateParameter(valid_618022, JString, required = false,
                                 default = nil)
  if valid_618022 != nil:
    section.add "X-Amz-Date", valid_618022
  var valid_618023 = header.getOrDefault("X-Amz-Credential")
  valid_618023 = validateParameter(valid_618023, JString, required = false,
                                 default = nil)
  if valid_618023 != nil:
    section.add "X-Amz-Credential", valid_618023
  var valid_618024 = header.getOrDefault("X-Amz-Security-Token")
  valid_618024 = validateParameter(valid_618024, JString, required = false,
                                 default = nil)
  if valid_618024 != nil:
    section.add "X-Amz-Security-Token", valid_618024
  var valid_618025 = header.getOrDefault("X-Amz-Algorithm")
  valid_618025 = validateParameter(valid_618025, JString, required = false,
                                 default = nil)
  if valid_618025 != nil:
    section.add "X-Amz-Algorithm", valid_618025
  var valid_618026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618026 = validateParameter(valid_618026, JString, required = false,
                                 default = nil)
  if valid_618026 != nil:
    section.add "X-Amz-SignedHeaders", valid_618026
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_618027 = formData.getOrDefault("ServerCertificateName")
  valid_618027 = validateParameter(valid_618027, JString, required = true,
                                 default = nil)
  if valid_618027 != nil:
    section.add "ServerCertificateName", valid_618027
  var valid_618028 = formData.getOrDefault("NewPath")
  valid_618028 = validateParameter(valid_618028, JString, required = false,
                                 default = nil)
  if valid_618028 != nil:
    section.add "NewPath", valid_618028
  var valid_618029 = formData.getOrDefault("NewServerCertificateName")
  valid_618029 = validateParameter(valid_618029, JString, required = false,
                                 default = nil)
  if valid_618029 != nil:
    section.add "NewServerCertificateName", valid_618029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618030: Call_PostUpdateServerCertificate_618015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618030.validator(path, query, header, formData, body)
  let scheme = call_618030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618030.url(scheme.get, call_618030.host, call_618030.base,
                         call_618030.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618030, url, valid)

proc call*(call_618031: Call_PostUpdateServerCertificate_618015;
          ServerCertificateName: string; NewPath: string = "";
          NewServerCertificateName: string = "";
          Action: string = "UpdateServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618032 = newJObject()
  var formData_618033 = newJObject()
  add(formData_618033, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_618033, "NewPath", newJString(NewPath))
  add(formData_618033, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_618032, "Action", newJString(Action))
  add(query_618032, "Version", newJString(Version))
  result = call_618031.call(nil, query_618032, nil, formData_618033, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_618015(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_618016, base: "/",
    url: url_PostUpdateServerCertificate_618017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_617997 = ref object of OpenApiRestCall_612658
proc url_GetUpdateServerCertificate_617999(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServerCertificate_617998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_618000 = query.getOrDefault("NewPath")
  valid_618000 = validateParameter(valid_618000, JString, required = false,
                                 default = nil)
  if valid_618000 != nil:
    section.add "NewPath", valid_618000
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_618001 = query.getOrDefault("ServerCertificateName")
  valid_618001 = validateParameter(valid_618001, JString, required = true,
                                 default = nil)
  if valid_618001 != nil:
    section.add "ServerCertificateName", valid_618001
  var valid_618002 = query.getOrDefault("Action")
  valid_618002 = validateParameter(valid_618002, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_618002 != nil:
    section.add "Action", valid_618002
  var valid_618003 = query.getOrDefault("Version")
  valid_618003 = validateParameter(valid_618003, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618003 != nil:
    section.add "Version", valid_618003
  var valid_618004 = query.getOrDefault("NewServerCertificateName")
  valid_618004 = validateParameter(valid_618004, JString, required = false,
                                 default = nil)
  if valid_618004 != nil:
    section.add "NewServerCertificateName", valid_618004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618005 = header.getOrDefault("X-Amz-Signature")
  valid_618005 = validateParameter(valid_618005, JString, required = false,
                                 default = nil)
  if valid_618005 != nil:
    section.add "X-Amz-Signature", valid_618005
  var valid_618006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618006 = validateParameter(valid_618006, JString, required = false,
                                 default = nil)
  if valid_618006 != nil:
    section.add "X-Amz-Content-Sha256", valid_618006
  var valid_618007 = header.getOrDefault("X-Amz-Date")
  valid_618007 = validateParameter(valid_618007, JString, required = false,
                                 default = nil)
  if valid_618007 != nil:
    section.add "X-Amz-Date", valid_618007
  var valid_618008 = header.getOrDefault("X-Amz-Credential")
  valid_618008 = validateParameter(valid_618008, JString, required = false,
                                 default = nil)
  if valid_618008 != nil:
    section.add "X-Amz-Credential", valid_618008
  var valid_618009 = header.getOrDefault("X-Amz-Security-Token")
  valid_618009 = validateParameter(valid_618009, JString, required = false,
                                 default = nil)
  if valid_618009 != nil:
    section.add "X-Amz-Security-Token", valid_618009
  var valid_618010 = header.getOrDefault("X-Amz-Algorithm")
  valid_618010 = validateParameter(valid_618010, JString, required = false,
                                 default = nil)
  if valid_618010 != nil:
    section.add "X-Amz-Algorithm", valid_618010
  var valid_618011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618011 = validateParameter(valid_618011, JString, required = false,
                                 default = nil)
  if valid_618011 != nil:
    section.add "X-Amz-SignedHeaders", valid_618011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618012: Call_GetUpdateServerCertificate_617997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618012.validator(path, query, header, formData, body)
  let scheme = call_618012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618012.url(scheme.get, call_618012.host, call_618012.base,
                         call_618012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618012, url, valid)

proc call*(call_618013: Call_GetUpdateServerCertificate_617997;
          ServerCertificateName: string; NewPath: string = "";
          Action: string = "UpdateServerCertificate";
          Version: string = "2010-05-08"; NewServerCertificateName: string = ""): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_618014 = newJObject()
  add(query_618014, "NewPath", newJString(NewPath))
  add(query_618014, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_618014, "Action", newJString(Action))
  add(query_618014, "Version", newJString(Version))
  add(query_618014, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  result = call_618013.call(nil, query_618014, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_617997(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_617998, base: "/",
    url: url_GetUpdateServerCertificate_617999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_618052 = ref object of OpenApiRestCall_612658
proc url_PostUpdateServiceSpecificCredential_618054(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateServiceSpecificCredential_618053(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618055 = query.getOrDefault("Action")
  valid_618055 = validateParameter(valid_618055, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_618055 != nil:
    section.add "Action", valid_618055
  var valid_618056 = query.getOrDefault("Version")
  valid_618056 = validateParameter(valid_618056, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618056 != nil:
    section.add "Version", valid_618056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618057 = header.getOrDefault("X-Amz-Signature")
  valid_618057 = validateParameter(valid_618057, JString, required = false,
                                 default = nil)
  if valid_618057 != nil:
    section.add "X-Amz-Signature", valid_618057
  var valid_618058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618058 = validateParameter(valid_618058, JString, required = false,
                                 default = nil)
  if valid_618058 != nil:
    section.add "X-Amz-Content-Sha256", valid_618058
  var valid_618059 = header.getOrDefault("X-Amz-Date")
  valid_618059 = validateParameter(valid_618059, JString, required = false,
                                 default = nil)
  if valid_618059 != nil:
    section.add "X-Amz-Date", valid_618059
  var valid_618060 = header.getOrDefault("X-Amz-Credential")
  valid_618060 = validateParameter(valid_618060, JString, required = false,
                                 default = nil)
  if valid_618060 != nil:
    section.add "X-Amz-Credential", valid_618060
  var valid_618061 = header.getOrDefault("X-Amz-Security-Token")
  valid_618061 = validateParameter(valid_618061, JString, required = false,
                                 default = nil)
  if valid_618061 != nil:
    section.add "X-Amz-Security-Token", valid_618061
  var valid_618062 = header.getOrDefault("X-Amz-Algorithm")
  valid_618062 = validateParameter(valid_618062, JString, required = false,
                                 default = nil)
  if valid_618062 != nil:
    section.add "X-Amz-Algorithm", valid_618062
  var valid_618063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618063 = validateParameter(valid_618063, JString, required = false,
                                 default = nil)
  if valid_618063 != nil:
    section.add "X-Amz-SignedHeaders", valid_618063
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_618064 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_618064 = validateParameter(valid_618064, JString, required = true,
                                 default = nil)
  if valid_618064 != nil:
    section.add "ServiceSpecificCredentialId", valid_618064
  var valid_618065 = formData.getOrDefault("UserName")
  valid_618065 = validateParameter(valid_618065, JString, required = false,
                                 default = nil)
  if valid_618065 != nil:
    section.add "UserName", valid_618065
  var valid_618066 = formData.getOrDefault("Status")
  valid_618066 = validateParameter(valid_618066, JString, required = true,
                                 default = newJString("Active"))
  if valid_618066 != nil:
    section.add "Status", valid_618066
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618067: Call_PostUpdateServiceSpecificCredential_618052;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_618067.validator(path, query, header, formData, body)
  let scheme = call_618067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618067.url(scheme.get, call_618067.host, call_618067.base,
                         call_618067.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618067, url, valid)

proc call*(call_618068: Call_PostUpdateServiceSpecificCredential_618052;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "UpdateServiceSpecificCredential";
          Status: string = "Active"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Version: string (required)
  var query_618069 = newJObject()
  var formData_618070 = newJObject()
  add(formData_618070, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_618070, "UserName", newJString(UserName))
  add(query_618069, "Action", newJString(Action))
  add(formData_618070, "Status", newJString(Status))
  add(query_618069, "Version", newJString(Version))
  result = call_618068.call(nil, query_618069, nil, formData_618070, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_618052(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_618053, base: "/",
    url: url_PostUpdateServiceSpecificCredential_618054,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_618034 = ref object of OpenApiRestCall_612658
proc url_GetUpdateServiceSpecificCredential_618036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateServiceSpecificCredential_618035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618037 = query.getOrDefault("UserName")
  valid_618037 = validateParameter(valid_618037, JString, required = false,
                                 default = nil)
  if valid_618037 != nil:
    section.add "UserName", valid_618037
  var valid_618038 = query.getOrDefault("Status")
  valid_618038 = validateParameter(valid_618038, JString, required = true,
                                 default = newJString("Active"))
  if valid_618038 != nil:
    section.add "Status", valid_618038
  var valid_618039 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_618039 = validateParameter(valid_618039, JString, required = true,
                                 default = nil)
  if valid_618039 != nil:
    section.add "ServiceSpecificCredentialId", valid_618039
  var valid_618040 = query.getOrDefault("Action")
  valid_618040 = validateParameter(valid_618040, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_618040 != nil:
    section.add "Action", valid_618040
  var valid_618041 = query.getOrDefault("Version")
  valid_618041 = validateParameter(valid_618041, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618041 != nil:
    section.add "Version", valid_618041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618042 = header.getOrDefault("X-Amz-Signature")
  valid_618042 = validateParameter(valid_618042, JString, required = false,
                                 default = nil)
  if valid_618042 != nil:
    section.add "X-Amz-Signature", valid_618042
  var valid_618043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618043 = validateParameter(valid_618043, JString, required = false,
                                 default = nil)
  if valid_618043 != nil:
    section.add "X-Amz-Content-Sha256", valid_618043
  var valid_618044 = header.getOrDefault("X-Amz-Date")
  valid_618044 = validateParameter(valid_618044, JString, required = false,
                                 default = nil)
  if valid_618044 != nil:
    section.add "X-Amz-Date", valid_618044
  var valid_618045 = header.getOrDefault("X-Amz-Credential")
  valid_618045 = validateParameter(valid_618045, JString, required = false,
                                 default = nil)
  if valid_618045 != nil:
    section.add "X-Amz-Credential", valid_618045
  var valid_618046 = header.getOrDefault("X-Amz-Security-Token")
  valid_618046 = validateParameter(valid_618046, JString, required = false,
                                 default = nil)
  if valid_618046 != nil:
    section.add "X-Amz-Security-Token", valid_618046
  var valid_618047 = header.getOrDefault("X-Amz-Algorithm")
  valid_618047 = validateParameter(valid_618047, JString, required = false,
                                 default = nil)
  if valid_618047 != nil:
    section.add "X-Amz-Algorithm", valid_618047
  var valid_618048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618048 = validateParameter(valid_618048, JString, required = false,
                                 default = nil)
  if valid_618048 != nil:
    section.add "X-Amz-SignedHeaders", valid_618048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618049: Call_GetUpdateServiceSpecificCredential_618034;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_618049.validator(path, query, header, formData, body)
  let scheme = call_618049.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618049.url(scheme.get, call_618049.host, call_618049.base,
                         call_618049.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618049, url, valid)

proc call*(call_618050: Call_GetUpdateServiceSpecificCredential_618034;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618051 = newJObject()
  add(query_618051, "UserName", newJString(UserName))
  add(query_618051, "Status", newJString(Status))
  add(query_618051, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_618051, "Action", newJString(Action))
  add(query_618051, "Version", newJString(Version))
  result = call_618050.call(nil, query_618051, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_618034(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_618035, base: "/",
    url: url_GetUpdateServiceSpecificCredential_618036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_618089 = ref object of OpenApiRestCall_612658
proc url_PostUpdateSigningCertificate_618091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateSigningCertificate_618090(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618092 = query.getOrDefault("Action")
  valid_618092 = validateParameter(valid_618092, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_618092 != nil:
    section.add "Action", valid_618092
  var valid_618093 = query.getOrDefault("Version")
  valid_618093 = validateParameter(valid_618093, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618093 != nil:
    section.add "Version", valid_618093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618094 = header.getOrDefault("X-Amz-Signature")
  valid_618094 = validateParameter(valid_618094, JString, required = false,
                                 default = nil)
  if valid_618094 != nil:
    section.add "X-Amz-Signature", valid_618094
  var valid_618095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618095 = validateParameter(valid_618095, JString, required = false,
                                 default = nil)
  if valid_618095 != nil:
    section.add "X-Amz-Content-Sha256", valid_618095
  var valid_618096 = header.getOrDefault("X-Amz-Date")
  valid_618096 = validateParameter(valid_618096, JString, required = false,
                                 default = nil)
  if valid_618096 != nil:
    section.add "X-Amz-Date", valid_618096
  var valid_618097 = header.getOrDefault("X-Amz-Credential")
  valid_618097 = validateParameter(valid_618097, JString, required = false,
                                 default = nil)
  if valid_618097 != nil:
    section.add "X-Amz-Credential", valid_618097
  var valid_618098 = header.getOrDefault("X-Amz-Security-Token")
  valid_618098 = validateParameter(valid_618098, JString, required = false,
                                 default = nil)
  if valid_618098 != nil:
    section.add "X-Amz-Security-Token", valid_618098
  var valid_618099 = header.getOrDefault("X-Amz-Algorithm")
  valid_618099 = validateParameter(valid_618099, JString, required = false,
                                 default = nil)
  if valid_618099 != nil:
    section.add "X-Amz-Algorithm", valid_618099
  var valid_618100 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618100 = validateParameter(valid_618100, JString, required = false,
                                 default = nil)
  if valid_618100 != nil:
    section.add "X-Amz-SignedHeaders", valid_618100
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_618101 = formData.getOrDefault("CertificateId")
  valid_618101 = validateParameter(valid_618101, JString, required = true,
                                 default = nil)
  if valid_618101 != nil:
    section.add "CertificateId", valid_618101
  var valid_618102 = formData.getOrDefault("UserName")
  valid_618102 = validateParameter(valid_618102, JString, required = false,
                                 default = nil)
  if valid_618102 != nil:
    section.add "UserName", valid_618102
  var valid_618103 = formData.getOrDefault("Status")
  valid_618103 = validateParameter(valid_618103, JString, required = true,
                                 default = newJString("Active"))
  if valid_618103 != nil:
    section.add "Status", valid_618103
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618104: Call_PostUpdateSigningCertificate_618089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_618104.validator(path, query, header, formData, body)
  let scheme = call_618104.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618104.url(scheme.get, call_618104.host, call_618104.base,
                         call_618104.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618104, url, valid)

proc call*(call_618105: Call_PostUpdateSigningCertificate_618089;
          CertificateId: string; UserName: string = "";
          Action: string = "UpdateSigningCertificate"; Status: string = "Active";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Version: string (required)
  var query_618106 = newJObject()
  var formData_618107 = newJObject()
  add(formData_618107, "CertificateId", newJString(CertificateId))
  add(formData_618107, "UserName", newJString(UserName))
  add(query_618106, "Action", newJString(Action))
  add(formData_618107, "Status", newJString(Status))
  add(query_618106, "Version", newJString(Version))
  result = call_618105.call(nil, query_618106, nil, formData_618107, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_618089(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_618090, base: "/",
    url: url_PostUpdateSigningCertificate_618091,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_618071 = ref object of OpenApiRestCall_612658
proc url_GetUpdateSigningCertificate_618073(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateSigningCertificate_618072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_618074 = query.getOrDefault("UserName")
  valid_618074 = validateParameter(valid_618074, JString, required = false,
                                 default = nil)
  if valid_618074 != nil:
    section.add "UserName", valid_618074
  var valid_618075 = query.getOrDefault("Status")
  valid_618075 = validateParameter(valid_618075, JString, required = true,
                                 default = newJString("Active"))
  if valid_618075 != nil:
    section.add "Status", valid_618075
  var valid_618076 = query.getOrDefault("Action")
  valid_618076 = validateParameter(valid_618076, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_618076 != nil:
    section.add "Action", valid_618076
  var valid_618077 = query.getOrDefault("Version")
  valid_618077 = validateParameter(valid_618077, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618077 != nil:
    section.add "Version", valid_618077
  var valid_618078 = query.getOrDefault("CertificateId")
  valid_618078 = validateParameter(valid_618078, JString, required = true,
                                 default = nil)
  if valid_618078 != nil:
    section.add "CertificateId", valid_618078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618079 = header.getOrDefault("X-Amz-Signature")
  valid_618079 = validateParameter(valid_618079, JString, required = false,
                                 default = nil)
  if valid_618079 != nil:
    section.add "X-Amz-Signature", valid_618079
  var valid_618080 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618080 = validateParameter(valid_618080, JString, required = false,
                                 default = nil)
  if valid_618080 != nil:
    section.add "X-Amz-Content-Sha256", valid_618080
  var valid_618081 = header.getOrDefault("X-Amz-Date")
  valid_618081 = validateParameter(valid_618081, JString, required = false,
                                 default = nil)
  if valid_618081 != nil:
    section.add "X-Amz-Date", valid_618081
  var valid_618082 = header.getOrDefault("X-Amz-Credential")
  valid_618082 = validateParameter(valid_618082, JString, required = false,
                                 default = nil)
  if valid_618082 != nil:
    section.add "X-Amz-Credential", valid_618082
  var valid_618083 = header.getOrDefault("X-Amz-Security-Token")
  valid_618083 = validateParameter(valid_618083, JString, required = false,
                                 default = nil)
  if valid_618083 != nil:
    section.add "X-Amz-Security-Token", valid_618083
  var valid_618084 = header.getOrDefault("X-Amz-Algorithm")
  valid_618084 = validateParameter(valid_618084, JString, required = false,
                                 default = nil)
  if valid_618084 != nil:
    section.add "X-Amz-Algorithm", valid_618084
  var valid_618085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618085 = validateParameter(valid_618085, JString, required = false,
                                 default = nil)
  if valid_618085 != nil:
    section.add "X-Amz-SignedHeaders", valid_618085
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618086: Call_GetUpdateSigningCertificate_618071; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_618086.validator(path, query, header, formData, body)
  let scheme = call_618086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618086.url(scheme.get, call_618086.host, call_618086.base,
                         call_618086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618086, url, valid)

proc call*(call_618087: Call_GetUpdateSigningCertificate_618071;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  var query_618088 = newJObject()
  add(query_618088, "UserName", newJString(UserName))
  add(query_618088, "Status", newJString(Status))
  add(query_618088, "Action", newJString(Action))
  add(query_618088, "Version", newJString(Version))
  add(query_618088, "CertificateId", newJString(CertificateId))
  result = call_618087.call(nil, query_618088, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_618071(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_618072, base: "/",
    url: url_GetUpdateSigningCertificate_618073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_618126 = ref object of OpenApiRestCall_612658
proc url_PostUpdateUser_618128(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUpdateUser_618127(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618129 = query.getOrDefault("Action")
  valid_618129 = validateParameter(valid_618129, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_618129 != nil:
    section.add "Action", valid_618129
  var valid_618130 = query.getOrDefault("Version")
  valid_618130 = validateParameter(valid_618130, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618130 != nil:
    section.add "Version", valid_618130
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618131 = header.getOrDefault("X-Amz-Signature")
  valid_618131 = validateParameter(valid_618131, JString, required = false,
                                 default = nil)
  if valid_618131 != nil:
    section.add "X-Amz-Signature", valid_618131
  var valid_618132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618132 = validateParameter(valid_618132, JString, required = false,
                                 default = nil)
  if valid_618132 != nil:
    section.add "X-Amz-Content-Sha256", valid_618132
  var valid_618133 = header.getOrDefault("X-Amz-Date")
  valid_618133 = validateParameter(valid_618133, JString, required = false,
                                 default = nil)
  if valid_618133 != nil:
    section.add "X-Amz-Date", valid_618133
  var valid_618134 = header.getOrDefault("X-Amz-Credential")
  valid_618134 = validateParameter(valid_618134, JString, required = false,
                                 default = nil)
  if valid_618134 != nil:
    section.add "X-Amz-Credential", valid_618134
  var valid_618135 = header.getOrDefault("X-Amz-Security-Token")
  valid_618135 = validateParameter(valid_618135, JString, required = false,
                                 default = nil)
  if valid_618135 != nil:
    section.add "X-Amz-Security-Token", valid_618135
  var valid_618136 = header.getOrDefault("X-Amz-Algorithm")
  valid_618136 = validateParameter(valid_618136, JString, required = false,
                                 default = nil)
  if valid_618136 != nil:
    section.add "X-Amz-Algorithm", valid_618136
  var valid_618137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618137 = validateParameter(valid_618137, JString, required = false,
                                 default = nil)
  if valid_618137 != nil:
    section.add "X-Amz-SignedHeaders", valid_618137
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_618138 = formData.getOrDefault("NewPath")
  valid_618138 = validateParameter(valid_618138, JString, required = false,
                                 default = nil)
  if valid_618138 != nil:
    section.add "NewPath", valid_618138
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_618139 = formData.getOrDefault("UserName")
  valid_618139 = validateParameter(valid_618139, JString, required = true,
                                 default = nil)
  if valid_618139 != nil:
    section.add "UserName", valid_618139
  var valid_618140 = formData.getOrDefault("NewUserName")
  valid_618140 = validateParameter(valid_618140, JString, required = false,
                                 default = nil)
  if valid_618140 != nil:
    section.add "NewUserName", valid_618140
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618141: Call_PostUpdateUser_618126; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_618141.validator(path, query, header, formData, body)
  let scheme = call_618141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618141.url(scheme.get, call_618141.host, call_618141.base,
                         call_618141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618141, url, valid)

proc call*(call_618142: Call_PostUpdateUser_618126; UserName: string;
          NewPath: string = ""; Action: string = "UpdateUser"; NewUserName: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_618143 = newJObject()
  var formData_618144 = newJObject()
  add(formData_618144, "NewPath", newJString(NewPath))
  add(formData_618144, "UserName", newJString(UserName))
  add(query_618143, "Action", newJString(Action))
  add(formData_618144, "NewUserName", newJString(NewUserName))
  add(query_618143, "Version", newJString(Version))
  result = call_618142.call(nil, query_618143, nil, formData_618144, nil)

var postUpdateUser* = Call_PostUpdateUser_618126(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_618127,
    base: "/", url: url_PostUpdateUser_618128, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_618108 = ref object of OpenApiRestCall_612658
proc url_GetUpdateUser_618110(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUpdateUser_618109(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_618111 = query.getOrDefault("UserName")
  valid_618111 = validateParameter(valid_618111, JString, required = true,
                                 default = nil)
  if valid_618111 != nil:
    section.add "UserName", valid_618111
  var valid_618112 = query.getOrDefault("NewUserName")
  valid_618112 = validateParameter(valid_618112, JString, required = false,
                                 default = nil)
  if valid_618112 != nil:
    section.add "NewUserName", valid_618112
  var valid_618113 = query.getOrDefault("NewPath")
  valid_618113 = validateParameter(valid_618113, JString, required = false,
                                 default = nil)
  if valid_618113 != nil:
    section.add "NewPath", valid_618113
  var valid_618114 = query.getOrDefault("Action")
  valid_618114 = validateParameter(valid_618114, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_618114 != nil:
    section.add "Action", valid_618114
  var valid_618115 = query.getOrDefault("Version")
  valid_618115 = validateParameter(valid_618115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618115 != nil:
    section.add "Version", valid_618115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618116 = header.getOrDefault("X-Amz-Signature")
  valid_618116 = validateParameter(valid_618116, JString, required = false,
                                 default = nil)
  if valid_618116 != nil:
    section.add "X-Amz-Signature", valid_618116
  var valid_618117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618117 = validateParameter(valid_618117, JString, required = false,
                                 default = nil)
  if valid_618117 != nil:
    section.add "X-Amz-Content-Sha256", valid_618117
  var valid_618118 = header.getOrDefault("X-Amz-Date")
  valid_618118 = validateParameter(valid_618118, JString, required = false,
                                 default = nil)
  if valid_618118 != nil:
    section.add "X-Amz-Date", valid_618118
  var valid_618119 = header.getOrDefault("X-Amz-Credential")
  valid_618119 = validateParameter(valid_618119, JString, required = false,
                                 default = nil)
  if valid_618119 != nil:
    section.add "X-Amz-Credential", valid_618119
  var valid_618120 = header.getOrDefault("X-Amz-Security-Token")
  valid_618120 = validateParameter(valid_618120, JString, required = false,
                                 default = nil)
  if valid_618120 != nil:
    section.add "X-Amz-Security-Token", valid_618120
  var valid_618121 = header.getOrDefault("X-Amz-Algorithm")
  valid_618121 = validateParameter(valid_618121, JString, required = false,
                                 default = nil)
  if valid_618121 != nil:
    section.add "X-Amz-Algorithm", valid_618121
  var valid_618122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618122 = validateParameter(valid_618122, JString, required = false,
                                 default = nil)
  if valid_618122 != nil:
    section.add "X-Amz-SignedHeaders", valid_618122
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618123: Call_GetUpdateUser_618108; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_618123.validator(path, query, header, formData, body)
  let scheme = call_618123.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618123.url(scheme.get, call_618123.host, call_618123.base,
                         call_618123.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618123, url, valid)

proc call*(call_618124: Call_GetUpdateUser_618108; UserName: string;
          NewUserName: string = ""; NewPath: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618125 = newJObject()
  add(query_618125, "UserName", newJString(UserName))
  add(query_618125, "NewUserName", newJString(NewUserName))
  add(query_618125, "NewPath", newJString(NewPath))
  add(query_618125, "Action", newJString(Action))
  add(query_618125, "Version", newJString(Version))
  result = call_618124.call(nil, query_618125, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_618108(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_618109,
    base: "/", url: url_GetUpdateUser_618110, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_618162 = ref object of OpenApiRestCall_612658
proc url_PostUploadSSHPublicKey_618164(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSSHPublicKey_618163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618165 = query.getOrDefault("Action")
  valid_618165 = validateParameter(valid_618165, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_618165 != nil:
    section.add "Action", valid_618165
  var valid_618166 = query.getOrDefault("Version")
  valid_618166 = validateParameter(valid_618166, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618166 != nil:
    section.add "Version", valid_618166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618167 = header.getOrDefault("X-Amz-Signature")
  valid_618167 = validateParameter(valid_618167, JString, required = false,
                                 default = nil)
  if valid_618167 != nil:
    section.add "X-Amz-Signature", valid_618167
  var valid_618168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618168 = validateParameter(valid_618168, JString, required = false,
                                 default = nil)
  if valid_618168 != nil:
    section.add "X-Amz-Content-Sha256", valid_618168
  var valid_618169 = header.getOrDefault("X-Amz-Date")
  valid_618169 = validateParameter(valid_618169, JString, required = false,
                                 default = nil)
  if valid_618169 != nil:
    section.add "X-Amz-Date", valid_618169
  var valid_618170 = header.getOrDefault("X-Amz-Credential")
  valid_618170 = validateParameter(valid_618170, JString, required = false,
                                 default = nil)
  if valid_618170 != nil:
    section.add "X-Amz-Credential", valid_618170
  var valid_618171 = header.getOrDefault("X-Amz-Security-Token")
  valid_618171 = validateParameter(valid_618171, JString, required = false,
                                 default = nil)
  if valid_618171 != nil:
    section.add "X-Amz-Security-Token", valid_618171
  var valid_618172 = header.getOrDefault("X-Amz-Algorithm")
  valid_618172 = validateParameter(valid_618172, JString, required = false,
                                 default = nil)
  if valid_618172 != nil:
    section.add "X-Amz-Algorithm", valid_618172
  var valid_618173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618173 = validateParameter(valid_618173, JString, required = false,
                                 default = nil)
  if valid_618173 != nil:
    section.add "X-Amz-SignedHeaders", valid_618173
  result.add "header", section
  ## parameters in `formData` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_618174 = formData.getOrDefault("SSHPublicKeyBody")
  valid_618174 = validateParameter(valid_618174, JString, required = true,
                                 default = nil)
  if valid_618174 != nil:
    section.add "SSHPublicKeyBody", valid_618174
  var valid_618175 = formData.getOrDefault("UserName")
  valid_618175 = validateParameter(valid_618175, JString, required = true,
                                 default = nil)
  if valid_618175 != nil:
    section.add "UserName", valid_618175
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618176: Call_PostUploadSSHPublicKey_618162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_618176.validator(path, query, header, formData, body)
  let scheme = call_618176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618176.url(scheme.get, call_618176.host, call_618176.base,
                         call_618176.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618176, url, valid)

proc call*(call_618177: Call_PostUploadSSHPublicKey_618162;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618178 = newJObject()
  var formData_618179 = newJObject()
  add(formData_618179, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(formData_618179, "UserName", newJString(UserName))
  add(query_618178, "Action", newJString(Action))
  add(query_618178, "Version", newJString(Version))
  result = call_618177.call(nil, query_618178, nil, formData_618179, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_618162(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_618163, base: "/",
    url: url_PostUploadSSHPublicKey_618164, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_618145 = ref object of OpenApiRestCall_612658
proc url_GetUploadSSHPublicKey_618147(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSSHPublicKey_618146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_618148 = query.getOrDefault("SSHPublicKeyBody")
  valid_618148 = validateParameter(valid_618148, JString, required = true,
                                 default = nil)
  if valid_618148 != nil:
    section.add "SSHPublicKeyBody", valid_618148
  var valid_618149 = query.getOrDefault("UserName")
  valid_618149 = validateParameter(valid_618149, JString, required = true,
                                 default = nil)
  if valid_618149 != nil:
    section.add "UserName", valid_618149
  var valid_618150 = query.getOrDefault("Action")
  valid_618150 = validateParameter(valid_618150, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_618150 != nil:
    section.add "Action", valid_618150
  var valid_618151 = query.getOrDefault("Version")
  valid_618151 = validateParameter(valid_618151, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618151 != nil:
    section.add "Version", valid_618151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618152 = header.getOrDefault("X-Amz-Signature")
  valid_618152 = validateParameter(valid_618152, JString, required = false,
                                 default = nil)
  if valid_618152 != nil:
    section.add "X-Amz-Signature", valid_618152
  var valid_618153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618153 = validateParameter(valid_618153, JString, required = false,
                                 default = nil)
  if valid_618153 != nil:
    section.add "X-Amz-Content-Sha256", valid_618153
  var valid_618154 = header.getOrDefault("X-Amz-Date")
  valid_618154 = validateParameter(valid_618154, JString, required = false,
                                 default = nil)
  if valid_618154 != nil:
    section.add "X-Amz-Date", valid_618154
  var valid_618155 = header.getOrDefault("X-Amz-Credential")
  valid_618155 = validateParameter(valid_618155, JString, required = false,
                                 default = nil)
  if valid_618155 != nil:
    section.add "X-Amz-Credential", valid_618155
  var valid_618156 = header.getOrDefault("X-Amz-Security-Token")
  valid_618156 = validateParameter(valid_618156, JString, required = false,
                                 default = nil)
  if valid_618156 != nil:
    section.add "X-Amz-Security-Token", valid_618156
  var valid_618157 = header.getOrDefault("X-Amz-Algorithm")
  valid_618157 = validateParameter(valid_618157, JString, required = false,
                                 default = nil)
  if valid_618157 != nil:
    section.add "X-Amz-Algorithm", valid_618157
  var valid_618158 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618158 = validateParameter(valid_618158, JString, required = false,
                                 default = nil)
  if valid_618158 != nil:
    section.add "X-Amz-SignedHeaders", valid_618158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618159: Call_GetUploadSSHPublicKey_618145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_618159.validator(path, query, header, formData, body)
  let scheme = call_618159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618159.url(scheme.get, call_618159.host, call_618159.base,
                         call_618159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618159, url, valid)

proc call*(call_618160: Call_GetUploadSSHPublicKey_618145;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618161 = newJObject()
  add(query_618161, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_618161, "UserName", newJString(UserName))
  add(query_618161, "Action", newJString(Action))
  add(query_618161, "Version", newJString(Version))
  result = call_618160.call(nil, query_618161, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_618145(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_618146, base: "/",
    url: url_GetUploadSSHPublicKey_618147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_618200 = ref object of OpenApiRestCall_612658
proc url_PostUploadServerCertificate_618202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadServerCertificate_618201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618203 = query.getOrDefault("Action")
  valid_618203 = validateParameter(valid_618203, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_618203 != nil:
    section.add "Action", valid_618203
  var valid_618204 = query.getOrDefault("Version")
  valid_618204 = validateParameter(valid_618204, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618204 != nil:
    section.add "Version", valid_618204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618205 = header.getOrDefault("X-Amz-Signature")
  valid_618205 = validateParameter(valid_618205, JString, required = false,
                                 default = nil)
  if valid_618205 != nil:
    section.add "X-Amz-Signature", valid_618205
  var valid_618206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618206 = validateParameter(valid_618206, JString, required = false,
                                 default = nil)
  if valid_618206 != nil:
    section.add "X-Amz-Content-Sha256", valid_618206
  var valid_618207 = header.getOrDefault("X-Amz-Date")
  valid_618207 = validateParameter(valid_618207, JString, required = false,
                                 default = nil)
  if valid_618207 != nil:
    section.add "X-Amz-Date", valid_618207
  var valid_618208 = header.getOrDefault("X-Amz-Credential")
  valid_618208 = validateParameter(valid_618208, JString, required = false,
                                 default = nil)
  if valid_618208 != nil:
    section.add "X-Amz-Credential", valid_618208
  var valid_618209 = header.getOrDefault("X-Amz-Security-Token")
  valid_618209 = validateParameter(valid_618209, JString, required = false,
                                 default = nil)
  if valid_618209 != nil:
    section.add "X-Amz-Security-Token", valid_618209
  var valid_618210 = header.getOrDefault("X-Amz-Algorithm")
  valid_618210 = validateParameter(valid_618210, JString, required = false,
                                 default = nil)
  if valid_618210 != nil:
    section.add "X-Amz-Algorithm", valid_618210
  var valid_618211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618211 = validateParameter(valid_618211, JString, required = false,
                                 default = nil)
  if valid_618211 != nil:
    section.add "X-Amz-SignedHeaders", valid_618211
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_618212 = formData.getOrDefault("CertificateBody")
  valid_618212 = validateParameter(valid_618212, JString, required = true,
                                 default = nil)
  if valid_618212 != nil:
    section.add "CertificateBody", valid_618212
  var valid_618213 = formData.getOrDefault("PrivateKey")
  valid_618213 = validateParameter(valid_618213, JString, required = true,
                                 default = nil)
  if valid_618213 != nil:
    section.add "PrivateKey", valid_618213
  var valid_618214 = formData.getOrDefault("CertificateChain")
  valid_618214 = validateParameter(valid_618214, JString, required = false,
                                 default = nil)
  if valid_618214 != nil:
    section.add "CertificateChain", valid_618214
  var valid_618215 = formData.getOrDefault("ServerCertificateName")
  valid_618215 = validateParameter(valid_618215, JString, required = true,
                                 default = nil)
  if valid_618215 != nil:
    section.add "ServerCertificateName", valid_618215
  var valid_618216 = formData.getOrDefault("Path")
  valid_618216 = validateParameter(valid_618216, JString, required = false,
                                 default = nil)
  if valid_618216 != nil:
    section.add "Path", valid_618216
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618217: Call_PostUploadServerCertificate_618200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618217.validator(path, query, header, formData, body)
  let scheme = call_618217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618217.url(scheme.get, call_618217.host, call_618217.base,
                         call_618217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618217, url, valid)

proc call*(call_618218: Call_PostUploadServerCertificate_618200;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618219 = newJObject()
  var formData_618220 = newJObject()
  add(formData_618220, "CertificateBody", newJString(CertificateBody))
  add(formData_618220, "PrivateKey", newJString(PrivateKey))
  add(formData_618220, "CertificateChain", newJString(CertificateChain))
  add(formData_618220, "ServerCertificateName", newJString(ServerCertificateName))
  add(formData_618220, "Path", newJString(Path))
  add(query_618219, "Action", newJString(Action))
  add(query_618219, "Version", newJString(Version))
  result = call_618218.call(nil, query_618219, nil, formData_618220, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_618200(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_618201, base: "/",
    url: url_PostUploadServerCertificate_618202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_618180 = ref object of OpenApiRestCall_612658
proc url_GetUploadServerCertificate_618182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadServerCertificate_618181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618183 = query.getOrDefault("CertificateChain")
  valid_618183 = validateParameter(valid_618183, JString, required = false,
                                 default = nil)
  if valid_618183 != nil:
    section.add "CertificateChain", valid_618183
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_618184 = query.getOrDefault("CertificateBody")
  valid_618184 = validateParameter(valid_618184, JString, required = true,
                                 default = nil)
  if valid_618184 != nil:
    section.add "CertificateBody", valid_618184
  var valid_618185 = query.getOrDefault("PrivateKey")
  valid_618185 = validateParameter(valid_618185, JString, required = true,
                                 default = nil)
  if valid_618185 != nil:
    section.add "PrivateKey", valid_618185
  var valid_618186 = query.getOrDefault("Path")
  valid_618186 = validateParameter(valid_618186, JString, required = false,
                                 default = nil)
  if valid_618186 != nil:
    section.add "Path", valid_618186
  var valid_618187 = query.getOrDefault("ServerCertificateName")
  valid_618187 = validateParameter(valid_618187, JString, required = true,
                                 default = nil)
  if valid_618187 != nil:
    section.add "ServerCertificateName", valid_618187
  var valid_618188 = query.getOrDefault("Action")
  valid_618188 = validateParameter(valid_618188, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_618188 != nil:
    section.add "Action", valid_618188
  var valid_618189 = query.getOrDefault("Version")
  valid_618189 = validateParameter(valid_618189, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618189 != nil:
    section.add "Version", valid_618189
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618190 = header.getOrDefault("X-Amz-Signature")
  valid_618190 = validateParameter(valid_618190, JString, required = false,
                                 default = nil)
  if valid_618190 != nil:
    section.add "X-Amz-Signature", valid_618190
  var valid_618191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618191 = validateParameter(valid_618191, JString, required = false,
                                 default = nil)
  if valid_618191 != nil:
    section.add "X-Amz-Content-Sha256", valid_618191
  var valid_618192 = header.getOrDefault("X-Amz-Date")
  valid_618192 = validateParameter(valid_618192, JString, required = false,
                                 default = nil)
  if valid_618192 != nil:
    section.add "X-Amz-Date", valid_618192
  var valid_618193 = header.getOrDefault("X-Amz-Credential")
  valid_618193 = validateParameter(valid_618193, JString, required = false,
                                 default = nil)
  if valid_618193 != nil:
    section.add "X-Amz-Credential", valid_618193
  var valid_618194 = header.getOrDefault("X-Amz-Security-Token")
  valid_618194 = validateParameter(valid_618194, JString, required = false,
                                 default = nil)
  if valid_618194 != nil:
    section.add "X-Amz-Security-Token", valid_618194
  var valid_618195 = header.getOrDefault("X-Amz-Algorithm")
  valid_618195 = validateParameter(valid_618195, JString, required = false,
                                 default = nil)
  if valid_618195 != nil:
    section.add "X-Amz-Algorithm", valid_618195
  var valid_618196 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618196 = validateParameter(valid_618196, JString, required = false,
                                 default = nil)
  if valid_618196 != nil:
    section.add "X-Amz-SignedHeaders", valid_618196
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618197: Call_GetUploadServerCertificate_618180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618197.validator(path, query, header, formData, body)
  let scheme = call_618197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618197.url(scheme.get, call_618197.host, call_618197.base,
                         call_618197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618197, url, valid)

proc call*(call_618198: Call_GetUploadServerCertificate_618180;
          CertificateBody: string; PrivateKey: string;
          ServerCertificateName: string; CertificateChain: string = "";
          Path: string = ""; Action: string = "UploadServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618199 = newJObject()
  add(query_618199, "CertificateChain", newJString(CertificateChain))
  add(query_618199, "CertificateBody", newJString(CertificateBody))
  add(query_618199, "PrivateKey", newJString(PrivateKey))
  add(query_618199, "Path", newJString(Path))
  add(query_618199, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_618199, "Action", newJString(Action))
  add(query_618199, "Version", newJString(Version))
  result = call_618198.call(nil, query_618199, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_618180(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_618181, base: "/",
    url: url_GetUploadServerCertificate_618182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_618238 = ref object of OpenApiRestCall_612658
proc url_PostUploadSigningCertificate_618240(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostUploadSigningCertificate_618239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618241 = query.getOrDefault("Action")
  valid_618241 = validateParameter(valid_618241, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_618241 != nil:
    section.add "Action", valid_618241
  var valid_618242 = query.getOrDefault("Version")
  valid_618242 = validateParameter(valid_618242, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618242 != nil:
    section.add "Version", valid_618242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618243 = header.getOrDefault("X-Amz-Signature")
  valid_618243 = validateParameter(valid_618243, JString, required = false,
                                 default = nil)
  if valid_618243 != nil:
    section.add "X-Amz-Signature", valid_618243
  var valid_618244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618244 = validateParameter(valid_618244, JString, required = false,
                                 default = nil)
  if valid_618244 != nil:
    section.add "X-Amz-Content-Sha256", valid_618244
  var valid_618245 = header.getOrDefault("X-Amz-Date")
  valid_618245 = validateParameter(valid_618245, JString, required = false,
                                 default = nil)
  if valid_618245 != nil:
    section.add "X-Amz-Date", valid_618245
  var valid_618246 = header.getOrDefault("X-Amz-Credential")
  valid_618246 = validateParameter(valid_618246, JString, required = false,
                                 default = nil)
  if valid_618246 != nil:
    section.add "X-Amz-Credential", valid_618246
  var valid_618247 = header.getOrDefault("X-Amz-Security-Token")
  valid_618247 = validateParameter(valid_618247, JString, required = false,
                                 default = nil)
  if valid_618247 != nil:
    section.add "X-Amz-Security-Token", valid_618247
  var valid_618248 = header.getOrDefault("X-Amz-Algorithm")
  valid_618248 = validateParameter(valid_618248, JString, required = false,
                                 default = nil)
  if valid_618248 != nil:
    section.add "X-Amz-Algorithm", valid_618248
  var valid_618249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618249 = validateParameter(valid_618249, JString, required = false,
                                 default = nil)
  if valid_618249 != nil:
    section.add "X-Amz-SignedHeaders", valid_618249
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_618250 = formData.getOrDefault("CertificateBody")
  valid_618250 = validateParameter(valid_618250, JString, required = true,
                                 default = nil)
  if valid_618250 != nil:
    section.add "CertificateBody", valid_618250
  var valid_618251 = formData.getOrDefault("UserName")
  valid_618251 = validateParameter(valid_618251, JString, required = false,
                                 default = nil)
  if valid_618251 != nil:
    section.add "UserName", valid_618251
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618252: Call_PostUploadSigningCertificate_618238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618252.validator(path, query, header, formData, body)
  let scheme = call_618252.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618252.url(scheme.get, call_618252.host, call_618252.base,
                         call_618252.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618252, url, valid)

proc call*(call_618253: Call_PostUploadSigningCertificate_618238;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618254 = newJObject()
  var formData_618255 = newJObject()
  add(formData_618255, "CertificateBody", newJString(CertificateBody))
  add(formData_618255, "UserName", newJString(UserName))
  add(query_618254, "Action", newJString(Action))
  add(query_618254, "Version", newJString(Version))
  result = call_618253.call(nil, query_618254, nil, formData_618255, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_618238(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_618239, base: "/",
    url: url_PostUploadSigningCertificate_618240,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_618221 = ref object of OpenApiRestCall_612658
proc url_GetUploadSigningCertificate_618223(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetUploadSigningCertificate_618222(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_618224 = query.getOrDefault("UserName")
  valid_618224 = validateParameter(valid_618224, JString, required = false,
                                 default = nil)
  if valid_618224 != nil:
    section.add "UserName", valid_618224
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_618225 = query.getOrDefault("CertificateBody")
  valid_618225 = validateParameter(valid_618225, JString, required = true,
                                 default = nil)
  if valid_618225 != nil:
    section.add "CertificateBody", valid_618225
  var valid_618226 = query.getOrDefault("Action")
  valid_618226 = validateParameter(valid_618226, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_618226 != nil:
    section.add "Action", valid_618226
  var valid_618227 = query.getOrDefault("Version")
  valid_618227 = validateParameter(valid_618227, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_618227 != nil:
    section.add "Version", valid_618227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_618228 = header.getOrDefault("X-Amz-Signature")
  valid_618228 = validateParameter(valid_618228, JString, required = false,
                                 default = nil)
  if valid_618228 != nil:
    section.add "X-Amz-Signature", valid_618228
  var valid_618229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_618229 = validateParameter(valid_618229, JString, required = false,
                                 default = nil)
  if valid_618229 != nil:
    section.add "X-Amz-Content-Sha256", valid_618229
  var valid_618230 = header.getOrDefault("X-Amz-Date")
  valid_618230 = validateParameter(valid_618230, JString, required = false,
                                 default = nil)
  if valid_618230 != nil:
    section.add "X-Amz-Date", valid_618230
  var valid_618231 = header.getOrDefault("X-Amz-Credential")
  valid_618231 = validateParameter(valid_618231, JString, required = false,
                                 default = nil)
  if valid_618231 != nil:
    section.add "X-Amz-Credential", valid_618231
  var valid_618232 = header.getOrDefault("X-Amz-Security-Token")
  valid_618232 = validateParameter(valid_618232, JString, required = false,
                                 default = nil)
  if valid_618232 != nil:
    section.add "X-Amz-Security-Token", valid_618232
  var valid_618233 = header.getOrDefault("X-Amz-Algorithm")
  valid_618233 = validateParameter(valid_618233, JString, required = false,
                                 default = nil)
  if valid_618233 != nil:
    section.add "X-Amz-Algorithm", valid_618233
  var valid_618234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_618234 = validateParameter(valid_618234, JString, required = false,
                                 default = nil)
  if valid_618234 != nil:
    section.add "X-Amz-SignedHeaders", valid_618234
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_618235: Call_GetUploadSigningCertificate_618221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_618235.validator(path, query, header, formData, body)
  let scheme = call_618235.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_618235.url(scheme.get, call_618235.host, call_618235.base,
                         call_618235.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_618235, url, valid)

proc call*(call_618236: Call_GetUploadSigningCertificate_618221;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_618237 = newJObject()
  add(query_618237, "UserName", newJString(UserName))
  add(query_618237, "CertificateBody", newJString(CertificateBody))
  add(query_618237, "Action", newJString(Action))
  add(query_618237, "Version", newJString(Version))
  result = call_618236.call(nil, query_618237, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_618221(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_618222, base: "/",
    url: url_GetUploadSigningCertificate_618223,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
