
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_602433 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_602433](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_602433): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_603042 = ref object of OpenApiRestCall_602433
proc url_PostAddClientIDToOpenIDConnectProvider_603044(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_603043(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603045 = query.getOrDefault("Action")
  valid_603045 = validateParameter(valid_603045, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_603045 != nil:
    section.add "Action", valid_603045
  var valid_603046 = query.getOrDefault("Version")
  valid_603046 = validateParameter(valid_603046, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603046 != nil:
    section.add "Version", valid_603046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603047 = header.getOrDefault("X-Amz-Date")
  valid_603047 = validateParameter(valid_603047, JString, required = false,
                                 default = nil)
  if valid_603047 != nil:
    section.add "X-Amz-Date", valid_603047
  var valid_603048 = header.getOrDefault("X-Amz-Security-Token")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "X-Amz-Security-Token", valid_603048
  var valid_603049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-Content-Sha256", valid_603049
  var valid_603050 = header.getOrDefault("X-Amz-Algorithm")
  valid_603050 = validateParameter(valid_603050, JString, required = false,
                                 default = nil)
  if valid_603050 != nil:
    section.add "X-Amz-Algorithm", valid_603050
  var valid_603051 = header.getOrDefault("X-Amz-Signature")
  valid_603051 = validateParameter(valid_603051, JString, required = false,
                                 default = nil)
  if valid_603051 != nil:
    section.add "X-Amz-Signature", valid_603051
  var valid_603052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603052 = validateParameter(valid_603052, JString, required = false,
                                 default = nil)
  if valid_603052 != nil:
    section.add "X-Amz-SignedHeaders", valid_603052
  var valid_603053 = header.getOrDefault("X-Amz-Credential")
  valid_603053 = validateParameter(valid_603053, JString, required = false,
                                 default = nil)
  if valid_603053 != nil:
    section.add "X-Amz-Credential", valid_603053
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_603054 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_603054 = validateParameter(valid_603054, JString, required = true,
                                 default = nil)
  if valid_603054 != nil:
    section.add "OpenIDConnectProviderArn", valid_603054
  var valid_603055 = formData.getOrDefault("ClientID")
  valid_603055 = validateParameter(valid_603055, JString, required = true,
                                 default = nil)
  if valid_603055 != nil:
    section.add "ClientID", valid_603055
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603056: Call_PostAddClientIDToOpenIDConnectProvider_603042;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_603056.validator(path, query, header, formData, body)
  let scheme = call_603056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603056.url(scheme.get, call_603056.host, call_603056.base,
                         call_603056.route, valid.getOrDefault("path"))
  result = hook(call_603056, url, valid)

proc call*(call_603057: Call_PostAddClientIDToOpenIDConnectProvider_603042;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  var query_603058 = newJObject()
  var formData_603059 = newJObject()
  add(formData_603059, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_603058, "Action", newJString(Action))
  add(query_603058, "Version", newJString(Version))
  add(formData_603059, "ClientID", newJString(ClientID))
  result = call_603057.call(nil, query_603058, nil, formData_603059, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_603042(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_603043, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_603044,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_602770 = ref object of OpenApiRestCall_602433
proc url_GetAddClientIDToOpenIDConnectProvider_602772(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_602771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_602884 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_602884 = validateParameter(valid_602884, JString, required = true,
                                 default = nil)
  if valid_602884 != nil:
    section.add "OpenIDConnectProviderArn", valid_602884
  var valid_602898 = query.getOrDefault("Action")
  valid_602898 = validateParameter(valid_602898, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_602898 != nil:
    section.add "Action", valid_602898
  var valid_602899 = query.getOrDefault("ClientID")
  valid_602899 = validateParameter(valid_602899, JString, required = true,
                                 default = nil)
  if valid_602899 != nil:
    section.add "ClientID", valid_602899
  var valid_602900 = query.getOrDefault("Version")
  valid_602900 = validateParameter(valid_602900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602900 != nil:
    section.add "Version", valid_602900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602901 = header.getOrDefault("X-Amz-Date")
  valid_602901 = validateParameter(valid_602901, JString, required = false,
                                 default = nil)
  if valid_602901 != nil:
    section.add "X-Amz-Date", valid_602901
  var valid_602902 = header.getOrDefault("X-Amz-Security-Token")
  valid_602902 = validateParameter(valid_602902, JString, required = false,
                                 default = nil)
  if valid_602902 != nil:
    section.add "X-Amz-Security-Token", valid_602902
  var valid_602903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602903 = validateParameter(valid_602903, JString, required = false,
                                 default = nil)
  if valid_602903 != nil:
    section.add "X-Amz-Content-Sha256", valid_602903
  var valid_602904 = header.getOrDefault("X-Amz-Algorithm")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Algorithm", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Signature")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Signature", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-SignedHeaders", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Credential")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Credential", valid_602907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602930: Call_GetAddClientIDToOpenIDConnectProvider_602770;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_602930.validator(path, query, header, formData, body)
  let scheme = call_602930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602930.url(scheme.get, call_602930.host, call_602930.base,
                         call_602930.route, valid.getOrDefault("path"))
  result = hook(call_602930, url, valid)

proc call*(call_603001: Call_GetAddClientIDToOpenIDConnectProvider_602770;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: string (required)
  var query_603002 = newJObject()
  add(query_603002, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_603002, "Action", newJString(Action))
  add(query_603002, "ClientID", newJString(ClientID))
  add(query_603002, "Version", newJString(Version))
  result = call_603001.call(nil, query_603002, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_602770(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_602771, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_602772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_603077 = ref object of OpenApiRestCall_602433
proc url_PostAddRoleToInstanceProfile_603079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToInstanceProfile_603078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603080 = query.getOrDefault("Action")
  valid_603080 = validateParameter(valid_603080, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_603080 != nil:
    section.add "Action", valid_603080
  var valid_603081 = query.getOrDefault("Version")
  valid_603081 = validateParameter(valid_603081, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603081 != nil:
    section.add "Version", valid_603081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603082 = header.getOrDefault("X-Amz-Date")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Date", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Security-Token")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Security-Token", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Content-Sha256", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-Algorithm")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-Algorithm", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Signature")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Signature", valid_603086
  var valid_603087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603087 = validateParameter(valid_603087, JString, required = false,
                                 default = nil)
  if valid_603087 != nil:
    section.add "X-Amz-SignedHeaders", valid_603087
  var valid_603088 = header.getOrDefault("X-Amz-Credential")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "X-Amz-Credential", valid_603088
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_603089 = formData.getOrDefault("RoleName")
  valid_603089 = validateParameter(valid_603089, JString, required = true,
                                 default = nil)
  if valid_603089 != nil:
    section.add "RoleName", valid_603089
  var valid_603090 = formData.getOrDefault("InstanceProfileName")
  valid_603090 = validateParameter(valid_603090, JString, required = true,
                                 default = nil)
  if valid_603090 != nil:
    section.add "InstanceProfileName", valid_603090
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603091: Call_PostAddRoleToInstanceProfile_603077; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_603091.validator(path, query, header, formData, body)
  let scheme = call_603091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603091.url(scheme.get, call_603091.host, call_603091.base,
                         call_603091.route, valid.getOrDefault("path"))
  result = hook(call_603091, url, valid)

proc call*(call_603092: Call_PostAddRoleToInstanceProfile_603077; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603093 = newJObject()
  var formData_603094 = newJObject()
  add(formData_603094, "RoleName", newJString(RoleName))
  add(query_603093, "Action", newJString(Action))
  add(formData_603094, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603093, "Version", newJString(Version))
  result = call_603092.call(nil, query_603093, nil, formData_603094, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_603077(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_603078, base: "/",
    url: url_PostAddRoleToInstanceProfile_603079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_603060 = ref object of OpenApiRestCall_602433
proc url_GetAddRoleToInstanceProfile_603062(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToInstanceProfile_603061(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_603063 = query.getOrDefault("InstanceProfileName")
  valid_603063 = validateParameter(valid_603063, JString, required = true,
                                 default = nil)
  if valid_603063 != nil:
    section.add "InstanceProfileName", valid_603063
  var valid_603064 = query.getOrDefault("Action")
  valid_603064 = validateParameter(valid_603064, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_603064 != nil:
    section.add "Action", valid_603064
  var valid_603065 = query.getOrDefault("RoleName")
  valid_603065 = validateParameter(valid_603065, JString, required = true,
                                 default = nil)
  if valid_603065 != nil:
    section.add "RoleName", valid_603065
  var valid_603066 = query.getOrDefault("Version")
  valid_603066 = validateParameter(valid_603066, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603066 != nil:
    section.add "Version", valid_603066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603067 = header.getOrDefault("X-Amz-Date")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "X-Amz-Date", valid_603067
  var valid_603068 = header.getOrDefault("X-Amz-Security-Token")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "X-Amz-Security-Token", valid_603068
  var valid_603069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = nil)
  if valid_603069 != nil:
    section.add "X-Amz-Content-Sha256", valid_603069
  var valid_603070 = header.getOrDefault("X-Amz-Algorithm")
  valid_603070 = validateParameter(valid_603070, JString, required = false,
                                 default = nil)
  if valid_603070 != nil:
    section.add "X-Amz-Algorithm", valid_603070
  var valid_603071 = header.getOrDefault("X-Amz-Signature")
  valid_603071 = validateParameter(valid_603071, JString, required = false,
                                 default = nil)
  if valid_603071 != nil:
    section.add "X-Amz-Signature", valid_603071
  var valid_603072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603072 = validateParameter(valid_603072, JString, required = false,
                                 default = nil)
  if valid_603072 != nil:
    section.add "X-Amz-SignedHeaders", valid_603072
  var valid_603073 = header.getOrDefault("X-Amz-Credential")
  valid_603073 = validateParameter(valid_603073, JString, required = false,
                                 default = nil)
  if valid_603073 != nil:
    section.add "X-Amz-Credential", valid_603073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603074: Call_GetAddRoleToInstanceProfile_603060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_603074.validator(path, query, header, formData, body)
  let scheme = call_603074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603074.url(scheme.get, call_603074.host, call_603074.base,
                         call_603074.route, valid.getOrDefault("path"))
  result = hook(call_603074, url, valid)

proc call*(call_603075: Call_GetAddRoleToInstanceProfile_603060;
          InstanceProfileName: string; RoleName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603076 = newJObject()
  add(query_603076, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603076, "Action", newJString(Action))
  add(query_603076, "RoleName", newJString(RoleName))
  add(query_603076, "Version", newJString(Version))
  result = call_603075.call(nil, query_603076, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_603060(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_603061, base: "/",
    url: url_GetAddRoleToInstanceProfile_603062,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_603112 = ref object of OpenApiRestCall_602433
proc url_PostAddUserToGroup_603114(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddUserToGroup_603113(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603115 = query.getOrDefault("Action")
  valid_603115 = validateParameter(valid_603115, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_603115 != nil:
    section.add "Action", valid_603115
  var valid_603116 = query.getOrDefault("Version")
  valid_603116 = validateParameter(valid_603116, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603116 != nil:
    section.add "Version", valid_603116
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603117 = header.getOrDefault("X-Amz-Date")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "X-Amz-Date", valid_603117
  var valid_603118 = header.getOrDefault("X-Amz-Security-Token")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-Security-Token", valid_603118
  var valid_603119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-Content-Sha256", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-Algorithm")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Algorithm", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-Signature")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-Signature", valid_603121
  var valid_603122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-SignedHeaders", valid_603122
  var valid_603123 = header.getOrDefault("X-Amz-Credential")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "X-Amz-Credential", valid_603123
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603124 = formData.getOrDefault("UserName")
  valid_603124 = validateParameter(valid_603124, JString, required = true,
                                 default = nil)
  if valid_603124 != nil:
    section.add "UserName", valid_603124
  var valid_603125 = formData.getOrDefault("GroupName")
  valid_603125 = validateParameter(valid_603125, JString, required = true,
                                 default = nil)
  if valid_603125 != nil:
    section.add "GroupName", valid_603125
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603126: Call_PostAddUserToGroup_603112; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_603126.validator(path, query, header, formData, body)
  let scheme = call_603126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603126.url(scheme.get, call_603126.host, call_603126.base,
                         call_603126.route, valid.getOrDefault("path"))
  result = hook(call_603126, url, valid)

proc call*(call_603127: Call_PostAddUserToGroup_603112; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603128 = newJObject()
  var formData_603129 = newJObject()
  add(formData_603129, "UserName", newJString(UserName))
  add(formData_603129, "GroupName", newJString(GroupName))
  add(query_603128, "Action", newJString(Action))
  add(query_603128, "Version", newJString(Version))
  result = call_603127.call(nil, query_603128, nil, formData_603129, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_603112(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_603113, base: "/",
    url: url_PostAddUserToGroup_603114, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_603095 = ref object of OpenApiRestCall_602433
proc url_GetAddUserToGroup_603097(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddUserToGroup_603096(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603098 = query.getOrDefault("UserName")
  valid_603098 = validateParameter(valid_603098, JString, required = true,
                                 default = nil)
  if valid_603098 != nil:
    section.add "UserName", valid_603098
  var valid_603099 = query.getOrDefault("Action")
  valid_603099 = validateParameter(valid_603099, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_603099 != nil:
    section.add "Action", valid_603099
  var valid_603100 = query.getOrDefault("GroupName")
  valid_603100 = validateParameter(valid_603100, JString, required = true,
                                 default = nil)
  if valid_603100 != nil:
    section.add "GroupName", valid_603100
  var valid_603101 = query.getOrDefault("Version")
  valid_603101 = validateParameter(valid_603101, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603101 != nil:
    section.add "Version", valid_603101
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603102 = header.getOrDefault("X-Amz-Date")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Date", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Security-Token")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Security-Token", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-Content-Sha256", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Algorithm")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Algorithm", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-Signature")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-Signature", valid_603106
  var valid_603107 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603107 = validateParameter(valid_603107, JString, required = false,
                                 default = nil)
  if valid_603107 != nil:
    section.add "X-Amz-SignedHeaders", valid_603107
  var valid_603108 = header.getOrDefault("X-Amz-Credential")
  valid_603108 = validateParameter(valid_603108, JString, required = false,
                                 default = nil)
  if valid_603108 != nil:
    section.add "X-Amz-Credential", valid_603108
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603109: Call_GetAddUserToGroup_603095; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_603109.validator(path, query, header, formData, body)
  let scheme = call_603109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603109.url(scheme.get, call_603109.host, call_603109.base,
                         call_603109.route, valid.getOrDefault("path"))
  result = hook(call_603109, url, valid)

proc call*(call_603110: Call_GetAddUserToGroup_603095; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603111 = newJObject()
  add(query_603111, "UserName", newJString(UserName))
  add(query_603111, "Action", newJString(Action))
  add(query_603111, "GroupName", newJString(GroupName))
  add(query_603111, "Version", newJString(Version))
  result = call_603110.call(nil, query_603111, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_603095(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_603096,
    base: "/", url: url_GetAddUserToGroup_603097,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_603147 = ref object of OpenApiRestCall_602433
proc url_PostAttachGroupPolicy_603149(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachGroupPolicy_603148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603150 = query.getOrDefault("Action")
  valid_603150 = validateParameter(valid_603150, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_603150 != nil:
    section.add "Action", valid_603150
  var valid_603151 = query.getOrDefault("Version")
  valid_603151 = validateParameter(valid_603151, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603151 != nil:
    section.add "Version", valid_603151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603152 = header.getOrDefault("X-Amz-Date")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "X-Amz-Date", valid_603152
  var valid_603153 = header.getOrDefault("X-Amz-Security-Token")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "X-Amz-Security-Token", valid_603153
  var valid_603154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "X-Amz-Content-Sha256", valid_603154
  var valid_603155 = header.getOrDefault("X-Amz-Algorithm")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "X-Amz-Algorithm", valid_603155
  var valid_603156 = header.getOrDefault("X-Amz-Signature")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Signature", valid_603156
  var valid_603157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603157 = validateParameter(valid_603157, JString, required = false,
                                 default = nil)
  if valid_603157 != nil:
    section.add "X-Amz-SignedHeaders", valid_603157
  var valid_603158 = header.getOrDefault("X-Amz-Credential")
  valid_603158 = validateParameter(valid_603158, JString, required = false,
                                 default = nil)
  if valid_603158 != nil:
    section.add "X-Amz-Credential", valid_603158
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_603159 = formData.getOrDefault("PolicyArn")
  valid_603159 = validateParameter(valid_603159, JString, required = true,
                                 default = nil)
  if valid_603159 != nil:
    section.add "PolicyArn", valid_603159
  var valid_603160 = formData.getOrDefault("GroupName")
  valid_603160 = validateParameter(valid_603160, JString, required = true,
                                 default = nil)
  if valid_603160 != nil:
    section.add "GroupName", valid_603160
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603161: Call_PostAttachGroupPolicy_603147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603161.validator(path, query, header, formData, body)
  let scheme = call_603161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603161.url(scheme.get, call_603161.host, call_603161.base,
                         call_603161.route, valid.getOrDefault("path"))
  result = hook(call_603161, url, valid)

proc call*(call_603162: Call_PostAttachGroupPolicy_603147; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603163 = newJObject()
  var formData_603164 = newJObject()
  add(formData_603164, "PolicyArn", newJString(PolicyArn))
  add(formData_603164, "GroupName", newJString(GroupName))
  add(query_603163, "Action", newJString(Action))
  add(query_603163, "Version", newJString(Version))
  result = call_603162.call(nil, query_603163, nil, formData_603164, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_603147(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_603148, base: "/",
    url: url_PostAttachGroupPolicy_603149, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_603130 = ref object of OpenApiRestCall_602433
proc url_GetAttachGroupPolicy_603132(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachGroupPolicy_603131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603133 = query.getOrDefault("PolicyArn")
  valid_603133 = validateParameter(valid_603133, JString, required = true,
                                 default = nil)
  if valid_603133 != nil:
    section.add "PolicyArn", valid_603133
  var valid_603134 = query.getOrDefault("Action")
  valid_603134 = validateParameter(valid_603134, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_603134 != nil:
    section.add "Action", valid_603134
  var valid_603135 = query.getOrDefault("GroupName")
  valid_603135 = validateParameter(valid_603135, JString, required = true,
                                 default = nil)
  if valid_603135 != nil:
    section.add "GroupName", valid_603135
  var valid_603136 = query.getOrDefault("Version")
  valid_603136 = validateParameter(valid_603136, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603136 != nil:
    section.add "Version", valid_603136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603137 = header.getOrDefault("X-Amz-Date")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Date", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Security-Token")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Security-Token", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-Content-Sha256", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-Algorithm")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-Algorithm", valid_603140
  var valid_603141 = header.getOrDefault("X-Amz-Signature")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "X-Amz-Signature", valid_603141
  var valid_603142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603142 = validateParameter(valid_603142, JString, required = false,
                                 default = nil)
  if valid_603142 != nil:
    section.add "X-Amz-SignedHeaders", valid_603142
  var valid_603143 = header.getOrDefault("X-Amz-Credential")
  valid_603143 = validateParameter(valid_603143, JString, required = false,
                                 default = nil)
  if valid_603143 != nil:
    section.add "X-Amz-Credential", valid_603143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603144: Call_GetAttachGroupPolicy_603130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603144.validator(path, query, header, formData, body)
  let scheme = call_603144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603144.url(scheme.get, call_603144.host, call_603144.base,
                         call_603144.route, valid.getOrDefault("path"))
  result = hook(call_603144, url, valid)

proc call*(call_603145: Call_GetAttachGroupPolicy_603130; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603146 = newJObject()
  add(query_603146, "PolicyArn", newJString(PolicyArn))
  add(query_603146, "Action", newJString(Action))
  add(query_603146, "GroupName", newJString(GroupName))
  add(query_603146, "Version", newJString(Version))
  result = call_603145.call(nil, query_603146, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_603130(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_603131, base: "/",
    url: url_GetAttachGroupPolicy_603132, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_603182 = ref object of OpenApiRestCall_602433
proc url_PostAttachRolePolicy_603184(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachRolePolicy_603183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603185 = query.getOrDefault("Action")
  valid_603185 = validateParameter(valid_603185, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_603185 != nil:
    section.add "Action", valid_603185
  var valid_603186 = query.getOrDefault("Version")
  valid_603186 = validateParameter(valid_603186, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603186 != nil:
    section.add "Version", valid_603186
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603187 = header.getOrDefault("X-Amz-Date")
  valid_603187 = validateParameter(valid_603187, JString, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "X-Amz-Date", valid_603187
  var valid_603188 = header.getOrDefault("X-Amz-Security-Token")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-Security-Token", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-Content-Sha256", valid_603189
  var valid_603190 = header.getOrDefault("X-Amz-Algorithm")
  valid_603190 = validateParameter(valid_603190, JString, required = false,
                                 default = nil)
  if valid_603190 != nil:
    section.add "X-Amz-Algorithm", valid_603190
  var valid_603191 = header.getOrDefault("X-Amz-Signature")
  valid_603191 = validateParameter(valid_603191, JString, required = false,
                                 default = nil)
  if valid_603191 != nil:
    section.add "X-Amz-Signature", valid_603191
  var valid_603192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603192 = validateParameter(valid_603192, JString, required = false,
                                 default = nil)
  if valid_603192 != nil:
    section.add "X-Amz-SignedHeaders", valid_603192
  var valid_603193 = header.getOrDefault("X-Amz-Credential")
  valid_603193 = validateParameter(valid_603193, JString, required = false,
                                 default = nil)
  if valid_603193 != nil:
    section.add "X-Amz-Credential", valid_603193
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_603194 = formData.getOrDefault("RoleName")
  valid_603194 = validateParameter(valid_603194, JString, required = true,
                                 default = nil)
  if valid_603194 != nil:
    section.add "RoleName", valid_603194
  var valid_603195 = formData.getOrDefault("PolicyArn")
  valid_603195 = validateParameter(valid_603195, JString, required = true,
                                 default = nil)
  if valid_603195 != nil:
    section.add "PolicyArn", valid_603195
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603196: Call_PostAttachRolePolicy_603182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603196.validator(path, query, header, formData, body)
  let scheme = call_603196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603196.url(scheme.get, call_603196.host, call_603196.base,
                         call_603196.route, valid.getOrDefault("path"))
  result = hook(call_603196, url, valid)

proc call*(call_603197: Call_PostAttachRolePolicy_603182; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603198 = newJObject()
  var formData_603199 = newJObject()
  add(formData_603199, "RoleName", newJString(RoleName))
  add(formData_603199, "PolicyArn", newJString(PolicyArn))
  add(query_603198, "Action", newJString(Action))
  add(query_603198, "Version", newJString(Version))
  result = call_603197.call(nil, query_603198, nil, formData_603199, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_603182(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_603183, base: "/",
    url: url_PostAttachRolePolicy_603184, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_603165 = ref object of OpenApiRestCall_602433
proc url_GetAttachRolePolicy_603167(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachRolePolicy_603166(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603168 = query.getOrDefault("PolicyArn")
  valid_603168 = validateParameter(valid_603168, JString, required = true,
                                 default = nil)
  if valid_603168 != nil:
    section.add "PolicyArn", valid_603168
  var valid_603169 = query.getOrDefault("Action")
  valid_603169 = validateParameter(valid_603169, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_603169 != nil:
    section.add "Action", valid_603169
  var valid_603170 = query.getOrDefault("RoleName")
  valid_603170 = validateParameter(valid_603170, JString, required = true,
                                 default = nil)
  if valid_603170 != nil:
    section.add "RoleName", valid_603170
  var valid_603171 = query.getOrDefault("Version")
  valid_603171 = validateParameter(valid_603171, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603171 != nil:
    section.add "Version", valid_603171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603172 = header.getOrDefault("X-Amz-Date")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "X-Amz-Date", valid_603172
  var valid_603173 = header.getOrDefault("X-Amz-Security-Token")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-Security-Token", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Content-Sha256", valid_603174
  var valid_603175 = header.getOrDefault("X-Amz-Algorithm")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-Algorithm", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-Signature")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-Signature", valid_603176
  var valid_603177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603177 = validateParameter(valid_603177, JString, required = false,
                                 default = nil)
  if valid_603177 != nil:
    section.add "X-Amz-SignedHeaders", valid_603177
  var valid_603178 = header.getOrDefault("X-Amz-Credential")
  valid_603178 = validateParameter(valid_603178, JString, required = false,
                                 default = nil)
  if valid_603178 != nil:
    section.add "X-Amz-Credential", valid_603178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603179: Call_GetAttachRolePolicy_603165; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603179.validator(path, query, header, formData, body)
  let scheme = call_603179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603179.url(scheme.get, call_603179.host, call_603179.base,
                         call_603179.route, valid.getOrDefault("path"))
  result = hook(call_603179, url, valid)

proc call*(call_603180: Call_GetAttachRolePolicy_603165; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603181 = newJObject()
  add(query_603181, "PolicyArn", newJString(PolicyArn))
  add(query_603181, "Action", newJString(Action))
  add(query_603181, "RoleName", newJString(RoleName))
  add(query_603181, "Version", newJString(Version))
  result = call_603180.call(nil, query_603181, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_603165(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_603166, base: "/",
    url: url_GetAttachRolePolicy_603167, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_603217 = ref object of OpenApiRestCall_602433
proc url_PostAttachUserPolicy_603219(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachUserPolicy_603218(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603220 = query.getOrDefault("Action")
  valid_603220 = validateParameter(valid_603220, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_603220 != nil:
    section.add "Action", valid_603220
  var valid_603221 = query.getOrDefault("Version")
  valid_603221 = validateParameter(valid_603221, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603221 != nil:
    section.add "Version", valid_603221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603222 = header.getOrDefault("X-Amz-Date")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-Date", valid_603222
  var valid_603223 = header.getOrDefault("X-Amz-Security-Token")
  valid_603223 = validateParameter(valid_603223, JString, required = false,
                                 default = nil)
  if valid_603223 != nil:
    section.add "X-Amz-Security-Token", valid_603223
  var valid_603224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603224 = validateParameter(valid_603224, JString, required = false,
                                 default = nil)
  if valid_603224 != nil:
    section.add "X-Amz-Content-Sha256", valid_603224
  var valid_603225 = header.getOrDefault("X-Amz-Algorithm")
  valid_603225 = validateParameter(valid_603225, JString, required = false,
                                 default = nil)
  if valid_603225 != nil:
    section.add "X-Amz-Algorithm", valid_603225
  var valid_603226 = header.getOrDefault("X-Amz-Signature")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "X-Amz-Signature", valid_603226
  var valid_603227 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603227 = validateParameter(valid_603227, JString, required = false,
                                 default = nil)
  if valid_603227 != nil:
    section.add "X-Amz-SignedHeaders", valid_603227
  var valid_603228 = header.getOrDefault("X-Amz-Credential")
  valid_603228 = validateParameter(valid_603228, JString, required = false,
                                 default = nil)
  if valid_603228 != nil:
    section.add "X-Amz-Credential", valid_603228
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603229 = formData.getOrDefault("UserName")
  valid_603229 = validateParameter(valid_603229, JString, required = true,
                                 default = nil)
  if valid_603229 != nil:
    section.add "UserName", valid_603229
  var valid_603230 = formData.getOrDefault("PolicyArn")
  valid_603230 = validateParameter(valid_603230, JString, required = true,
                                 default = nil)
  if valid_603230 != nil:
    section.add "PolicyArn", valid_603230
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603231: Call_PostAttachUserPolicy_603217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603231.validator(path, query, header, formData, body)
  let scheme = call_603231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603231.url(scheme.get, call_603231.host, call_603231.base,
                         call_603231.route, valid.getOrDefault("path"))
  result = hook(call_603231, url, valid)

proc call*(call_603232: Call_PostAttachUserPolicy_603217; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603233 = newJObject()
  var formData_603234 = newJObject()
  add(formData_603234, "UserName", newJString(UserName))
  add(formData_603234, "PolicyArn", newJString(PolicyArn))
  add(query_603233, "Action", newJString(Action))
  add(query_603233, "Version", newJString(Version))
  result = call_603232.call(nil, query_603233, nil, formData_603234, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_603217(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_603218, base: "/",
    url: url_PostAttachUserPolicy_603219, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_603200 = ref object of OpenApiRestCall_602433
proc url_GetAttachUserPolicy_603202(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachUserPolicy_603201(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603203 = query.getOrDefault("PolicyArn")
  valid_603203 = validateParameter(valid_603203, JString, required = true,
                                 default = nil)
  if valid_603203 != nil:
    section.add "PolicyArn", valid_603203
  var valid_603204 = query.getOrDefault("UserName")
  valid_603204 = validateParameter(valid_603204, JString, required = true,
                                 default = nil)
  if valid_603204 != nil:
    section.add "UserName", valid_603204
  var valid_603205 = query.getOrDefault("Action")
  valid_603205 = validateParameter(valid_603205, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_603205 != nil:
    section.add "Action", valid_603205
  var valid_603206 = query.getOrDefault("Version")
  valid_603206 = validateParameter(valid_603206, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603206 != nil:
    section.add "Version", valid_603206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603207 = header.getOrDefault("X-Amz-Date")
  valid_603207 = validateParameter(valid_603207, JString, required = false,
                                 default = nil)
  if valid_603207 != nil:
    section.add "X-Amz-Date", valid_603207
  var valid_603208 = header.getOrDefault("X-Amz-Security-Token")
  valid_603208 = validateParameter(valid_603208, JString, required = false,
                                 default = nil)
  if valid_603208 != nil:
    section.add "X-Amz-Security-Token", valid_603208
  var valid_603209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "X-Amz-Content-Sha256", valid_603209
  var valid_603210 = header.getOrDefault("X-Amz-Algorithm")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "X-Amz-Algorithm", valid_603210
  var valid_603211 = header.getOrDefault("X-Amz-Signature")
  valid_603211 = validateParameter(valid_603211, JString, required = false,
                                 default = nil)
  if valid_603211 != nil:
    section.add "X-Amz-Signature", valid_603211
  var valid_603212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603212 = validateParameter(valid_603212, JString, required = false,
                                 default = nil)
  if valid_603212 != nil:
    section.add "X-Amz-SignedHeaders", valid_603212
  var valid_603213 = header.getOrDefault("X-Amz-Credential")
  valid_603213 = validateParameter(valid_603213, JString, required = false,
                                 default = nil)
  if valid_603213 != nil:
    section.add "X-Amz-Credential", valid_603213
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603214: Call_GetAttachUserPolicy_603200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603214.validator(path, query, header, formData, body)
  let scheme = call_603214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603214.url(scheme.get, call_603214.host, call_603214.base,
                         call_603214.route, valid.getOrDefault("path"))
  result = hook(call_603214, url, valid)

proc call*(call_603215: Call_GetAttachUserPolicy_603200; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603216 = newJObject()
  add(query_603216, "PolicyArn", newJString(PolicyArn))
  add(query_603216, "UserName", newJString(UserName))
  add(query_603216, "Action", newJString(Action))
  add(query_603216, "Version", newJString(Version))
  result = call_603215.call(nil, query_603216, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_603200(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_603201, base: "/",
    url: url_GetAttachUserPolicy_603202, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_603252 = ref object of OpenApiRestCall_602433
proc url_PostChangePassword_603254(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostChangePassword_603253(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603255 = query.getOrDefault("Action")
  valid_603255 = validateParameter(valid_603255, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_603255 != nil:
    section.add "Action", valid_603255
  var valid_603256 = query.getOrDefault("Version")
  valid_603256 = validateParameter(valid_603256, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603256 != nil:
    section.add "Version", valid_603256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603257 = header.getOrDefault("X-Amz-Date")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "X-Amz-Date", valid_603257
  var valid_603258 = header.getOrDefault("X-Amz-Security-Token")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Security-Token", valid_603258
  var valid_603259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "X-Amz-Content-Sha256", valid_603259
  var valid_603260 = header.getOrDefault("X-Amz-Algorithm")
  valid_603260 = validateParameter(valid_603260, JString, required = false,
                                 default = nil)
  if valid_603260 != nil:
    section.add "X-Amz-Algorithm", valid_603260
  var valid_603261 = header.getOrDefault("X-Amz-Signature")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "X-Amz-Signature", valid_603261
  var valid_603262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603262 = validateParameter(valid_603262, JString, required = false,
                                 default = nil)
  if valid_603262 != nil:
    section.add "X-Amz-SignedHeaders", valid_603262
  var valid_603263 = header.getOrDefault("X-Amz-Credential")
  valid_603263 = validateParameter(valid_603263, JString, required = false,
                                 default = nil)
  if valid_603263 != nil:
    section.add "X-Amz-Credential", valid_603263
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NewPassword` field"
  var valid_603264 = formData.getOrDefault("NewPassword")
  valid_603264 = validateParameter(valid_603264, JString, required = true,
                                 default = nil)
  if valid_603264 != nil:
    section.add "NewPassword", valid_603264
  var valid_603265 = formData.getOrDefault("OldPassword")
  valid_603265 = validateParameter(valid_603265, JString, required = true,
                                 default = nil)
  if valid_603265 != nil:
    section.add "OldPassword", valid_603265
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603266: Call_PostChangePassword_603252; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603266.validator(path, query, header, formData, body)
  let scheme = call_603266.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603266.url(scheme.get, call_603266.host, call_603266.base,
                         call_603266.route, valid.getOrDefault("path"))
  result = hook(call_603266, url, valid)

proc call*(call_603267: Call_PostChangePassword_603252; NewPassword: string;
          OldPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  var query_603268 = newJObject()
  var formData_603269 = newJObject()
  add(query_603268, "Action", newJString(Action))
  add(formData_603269, "NewPassword", newJString(NewPassword))
  add(formData_603269, "OldPassword", newJString(OldPassword))
  add(query_603268, "Version", newJString(Version))
  result = call_603267.call(nil, query_603268, nil, formData_603269, nil)

var postChangePassword* = Call_PostChangePassword_603252(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_603253, base: "/",
    url: url_PostChangePassword_603254, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_603235 = ref object of OpenApiRestCall_602433
proc url_GetChangePassword_603237(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetChangePassword_603236(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Action: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OldPassword` field"
  var valid_603238 = query.getOrDefault("OldPassword")
  valid_603238 = validateParameter(valid_603238, JString, required = true,
                                 default = nil)
  if valid_603238 != nil:
    section.add "OldPassword", valid_603238
  var valid_603239 = query.getOrDefault("Action")
  valid_603239 = validateParameter(valid_603239, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_603239 != nil:
    section.add "Action", valid_603239
  var valid_603240 = query.getOrDefault("NewPassword")
  valid_603240 = validateParameter(valid_603240, JString, required = true,
                                 default = nil)
  if valid_603240 != nil:
    section.add "NewPassword", valid_603240
  var valid_603241 = query.getOrDefault("Version")
  valid_603241 = validateParameter(valid_603241, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603241 != nil:
    section.add "Version", valid_603241
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603242 = header.getOrDefault("X-Amz-Date")
  valid_603242 = validateParameter(valid_603242, JString, required = false,
                                 default = nil)
  if valid_603242 != nil:
    section.add "X-Amz-Date", valid_603242
  var valid_603243 = header.getOrDefault("X-Amz-Security-Token")
  valid_603243 = validateParameter(valid_603243, JString, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "X-Amz-Security-Token", valid_603243
  var valid_603244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603244 = validateParameter(valid_603244, JString, required = false,
                                 default = nil)
  if valid_603244 != nil:
    section.add "X-Amz-Content-Sha256", valid_603244
  var valid_603245 = header.getOrDefault("X-Amz-Algorithm")
  valid_603245 = validateParameter(valid_603245, JString, required = false,
                                 default = nil)
  if valid_603245 != nil:
    section.add "X-Amz-Algorithm", valid_603245
  var valid_603246 = header.getOrDefault("X-Amz-Signature")
  valid_603246 = validateParameter(valid_603246, JString, required = false,
                                 default = nil)
  if valid_603246 != nil:
    section.add "X-Amz-Signature", valid_603246
  var valid_603247 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603247 = validateParameter(valid_603247, JString, required = false,
                                 default = nil)
  if valid_603247 != nil:
    section.add "X-Amz-SignedHeaders", valid_603247
  var valid_603248 = header.getOrDefault("X-Amz-Credential")
  valid_603248 = validateParameter(valid_603248, JString, required = false,
                                 default = nil)
  if valid_603248 != nil:
    section.add "X-Amz-Credential", valid_603248
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603249: Call_GetChangePassword_603235; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603249.validator(path, query, header, formData, body)
  let scheme = call_603249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603249.url(scheme.get, call_603249.host, call_603249.base,
                         call_603249.route, valid.getOrDefault("path"))
  result = hook(call_603249, url, valid)

proc call*(call_603250: Call_GetChangePassword_603235; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_603251 = newJObject()
  add(query_603251, "OldPassword", newJString(OldPassword))
  add(query_603251, "Action", newJString(Action))
  add(query_603251, "NewPassword", newJString(NewPassword))
  add(query_603251, "Version", newJString(Version))
  result = call_603250.call(nil, query_603251, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_603235(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_603236,
    base: "/", url: url_GetChangePassword_603237,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_603286 = ref object of OpenApiRestCall_602433
proc url_PostCreateAccessKey_603288(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccessKey_603287(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603289 = query.getOrDefault("Action")
  valid_603289 = validateParameter(valid_603289, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_603289 != nil:
    section.add "Action", valid_603289
  var valid_603290 = query.getOrDefault("Version")
  valid_603290 = validateParameter(valid_603290, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603290 != nil:
    section.add "Version", valid_603290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603291 = header.getOrDefault("X-Amz-Date")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-Date", valid_603291
  var valid_603292 = header.getOrDefault("X-Amz-Security-Token")
  valid_603292 = validateParameter(valid_603292, JString, required = false,
                                 default = nil)
  if valid_603292 != nil:
    section.add "X-Amz-Security-Token", valid_603292
  var valid_603293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "X-Amz-Content-Sha256", valid_603293
  var valid_603294 = header.getOrDefault("X-Amz-Algorithm")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "X-Amz-Algorithm", valid_603294
  var valid_603295 = header.getOrDefault("X-Amz-Signature")
  valid_603295 = validateParameter(valid_603295, JString, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "X-Amz-Signature", valid_603295
  var valid_603296 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603296 = validateParameter(valid_603296, JString, required = false,
                                 default = nil)
  if valid_603296 != nil:
    section.add "X-Amz-SignedHeaders", valid_603296
  var valid_603297 = header.getOrDefault("X-Amz-Credential")
  valid_603297 = validateParameter(valid_603297, JString, required = false,
                                 default = nil)
  if valid_603297 != nil:
    section.add "X-Amz-Credential", valid_603297
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_603298 = formData.getOrDefault("UserName")
  valid_603298 = validateParameter(valid_603298, JString, required = false,
                                 default = nil)
  if valid_603298 != nil:
    section.add "UserName", valid_603298
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603299: Call_PostCreateAccessKey_603286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_603299.validator(path, query, header, formData, body)
  let scheme = call_603299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603299.url(scheme.get, call_603299.host, call_603299.base,
                         call_603299.route, valid.getOrDefault("path"))
  result = hook(call_603299, url, valid)

proc call*(call_603300: Call_PostCreateAccessKey_603286; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603301 = newJObject()
  var formData_603302 = newJObject()
  add(formData_603302, "UserName", newJString(UserName))
  add(query_603301, "Action", newJString(Action))
  add(query_603301, "Version", newJString(Version))
  result = call_603300.call(nil, query_603301, nil, formData_603302, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_603286(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_603287, base: "/",
    url: url_PostCreateAccessKey_603288, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_603270 = ref object of OpenApiRestCall_602433
proc url_GetCreateAccessKey_603272(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccessKey_603271(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603273 = query.getOrDefault("UserName")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "UserName", valid_603273
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603274 = query.getOrDefault("Action")
  valid_603274 = validateParameter(valid_603274, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_603274 != nil:
    section.add "Action", valid_603274
  var valid_603275 = query.getOrDefault("Version")
  valid_603275 = validateParameter(valid_603275, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603275 != nil:
    section.add "Version", valid_603275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603276 = header.getOrDefault("X-Amz-Date")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-Date", valid_603276
  var valid_603277 = header.getOrDefault("X-Amz-Security-Token")
  valid_603277 = validateParameter(valid_603277, JString, required = false,
                                 default = nil)
  if valid_603277 != nil:
    section.add "X-Amz-Security-Token", valid_603277
  var valid_603278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603278 = validateParameter(valid_603278, JString, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "X-Amz-Content-Sha256", valid_603278
  var valid_603279 = header.getOrDefault("X-Amz-Algorithm")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "X-Amz-Algorithm", valid_603279
  var valid_603280 = header.getOrDefault("X-Amz-Signature")
  valid_603280 = validateParameter(valid_603280, JString, required = false,
                                 default = nil)
  if valid_603280 != nil:
    section.add "X-Amz-Signature", valid_603280
  var valid_603281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603281 = validateParameter(valid_603281, JString, required = false,
                                 default = nil)
  if valid_603281 != nil:
    section.add "X-Amz-SignedHeaders", valid_603281
  var valid_603282 = header.getOrDefault("X-Amz-Credential")
  valid_603282 = validateParameter(valid_603282, JString, required = false,
                                 default = nil)
  if valid_603282 != nil:
    section.add "X-Amz-Credential", valid_603282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603283: Call_GetCreateAccessKey_603270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_603283.validator(path, query, header, formData, body)
  let scheme = call_603283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603283.url(scheme.get, call_603283.host, call_603283.base,
                         call_603283.route, valid.getOrDefault("path"))
  result = hook(call_603283, url, valid)

proc call*(call_603284: Call_GetCreateAccessKey_603270; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603285 = newJObject()
  add(query_603285, "UserName", newJString(UserName))
  add(query_603285, "Action", newJString(Action))
  add(query_603285, "Version", newJString(Version))
  result = call_603284.call(nil, query_603285, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_603270(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_603271,
    base: "/", url: url_GetCreateAccessKey_603272,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_603319 = ref object of OpenApiRestCall_602433
proc url_PostCreateAccountAlias_603321(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccountAlias_603320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603322 = query.getOrDefault("Action")
  valid_603322 = validateParameter(valid_603322, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_603322 != nil:
    section.add "Action", valid_603322
  var valid_603323 = query.getOrDefault("Version")
  valid_603323 = validateParameter(valid_603323, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603323 != nil:
    section.add "Version", valid_603323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603324 = header.getOrDefault("X-Amz-Date")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Date", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-Security-Token")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-Security-Token", valid_603325
  var valid_603326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-Content-Sha256", valid_603326
  var valid_603327 = header.getOrDefault("X-Amz-Algorithm")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "X-Amz-Algorithm", valid_603327
  var valid_603328 = header.getOrDefault("X-Amz-Signature")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "X-Amz-Signature", valid_603328
  var valid_603329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603329 = validateParameter(valid_603329, JString, required = false,
                                 default = nil)
  if valid_603329 != nil:
    section.add "X-Amz-SignedHeaders", valid_603329
  var valid_603330 = header.getOrDefault("X-Amz-Credential")
  valid_603330 = validateParameter(valid_603330, JString, required = false,
                                 default = nil)
  if valid_603330 != nil:
    section.add "X-Amz-Credential", valid_603330
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_603331 = formData.getOrDefault("AccountAlias")
  valid_603331 = validateParameter(valid_603331, JString, required = true,
                                 default = nil)
  if valid_603331 != nil:
    section.add "AccountAlias", valid_603331
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603332: Call_PostCreateAccountAlias_603319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603332.validator(path, query, header, formData, body)
  let scheme = call_603332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603332.url(scheme.get, call_603332.host, call_603332.base,
                         call_603332.route, valid.getOrDefault("path"))
  result = hook(call_603332, url, valid)

proc call*(call_603333: Call_PostCreateAccountAlias_603319; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603334 = newJObject()
  var formData_603335 = newJObject()
  add(formData_603335, "AccountAlias", newJString(AccountAlias))
  add(query_603334, "Action", newJString(Action))
  add(query_603334, "Version", newJString(Version))
  result = call_603333.call(nil, query_603334, nil, formData_603335, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_603319(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_603320, base: "/",
    url: url_PostCreateAccountAlias_603321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_603303 = ref object of OpenApiRestCall_602433
proc url_GetCreateAccountAlias_603305(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccountAlias_603304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_603306 = query.getOrDefault("AccountAlias")
  valid_603306 = validateParameter(valid_603306, JString, required = true,
                                 default = nil)
  if valid_603306 != nil:
    section.add "AccountAlias", valid_603306
  var valid_603307 = query.getOrDefault("Action")
  valid_603307 = validateParameter(valid_603307, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_603307 != nil:
    section.add "Action", valid_603307
  var valid_603308 = query.getOrDefault("Version")
  valid_603308 = validateParameter(valid_603308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603308 != nil:
    section.add "Version", valid_603308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603309 = header.getOrDefault("X-Amz-Date")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Date", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-Security-Token")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-Security-Token", valid_603310
  var valid_603311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "X-Amz-Content-Sha256", valid_603311
  var valid_603312 = header.getOrDefault("X-Amz-Algorithm")
  valid_603312 = validateParameter(valid_603312, JString, required = false,
                                 default = nil)
  if valid_603312 != nil:
    section.add "X-Amz-Algorithm", valid_603312
  var valid_603313 = header.getOrDefault("X-Amz-Signature")
  valid_603313 = validateParameter(valid_603313, JString, required = false,
                                 default = nil)
  if valid_603313 != nil:
    section.add "X-Amz-Signature", valid_603313
  var valid_603314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603314 = validateParameter(valid_603314, JString, required = false,
                                 default = nil)
  if valid_603314 != nil:
    section.add "X-Amz-SignedHeaders", valid_603314
  var valid_603315 = header.getOrDefault("X-Amz-Credential")
  valid_603315 = validateParameter(valid_603315, JString, required = false,
                                 default = nil)
  if valid_603315 != nil:
    section.add "X-Amz-Credential", valid_603315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603316: Call_GetCreateAccountAlias_603303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603316.validator(path, query, header, formData, body)
  let scheme = call_603316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603316.url(scheme.get, call_603316.host, call_603316.base,
                         call_603316.route, valid.getOrDefault("path"))
  result = hook(call_603316, url, valid)

proc call*(call_603317: Call_GetCreateAccountAlias_603303; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603318 = newJObject()
  add(query_603318, "AccountAlias", newJString(AccountAlias))
  add(query_603318, "Action", newJString(Action))
  add(query_603318, "Version", newJString(Version))
  result = call_603317.call(nil, query_603318, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_603303(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_603304, base: "/",
    url: url_GetCreateAccountAlias_603305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_603353 = ref object of OpenApiRestCall_602433
proc url_PostCreateGroup_603355(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateGroup_603354(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603356 = query.getOrDefault("Action")
  valid_603356 = validateParameter(valid_603356, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_603356 != nil:
    section.add "Action", valid_603356
  var valid_603357 = query.getOrDefault("Version")
  valid_603357 = validateParameter(valid_603357, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603357 != nil:
    section.add "Version", valid_603357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603358 = header.getOrDefault("X-Amz-Date")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-Date", valid_603358
  var valid_603359 = header.getOrDefault("X-Amz-Security-Token")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "X-Amz-Security-Token", valid_603359
  var valid_603360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603360 = validateParameter(valid_603360, JString, required = false,
                                 default = nil)
  if valid_603360 != nil:
    section.add "X-Amz-Content-Sha256", valid_603360
  var valid_603361 = header.getOrDefault("X-Amz-Algorithm")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-Algorithm", valid_603361
  var valid_603362 = header.getOrDefault("X-Amz-Signature")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "X-Amz-Signature", valid_603362
  var valid_603363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "X-Amz-SignedHeaders", valid_603363
  var valid_603364 = header.getOrDefault("X-Amz-Credential")
  valid_603364 = validateParameter(valid_603364, JString, required = false,
                                 default = nil)
  if valid_603364 != nil:
    section.add "X-Amz-Credential", valid_603364
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_603365 = formData.getOrDefault("GroupName")
  valid_603365 = validateParameter(valid_603365, JString, required = true,
                                 default = nil)
  if valid_603365 != nil:
    section.add "GroupName", valid_603365
  var valid_603366 = formData.getOrDefault("Path")
  valid_603366 = validateParameter(valid_603366, JString, required = false,
                                 default = nil)
  if valid_603366 != nil:
    section.add "Path", valid_603366
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603367: Call_PostCreateGroup_603353; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603367.validator(path, query, header, formData, body)
  let scheme = call_603367.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603367.url(scheme.get, call_603367.host, call_603367.base,
                         call_603367.route, valid.getOrDefault("path"))
  result = hook(call_603367, url, valid)

proc call*(call_603368: Call_PostCreateGroup_603353; GroupName: string;
          Action: string = "CreateGroup"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603369 = newJObject()
  var formData_603370 = newJObject()
  add(formData_603370, "GroupName", newJString(GroupName))
  add(query_603369, "Action", newJString(Action))
  add(query_603369, "Version", newJString(Version))
  add(formData_603370, "Path", newJString(Path))
  result = call_603368.call(nil, query_603369, nil, formData_603370, nil)

var postCreateGroup* = Call_PostCreateGroup_603353(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_603354,
    base: "/", url: url_PostCreateGroup_603355, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_603336 = ref object of OpenApiRestCall_602433
proc url_GetCreateGroup_603338(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateGroup_603337(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603339 = query.getOrDefault("Action")
  valid_603339 = validateParameter(valid_603339, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_603339 != nil:
    section.add "Action", valid_603339
  var valid_603340 = query.getOrDefault("GroupName")
  valid_603340 = validateParameter(valid_603340, JString, required = true,
                                 default = nil)
  if valid_603340 != nil:
    section.add "GroupName", valid_603340
  var valid_603341 = query.getOrDefault("Path")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "Path", valid_603341
  var valid_603342 = query.getOrDefault("Version")
  valid_603342 = validateParameter(valid_603342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603342 != nil:
    section.add "Version", valid_603342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603343 = header.getOrDefault("X-Amz-Date")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "X-Amz-Date", valid_603343
  var valid_603344 = header.getOrDefault("X-Amz-Security-Token")
  valid_603344 = validateParameter(valid_603344, JString, required = false,
                                 default = nil)
  if valid_603344 != nil:
    section.add "X-Amz-Security-Token", valid_603344
  var valid_603345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "X-Amz-Content-Sha256", valid_603345
  var valid_603346 = header.getOrDefault("X-Amz-Algorithm")
  valid_603346 = validateParameter(valid_603346, JString, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "X-Amz-Algorithm", valid_603346
  var valid_603347 = header.getOrDefault("X-Amz-Signature")
  valid_603347 = validateParameter(valid_603347, JString, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "X-Amz-Signature", valid_603347
  var valid_603348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603348 = validateParameter(valid_603348, JString, required = false,
                                 default = nil)
  if valid_603348 != nil:
    section.add "X-Amz-SignedHeaders", valid_603348
  var valid_603349 = header.getOrDefault("X-Amz-Credential")
  valid_603349 = validateParameter(valid_603349, JString, required = false,
                                 default = nil)
  if valid_603349 != nil:
    section.add "X-Amz-Credential", valid_603349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603350: Call_GetCreateGroup_603336; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603350.validator(path, query, header, formData, body)
  let scheme = call_603350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603350.url(scheme.get, call_603350.host, call_603350.base,
                         call_603350.route, valid.getOrDefault("path"))
  result = hook(call_603350, url, valid)

proc call*(call_603351: Call_GetCreateGroup_603336; GroupName: string;
          Action: string = "CreateGroup"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_603352 = newJObject()
  add(query_603352, "Action", newJString(Action))
  add(query_603352, "GroupName", newJString(GroupName))
  add(query_603352, "Path", newJString(Path))
  add(query_603352, "Version", newJString(Version))
  result = call_603351.call(nil, query_603352, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_603336(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_603337,
    base: "/", url: url_GetCreateGroup_603338, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_603388 = ref object of OpenApiRestCall_602433
proc url_PostCreateInstanceProfile_603390(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateInstanceProfile_603389(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603391 = query.getOrDefault("Action")
  valid_603391 = validateParameter(valid_603391, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_603391 != nil:
    section.add "Action", valid_603391
  var valid_603392 = query.getOrDefault("Version")
  valid_603392 = validateParameter(valid_603392, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603392 != nil:
    section.add "Version", valid_603392
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603393 = header.getOrDefault("X-Amz-Date")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Date", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Security-Token")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Security-Token", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-Content-Sha256", valid_603395
  var valid_603396 = header.getOrDefault("X-Amz-Algorithm")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "X-Amz-Algorithm", valid_603396
  var valid_603397 = header.getOrDefault("X-Amz-Signature")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "X-Amz-Signature", valid_603397
  var valid_603398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603398 = validateParameter(valid_603398, JString, required = false,
                                 default = nil)
  if valid_603398 != nil:
    section.add "X-Amz-SignedHeaders", valid_603398
  var valid_603399 = header.getOrDefault("X-Amz-Credential")
  valid_603399 = validateParameter(valid_603399, JString, required = false,
                                 default = nil)
  if valid_603399 != nil:
    section.add "X-Amz-Credential", valid_603399
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_603400 = formData.getOrDefault("InstanceProfileName")
  valid_603400 = validateParameter(valid_603400, JString, required = true,
                                 default = nil)
  if valid_603400 != nil:
    section.add "InstanceProfileName", valid_603400
  var valid_603401 = formData.getOrDefault("Path")
  valid_603401 = validateParameter(valid_603401, JString, required = false,
                                 default = nil)
  if valid_603401 != nil:
    section.add "Path", valid_603401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603402: Call_PostCreateInstanceProfile_603388; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603402.validator(path, query, header, formData, body)
  let scheme = call_603402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603402.url(scheme.get, call_603402.host, call_603402.base,
                         call_603402.route, valid.getOrDefault("path"))
  result = hook(call_603402, url, valid)

proc call*(call_603403: Call_PostCreateInstanceProfile_603388;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603404 = newJObject()
  var formData_603405 = newJObject()
  add(query_603404, "Action", newJString(Action))
  add(formData_603405, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603404, "Version", newJString(Version))
  add(formData_603405, "Path", newJString(Path))
  result = call_603403.call(nil, query_603404, nil, formData_603405, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_603388(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_603389, base: "/",
    url: url_PostCreateInstanceProfile_603390,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_603371 = ref object of OpenApiRestCall_602433
proc url_GetCreateInstanceProfile_603373(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateInstanceProfile_603372(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_603374 = query.getOrDefault("InstanceProfileName")
  valid_603374 = validateParameter(valid_603374, JString, required = true,
                                 default = nil)
  if valid_603374 != nil:
    section.add "InstanceProfileName", valid_603374
  var valid_603375 = query.getOrDefault("Action")
  valid_603375 = validateParameter(valid_603375, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_603375 != nil:
    section.add "Action", valid_603375
  var valid_603376 = query.getOrDefault("Path")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "Path", valid_603376
  var valid_603377 = query.getOrDefault("Version")
  valid_603377 = validateParameter(valid_603377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603377 != nil:
    section.add "Version", valid_603377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603378 = header.getOrDefault("X-Amz-Date")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-Date", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Security-Token")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Security-Token", valid_603379
  var valid_603380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "X-Amz-Content-Sha256", valid_603380
  var valid_603381 = header.getOrDefault("X-Amz-Algorithm")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "X-Amz-Algorithm", valid_603381
  var valid_603382 = header.getOrDefault("X-Amz-Signature")
  valid_603382 = validateParameter(valid_603382, JString, required = false,
                                 default = nil)
  if valid_603382 != nil:
    section.add "X-Amz-Signature", valid_603382
  var valid_603383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603383 = validateParameter(valid_603383, JString, required = false,
                                 default = nil)
  if valid_603383 != nil:
    section.add "X-Amz-SignedHeaders", valid_603383
  var valid_603384 = header.getOrDefault("X-Amz-Credential")
  valid_603384 = validateParameter(valid_603384, JString, required = false,
                                 default = nil)
  if valid_603384 != nil:
    section.add "X-Amz-Credential", valid_603384
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603385: Call_GetCreateInstanceProfile_603371; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603385.validator(path, query, header, formData, body)
  let scheme = call_603385.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603385.url(scheme.get, call_603385.host, call_603385.base,
                         call_603385.route, valid.getOrDefault("path"))
  result = hook(call_603385, url, valid)

proc call*(call_603386: Call_GetCreateInstanceProfile_603371;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_603387 = newJObject()
  add(query_603387, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603387, "Action", newJString(Action))
  add(query_603387, "Path", newJString(Path))
  add(query_603387, "Version", newJString(Version))
  result = call_603386.call(nil, query_603387, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_603371(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_603372, base: "/",
    url: url_GetCreateInstanceProfile_603373, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_603424 = ref object of OpenApiRestCall_602433
proc url_PostCreateLoginProfile_603426(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateLoginProfile_603425(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603427 = query.getOrDefault("Action")
  valid_603427 = validateParameter(valid_603427, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_603427 != nil:
    section.add "Action", valid_603427
  var valid_603428 = query.getOrDefault("Version")
  valid_603428 = validateParameter(valid_603428, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603428 != nil:
    section.add "Version", valid_603428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603429 = header.getOrDefault("X-Amz-Date")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-Date", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-Security-Token")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Security-Token", valid_603430
  var valid_603431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603431 = validateParameter(valid_603431, JString, required = false,
                                 default = nil)
  if valid_603431 != nil:
    section.add "X-Amz-Content-Sha256", valid_603431
  var valid_603432 = header.getOrDefault("X-Amz-Algorithm")
  valid_603432 = validateParameter(valid_603432, JString, required = false,
                                 default = nil)
  if valid_603432 != nil:
    section.add "X-Amz-Algorithm", valid_603432
  var valid_603433 = header.getOrDefault("X-Amz-Signature")
  valid_603433 = validateParameter(valid_603433, JString, required = false,
                                 default = nil)
  if valid_603433 != nil:
    section.add "X-Amz-Signature", valid_603433
  var valid_603434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603434 = validateParameter(valid_603434, JString, required = false,
                                 default = nil)
  if valid_603434 != nil:
    section.add "X-Amz-SignedHeaders", valid_603434
  var valid_603435 = header.getOrDefault("X-Amz-Credential")
  valid_603435 = validateParameter(valid_603435, JString, required = false,
                                 default = nil)
  if valid_603435 != nil:
    section.add "X-Amz-Credential", valid_603435
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603436 = formData.getOrDefault("UserName")
  valid_603436 = validateParameter(valid_603436, JString, required = true,
                                 default = nil)
  if valid_603436 != nil:
    section.add "UserName", valid_603436
  var valid_603437 = formData.getOrDefault("Password")
  valid_603437 = validateParameter(valid_603437, JString, required = true,
                                 default = nil)
  if valid_603437 != nil:
    section.add "Password", valid_603437
  var valid_603438 = formData.getOrDefault("PasswordResetRequired")
  valid_603438 = validateParameter(valid_603438, JBool, required = false, default = nil)
  if valid_603438 != nil:
    section.add "PasswordResetRequired", valid_603438
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603439: Call_PostCreateLoginProfile_603424; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603439.validator(path, query, header, formData, body)
  let scheme = call_603439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603439.url(scheme.get, call_603439.host, call_603439.base,
                         call_603439.route, valid.getOrDefault("path"))
  result = hook(call_603439, url, valid)

proc call*(call_603440: Call_PostCreateLoginProfile_603424; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603441 = newJObject()
  var formData_603442 = newJObject()
  add(formData_603442, "UserName", newJString(UserName))
  add(formData_603442, "Password", newJString(Password))
  add(formData_603442, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_603441, "Action", newJString(Action))
  add(query_603441, "Version", newJString(Version))
  result = call_603440.call(nil, query_603441, nil, formData_603442, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_603424(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_603425, base: "/",
    url: url_PostCreateLoginProfile_603426, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_603406 = ref object of OpenApiRestCall_602433
proc url_GetCreateLoginProfile_603408(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateLoginProfile_603407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603409 = query.getOrDefault("UserName")
  valid_603409 = validateParameter(valid_603409, JString, required = true,
                                 default = nil)
  if valid_603409 != nil:
    section.add "UserName", valid_603409
  var valid_603410 = query.getOrDefault("PasswordResetRequired")
  valid_603410 = validateParameter(valid_603410, JBool, required = false, default = nil)
  if valid_603410 != nil:
    section.add "PasswordResetRequired", valid_603410
  var valid_603411 = query.getOrDefault("Action")
  valid_603411 = validateParameter(valid_603411, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_603411 != nil:
    section.add "Action", valid_603411
  var valid_603412 = query.getOrDefault("Password")
  valid_603412 = validateParameter(valid_603412, JString, required = true,
                                 default = nil)
  if valid_603412 != nil:
    section.add "Password", valid_603412
  var valid_603413 = query.getOrDefault("Version")
  valid_603413 = validateParameter(valid_603413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603413 != nil:
    section.add "Version", valid_603413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603414 = header.getOrDefault("X-Amz-Date")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "X-Amz-Date", valid_603414
  var valid_603415 = header.getOrDefault("X-Amz-Security-Token")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "X-Amz-Security-Token", valid_603415
  var valid_603416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603416 = validateParameter(valid_603416, JString, required = false,
                                 default = nil)
  if valid_603416 != nil:
    section.add "X-Amz-Content-Sha256", valid_603416
  var valid_603417 = header.getOrDefault("X-Amz-Algorithm")
  valid_603417 = validateParameter(valid_603417, JString, required = false,
                                 default = nil)
  if valid_603417 != nil:
    section.add "X-Amz-Algorithm", valid_603417
  var valid_603418 = header.getOrDefault("X-Amz-Signature")
  valid_603418 = validateParameter(valid_603418, JString, required = false,
                                 default = nil)
  if valid_603418 != nil:
    section.add "X-Amz-Signature", valid_603418
  var valid_603419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603419 = validateParameter(valid_603419, JString, required = false,
                                 default = nil)
  if valid_603419 != nil:
    section.add "X-Amz-SignedHeaders", valid_603419
  var valid_603420 = header.getOrDefault("X-Amz-Credential")
  valid_603420 = validateParameter(valid_603420, JString, required = false,
                                 default = nil)
  if valid_603420 != nil:
    section.add "X-Amz-Credential", valid_603420
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603421: Call_GetCreateLoginProfile_603406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603421.validator(path, query, header, formData, body)
  let scheme = call_603421.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603421.url(scheme.get, call_603421.host, call_603421.base,
                         call_603421.route, valid.getOrDefault("path"))
  result = hook(call_603421, url, valid)

proc call*(call_603422: Call_GetCreateLoginProfile_603406; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_603423 = newJObject()
  add(query_603423, "UserName", newJString(UserName))
  add(query_603423, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_603423, "Action", newJString(Action))
  add(query_603423, "Password", newJString(Password))
  add(query_603423, "Version", newJString(Version))
  result = call_603422.call(nil, query_603423, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_603406(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_603407, base: "/",
    url: url_GetCreateLoginProfile_603408, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_603461 = ref object of OpenApiRestCall_602433
proc url_PostCreateOpenIDConnectProvider_603463(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateOpenIDConnectProvider_603462(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603464 = query.getOrDefault("Action")
  valid_603464 = validateParameter(valid_603464, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_603464 != nil:
    section.add "Action", valid_603464
  var valid_603465 = query.getOrDefault("Version")
  valid_603465 = validateParameter(valid_603465, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603465 != nil:
    section.add "Version", valid_603465
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603466 = header.getOrDefault("X-Amz-Date")
  valid_603466 = validateParameter(valid_603466, JString, required = false,
                                 default = nil)
  if valid_603466 != nil:
    section.add "X-Amz-Date", valid_603466
  var valid_603467 = header.getOrDefault("X-Amz-Security-Token")
  valid_603467 = validateParameter(valid_603467, JString, required = false,
                                 default = nil)
  if valid_603467 != nil:
    section.add "X-Amz-Security-Token", valid_603467
  var valid_603468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603468 = validateParameter(valid_603468, JString, required = false,
                                 default = nil)
  if valid_603468 != nil:
    section.add "X-Amz-Content-Sha256", valid_603468
  var valid_603469 = header.getOrDefault("X-Amz-Algorithm")
  valid_603469 = validateParameter(valid_603469, JString, required = false,
                                 default = nil)
  if valid_603469 != nil:
    section.add "X-Amz-Algorithm", valid_603469
  var valid_603470 = header.getOrDefault("X-Amz-Signature")
  valid_603470 = validateParameter(valid_603470, JString, required = false,
                                 default = nil)
  if valid_603470 != nil:
    section.add "X-Amz-Signature", valid_603470
  var valid_603471 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603471 = validateParameter(valid_603471, JString, required = false,
                                 default = nil)
  if valid_603471 != nil:
    section.add "X-Amz-SignedHeaders", valid_603471
  var valid_603472 = header.getOrDefault("X-Amz-Credential")
  valid_603472 = validateParameter(valid_603472, JString, required = false,
                                 default = nil)
  if valid_603472 != nil:
    section.add "X-Amz-Credential", valid_603472
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  section = newJObject()
  var valid_603473 = formData.getOrDefault("ClientIDList")
  valid_603473 = validateParameter(valid_603473, JArray, required = false,
                                 default = nil)
  if valid_603473 != nil:
    section.add "ClientIDList", valid_603473
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_603474 = formData.getOrDefault("ThumbprintList")
  valid_603474 = validateParameter(valid_603474, JArray, required = true, default = nil)
  if valid_603474 != nil:
    section.add "ThumbprintList", valid_603474
  var valid_603475 = formData.getOrDefault("Url")
  valid_603475 = validateParameter(valid_603475, JString, required = true,
                                 default = nil)
  if valid_603475 != nil:
    section.add "Url", valid_603475
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603476: Call_PostCreateOpenIDConnectProvider_603461;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_603476.validator(path, query, header, formData, body)
  let scheme = call_603476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603476.url(scheme.get, call_603476.host, call_603476.base,
                         call_603476.route, valid.getOrDefault("path"))
  result = hook(call_603476, url, valid)

proc call*(call_603477: Call_PostCreateOpenIDConnectProvider_603461;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  var query_603478 = newJObject()
  var formData_603479 = newJObject()
  if ClientIDList != nil:
    formData_603479.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_603479.add "ThumbprintList", ThumbprintList
  add(query_603478, "Action", newJString(Action))
  add(query_603478, "Version", newJString(Version))
  add(formData_603479, "Url", newJString(Url))
  result = call_603477.call(nil, query_603478, nil, formData_603479, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_603461(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_603462, base: "/",
    url: url_PostCreateOpenIDConnectProvider_603463,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_603443 = ref object of OpenApiRestCall_602433
proc url_GetCreateOpenIDConnectProvider_603445(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateOpenIDConnectProvider_603444(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603446 = query.getOrDefault("ClientIDList")
  valid_603446 = validateParameter(valid_603446, JArray, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "ClientIDList", valid_603446
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_603447 = query.getOrDefault("ThumbprintList")
  valid_603447 = validateParameter(valid_603447, JArray, required = true, default = nil)
  if valid_603447 != nil:
    section.add "ThumbprintList", valid_603447
  var valid_603448 = query.getOrDefault("Action")
  valid_603448 = validateParameter(valid_603448, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_603448 != nil:
    section.add "Action", valid_603448
  var valid_603449 = query.getOrDefault("Url")
  valid_603449 = validateParameter(valid_603449, JString, required = true,
                                 default = nil)
  if valid_603449 != nil:
    section.add "Url", valid_603449
  var valid_603450 = query.getOrDefault("Version")
  valid_603450 = validateParameter(valid_603450, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603450 != nil:
    section.add "Version", valid_603450
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603451 = header.getOrDefault("X-Amz-Date")
  valid_603451 = validateParameter(valid_603451, JString, required = false,
                                 default = nil)
  if valid_603451 != nil:
    section.add "X-Amz-Date", valid_603451
  var valid_603452 = header.getOrDefault("X-Amz-Security-Token")
  valid_603452 = validateParameter(valid_603452, JString, required = false,
                                 default = nil)
  if valid_603452 != nil:
    section.add "X-Amz-Security-Token", valid_603452
  var valid_603453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603453 = validateParameter(valid_603453, JString, required = false,
                                 default = nil)
  if valid_603453 != nil:
    section.add "X-Amz-Content-Sha256", valid_603453
  var valid_603454 = header.getOrDefault("X-Amz-Algorithm")
  valid_603454 = validateParameter(valid_603454, JString, required = false,
                                 default = nil)
  if valid_603454 != nil:
    section.add "X-Amz-Algorithm", valid_603454
  var valid_603455 = header.getOrDefault("X-Amz-Signature")
  valid_603455 = validateParameter(valid_603455, JString, required = false,
                                 default = nil)
  if valid_603455 != nil:
    section.add "X-Amz-Signature", valid_603455
  var valid_603456 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603456 = validateParameter(valid_603456, JString, required = false,
                                 default = nil)
  if valid_603456 != nil:
    section.add "X-Amz-SignedHeaders", valid_603456
  var valid_603457 = header.getOrDefault("X-Amz-Credential")
  valid_603457 = validateParameter(valid_603457, JString, required = false,
                                 default = nil)
  if valid_603457 != nil:
    section.add "X-Amz-Credential", valid_603457
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603458: Call_GetCreateOpenIDConnectProvider_603443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_603458.validator(path, query, header, formData, body)
  let scheme = call_603458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603458.url(scheme.get, call_603458.host, call_603458.base,
                         call_603458.route, valid.getOrDefault("path"))
  result = hook(call_603458, url, valid)

proc call*(call_603459: Call_GetCreateOpenIDConnectProvider_603443;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  var query_603460 = newJObject()
  if ClientIDList != nil:
    query_603460.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    query_603460.add "ThumbprintList", ThumbprintList
  add(query_603460, "Action", newJString(Action))
  add(query_603460, "Url", newJString(Url))
  add(query_603460, "Version", newJString(Version))
  result = call_603459.call(nil, query_603460, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_603443(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_603444, base: "/",
    url: url_GetCreateOpenIDConnectProvider_603445,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_603499 = ref object of OpenApiRestCall_602433
proc url_PostCreatePolicy_603501(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicy_603500(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603502 = query.getOrDefault("Action")
  valid_603502 = validateParameter(valid_603502, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_603502 != nil:
    section.add "Action", valid_603502
  var valid_603503 = query.getOrDefault("Version")
  valid_603503 = validateParameter(valid_603503, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603503 != nil:
    section.add "Version", valid_603503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603504 = header.getOrDefault("X-Amz-Date")
  valid_603504 = validateParameter(valid_603504, JString, required = false,
                                 default = nil)
  if valid_603504 != nil:
    section.add "X-Amz-Date", valid_603504
  var valid_603505 = header.getOrDefault("X-Amz-Security-Token")
  valid_603505 = validateParameter(valid_603505, JString, required = false,
                                 default = nil)
  if valid_603505 != nil:
    section.add "X-Amz-Security-Token", valid_603505
  var valid_603506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603506 = validateParameter(valid_603506, JString, required = false,
                                 default = nil)
  if valid_603506 != nil:
    section.add "X-Amz-Content-Sha256", valid_603506
  var valid_603507 = header.getOrDefault("X-Amz-Algorithm")
  valid_603507 = validateParameter(valid_603507, JString, required = false,
                                 default = nil)
  if valid_603507 != nil:
    section.add "X-Amz-Algorithm", valid_603507
  var valid_603508 = header.getOrDefault("X-Amz-Signature")
  valid_603508 = validateParameter(valid_603508, JString, required = false,
                                 default = nil)
  if valid_603508 != nil:
    section.add "X-Amz-Signature", valid_603508
  var valid_603509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603509 = validateParameter(valid_603509, JString, required = false,
                                 default = nil)
  if valid_603509 != nil:
    section.add "X-Amz-SignedHeaders", valid_603509
  var valid_603510 = header.getOrDefault("X-Amz-Credential")
  valid_603510 = validateParameter(valid_603510, JString, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "X-Amz-Credential", valid_603510
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603511 = formData.getOrDefault("PolicyName")
  valid_603511 = validateParameter(valid_603511, JString, required = true,
                                 default = nil)
  if valid_603511 != nil:
    section.add "PolicyName", valid_603511
  var valid_603512 = formData.getOrDefault("PolicyDocument")
  valid_603512 = validateParameter(valid_603512, JString, required = true,
                                 default = nil)
  if valid_603512 != nil:
    section.add "PolicyDocument", valid_603512
  var valid_603513 = formData.getOrDefault("Description")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "Description", valid_603513
  var valid_603514 = formData.getOrDefault("Path")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "Path", valid_603514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603515: Call_PostCreatePolicy_603499; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603515.validator(path, query, header, formData, body)
  let scheme = call_603515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603515.url(scheme.get, call_603515.host, call_603515.base,
                         call_603515.route, valid.getOrDefault("path"))
  result = hook(call_603515, url, valid)

proc call*(call_603516: Call_PostCreatePolicy_603499; PolicyName: string;
          PolicyDocument: string; Action: string = "CreatePolicy";
          Version: string = "2010-05-08"; Description: string = ""; Path: string = ""): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603517 = newJObject()
  var formData_603518 = newJObject()
  add(formData_603518, "PolicyName", newJString(PolicyName))
  add(formData_603518, "PolicyDocument", newJString(PolicyDocument))
  add(query_603517, "Action", newJString(Action))
  add(query_603517, "Version", newJString(Version))
  add(formData_603518, "Description", newJString(Description))
  add(formData_603518, "Path", newJString(Path))
  result = call_603516.call(nil, query_603517, nil, formData_603518, nil)

var postCreatePolicy* = Call_PostCreatePolicy_603499(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_603500,
    base: "/", url: url_PostCreatePolicy_603501,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_603480 = ref object of OpenApiRestCall_602433
proc url_GetCreatePolicy_603482(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicy_603481(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_603483 = query.getOrDefault("Description")
  valid_603483 = validateParameter(valid_603483, JString, required = false,
                                 default = nil)
  if valid_603483 != nil:
    section.add "Description", valid_603483
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603484 = query.getOrDefault("Action")
  valid_603484 = validateParameter(valid_603484, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_603484 != nil:
    section.add "Action", valid_603484
  var valid_603485 = query.getOrDefault("PolicyDocument")
  valid_603485 = validateParameter(valid_603485, JString, required = true,
                                 default = nil)
  if valid_603485 != nil:
    section.add "PolicyDocument", valid_603485
  var valid_603486 = query.getOrDefault("Path")
  valid_603486 = validateParameter(valid_603486, JString, required = false,
                                 default = nil)
  if valid_603486 != nil:
    section.add "Path", valid_603486
  var valid_603487 = query.getOrDefault("Version")
  valid_603487 = validateParameter(valid_603487, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603487 != nil:
    section.add "Version", valid_603487
  var valid_603488 = query.getOrDefault("PolicyName")
  valid_603488 = validateParameter(valid_603488, JString, required = true,
                                 default = nil)
  if valid_603488 != nil:
    section.add "PolicyName", valid_603488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603489 = header.getOrDefault("X-Amz-Date")
  valid_603489 = validateParameter(valid_603489, JString, required = false,
                                 default = nil)
  if valid_603489 != nil:
    section.add "X-Amz-Date", valid_603489
  var valid_603490 = header.getOrDefault("X-Amz-Security-Token")
  valid_603490 = validateParameter(valid_603490, JString, required = false,
                                 default = nil)
  if valid_603490 != nil:
    section.add "X-Amz-Security-Token", valid_603490
  var valid_603491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603491 = validateParameter(valid_603491, JString, required = false,
                                 default = nil)
  if valid_603491 != nil:
    section.add "X-Amz-Content-Sha256", valid_603491
  var valid_603492 = header.getOrDefault("X-Amz-Algorithm")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "X-Amz-Algorithm", valid_603492
  var valid_603493 = header.getOrDefault("X-Amz-Signature")
  valid_603493 = validateParameter(valid_603493, JString, required = false,
                                 default = nil)
  if valid_603493 != nil:
    section.add "X-Amz-Signature", valid_603493
  var valid_603494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-SignedHeaders", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Credential")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Credential", valid_603495
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603496: Call_GetCreatePolicy_603480; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603496.validator(path, query, header, formData, body)
  let scheme = call_603496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603496.url(scheme.get, call_603496.host, call_603496.base,
                         call_603496.route, valid.getOrDefault("path"))
  result = hook(call_603496, url, valid)

proc call*(call_603497: Call_GetCreatePolicy_603480; PolicyDocument: string;
          PolicyName: string; Description: string = "";
          Action: string = "CreatePolicy"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_603498 = newJObject()
  add(query_603498, "Description", newJString(Description))
  add(query_603498, "Action", newJString(Action))
  add(query_603498, "PolicyDocument", newJString(PolicyDocument))
  add(query_603498, "Path", newJString(Path))
  add(query_603498, "Version", newJString(Version))
  add(query_603498, "PolicyName", newJString(PolicyName))
  result = call_603497.call(nil, query_603498, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_603480(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_603481,
    base: "/", url: url_GetCreatePolicy_603482, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_603537 = ref object of OpenApiRestCall_602433
proc url_PostCreatePolicyVersion_603539(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicyVersion_603538(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603540 = query.getOrDefault("Action")
  valid_603540 = validateParameter(valid_603540, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_603540 != nil:
    section.add "Action", valid_603540
  var valid_603541 = query.getOrDefault("Version")
  valid_603541 = validateParameter(valid_603541, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603541 != nil:
    section.add "Version", valid_603541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603542 = header.getOrDefault("X-Amz-Date")
  valid_603542 = validateParameter(valid_603542, JString, required = false,
                                 default = nil)
  if valid_603542 != nil:
    section.add "X-Amz-Date", valid_603542
  var valid_603543 = header.getOrDefault("X-Amz-Security-Token")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-Security-Token", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Content-Sha256", valid_603544
  var valid_603545 = header.getOrDefault("X-Amz-Algorithm")
  valid_603545 = validateParameter(valid_603545, JString, required = false,
                                 default = nil)
  if valid_603545 != nil:
    section.add "X-Amz-Algorithm", valid_603545
  var valid_603546 = header.getOrDefault("X-Amz-Signature")
  valid_603546 = validateParameter(valid_603546, JString, required = false,
                                 default = nil)
  if valid_603546 != nil:
    section.add "X-Amz-Signature", valid_603546
  var valid_603547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603547 = validateParameter(valid_603547, JString, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "X-Amz-SignedHeaders", valid_603547
  var valid_603548 = header.getOrDefault("X-Amz-Credential")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "X-Amz-Credential", valid_603548
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_603549 = formData.getOrDefault("PolicyArn")
  valid_603549 = validateParameter(valid_603549, JString, required = true,
                                 default = nil)
  if valid_603549 != nil:
    section.add "PolicyArn", valid_603549
  var valid_603550 = formData.getOrDefault("PolicyDocument")
  valid_603550 = validateParameter(valid_603550, JString, required = true,
                                 default = nil)
  if valid_603550 != nil:
    section.add "PolicyDocument", valid_603550
  var valid_603551 = formData.getOrDefault("SetAsDefault")
  valid_603551 = validateParameter(valid_603551, JBool, required = false, default = nil)
  if valid_603551 != nil:
    section.add "SetAsDefault", valid_603551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603552: Call_PostCreatePolicyVersion_603537; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603552.validator(path, query, header, formData, body)
  let scheme = call_603552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603552.url(scheme.get, call_603552.host, call_603552.base,
                         call_603552.route, valid.getOrDefault("path"))
  result = hook(call_603552, url, valid)

proc call*(call_603553: Call_PostCreatePolicyVersion_603537; PolicyArn: string;
          PolicyDocument: string; Action: string = "CreatePolicyVersion";
          SetAsDefault: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_603554 = newJObject()
  var formData_603555 = newJObject()
  add(formData_603555, "PolicyArn", newJString(PolicyArn))
  add(formData_603555, "PolicyDocument", newJString(PolicyDocument))
  add(query_603554, "Action", newJString(Action))
  add(formData_603555, "SetAsDefault", newJBool(SetAsDefault))
  add(query_603554, "Version", newJString(Version))
  result = call_603553.call(nil, query_603554, nil, formData_603555, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_603537(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_603538, base: "/",
    url: url_PostCreatePolicyVersion_603539, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_603519 = ref object of OpenApiRestCall_602433
proc url_GetCreatePolicyVersion_603521(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicyVersion_603520(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603522 = query.getOrDefault("PolicyArn")
  valid_603522 = validateParameter(valid_603522, JString, required = true,
                                 default = nil)
  if valid_603522 != nil:
    section.add "PolicyArn", valid_603522
  var valid_603523 = query.getOrDefault("SetAsDefault")
  valid_603523 = validateParameter(valid_603523, JBool, required = false, default = nil)
  if valid_603523 != nil:
    section.add "SetAsDefault", valid_603523
  var valid_603524 = query.getOrDefault("Action")
  valid_603524 = validateParameter(valid_603524, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_603524 != nil:
    section.add "Action", valid_603524
  var valid_603525 = query.getOrDefault("PolicyDocument")
  valid_603525 = validateParameter(valid_603525, JString, required = true,
                                 default = nil)
  if valid_603525 != nil:
    section.add "PolicyDocument", valid_603525
  var valid_603526 = query.getOrDefault("Version")
  valid_603526 = validateParameter(valid_603526, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603526 != nil:
    section.add "Version", valid_603526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603527 = header.getOrDefault("X-Amz-Date")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Date", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-Security-Token")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-Security-Token", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Content-Sha256", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Algorithm")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Algorithm", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Signature")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Signature", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-SignedHeaders", valid_603532
  var valid_603533 = header.getOrDefault("X-Amz-Credential")
  valid_603533 = validateParameter(valid_603533, JString, required = false,
                                 default = nil)
  if valid_603533 != nil:
    section.add "X-Amz-Credential", valid_603533
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603534: Call_GetCreatePolicyVersion_603519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603534.validator(path, query, header, formData, body)
  let scheme = call_603534.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603534.url(scheme.get, call_603534.host, call_603534.base,
                         call_603534.route, valid.getOrDefault("path"))
  result = hook(call_603534, url, valid)

proc call*(call_603535: Call_GetCreatePolicyVersion_603519; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_603536 = newJObject()
  add(query_603536, "PolicyArn", newJString(PolicyArn))
  add(query_603536, "SetAsDefault", newJBool(SetAsDefault))
  add(query_603536, "Action", newJString(Action))
  add(query_603536, "PolicyDocument", newJString(PolicyDocument))
  add(query_603536, "Version", newJString(Version))
  result = call_603535.call(nil, query_603536, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_603519(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_603520, base: "/",
    url: url_GetCreatePolicyVersion_603521, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_603578 = ref object of OpenApiRestCall_602433
proc url_PostCreateRole_603580(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateRole_603579(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603581 = query.getOrDefault("Action")
  valid_603581 = validateParameter(valid_603581, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_603581 != nil:
    section.add "Action", valid_603581
  var valid_603582 = query.getOrDefault("Version")
  valid_603582 = validateParameter(valid_603582, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603582 != nil:
    section.add "Version", valid_603582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603583 = header.getOrDefault("X-Amz-Date")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "X-Amz-Date", valid_603583
  var valid_603584 = header.getOrDefault("X-Amz-Security-Token")
  valid_603584 = validateParameter(valid_603584, JString, required = false,
                                 default = nil)
  if valid_603584 != nil:
    section.add "X-Amz-Security-Token", valid_603584
  var valid_603585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603585 = validateParameter(valid_603585, JString, required = false,
                                 default = nil)
  if valid_603585 != nil:
    section.add "X-Amz-Content-Sha256", valid_603585
  var valid_603586 = header.getOrDefault("X-Amz-Algorithm")
  valid_603586 = validateParameter(valid_603586, JString, required = false,
                                 default = nil)
  if valid_603586 != nil:
    section.add "X-Amz-Algorithm", valid_603586
  var valid_603587 = header.getOrDefault("X-Amz-Signature")
  valid_603587 = validateParameter(valid_603587, JString, required = false,
                                 default = nil)
  if valid_603587 != nil:
    section.add "X-Amz-Signature", valid_603587
  var valid_603588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603588 = validateParameter(valid_603588, JString, required = false,
                                 default = nil)
  if valid_603588 != nil:
    section.add "X-Amz-SignedHeaders", valid_603588
  var valid_603589 = header.getOrDefault("X-Amz-Credential")
  valid_603589 = validateParameter(valid_603589, JString, required = false,
                                 default = nil)
  if valid_603589 != nil:
    section.add "X-Amz-Credential", valid_603589
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_603590 = formData.getOrDefault("RoleName")
  valid_603590 = validateParameter(valid_603590, JString, required = true,
                                 default = nil)
  if valid_603590 != nil:
    section.add "RoleName", valid_603590
  var valid_603591 = formData.getOrDefault("PermissionsBoundary")
  valid_603591 = validateParameter(valid_603591, JString, required = false,
                                 default = nil)
  if valid_603591 != nil:
    section.add "PermissionsBoundary", valid_603591
  var valid_603592 = formData.getOrDefault("Tags")
  valid_603592 = validateParameter(valid_603592, JArray, required = false,
                                 default = nil)
  if valid_603592 != nil:
    section.add "Tags", valid_603592
  var valid_603593 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_603593 = validateParameter(valid_603593, JString, required = true,
                                 default = nil)
  if valid_603593 != nil:
    section.add "AssumeRolePolicyDocument", valid_603593
  var valid_603594 = formData.getOrDefault("MaxSessionDuration")
  valid_603594 = validateParameter(valid_603594, JInt, required = false, default = nil)
  if valid_603594 != nil:
    section.add "MaxSessionDuration", valid_603594
  var valid_603595 = formData.getOrDefault("Description")
  valid_603595 = validateParameter(valid_603595, JString, required = false,
                                 default = nil)
  if valid_603595 != nil:
    section.add "Description", valid_603595
  var valid_603596 = formData.getOrDefault("Path")
  valid_603596 = validateParameter(valid_603596, JString, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "Path", valid_603596
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603597: Call_PostCreateRole_603578; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603597.validator(path, query, header, formData, body)
  let scheme = call_603597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603597.url(scheme.get, call_603597.host, call_603597.base,
                         call_603597.route, valid.getOrDefault("path"))
  result = hook(call_603597, url, valid)

proc call*(call_603598: Call_PostCreateRole_603578; RoleName: string;
          AssumeRolePolicyDocument: string; PermissionsBoundary: string = "";
          Tags: JsonNode = nil; Action: string = "CreateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08";
          Description: string = ""; Path: string = ""): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   Action: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603599 = newJObject()
  var formData_603600 = newJObject()
  add(formData_603600, "RoleName", newJString(RoleName))
  add(formData_603600, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_603600.add "Tags", Tags
  add(query_603599, "Action", newJString(Action))
  add(formData_603600, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(formData_603600, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_603599, "Version", newJString(Version))
  add(formData_603600, "Description", newJString(Description))
  add(formData_603600, "Path", newJString(Path))
  result = call_603598.call(nil, query_603599, nil, formData_603600, nil)

var postCreateRole* = Call_PostCreateRole_603578(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_603579,
    base: "/", url: url_PostCreateRole_603580, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_603556 = ref object of OpenApiRestCall_602433
proc url_GetCreateRole_603558(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateRole_603557(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_603559 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_603559 = validateParameter(valid_603559, JString, required = true,
                                 default = nil)
  if valid_603559 != nil:
    section.add "AssumeRolePolicyDocument", valid_603559
  var valid_603560 = query.getOrDefault("Description")
  valid_603560 = validateParameter(valid_603560, JString, required = false,
                                 default = nil)
  if valid_603560 != nil:
    section.add "Description", valid_603560
  var valid_603561 = query.getOrDefault("Tags")
  valid_603561 = validateParameter(valid_603561, JArray, required = false,
                                 default = nil)
  if valid_603561 != nil:
    section.add "Tags", valid_603561
  var valid_603562 = query.getOrDefault("MaxSessionDuration")
  valid_603562 = validateParameter(valid_603562, JInt, required = false, default = nil)
  if valid_603562 != nil:
    section.add "MaxSessionDuration", valid_603562
  var valid_603563 = query.getOrDefault("Action")
  valid_603563 = validateParameter(valid_603563, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_603563 != nil:
    section.add "Action", valid_603563
  var valid_603564 = query.getOrDefault("Path")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "Path", valid_603564
  var valid_603565 = query.getOrDefault("PermissionsBoundary")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "PermissionsBoundary", valid_603565
  var valid_603566 = query.getOrDefault("RoleName")
  valid_603566 = validateParameter(valid_603566, JString, required = true,
                                 default = nil)
  if valid_603566 != nil:
    section.add "RoleName", valid_603566
  var valid_603567 = query.getOrDefault("Version")
  valid_603567 = validateParameter(valid_603567, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603567 != nil:
    section.add "Version", valid_603567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603568 = header.getOrDefault("X-Amz-Date")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-Date", valid_603568
  var valid_603569 = header.getOrDefault("X-Amz-Security-Token")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "X-Amz-Security-Token", valid_603569
  var valid_603570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603570 = validateParameter(valid_603570, JString, required = false,
                                 default = nil)
  if valid_603570 != nil:
    section.add "X-Amz-Content-Sha256", valid_603570
  var valid_603571 = header.getOrDefault("X-Amz-Algorithm")
  valid_603571 = validateParameter(valid_603571, JString, required = false,
                                 default = nil)
  if valid_603571 != nil:
    section.add "X-Amz-Algorithm", valid_603571
  var valid_603572 = header.getOrDefault("X-Amz-Signature")
  valid_603572 = validateParameter(valid_603572, JString, required = false,
                                 default = nil)
  if valid_603572 != nil:
    section.add "X-Amz-Signature", valid_603572
  var valid_603573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603573 = validateParameter(valid_603573, JString, required = false,
                                 default = nil)
  if valid_603573 != nil:
    section.add "X-Amz-SignedHeaders", valid_603573
  var valid_603574 = header.getOrDefault("X-Amz-Credential")
  valid_603574 = validateParameter(valid_603574, JString, required = false,
                                 default = nil)
  if valid_603574 != nil:
    section.add "X-Amz-Credential", valid_603574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603575: Call_GetCreateRole_603556; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603575.validator(path, query, header, formData, body)
  let scheme = call_603575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603575.url(scheme.get, call_603575.host, call_603575.base,
                         call_603575.route, valid.getOrDefault("path"))
  result = hook(call_603575, url, valid)

proc call*(call_603576: Call_GetCreateRole_603556;
          AssumeRolePolicyDocument: string; RoleName: string;
          Description: string = ""; Tags: JsonNode = nil; MaxSessionDuration: int = 0;
          Action: string = "CreateRole"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: string
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_603577 = newJObject()
  add(query_603577, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_603577, "Description", newJString(Description))
  if Tags != nil:
    query_603577.add "Tags", Tags
  add(query_603577, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_603577, "Action", newJString(Action))
  add(query_603577, "Path", newJString(Path))
  add(query_603577, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_603577, "RoleName", newJString(RoleName))
  add(query_603577, "Version", newJString(Version))
  result = call_603576.call(nil, query_603577, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_603556(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_603557,
    base: "/", url: url_GetCreateRole_603558, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_603618 = ref object of OpenApiRestCall_602433
proc url_PostCreateSAMLProvider_603620(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateSAMLProvider_603619(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603621 = query.getOrDefault("Action")
  valid_603621 = validateParameter(valid_603621, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_603621 != nil:
    section.add "Action", valid_603621
  var valid_603622 = query.getOrDefault("Version")
  valid_603622 = validateParameter(valid_603622, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603622 != nil:
    section.add "Version", valid_603622
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603623 = header.getOrDefault("X-Amz-Date")
  valid_603623 = validateParameter(valid_603623, JString, required = false,
                                 default = nil)
  if valid_603623 != nil:
    section.add "X-Amz-Date", valid_603623
  var valid_603624 = header.getOrDefault("X-Amz-Security-Token")
  valid_603624 = validateParameter(valid_603624, JString, required = false,
                                 default = nil)
  if valid_603624 != nil:
    section.add "X-Amz-Security-Token", valid_603624
  var valid_603625 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603625 = validateParameter(valid_603625, JString, required = false,
                                 default = nil)
  if valid_603625 != nil:
    section.add "X-Amz-Content-Sha256", valid_603625
  var valid_603626 = header.getOrDefault("X-Amz-Algorithm")
  valid_603626 = validateParameter(valid_603626, JString, required = false,
                                 default = nil)
  if valid_603626 != nil:
    section.add "X-Amz-Algorithm", valid_603626
  var valid_603627 = header.getOrDefault("X-Amz-Signature")
  valid_603627 = validateParameter(valid_603627, JString, required = false,
                                 default = nil)
  if valid_603627 != nil:
    section.add "X-Amz-Signature", valid_603627
  var valid_603628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603628 = validateParameter(valid_603628, JString, required = false,
                                 default = nil)
  if valid_603628 != nil:
    section.add "X-Amz-SignedHeaders", valid_603628
  var valid_603629 = header.getOrDefault("X-Amz-Credential")
  valid_603629 = validateParameter(valid_603629, JString, required = false,
                                 default = nil)
  if valid_603629 != nil:
    section.add "X-Amz-Credential", valid_603629
  result.add "header", section
  ## parameters in `formData` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Name` field"
  var valid_603630 = formData.getOrDefault("Name")
  valid_603630 = validateParameter(valid_603630, JString, required = true,
                                 default = nil)
  if valid_603630 != nil:
    section.add "Name", valid_603630
  var valid_603631 = formData.getOrDefault("SAMLMetadataDocument")
  valid_603631 = validateParameter(valid_603631, JString, required = true,
                                 default = nil)
  if valid_603631 != nil:
    section.add "SAMLMetadataDocument", valid_603631
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603632: Call_PostCreateSAMLProvider_603618; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603632.validator(path, query, header, formData, body)
  let scheme = call_603632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603632.url(scheme.get, call_603632.host, call_603632.base,
                         call_603632.route, valid.getOrDefault("path"))
  result = hook(call_603632, url, valid)

proc call*(call_603633: Call_PostCreateSAMLProvider_603618; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_603634 = newJObject()
  var formData_603635 = newJObject()
  add(formData_603635, "Name", newJString(Name))
  add(query_603634, "Action", newJString(Action))
  add(formData_603635, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_603634, "Version", newJString(Version))
  result = call_603633.call(nil, query_603634, nil, formData_603635, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_603618(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_603619, base: "/",
    url: url_PostCreateSAMLProvider_603620, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_603601 = ref object of OpenApiRestCall_602433
proc url_GetCreateSAMLProvider_603603(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateSAMLProvider_603602(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_603604 = query.getOrDefault("Name")
  valid_603604 = validateParameter(valid_603604, JString, required = true,
                                 default = nil)
  if valid_603604 != nil:
    section.add "Name", valid_603604
  var valid_603605 = query.getOrDefault("SAMLMetadataDocument")
  valid_603605 = validateParameter(valid_603605, JString, required = true,
                                 default = nil)
  if valid_603605 != nil:
    section.add "SAMLMetadataDocument", valid_603605
  var valid_603606 = query.getOrDefault("Action")
  valid_603606 = validateParameter(valid_603606, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_603606 != nil:
    section.add "Action", valid_603606
  var valid_603607 = query.getOrDefault("Version")
  valid_603607 = validateParameter(valid_603607, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603607 != nil:
    section.add "Version", valid_603607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603608 = header.getOrDefault("X-Amz-Date")
  valid_603608 = validateParameter(valid_603608, JString, required = false,
                                 default = nil)
  if valid_603608 != nil:
    section.add "X-Amz-Date", valid_603608
  var valid_603609 = header.getOrDefault("X-Amz-Security-Token")
  valid_603609 = validateParameter(valid_603609, JString, required = false,
                                 default = nil)
  if valid_603609 != nil:
    section.add "X-Amz-Security-Token", valid_603609
  var valid_603610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603610 = validateParameter(valid_603610, JString, required = false,
                                 default = nil)
  if valid_603610 != nil:
    section.add "X-Amz-Content-Sha256", valid_603610
  var valid_603611 = header.getOrDefault("X-Amz-Algorithm")
  valid_603611 = validateParameter(valid_603611, JString, required = false,
                                 default = nil)
  if valid_603611 != nil:
    section.add "X-Amz-Algorithm", valid_603611
  var valid_603612 = header.getOrDefault("X-Amz-Signature")
  valid_603612 = validateParameter(valid_603612, JString, required = false,
                                 default = nil)
  if valid_603612 != nil:
    section.add "X-Amz-Signature", valid_603612
  var valid_603613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603613 = validateParameter(valid_603613, JString, required = false,
                                 default = nil)
  if valid_603613 != nil:
    section.add "X-Amz-SignedHeaders", valid_603613
  var valid_603614 = header.getOrDefault("X-Amz-Credential")
  valid_603614 = validateParameter(valid_603614, JString, required = false,
                                 default = nil)
  if valid_603614 != nil:
    section.add "X-Amz-Credential", valid_603614
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603615: Call_GetCreateSAMLProvider_603601; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603615.validator(path, query, header, formData, body)
  let scheme = call_603615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603615.url(scheme.get, call_603615.host, call_603615.base,
                         call_603615.route, valid.getOrDefault("path"))
  result = hook(call_603615, url, valid)

proc call*(call_603616: Call_GetCreateSAMLProvider_603601; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603617 = newJObject()
  add(query_603617, "Name", newJString(Name))
  add(query_603617, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_603617, "Action", newJString(Action))
  add(query_603617, "Version", newJString(Version))
  result = call_603616.call(nil, query_603617, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_603601(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_603602, base: "/",
    url: url_GetCreateSAMLProvider_603603, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_603654 = ref object of OpenApiRestCall_602433
proc url_PostCreateServiceLinkedRole_603656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceLinkedRole_603655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603657 = query.getOrDefault("Action")
  valid_603657 = validateParameter(valid_603657, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_603657 != nil:
    section.add "Action", valid_603657
  var valid_603658 = query.getOrDefault("Version")
  valid_603658 = validateParameter(valid_603658, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603658 != nil:
    section.add "Version", valid_603658
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603659 = header.getOrDefault("X-Amz-Date")
  valid_603659 = validateParameter(valid_603659, JString, required = false,
                                 default = nil)
  if valid_603659 != nil:
    section.add "X-Amz-Date", valid_603659
  var valid_603660 = header.getOrDefault("X-Amz-Security-Token")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-Security-Token", valid_603660
  var valid_603661 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Content-Sha256", valid_603661
  var valid_603662 = header.getOrDefault("X-Amz-Algorithm")
  valid_603662 = validateParameter(valid_603662, JString, required = false,
                                 default = nil)
  if valid_603662 != nil:
    section.add "X-Amz-Algorithm", valid_603662
  var valid_603663 = header.getOrDefault("X-Amz-Signature")
  valid_603663 = validateParameter(valid_603663, JString, required = false,
                                 default = nil)
  if valid_603663 != nil:
    section.add "X-Amz-Signature", valid_603663
  var valid_603664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603664 = validateParameter(valid_603664, JString, required = false,
                                 default = nil)
  if valid_603664 != nil:
    section.add "X-Amz-SignedHeaders", valid_603664
  var valid_603665 = header.getOrDefault("X-Amz-Credential")
  valid_603665 = validateParameter(valid_603665, JString, required = false,
                                 default = nil)
  if valid_603665 != nil:
    section.add "X-Amz-Credential", valid_603665
  result.add "header", section
  ## parameters in `formData` object:
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_603666 = formData.getOrDefault("AWSServiceName")
  valid_603666 = validateParameter(valid_603666, JString, required = true,
                                 default = nil)
  if valid_603666 != nil:
    section.add "AWSServiceName", valid_603666
  var valid_603667 = formData.getOrDefault("CustomSuffix")
  valid_603667 = validateParameter(valid_603667, JString, required = false,
                                 default = nil)
  if valid_603667 != nil:
    section.add "CustomSuffix", valid_603667
  var valid_603668 = formData.getOrDefault("Description")
  valid_603668 = validateParameter(valid_603668, JString, required = false,
                                 default = nil)
  if valid_603668 != nil:
    section.add "Description", valid_603668
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603669: Call_PostCreateServiceLinkedRole_603654; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_603669.validator(path, query, header, formData, body)
  let scheme = call_603669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603669.url(scheme.get, call_603669.host, call_603669.base,
                         call_603669.route, valid.getOrDefault("path"))
  result = hook(call_603669, url, valid)

proc call*(call_603670: Call_PostCreateServiceLinkedRole_603654;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : The description of the role.
  var query_603671 = newJObject()
  var formData_603672 = newJObject()
  add(formData_603672, "AWSServiceName", newJString(AWSServiceName))
  add(formData_603672, "CustomSuffix", newJString(CustomSuffix))
  add(query_603671, "Action", newJString(Action))
  add(query_603671, "Version", newJString(Version))
  add(formData_603672, "Description", newJString(Description))
  result = call_603670.call(nil, query_603671, nil, formData_603672, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_603654(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_603655, base: "/",
    url: url_PostCreateServiceLinkedRole_603656,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_603636 = ref object of OpenApiRestCall_602433
proc url_GetCreateServiceLinkedRole_603638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceLinkedRole_603637(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  section = newJObject()
  var valid_603639 = query.getOrDefault("Description")
  valid_603639 = validateParameter(valid_603639, JString, required = false,
                                 default = nil)
  if valid_603639 != nil:
    section.add "Description", valid_603639
  assert query != nil,
        "query argument is necessary due to required `AWSServiceName` field"
  var valid_603640 = query.getOrDefault("AWSServiceName")
  valid_603640 = validateParameter(valid_603640, JString, required = true,
                                 default = nil)
  if valid_603640 != nil:
    section.add "AWSServiceName", valid_603640
  var valid_603641 = query.getOrDefault("Action")
  valid_603641 = validateParameter(valid_603641, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_603641 != nil:
    section.add "Action", valid_603641
  var valid_603642 = query.getOrDefault("Version")
  valid_603642 = validateParameter(valid_603642, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603642 != nil:
    section.add "Version", valid_603642
  var valid_603643 = query.getOrDefault("CustomSuffix")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "CustomSuffix", valid_603643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603644 = header.getOrDefault("X-Amz-Date")
  valid_603644 = validateParameter(valid_603644, JString, required = false,
                                 default = nil)
  if valid_603644 != nil:
    section.add "X-Amz-Date", valid_603644
  var valid_603645 = header.getOrDefault("X-Amz-Security-Token")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "X-Amz-Security-Token", valid_603645
  var valid_603646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603646 = validateParameter(valid_603646, JString, required = false,
                                 default = nil)
  if valid_603646 != nil:
    section.add "X-Amz-Content-Sha256", valid_603646
  var valid_603647 = header.getOrDefault("X-Amz-Algorithm")
  valid_603647 = validateParameter(valid_603647, JString, required = false,
                                 default = nil)
  if valid_603647 != nil:
    section.add "X-Amz-Algorithm", valid_603647
  var valid_603648 = header.getOrDefault("X-Amz-Signature")
  valid_603648 = validateParameter(valid_603648, JString, required = false,
                                 default = nil)
  if valid_603648 != nil:
    section.add "X-Amz-Signature", valid_603648
  var valid_603649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603649 = validateParameter(valid_603649, JString, required = false,
                                 default = nil)
  if valid_603649 != nil:
    section.add "X-Amz-SignedHeaders", valid_603649
  var valid_603650 = header.getOrDefault("X-Amz-Credential")
  valid_603650 = validateParameter(valid_603650, JString, required = false,
                                 default = nil)
  if valid_603650 != nil:
    section.add "X-Amz-Credential", valid_603650
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603651: Call_GetCreateServiceLinkedRole_603636; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_603651.validator(path, query, header, formData, body)
  let scheme = call_603651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603651.url(scheme.get, call_603651.host, call_603651.base,
                         call_603651.route, valid.getOrDefault("path"))
  result = hook(call_603651, url, valid)

proc call*(call_603652: Call_GetCreateServiceLinkedRole_603636;
          AWSServiceName: string; Description: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; CustomSuffix: string = ""): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  var query_603653 = newJObject()
  add(query_603653, "Description", newJString(Description))
  add(query_603653, "AWSServiceName", newJString(AWSServiceName))
  add(query_603653, "Action", newJString(Action))
  add(query_603653, "Version", newJString(Version))
  add(query_603653, "CustomSuffix", newJString(CustomSuffix))
  result = call_603652.call(nil, query_603653, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_603636(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_603637, base: "/",
    url: url_GetCreateServiceLinkedRole_603638,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_603690 = ref object of OpenApiRestCall_602433
proc url_PostCreateServiceSpecificCredential_603692(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceSpecificCredential_603691(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603693 = query.getOrDefault("Action")
  valid_603693 = validateParameter(valid_603693, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_603693 != nil:
    section.add "Action", valid_603693
  var valid_603694 = query.getOrDefault("Version")
  valid_603694 = validateParameter(valid_603694, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603694 != nil:
    section.add "Version", valid_603694
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603695 = header.getOrDefault("X-Amz-Date")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "X-Amz-Date", valid_603695
  var valid_603696 = header.getOrDefault("X-Amz-Security-Token")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-Security-Token", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-Content-Sha256", valid_603697
  var valid_603698 = header.getOrDefault("X-Amz-Algorithm")
  valid_603698 = validateParameter(valid_603698, JString, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "X-Amz-Algorithm", valid_603698
  var valid_603699 = header.getOrDefault("X-Amz-Signature")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-Signature", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-SignedHeaders", valid_603700
  var valid_603701 = header.getOrDefault("X-Amz-Credential")
  valid_603701 = validateParameter(valid_603701, JString, required = false,
                                 default = nil)
  if valid_603701 != nil:
    section.add "X-Amz-Credential", valid_603701
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603702 = formData.getOrDefault("UserName")
  valid_603702 = validateParameter(valid_603702, JString, required = true,
                                 default = nil)
  if valid_603702 != nil:
    section.add "UserName", valid_603702
  var valid_603703 = formData.getOrDefault("ServiceName")
  valid_603703 = validateParameter(valid_603703, JString, required = true,
                                 default = nil)
  if valid_603703 != nil:
    section.add "ServiceName", valid_603703
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603704: Call_PostCreateServiceSpecificCredential_603690;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603704.validator(path, query, header, formData, body)
  let scheme = call_603704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603704.url(scheme.get, call_603704.host, call_603704.base,
                         call_603704.route, valid.getOrDefault("path"))
  result = hook(call_603704, url, valid)

proc call*(call_603705: Call_PostCreateServiceSpecificCredential_603690;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  var query_603706 = newJObject()
  var formData_603707 = newJObject()
  add(formData_603707, "UserName", newJString(UserName))
  add(query_603706, "Action", newJString(Action))
  add(query_603706, "Version", newJString(Version))
  add(formData_603707, "ServiceName", newJString(ServiceName))
  result = call_603705.call(nil, query_603706, nil, formData_603707, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_603690(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_603691, base: "/",
    url: url_PostCreateServiceSpecificCredential_603692,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_603673 = ref object of OpenApiRestCall_602433
proc url_GetCreateServiceSpecificCredential_603675(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceSpecificCredential_603674(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceName` field"
  var valid_603676 = query.getOrDefault("ServiceName")
  valid_603676 = validateParameter(valid_603676, JString, required = true,
                                 default = nil)
  if valid_603676 != nil:
    section.add "ServiceName", valid_603676
  var valid_603677 = query.getOrDefault("UserName")
  valid_603677 = validateParameter(valid_603677, JString, required = true,
                                 default = nil)
  if valid_603677 != nil:
    section.add "UserName", valid_603677
  var valid_603678 = query.getOrDefault("Action")
  valid_603678 = validateParameter(valid_603678, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_603678 != nil:
    section.add "Action", valid_603678
  var valid_603679 = query.getOrDefault("Version")
  valid_603679 = validateParameter(valid_603679, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603679 != nil:
    section.add "Version", valid_603679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603680 = header.getOrDefault("X-Amz-Date")
  valid_603680 = validateParameter(valid_603680, JString, required = false,
                                 default = nil)
  if valid_603680 != nil:
    section.add "X-Amz-Date", valid_603680
  var valid_603681 = header.getOrDefault("X-Amz-Security-Token")
  valid_603681 = validateParameter(valid_603681, JString, required = false,
                                 default = nil)
  if valid_603681 != nil:
    section.add "X-Amz-Security-Token", valid_603681
  var valid_603682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603682 = validateParameter(valid_603682, JString, required = false,
                                 default = nil)
  if valid_603682 != nil:
    section.add "X-Amz-Content-Sha256", valid_603682
  var valid_603683 = header.getOrDefault("X-Amz-Algorithm")
  valid_603683 = validateParameter(valid_603683, JString, required = false,
                                 default = nil)
  if valid_603683 != nil:
    section.add "X-Amz-Algorithm", valid_603683
  var valid_603684 = header.getOrDefault("X-Amz-Signature")
  valid_603684 = validateParameter(valid_603684, JString, required = false,
                                 default = nil)
  if valid_603684 != nil:
    section.add "X-Amz-Signature", valid_603684
  var valid_603685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603685 = validateParameter(valid_603685, JString, required = false,
                                 default = nil)
  if valid_603685 != nil:
    section.add "X-Amz-SignedHeaders", valid_603685
  var valid_603686 = header.getOrDefault("X-Amz-Credential")
  valid_603686 = validateParameter(valid_603686, JString, required = false,
                                 default = nil)
  if valid_603686 != nil:
    section.add "X-Amz-Credential", valid_603686
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603687: Call_GetCreateServiceSpecificCredential_603673;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603687.validator(path, query, header, formData, body)
  let scheme = call_603687.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603687.url(scheme.get, call_603687.host, call_603687.base,
                         call_603687.route, valid.getOrDefault("path"))
  result = hook(call_603687, url, valid)

proc call*(call_603688: Call_GetCreateServiceSpecificCredential_603673;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603689 = newJObject()
  add(query_603689, "ServiceName", newJString(ServiceName))
  add(query_603689, "UserName", newJString(UserName))
  add(query_603689, "Action", newJString(Action))
  add(query_603689, "Version", newJString(Version))
  result = call_603688.call(nil, query_603689, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_603673(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_603674, base: "/",
    url: url_GetCreateServiceSpecificCredential_603675,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_603727 = ref object of OpenApiRestCall_602433
proc url_PostCreateUser_603729(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateUser_603728(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603730 = query.getOrDefault("Action")
  valid_603730 = validateParameter(valid_603730, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_603730 != nil:
    section.add "Action", valid_603730
  var valid_603731 = query.getOrDefault("Version")
  valid_603731 = validateParameter(valid_603731, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603731 != nil:
    section.add "Version", valid_603731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603732 = header.getOrDefault("X-Amz-Date")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-Date", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Security-Token")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Security-Token", valid_603733
  var valid_603734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603734 = validateParameter(valid_603734, JString, required = false,
                                 default = nil)
  if valid_603734 != nil:
    section.add "X-Amz-Content-Sha256", valid_603734
  var valid_603735 = header.getOrDefault("X-Amz-Algorithm")
  valid_603735 = validateParameter(valid_603735, JString, required = false,
                                 default = nil)
  if valid_603735 != nil:
    section.add "X-Amz-Algorithm", valid_603735
  var valid_603736 = header.getOrDefault("X-Amz-Signature")
  valid_603736 = validateParameter(valid_603736, JString, required = false,
                                 default = nil)
  if valid_603736 != nil:
    section.add "X-Amz-Signature", valid_603736
  var valid_603737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603737 = validateParameter(valid_603737, JString, required = false,
                                 default = nil)
  if valid_603737 != nil:
    section.add "X-Amz-SignedHeaders", valid_603737
  var valid_603738 = header.getOrDefault("X-Amz-Credential")
  valid_603738 = validateParameter(valid_603738, JString, required = false,
                                 default = nil)
  if valid_603738 != nil:
    section.add "X-Amz-Credential", valid_603738
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603739 = formData.getOrDefault("UserName")
  valid_603739 = validateParameter(valid_603739, JString, required = true,
                                 default = nil)
  if valid_603739 != nil:
    section.add "UserName", valid_603739
  var valid_603740 = formData.getOrDefault("PermissionsBoundary")
  valid_603740 = validateParameter(valid_603740, JString, required = false,
                                 default = nil)
  if valid_603740 != nil:
    section.add "PermissionsBoundary", valid_603740
  var valid_603741 = formData.getOrDefault("Tags")
  valid_603741 = validateParameter(valid_603741, JArray, required = false,
                                 default = nil)
  if valid_603741 != nil:
    section.add "Tags", valid_603741
  var valid_603742 = formData.getOrDefault("Path")
  valid_603742 = validateParameter(valid_603742, JString, required = false,
                                 default = nil)
  if valid_603742 != nil:
    section.add "Path", valid_603742
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603743: Call_PostCreateUser_603727; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603743.validator(path, query, header, formData, body)
  let scheme = call_603743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603743.url(scheme.get, call_603743.host, call_603743.base,
                         call_603743.route, valid.getOrDefault("path"))
  result = hook(call_603743, url, valid)

proc call*(call_603744: Call_PostCreateUser_603727; UserName: string;
          PermissionsBoundary: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateUser"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603745 = newJObject()
  var formData_603746 = newJObject()
  add(formData_603746, "UserName", newJString(UserName))
  add(formData_603746, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_603746.add "Tags", Tags
  add(query_603745, "Action", newJString(Action))
  add(query_603745, "Version", newJString(Version))
  add(formData_603746, "Path", newJString(Path))
  result = call_603744.call(nil, query_603745, nil, formData_603746, nil)

var postCreateUser* = Call_PostCreateUser_603727(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_603728,
    base: "/", url: url_PostCreateUser_603729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_603708 = ref object of OpenApiRestCall_602433
proc url_GetCreateUser_603710(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateUser_603709(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603711 = query.getOrDefault("Tags")
  valid_603711 = validateParameter(valid_603711, JArray, required = false,
                                 default = nil)
  if valid_603711 != nil:
    section.add "Tags", valid_603711
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603712 = query.getOrDefault("UserName")
  valid_603712 = validateParameter(valid_603712, JString, required = true,
                                 default = nil)
  if valid_603712 != nil:
    section.add "UserName", valid_603712
  var valid_603713 = query.getOrDefault("Action")
  valid_603713 = validateParameter(valid_603713, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_603713 != nil:
    section.add "Action", valid_603713
  var valid_603714 = query.getOrDefault("Path")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "Path", valid_603714
  var valid_603715 = query.getOrDefault("PermissionsBoundary")
  valid_603715 = validateParameter(valid_603715, JString, required = false,
                                 default = nil)
  if valid_603715 != nil:
    section.add "PermissionsBoundary", valid_603715
  var valid_603716 = query.getOrDefault("Version")
  valid_603716 = validateParameter(valid_603716, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603716 != nil:
    section.add "Version", valid_603716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603717 = header.getOrDefault("X-Amz-Date")
  valid_603717 = validateParameter(valid_603717, JString, required = false,
                                 default = nil)
  if valid_603717 != nil:
    section.add "X-Amz-Date", valid_603717
  var valid_603718 = header.getOrDefault("X-Amz-Security-Token")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "X-Amz-Security-Token", valid_603718
  var valid_603719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603719 = validateParameter(valid_603719, JString, required = false,
                                 default = nil)
  if valid_603719 != nil:
    section.add "X-Amz-Content-Sha256", valid_603719
  var valid_603720 = header.getOrDefault("X-Amz-Algorithm")
  valid_603720 = validateParameter(valid_603720, JString, required = false,
                                 default = nil)
  if valid_603720 != nil:
    section.add "X-Amz-Algorithm", valid_603720
  var valid_603721 = header.getOrDefault("X-Amz-Signature")
  valid_603721 = validateParameter(valid_603721, JString, required = false,
                                 default = nil)
  if valid_603721 != nil:
    section.add "X-Amz-Signature", valid_603721
  var valid_603722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603722 = validateParameter(valid_603722, JString, required = false,
                                 default = nil)
  if valid_603722 != nil:
    section.add "X-Amz-SignedHeaders", valid_603722
  var valid_603723 = header.getOrDefault("X-Amz-Credential")
  valid_603723 = validateParameter(valid_603723, JString, required = false,
                                 default = nil)
  if valid_603723 != nil:
    section.add "X-Amz-Credential", valid_603723
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603724: Call_GetCreateUser_603708; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603724.validator(path, query, header, formData, body)
  let scheme = call_603724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603724.url(scheme.get, call_603724.host, call_603724.base,
                         call_603724.route, valid.getOrDefault("path"))
  result = hook(call_603724, url, valid)

proc call*(call_603725: Call_GetCreateUser_603708; UserName: string;
          Tags: JsonNode = nil; Action: string = "CreateUser"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_603726 = newJObject()
  if Tags != nil:
    query_603726.add "Tags", Tags
  add(query_603726, "UserName", newJString(UserName))
  add(query_603726, "Action", newJString(Action))
  add(query_603726, "Path", newJString(Path))
  add(query_603726, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_603726, "Version", newJString(Version))
  result = call_603725.call(nil, query_603726, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_603708(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_603709,
    base: "/", url: url_GetCreateUser_603710, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_603764 = ref object of OpenApiRestCall_602433
proc url_PostCreateVirtualMFADevice_603766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateVirtualMFADevice_603765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603767 = query.getOrDefault("Action")
  valid_603767 = validateParameter(valid_603767, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_603767 != nil:
    section.add "Action", valid_603767
  var valid_603768 = query.getOrDefault("Version")
  valid_603768 = validateParameter(valid_603768, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603768 != nil:
    section.add "Version", valid_603768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603769 = header.getOrDefault("X-Amz-Date")
  valid_603769 = validateParameter(valid_603769, JString, required = false,
                                 default = nil)
  if valid_603769 != nil:
    section.add "X-Amz-Date", valid_603769
  var valid_603770 = header.getOrDefault("X-Amz-Security-Token")
  valid_603770 = validateParameter(valid_603770, JString, required = false,
                                 default = nil)
  if valid_603770 != nil:
    section.add "X-Amz-Security-Token", valid_603770
  var valid_603771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603771 = validateParameter(valid_603771, JString, required = false,
                                 default = nil)
  if valid_603771 != nil:
    section.add "X-Amz-Content-Sha256", valid_603771
  var valid_603772 = header.getOrDefault("X-Amz-Algorithm")
  valid_603772 = validateParameter(valid_603772, JString, required = false,
                                 default = nil)
  if valid_603772 != nil:
    section.add "X-Amz-Algorithm", valid_603772
  var valid_603773 = header.getOrDefault("X-Amz-Signature")
  valid_603773 = validateParameter(valid_603773, JString, required = false,
                                 default = nil)
  if valid_603773 != nil:
    section.add "X-Amz-Signature", valid_603773
  var valid_603774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603774 = validateParameter(valid_603774, JString, required = false,
                                 default = nil)
  if valid_603774 != nil:
    section.add "X-Amz-SignedHeaders", valid_603774
  var valid_603775 = header.getOrDefault("X-Amz-Credential")
  valid_603775 = validateParameter(valid_603775, JString, required = false,
                                 default = nil)
  if valid_603775 != nil:
    section.add "X-Amz-Credential", valid_603775
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_603776 = formData.getOrDefault("VirtualMFADeviceName")
  valid_603776 = validateParameter(valid_603776, JString, required = true,
                                 default = nil)
  if valid_603776 != nil:
    section.add "VirtualMFADeviceName", valid_603776
  var valid_603777 = formData.getOrDefault("Path")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "Path", valid_603777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603778: Call_PostCreateVirtualMFADevice_603764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_603778.validator(path, query, header, formData, body)
  let scheme = call_603778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603778.url(scheme.get, call_603778.host, call_603778.base,
                         call_603778.route, valid.getOrDefault("path"))
  result = hook(call_603778, url, valid)

proc call*(call_603779: Call_PostCreateVirtualMFADevice_603764;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_603780 = newJObject()
  var formData_603781 = newJObject()
  add(formData_603781, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_603780, "Action", newJString(Action))
  add(query_603780, "Version", newJString(Version))
  add(formData_603781, "Path", newJString(Path))
  result = call_603779.call(nil, query_603780, nil, formData_603781, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_603764(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_603765, base: "/",
    url: url_PostCreateVirtualMFADevice_603766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_603747 = ref object of OpenApiRestCall_602433
proc url_GetCreateVirtualMFADevice_603749(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateVirtualMFADevice_603748(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_603750 = query.getOrDefault("VirtualMFADeviceName")
  valid_603750 = validateParameter(valid_603750, JString, required = true,
                                 default = nil)
  if valid_603750 != nil:
    section.add "VirtualMFADeviceName", valid_603750
  var valid_603751 = query.getOrDefault("Action")
  valid_603751 = validateParameter(valid_603751, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_603751 != nil:
    section.add "Action", valid_603751
  var valid_603752 = query.getOrDefault("Path")
  valid_603752 = validateParameter(valid_603752, JString, required = false,
                                 default = nil)
  if valid_603752 != nil:
    section.add "Path", valid_603752
  var valid_603753 = query.getOrDefault("Version")
  valid_603753 = validateParameter(valid_603753, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603753 != nil:
    section.add "Version", valid_603753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603754 = header.getOrDefault("X-Amz-Date")
  valid_603754 = validateParameter(valid_603754, JString, required = false,
                                 default = nil)
  if valid_603754 != nil:
    section.add "X-Amz-Date", valid_603754
  var valid_603755 = header.getOrDefault("X-Amz-Security-Token")
  valid_603755 = validateParameter(valid_603755, JString, required = false,
                                 default = nil)
  if valid_603755 != nil:
    section.add "X-Amz-Security-Token", valid_603755
  var valid_603756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603756 = validateParameter(valid_603756, JString, required = false,
                                 default = nil)
  if valid_603756 != nil:
    section.add "X-Amz-Content-Sha256", valid_603756
  var valid_603757 = header.getOrDefault("X-Amz-Algorithm")
  valid_603757 = validateParameter(valid_603757, JString, required = false,
                                 default = nil)
  if valid_603757 != nil:
    section.add "X-Amz-Algorithm", valid_603757
  var valid_603758 = header.getOrDefault("X-Amz-Signature")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "X-Amz-Signature", valid_603758
  var valid_603759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603759 = validateParameter(valid_603759, JString, required = false,
                                 default = nil)
  if valid_603759 != nil:
    section.add "X-Amz-SignedHeaders", valid_603759
  var valid_603760 = header.getOrDefault("X-Amz-Credential")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Credential", valid_603760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603761: Call_GetCreateVirtualMFADevice_603747; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_603761.validator(path, query, header, formData, body)
  let scheme = call_603761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603761.url(scheme.get, call_603761.host, call_603761.base,
                         call_603761.route, valid.getOrDefault("path"))
  result = hook(call_603761, url, valid)

proc call*(call_603762: Call_GetCreateVirtualMFADevice_603747;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_603763 = newJObject()
  add(query_603763, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_603763, "Action", newJString(Action))
  add(query_603763, "Path", newJString(Path))
  add(query_603763, "Version", newJString(Version))
  result = call_603762.call(nil, query_603763, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_603747(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_603748, base: "/",
    url: url_GetCreateVirtualMFADevice_603749,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_603799 = ref object of OpenApiRestCall_602433
proc url_PostDeactivateMFADevice_603801(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeactivateMFADevice_603800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603802 = query.getOrDefault("Action")
  valid_603802 = validateParameter(valid_603802, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_603802 != nil:
    section.add "Action", valid_603802
  var valid_603803 = query.getOrDefault("Version")
  valid_603803 = validateParameter(valid_603803, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603803 != nil:
    section.add "Version", valid_603803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603804 = header.getOrDefault("X-Amz-Date")
  valid_603804 = validateParameter(valid_603804, JString, required = false,
                                 default = nil)
  if valid_603804 != nil:
    section.add "X-Amz-Date", valid_603804
  var valid_603805 = header.getOrDefault("X-Amz-Security-Token")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-Security-Token", valid_603805
  var valid_603806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603806 = validateParameter(valid_603806, JString, required = false,
                                 default = nil)
  if valid_603806 != nil:
    section.add "X-Amz-Content-Sha256", valid_603806
  var valid_603807 = header.getOrDefault("X-Amz-Algorithm")
  valid_603807 = validateParameter(valid_603807, JString, required = false,
                                 default = nil)
  if valid_603807 != nil:
    section.add "X-Amz-Algorithm", valid_603807
  var valid_603808 = header.getOrDefault("X-Amz-Signature")
  valid_603808 = validateParameter(valid_603808, JString, required = false,
                                 default = nil)
  if valid_603808 != nil:
    section.add "X-Amz-Signature", valid_603808
  var valid_603809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603809 = validateParameter(valid_603809, JString, required = false,
                                 default = nil)
  if valid_603809 != nil:
    section.add "X-Amz-SignedHeaders", valid_603809
  var valid_603810 = header.getOrDefault("X-Amz-Credential")
  valid_603810 = validateParameter(valid_603810, JString, required = false,
                                 default = nil)
  if valid_603810 != nil:
    section.add "X-Amz-Credential", valid_603810
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_603811 = formData.getOrDefault("SerialNumber")
  valid_603811 = validateParameter(valid_603811, JString, required = true,
                                 default = nil)
  if valid_603811 != nil:
    section.add "SerialNumber", valid_603811
  var valid_603812 = formData.getOrDefault("UserName")
  valid_603812 = validateParameter(valid_603812, JString, required = true,
                                 default = nil)
  if valid_603812 != nil:
    section.add "UserName", valid_603812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603813: Call_PostDeactivateMFADevice_603799; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603813.validator(path, query, header, formData, body)
  let scheme = call_603813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603813.url(scheme.get, call_603813.host, call_603813.base,
                         call_603813.route, valid.getOrDefault("path"))
  result = hook(call_603813, url, valid)

proc call*(call_603814: Call_PostDeactivateMFADevice_603799; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603815 = newJObject()
  var formData_603816 = newJObject()
  add(formData_603816, "SerialNumber", newJString(SerialNumber))
  add(formData_603816, "UserName", newJString(UserName))
  add(query_603815, "Action", newJString(Action))
  add(query_603815, "Version", newJString(Version))
  result = call_603814.call(nil, query_603815, nil, formData_603816, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_603799(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_603800, base: "/",
    url: url_PostDeactivateMFADevice_603801, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_603782 = ref object of OpenApiRestCall_602433
proc url_GetDeactivateMFADevice_603784(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeactivateMFADevice_603783(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_603785 = query.getOrDefault("SerialNumber")
  valid_603785 = validateParameter(valid_603785, JString, required = true,
                                 default = nil)
  if valid_603785 != nil:
    section.add "SerialNumber", valid_603785
  var valid_603786 = query.getOrDefault("UserName")
  valid_603786 = validateParameter(valid_603786, JString, required = true,
                                 default = nil)
  if valid_603786 != nil:
    section.add "UserName", valid_603786
  var valid_603787 = query.getOrDefault("Action")
  valid_603787 = validateParameter(valid_603787, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_603787 != nil:
    section.add "Action", valid_603787
  var valid_603788 = query.getOrDefault("Version")
  valid_603788 = validateParameter(valid_603788, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603788 != nil:
    section.add "Version", valid_603788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603789 = header.getOrDefault("X-Amz-Date")
  valid_603789 = validateParameter(valid_603789, JString, required = false,
                                 default = nil)
  if valid_603789 != nil:
    section.add "X-Amz-Date", valid_603789
  var valid_603790 = header.getOrDefault("X-Amz-Security-Token")
  valid_603790 = validateParameter(valid_603790, JString, required = false,
                                 default = nil)
  if valid_603790 != nil:
    section.add "X-Amz-Security-Token", valid_603790
  var valid_603791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603791 = validateParameter(valid_603791, JString, required = false,
                                 default = nil)
  if valid_603791 != nil:
    section.add "X-Amz-Content-Sha256", valid_603791
  var valid_603792 = header.getOrDefault("X-Amz-Algorithm")
  valid_603792 = validateParameter(valid_603792, JString, required = false,
                                 default = nil)
  if valid_603792 != nil:
    section.add "X-Amz-Algorithm", valid_603792
  var valid_603793 = header.getOrDefault("X-Amz-Signature")
  valid_603793 = validateParameter(valid_603793, JString, required = false,
                                 default = nil)
  if valid_603793 != nil:
    section.add "X-Amz-Signature", valid_603793
  var valid_603794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-SignedHeaders", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-Credential")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-Credential", valid_603795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603796: Call_GetDeactivateMFADevice_603782; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603796.validator(path, query, header, formData, body)
  let scheme = call_603796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603796.url(scheme.get, call_603796.host, call_603796.base,
                         call_603796.route, valid.getOrDefault("path"))
  result = hook(call_603796, url, valid)

proc call*(call_603797: Call_GetDeactivateMFADevice_603782; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603798 = newJObject()
  add(query_603798, "SerialNumber", newJString(SerialNumber))
  add(query_603798, "UserName", newJString(UserName))
  add(query_603798, "Action", newJString(Action))
  add(query_603798, "Version", newJString(Version))
  result = call_603797.call(nil, query_603798, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_603782(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_603783, base: "/",
    url: url_GetDeactivateMFADevice_603784, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_603834 = ref object of OpenApiRestCall_602433
proc url_PostDeleteAccessKey_603836(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccessKey_603835(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603837 = query.getOrDefault("Action")
  valid_603837 = validateParameter(valid_603837, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_603837 != nil:
    section.add "Action", valid_603837
  var valid_603838 = query.getOrDefault("Version")
  valid_603838 = validateParameter(valid_603838, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603838 != nil:
    section.add "Version", valid_603838
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603839 = header.getOrDefault("X-Amz-Date")
  valid_603839 = validateParameter(valid_603839, JString, required = false,
                                 default = nil)
  if valid_603839 != nil:
    section.add "X-Amz-Date", valid_603839
  var valid_603840 = header.getOrDefault("X-Amz-Security-Token")
  valid_603840 = validateParameter(valid_603840, JString, required = false,
                                 default = nil)
  if valid_603840 != nil:
    section.add "X-Amz-Security-Token", valid_603840
  var valid_603841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603841 = validateParameter(valid_603841, JString, required = false,
                                 default = nil)
  if valid_603841 != nil:
    section.add "X-Amz-Content-Sha256", valid_603841
  var valid_603842 = header.getOrDefault("X-Amz-Algorithm")
  valid_603842 = validateParameter(valid_603842, JString, required = false,
                                 default = nil)
  if valid_603842 != nil:
    section.add "X-Amz-Algorithm", valid_603842
  var valid_603843 = header.getOrDefault("X-Amz-Signature")
  valid_603843 = validateParameter(valid_603843, JString, required = false,
                                 default = nil)
  if valid_603843 != nil:
    section.add "X-Amz-Signature", valid_603843
  var valid_603844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603844 = validateParameter(valid_603844, JString, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "X-Amz-SignedHeaders", valid_603844
  var valid_603845 = header.getOrDefault("X-Amz-Credential")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-Credential", valid_603845
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_603846 = formData.getOrDefault("UserName")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "UserName", valid_603846
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_603847 = formData.getOrDefault("AccessKeyId")
  valid_603847 = validateParameter(valid_603847, JString, required = true,
                                 default = nil)
  if valid_603847 != nil:
    section.add "AccessKeyId", valid_603847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603848: Call_PostDeleteAccessKey_603834; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_603848.validator(path, query, header, formData, body)
  let scheme = call_603848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603848.url(scheme.get, call_603848.host, call_603848.base,
                         call_603848.route, valid.getOrDefault("path"))
  result = hook(call_603848, url, valid)

proc call*(call_603849: Call_PostDeleteAccessKey_603834; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603850 = newJObject()
  var formData_603851 = newJObject()
  add(formData_603851, "UserName", newJString(UserName))
  add(formData_603851, "AccessKeyId", newJString(AccessKeyId))
  add(query_603850, "Action", newJString(Action))
  add(query_603850, "Version", newJString(Version))
  result = call_603849.call(nil, query_603850, nil, formData_603851, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_603834(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_603835, base: "/",
    url: url_PostDeleteAccessKey_603836, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_603817 = ref object of OpenApiRestCall_602433
proc url_GetDeleteAccessKey_603819(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccessKey_603818(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_603820 = query.getOrDefault("AccessKeyId")
  valid_603820 = validateParameter(valid_603820, JString, required = true,
                                 default = nil)
  if valid_603820 != nil:
    section.add "AccessKeyId", valid_603820
  var valid_603821 = query.getOrDefault("UserName")
  valid_603821 = validateParameter(valid_603821, JString, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "UserName", valid_603821
  var valid_603822 = query.getOrDefault("Action")
  valid_603822 = validateParameter(valid_603822, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_603822 != nil:
    section.add "Action", valid_603822
  var valid_603823 = query.getOrDefault("Version")
  valid_603823 = validateParameter(valid_603823, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603823 != nil:
    section.add "Version", valid_603823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603824 = header.getOrDefault("X-Amz-Date")
  valid_603824 = validateParameter(valid_603824, JString, required = false,
                                 default = nil)
  if valid_603824 != nil:
    section.add "X-Amz-Date", valid_603824
  var valid_603825 = header.getOrDefault("X-Amz-Security-Token")
  valid_603825 = validateParameter(valid_603825, JString, required = false,
                                 default = nil)
  if valid_603825 != nil:
    section.add "X-Amz-Security-Token", valid_603825
  var valid_603826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-Content-Sha256", valid_603826
  var valid_603827 = header.getOrDefault("X-Amz-Algorithm")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "X-Amz-Algorithm", valid_603827
  var valid_603828 = header.getOrDefault("X-Amz-Signature")
  valid_603828 = validateParameter(valid_603828, JString, required = false,
                                 default = nil)
  if valid_603828 != nil:
    section.add "X-Amz-Signature", valid_603828
  var valid_603829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603829 = validateParameter(valid_603829, JString, required = false,
                                 default = nil)
  if valid_603829 != nil:
    section.add "X-Amz-SignedHeaders", valid_603829
  var valid_603830 = header.getOrDefault("X-Amz-Credential")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-Credential", valid_603830
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603831: Call_GetDeleteAccessKey_603817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_603831.validator(path, query, header, formData, body)
  let scheme = call_603831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603831.url(scheme.get, call_603831.host, call_603831.base,
                         call_603831.route, valid.getOrDefault("path"))
  result = hook(call_603831, url, valid)

proc call*(call_603832: Call_GetDeleteAccessKey_603817; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603833 = newJObject()
  add(query_603833, "AccessKeyId", newJString(AccessKeyId))
  add(query_603833, "UserName", newJString(UserName))
  add(query_603833, "Action", newJString(Action))
  add(query_603833, "Version", newJString(Version))
  result = call_603832.call(nil, query_603833, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_603817(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_603818,
    base: "/", url: url_GetDeleteAccessKey_603819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_603868 = ref object of OpenApiRestCall_602433
proc url_PostDeleteAccountAlias_603870(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountAlias_603869(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603871 = query.getOrDefault("Action")
  valid_603871 = validateParameter(valid_603871, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_603871 != nil:
    section.add "Action", valid_603871
  var valid_603872 = query.getOrDefault("Version")
  valid_603872 = validateParameter(valid_603872, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603872 != nil:
    section.add "Version", valid_603872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603873 = header.getOrDefault("X-Amz-Date")
  valid_603873 = validateParameter(valid_603873, JString, required = false,
                                 default = nil)
  if valid_603873 != nil:
    section.add "X-Amz-Date", valid_603873
  var valid_603874 = header.getOrDefault("X-Amz-Security-Token")
  valid_603874 = validateParameter(valid_603874, JString, required = false,
                                 default = nil)
  if valid_603874 != nil:
    section.add "X-Amz-Security-Token", valid_603874
  var valid_603875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603875 = validateParameter(valid_603875, JString, required = false,
                                 default = nil)
  if valid_603875 != nil:
    section.add "X-Amz-Content-Sha256", valid_603875
  var valid_603876 = header.getOrDefault("X-Amz-Algorithm")
  valid_603876 = validateParameter(valid_603876, JString, required = false,
                                 default = nil)
  if valid_603876 != nil:
    section.add "X-Amz-Algorithm", valid_603876
  var valid_603877 = header.getOrDefault("X-Amz-Signature")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = nil)
  if valid_603877 != nil:
    section.add "X-Amz-Signature", valid_603877
  var valid_603878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-SignedHeaders", valid_603878
  var valid_603879 = header.getOrDefault("X-Amz-Credential")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "X-Amz-Credential", valid_603879
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_603880 = formData.getOrDefault("AccountAlias")
  valid_603880 = validateParameter(valid_603880, JString, required = true,
                                 default = nil)
  if valid_603880 != nil:
    section.add "AccountAlias", valid_603880
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603881: Call_PostDeleteAccountAlias_603868; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603881.validator(path, query, header, formData, body)
  let scheme = call_603881.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603881.url(scheme.get, call_603881.host, call_603881.base,
                         call_603881.route, valid.getOrDefault("path"))
  result = hook(call_603881, url, valid)

proc call*(call_603882: Call_PostDeleteAccountAlias_603868; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603883 = newJObject()
  var formData_603884 = newJObject()
  add(formData_603884, "AccountAlias", newJString(AccountAlias))
  add(query_603883, "Action", newJString(Action))
  add(query_603883, "Version", newJString(Version))
  result = call_603882.call(nil, query_603883, nil, formData_603884, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_603868(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_603869, base: "/",
    url: url_PostDeleteAccountAlias_603870, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_603852 = ref object of OpenApiRestCall_602433
proc url_GetDeleteAccountAlias_603854(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountAlias_603853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_603855 = query.getOrDefault("AccountAlias")
  valid_603855 = validateParameter(valid_603855, JString, required = true,
                                 default = nil)
  if valid_603855 != nil:
    section.add "AccountAlias", valid_603855
  var valid_603856 = query.getOrDefault("Action")
  valid_603856 = validateParameter(valid_603856, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_603856 != nil:
    section.add "Action", valid_603856
  var valid_603857 = query.getOrDefault("Version")
  valid_603857 = validateParameter(valid_603857, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603857 != nil:
    section.add "Version", valid_603857
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603858 = header.getOrDefault("X-Amz-Date")
  valid_603858 = validateParameter(valid_603858, JString, required = false,
                                 default = nil)
  if valid_603858 != nil:
    section.add "X-Amz-Date", valid_603858
  var valid_603859 = header.getOrDefault("X-Amz-Security-Token")
  valid_603859 = validateParameter(valid_603859, JString, required = false,
                                 default = nil)
  if valid_603859 != nil:
    section.add "X-Amz-Security-Token", valid_603859
  var valid_603860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Content-Sha256", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Algorithm")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Algorithm", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Signature")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Signature", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-SignedHeaders", valid_603863
  var valid_603864 = header.getOrDefault("X-Amz-Credential")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "X-Amz-Credential", valid_603864
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603865: Call_GetDeleteAccountAlias_603852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603865.validator(path, query, header, formData, body)
  let scheme = call_603865.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603865.url(scheme.get, call_603865.host, call_603865.base,
                         call_603865.route, valid.getOrDefault("path"))
  result = hook(call_603865, url, valid)

proc call*(call_603866: Call_GetDeleteAccountAlias_603852; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603867 = newJObject()
  add(query_603867, "AccountAlias", newJString(AccountAlias))
  add(query_603867, "Action", newJString(Action))
  add(query_603867, "Version", newJString(Version))
  result = call_603866.call(nil, query_603867, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_603852(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_603853, base: "/",
    url: url_GetDeleteAccountAlias_603854, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_603900 = ref object of OpenApiRestCall_602433
proc url_PostDeleteAccountPasswordPolicy_603902(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountPasswordPolicy_603901(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603903 = query.getOrDefault("Action")
  valid_603903 = validateParameter(valid_603903, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_603903 != nil:
    section.add "Action", valid_603903
  var valid_603904 = query.getOrDefault("Version")
  valid_603904 = validateParameter(valid_603904, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603904 != nil:
    section.add "Version", valid_603904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603905 = header.getOrDefault("X-Amz-Date")
  valid_603905 = validateParameter(valid_603905, JString, required = false,
                                 default = nil)
  if valid_603905 != nil:
    section.add "X-Amz-Date", valid_603905
  var valid_603906 = header.getOrDefault("X-Amz-Security-Token")
  valid_603906 = validateParameter(valid_603906, JString, required = false,
                                 default = nil)
  if valid_603906 != nil:
    section.add "X-Amz-Security-Token", valid_603906
  var valid_603907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603907 = validateParameter(valid_603907, JString, required = false,
                                 default = nil)
  if valid_603907 != nil:
    section.add "X-Amz-Content-Sha256", valid_603907
  var valid_603908 = header.getOrDefault("X-Amz-Algorithm")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "X-Amz-Algorithm", valid_603908
  var valid_603909 = header.getOrDefault("X-Amz-Signature")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = nil)
  if valid_603909 != nil:
    section.add "X-Amz-Signature", valid_603909
  var valid_603910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-SignedHeaders", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Credential")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Credential", valid_603911
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603912: Call_PostDeleteAccountPasswordPolicy_603900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_603912.validator(path, query, header, formData, body)
  let scheme = call_603912.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603912.url(scheme.get, call_603912.host, call_603912.base,
                         call_603912.route, valid.getOrDefault("path"))
  result = hook(call_603912, url, valid)

proc call*(call_603913: Call_PostDeleteAccountPasswordPolicy_603900;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603914 = newJObject()
  add(query_603914, "Action", newJString(Action))
  add(query_603914, "Version", newJString(Version))
  result = call_603913.call(nil, query_603914, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_603900(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_603901, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_603902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_603885 = ref object of OpenApiRestCall_602433
proc url_GetDeleteAccountPasswordPolicy_603887(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountPasswordPolicy_603886(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603888 = query.getOrDefault("Action")
  valid_603888 = validateParameter(valid_603888, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_603888 != nil:
    section.add "Action", valid_603888
  var valid_603889 = query.getOrDefault("Version")
  valid_603889 = validateParameter(valid_603889, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603889 != nil:
    section.add "Version", valid_603889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603890 = header.getOrDefault("X-Amz-Date")
  valid_603890 = validateParameter(valid_603890, JString, required = false,
                                 default = nil)
  if valid_603890 != nil:
    section.add "X-Amz-Date", valid_603890
  var valid_603891 = header.getOrDefault("X-Amz-Security-Token")
  valid_603891 = validateParameter(valid_603891, JString, required = false,
                                 default = nil)
  if valid_603891 != nil:
    section.add "X-Amz-Security-Token", valid_603891
  var valid_603892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603892 = validateParameter(valid_603892, JString, required = false,
                                 default = nil)
  if valid_603892 != nil:
    section.add "X-Amz-Content-Sha256", valid_603892
  var valid_603893 = header.getOrDefault("X-Amz-Algorithm")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Algorithm", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Signature")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Signature", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-SignedHeaders", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Credential")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Credential", valid_603896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603897: Call_GetDeleteAccountPasswordPolicy_603885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_603897.validator(path, query, header, formData, body)
  let scheme = call_603897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603897.url(scheme.get, call_603897.host, call_603897.base,
                         call_603897.route, valid.getOrDefault("path"))
  result = hook(call_603897, url, valid)

proc call*(call_603898: Call_GetDeleteAccountPasswordPolicy_603885;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603899 = newJObject()
  add(query_603899, "Action", newJString(Action))
  add(query_603899, "Version", newJString(Version))
  result = call_603898.call(nil, query_603899, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_603885(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_603886, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_603887,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_603931 = ref object of OpenApiRestCall_602433
proc url_PostDeleteGroup_603933(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroup_603932(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603934 = query.getOrDefault("Action")
  valid_603934 = validateParameter(valid_603934, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_603934 != nil:
    section.add "Action", valid_603934
  var valid_603935 = query.getOrDefault("Version")
  valid_603935 = validateParameter(valid_603935, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603935 != nil:
    section.add "Version", valid_603935
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603936 = header.getOrDefault("X-Amz-Date")
  valid_603936 = validateParameter(valid_603936, JString, required = false,
                                 default = nil)
  if valid_603936 != nil:
    section.add "X-Amz-Date", valid_603936
  var valid_603937 = header.getOrDefault("X-Amz-Security-Token")
  valid_603937 = validateParameter(valid_603937, JString, required = false,
                                 default = nil)
  if valid_603937 != nil:
    section.add "X-Amz-Security-Token", valid_603937
  var valid_603938 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603938 = validateParameter(valid_603938, JString, required = false,
                                 default = nil)
  if valid_603938 != nil:
    section.add "X-Amz-Content-Sha256", valid_603938
  var valid_603939 = header.getOrDefault("X-Amz-Algorithm")
  valid_603939 = validateParameter(valid_603939, JString, required = false,
                                 default = nil)
  if valid_603939 != nil:
    section.add "X-Amz-Algorithm", valid_603939
  var valid_603940 = header.getOrDefault("X-Amz-Signature")
  valid_603940 = validateParameter(valid_603940, JString, required = false,
                                 default = nil)
  if valid_603940 != nil:
    section.add "X-Amz-Signature", valid_603940
  var valid_603941 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-SignedHeaders", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Credential")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Credential", valid_603942
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_603943 = formData.getOrDefault("GroupName")
  valid_603943 = validateParameter(valid_603943, JString, required = true,
                                 default = nil)
  if valid_603943 != nil:
    section.add "GroupName", valid_603943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603944: Call_PostDeleteGroup_603931; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_603944.validator(path, query, header, formData, body)
  let scheme = call_603944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603944.url(scheme.get, call_603944.host, call_603944.base,
                         call_603944.route, valid.getOrDefault("path"))
  result = hook(call_603944, url, valid)

proc call*(call_603945: Call_PostDeleteGroup_603931; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603946 = newJObject()
  var formData_603947 = newJObject()
  add(formData_603947, "GroupName", newJString(GroupName))
  add(query_603946, "Action", newJString(Action))
  add(query_603946, "Version", newJString(Version))
  result = call_603945.call(nil, query_603946, nil, formData_603947, nil)

var postDeleteGroup* = Call_PostDeleteGroup_603931(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_603932,
    base: "/", url: url_PostDeleteGroup_603933, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_603915 = ref object of OpenApiRestCall_602433
proc url_GetDeleteGroup_603917(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroup_603916(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603918 = query.getOrDefault("Action")
  valid_603918 = validateParameter(valid_603918, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_603918 != nil:
    section.add "Action", valid_603918
  var valid_603919 = query.getOrDefault("GroupName")
  valid_603919 = validateParameter(valid_603919, JString, required = true,
                                 default = nil)
  if valid_603919 != nil:
    section.add "GroupName", valid_603919
  var valid_603920 = query.getOrDefault("Version")
  valid_603920 = validateParameter(valid_603920, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603920 != nil:
    section.add "Version", valid_603920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603921 = header.getOrDefault("X-Amz-Date")
  valid_603921 = validateParameter(valid_603921, JString, required = false,
                                 default = nil)
  if valid_603921 != nil:
    section.add "X-Amz-Date", valid_603921
  var valid_603922 = header.getOrDefault("X-Amz-Security-Token")
  valid_603922 = validateParameter(valid_603922, JString, required = false,
                                 default = nil)
  if valid_603922 != nil:
    section.add "X-Amz-Security-Token", valid_603922
  var valid_603923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603923 = validateParameter(valid_603923, JString, required = false,
                                 default = nil)
  if valid_603923 != nil:
    section.add "X-Amz-Content-Sha256", valid_603923
  var valid_603924 = header.getOrDefault("X-Amz-Algorithm")
  valid_603924 = validateParameter(valid_603924, JString, required = false,
                                 default = nil)
  if valid_603924 != nil:
    section.add "X-Amz-Algorithm", valid_603924
  var valid_603925 = header.getOrDefault("X-Amz-Signature")
  valid_603925 = validateParameter(valid_603925, JString, required = false,
                                 default = nil)
  if valid_603925 != nil:
    section.add "X-Amz-Signature", valid_603925
  var valid_603926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-SignedHeaders", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Credential")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Credential", valid_603927
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603928: Call_GetDeleteGroup_603915; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_603928.validator(path, query, header, formData, body)
  let scheme = call_603928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603928.url(scheme.get, call_603928.host, call_603928.base,
                         call_603928.route, valid.getOrDefault("path"))
  result = hook(call_603928, url, valid)

proc call*(call_603929: Call_GetDeleteGroup_603915; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603930 = newJObject()
  add(query_603930, "Action", newJString(Action))
  add(query_603930, "GroupName", newJString(GroupName))
  add(query_603930, "Version", newJString(Version))
  result = call_603929.call(nil, query_603930, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_603915(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_603916,
    base: "/", url: url_GetDeleteGroup_603917, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_603965 = ref object of OpenApiRestCall_602433
proc url_PostDeleteGroupPolicy_603967(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroupPolicy_603966(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603968 = query.getOrDefault("Action")
  valid_603968 = validateParameter(valid_603968, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_603968 != nil:
    section.add "Action", valid_603968
  var valid_603969 = query.getOrDefault("Version")
  valid_603969 = validateParameter(valid_603969, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603969 != nil:
    section.add "Version", valid_603969
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603970 = header.getOrDefault("X-Amz-Date")
  valid_603970 = validateParameter(valid_603970, JString, required = false,
                                 default = nil)
  if valid_603970 != nil:
    section.add "X-Amz-Date", valid_603970
  var valid_603971 = header.getOrDefault("X-Amz-Security-Token")
  valid_603971 = validateParameter(valid_603971, JString, required = false,
                                 default = nil)
  if valid_603971 != nil:
    section.add "X-Amz-Security-Token", valid_603971
  var valid_603972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603972 = validateParameter(valid_603972, JString, required = false,
                                 default = nil)
  if valid_603972 != nil:
    section.add "X-Amz-Content-Sha256", valid_603972
  var valid_603973 = header.getOrDefault("X-Amz-Algorithm")
  valid_603973 = validateParameter(valid_603973, JString, required = false,
                                 default = nil)
  if valid_603973 != nil:
    section.add "X-Amz-Algorithm", valid_603973
  var valid_603974 = header.getOrDefault("X-Amz-Signature")
  valid_603974 = validateParameter(valid_603974, JString, required = false,
                                 default = nil)
  if valid_603974 != nil:
    section.add "X-Amz-Signature", valid_603974
  var valid_603975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-SignedHeaders", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Credential")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Credential", valid_603976
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603977 = formData.getOrDefault("PolicyName")
  valid_603977 = validateParameter(valid_603977, JString, required = true,
                                 default = nil)
  if valid_603977 != nil:
    section.add "PolicyName", valid_603977
  var valid_603978 = formData.getOrDefault("GroupName")
  valid_603978 = validateParameter(valid_603978, JString, required = true,
                                 default = nil)
  if valid_603978 != nil:
    section.add "GroupName", valid_603978
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603979: Call_PostDeleteGroupPolicy_603965; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603979.validator(path, query, header, formData, body)
  let scheme = call_603979.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603979.url(scheme.get, call_603979.host, call_603979.base,
                         call_603979.route, valid.getOrDefault("path"))
  result = hook(call_603979, url, valid)

proc call*(call_603980: Call_PostDeleteGroupPolicy_603965; PolicyName: string;
          GroupName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603981 = newJObject()
  var formData_603982 = newJObject()
  add(formData_603982, "PolicyName", newJString(PolicyName))
  add(formData_603982, "GroupName", newJString(GroupName))
  add(query_603981, "Action", newJString(Action))
  add(query_603981, "Version", newJString(Version))
  result = call_603980.call(nil, query_603981, nil, formData_603982, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_603965(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_603966, base: "/",
    url: url_PostDeleteGroupPolicy_603967, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_603948 = ref object of OpenApiRestCall_602433
proc url_GetDeleteGroupPolicy_603950(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroupPolicy_603949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603951 = query.getOrDefault("Action")
  valid_603951 = validateParameter(valid_603951, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_603951 != nil:
    section.add "Action", valid_603951
  var valid_603952 = query.getOrDefault("GroupName")
  valid_603952 = validateParameter(valid_603952, JString, required = true,
                                 default = nil)
  if valid_603952 != nil:
    section.add "GroupName", valid_603952
  var valid_603953 = query.getOrDefault("Version")
  valid_603953 = validateParameter(valid_603953, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603953 != nil:
    section.add "Version", valid_603953
  var valid_603954 = query.getOrDefault("PolicyName")
  valid_603954 = validateParameter(valid_603954, JString, required = true,
                                 default = nil)
  if valid_603954 != nil:
    section.add "PolicyName", valid_603954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603955 = header.getOrDefault("X-Amz-Date")
  valid_603955 = validateParameter(valid_603955, JString, required = false,
                                 default = nil)
  if valid_603955 != nil:
    section.add "X-Amz-Date", valid_603955
  var valid_603956 = header.getOrDefault("X-Amz-Security-Token")
  valid_603956 = validateParameter(valid_603956, JString, required = false,
                                 default = nil)
  if valid_603956 != nil:
    section.add "X-Amz-Security-Token", valid_603956
  var valid_603957 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "X-Amz-Content-Sha256", valid_603957
  var valid_603958 = header.getOrDefault("X-Amz-Algorithm")
  valid_603958 = validateParameter(valid_603958, JString, required = false,
                                 default = nil)
  if valid_603958 != nil:
    section.add "X-Amz-Algorithm", valid_603958
  var valid_603959 = header.getOrDefault("X-Amz-Signature")
  valid_603959 = validateParameter(valid_603959, JString, required = false,
                                 default = nil)
  if valid_603959 != nil:
    section.add "X-Amz-Signature", valid_603959
  var valid_603960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "X-Amz-SignedHeaders", valid_603960
  var valid_603961 = header.getOrDefault("X-Amz-Credential")
  valid_603961 = validateParameter(valid_603961, JString, required = false,
                                 default = nil)
  if valid_603961 != nil:
    section.add "X-Amz-Credential", valid_603961
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603962: Call_GetDeleteGroupPolicy_603948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603962.validator(path, query, header, formData, body)
  let scheme = call_603962.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603962.url(scheme.get, call_603962.host, call_603962.base,
                         call_603962.route, valid.getOrDefault("path"))
  result = hook(call_603962, url, valid)

proc call*(call_603963: Call_GetDeleteGroupPolicy_603948; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_603964 = newJObject()
  add(query_603964, "Action", newJString(Action))
  add(query_603964, "GroupName", newJString(GroupName))
  add(query_603964, "Version", newJString(Version))
  add(query_603964, "PolicyName", newJString(PolicyName))
  result = call_603963.call(nil, query_603964, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_603948(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_603949, base: "/",
    url: url_GetDeleteGroupPolicy_603950, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_603999 = ref object of OpenApiRestCall_602433
proc url_PostDeleteInstanceProfile_604001(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteInstanceProfile_604000(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604002 = query.getOrDefault("Action")
  valid_604002 = validateParameter(valid_604002, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_604002 != nil:
    section.add "Action", valid_604002
  var valid_604003 = query.getOrDefault("Version")
  valid_604003 = validateParameter(valid_604003, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604003 != nil:
    section.add "Version", valid_604003
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604004 = header.getOrDefault("X-Amz-Date")
  valid_604004 = validateParameter(valid_604004, JString, required = false,
                                 default = nil)
  if valid_604004 != nil:
    section.add "X-Amz-Date", valid_604004
  var valid_604005 = header.getOrDefault("X-Amz-Security-Token")
  valid_604005 = validateParameter(valid_604005, JString, required = false,
                                 default = nil)
  if valid_604005 != nil:
    section.add "X-Amz-Security-Token", valid_604005
  var valid_604006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604006 = validateParameter(valid_604006, JString, required = false,
                                 default = nil)
  if valid_604006 != nil:
    section.add "X-Amz-Content-Sha256", valid_604006
  var valid_604007 = header.getOrDefault("X-Amz-Algorithm")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "X-Amz-Algorithm", valid_604007
  var valid_604008 = header.getOrDefault("X-Amz-Signature")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "X-Amz-Signature", valid_604008
  var valid_604009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604009 = validateParameter(valid_604009, JString, required = false,
                                 default = nil)
  if valid_604009 != nil:
    section.add "X-Amz-SignedHeaders", valid_604009
  var valid_604010 = header.getOrDefault("X-Amz-Credential")
  valid_604010 = validateParameter(valid_604010, JString, required = false,
                                 default = nil)
  if valid_604010 != nil:
    section.add "X-Amz-Credential", valid_604010
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_604011 = formData.getOrDefault("InstanceProfileName")
  valid_604011 = validateParameter(valid_604011, JString, required = true,
                                 default = nil)
  if valid_604011 != nil:
    section.add "InstanceProfileName", valid_604011
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604012: Call_PostDeleteInstanceProfile_603999; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_604012.validator(path, query, header, formData, body)
  let scheme = call_604012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604012.url(scheme.get, call_604012.host, call_604012.base,
                         call_604012.route, valid.getOrDefault("path"))
  result = hook(call_604012, url, valid)

proc call*(call_604013: Call_PostDeleteInstanceProfile_603999;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604014 = newJObject()
  var formData_604015 = newJObject()
  add(query_604014, "Action", newJString(Action))
  add(formData_604015, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_604014, "Version", newJString(Version))
  result = call_604013.call(nil, query_604014, nil, formData_604015, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_603999(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_604000, base: "/",
    url: url_PostDeleteInstanceProfile_604001,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_603983 = ref object of OpenApiRestCall_602433
proc url_GetDeleteInstanceProfile_603985(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteInstanceProfile_603984(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_603986 = query.getOrDefault("InstanceProfileName")
  valid_603986 = validateParameter(valid_603986, JString, required = true,
                                 default = nil)
  if valid_603986 != nil:
    section.add "InstanceProfileName", valid_603986
  var valid_603987 = query.getOrDefault("Action")
  valid_603987 = validateParameter(valid_603987, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_603987 != nil:
    section.add "Action", valid_603987
  var valid_603988 = query.getOrDefault("Version")
  valid_603988 = validateParameter(valid_603988, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603988 != nil:
    section.add "Version", valid_603988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603989 = header.getOrDefault("X-Amz-Date")
  valid_603989 = validateParameter(valid_603989, JString, required = false,
                                 default = nil)
  if valid_603989 != nil:
    section.add "X-Amz-Date", valid_603989
  var valid_603990 = header.getOrDefault("X-Amz-Security-Token")
  valid_603990 = validateParameter(valid_603990, JString, required = false,
                                 default = nil)
  if valid_603990 != nil:
    section.add "X-Amz-Security-Token", valid_603990
  var valid_603991 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603991 = validateParameter(valid_603991, JString, required = false,
                                 default = nil)
  if valid_603991 != nil:
    section.add "X-Amz-Content-Sha256", valid_603991
  var valid_603992 = header.getOrDefault("X-Amz-Algorithm")
  valid_603992 = validateParameter(valid_603992, JString, required = false,
                                 default = nil)
  if valid_603992 != nil:
    section.add "X-Amz-Algorithm", valid_603992
  var valid_603993 = header.getOrDefault("X-Amz-Signature")
  valid_603993 = validateParameter(valid_603993, JString, required = false,
                                 default = nil)
  if valid_603993 != nil:
    section.add "X-Amz-Signature", valid_603993
  var valid_603994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "X-Amz-SignedHeaders", valid_603994
  var valid_603995 = header.getOrDefault("X-Amz-Credential")
  valid_603995 = validateParameter(valid_603995, JString, required = false,
                                 default = nil)
  if valid_603995 != nil:
    section.add "X-Amz-Credential", valid_603995
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603996: Call_GetDeleteInstanceProfile_603983; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_603996.validator(path, query, header, formData, body)
  let scheme = call_603996.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603996.url(scheme.get, call_603996.host, call_603996.base,
                         call_603996.route, valid.getOrDefault("path"))
  result = hook(call_603996, url, valid)

proc call*(call_603997: Call_GetDeleteInstanceProfile_603983;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603998 = newJObject()
  add(query_603998, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603998, "Action", newJString(Action))
  add(query_603998, "Version", newJString(Version))
  result = call_603997.call(nil, query_603998, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_603983(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_603984, base: "/",
    url: url_GetDeleteInstanceProfile_603985, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_604032 = ref object of OpenApiRestCall_602433
proc url_PostDeleteLoginProfile_604034(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteLoginProfile_604033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604035 = query.getOrDefault("Action")
  valid_604035 = validateParameter(valid_604035, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_604035 != nil:
    section.add "Action", valid_604035
  var valid_604036 = query.getOrDefault("Version")
  valid_604036 = validateParameter(valid_604036, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604036 != nil:
    section.add "Version", valid_604036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604037 = header.getOrDefault("X-Amz-Date")
  valid_604037 = validateParameter(valid_604037, JString, required = false,
                                 default = nil)
  if valid_604037 != nil:
    section.add "X-Amz-Date", valid_604037
  var valid_604038 = header.getOrDefault("X-Amz-Security-Token")
  valid_604038 = validateParameter(valid_604038, JString, required = false,
                                 default = nil)
  if valid_604038 != nil:
    section.add "X-Amz-Security-Token", valid_604038
  var valid_604039 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604039 = validateParameter(valid_604039, JString, required = false,
                                 default = nil)
  if valid_604039 != nil:
    section.add "X-Amz-Content-Sha256", valid_604039
  var valid_604040 = header.getOrDefault("X-Amz-Algorithm")
  valid_604040 = validateParameter(valid_604040, JString, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "X-Amz-Algorithm", valid_604040
  var valid_604041 = header.getOrDefault("X-Amz-Signature")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "X-Amz-Signature", valid_604041
  var valid_604042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604042 = validateParameter(valid_604042, JString, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "X-Amz-SignedHeaders", valid_604042
  var valid_604043 = header.getOrDefault("X-Amz-Credential")
  valid_604043 = validateParameter(valid_604043, JString, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "X-Amz-Credential", valid_604043
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604044 = formData.getOrDefault("UserName")
  valid_604044 = validateParameter(valid_604044, JString, required = true,
                                 default = nil)
  if valid_604044 != nil:
    section.add "UserName", valid_604044
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604045: Call_PostDeleteLoginProfile_604032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_604045.validator(path, query, header, formData, body)
  let scheme = call_604045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604045.url(scheme.get, call_604045.host, call_604045.base,
                         call_604045.route, valid.getOrDefault("path"))
  result = hook(call_604045, url, valid)

proc call*(call_604046: Call_PostDeleteLoginProfile_604032; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604047 = newJObject()
  var formData_604048 = newJObject()
  add(formData_604048, "UserName", newJString(UserName))
  add(query_604047, "Action", newJString(Action))
  add(query_604047, "Version", newJString(Version))
  result = call_604046.call(nil, query_604047, nil, formData_604048, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_604032(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_604033, base: "/",
    url: url_PostDeleteLoginProfile_604034, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_604016 = ref object of OpenApiRestCall_602433
proc url_GetDeleteLoginProfile_604018(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteLoginProfile_604017(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604019 = query.getOrDefault("UserName")
  valid_604019 = validateParameter(valid_604019, JString, required = true,
                                 default = nil)
  if valid_604019 != nil:
    section.add "UserName", valid_604019
  var valid_604020 = query.getOrDefault("Action")
  valid_604020 = validateParameter(valid_604020, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_604020 != nil:
    section.add "Action", valid_604020
  var valid_604021 = query.getOrDefault("Version")
  valid_604021 = validateParameter(valid_604021, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604021 != nil:
    section.add "Version", valid_604021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604022 = header.getOrDefault("X-Amz-Date")
  valid_604022 = validateParameter(valid_604022, JString, required = false,
                                 default = nil)
  if valid_604022 != nil:
    section.add "X-Amz-Date", valid_604022
  var valid_604023 = header.getOrDefault("X-Amz-Security-Token")
  valid_604023 = validateParameter(valid_604023, JString, required = false,
                                 default = nil)
  if valid_604023 != nil:
    section.add "X-Amz-Security-Token", valid_604023
  var valid_604024 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604024 = validateParameter(valid_604024, JString, required = false,
                                 default = nil)
  if valid_604024 != nil:
    section.add "X-Amz-Content-Sha256", valid_604024
  var valid_604025 = header.getOrDefault("X-Amz-Algorithm")
  valid_604025 = validateParameter(valid_604025, JString, required = false,
                                 default = nil)
  if valid_604025 != nil:
    section.add "X-Amz-Algorithm", valid_604025
  var valid_604026 = header.getOrDefault("X-Amz-Signature")
  valid_604026 = validateParameter(valid_604026, JString, required = false,
                                 default = nil)
  if valid_604026 != nil:
    section.add "X-Amz-Signature", valid_604026
  var valid_604027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604027 = validateParameter(valid_604027, JString, required = false,
                                 default = nil)
  if valid_604027 != nil:
    section.add "X-Amz-SignedHeaders", valid_604027
  var valid_604028 = header.getOrDefault("X-Amz-Credential")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "X-Amz-Credential", valid_604028
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604029: Call_GetDeleteLoginProfile_604016; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_604029.validator(path, query, header, formData, body)
  let scheme = call_604029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604029.url(scheme.get, call_604029.host, call_604029.base,
                         call_604029.route, valid.getOrDefault("path"))
  result = hook(call_604029, url, valid)

proc call*(call_604030: Call_GetDeleteLoginProfile_604016; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604031 = newJObject()
  add(query_604031, "UserName", newJString(UserName))
  add(query_604031, "Action", newJString(Action))
  add(query_604031, "Version", newJString(Version))
  result = call_604030.call(nil, query_604031, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_604016(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_604017, base: "/",
    url: url_GetDeleteLoginProfile_604018, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_604065 = ref object of OpenApiRestCall_602433
proc url_PostDeleteOpenIDConnectProvider_604067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteOpenIDConnectProvider_604066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604068 = query.getOrDefault("Action")
  valid_604068 = validateParameter(valid_604068, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_604068 != nil:
    section.add "Action", valid_604068
  var valid_604069 = query.getOrDefault("Version")
  valid_604069 = validateParameter(valid_604069, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604069 != nil:
    section.add "Version", valid_604069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604070 = header.getOrDefault("X-Amz-Date")
  valid_604070 = validateParameter(valid_604070, JString, required = false,
                                 default = nil)
  if valid_604070 != nil:
    section.add "X-Amz-Date", valid_604070
  var valid_604071 = header.getOrDefault("X-Amz-Security-Token")
  valid_604071 = validateParameter(valid_604071, JString, required = false,
                                 default = nil)
  if valid_604071 != nil:
    section.add "X-Amz-Security-Token", valid_604071
  var valid_604072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604072 = validateParameter(valid_604072, JString, required = false,
                                 default = nil)
  if valid_604072 != nil:
    section.add "X-Amz-Content-Sha256", valid_604072
  var valid_604073 = header.getOrDefault("X-Amz-Algorithm")
  valid_604073 = validateParameter(valid_604073, JString, required = false,
                                 default = nil)
  if valid_604073 != nil:
    section.add "X-Amz-Algorithm", valid_604073
  var valid_604074 = header.getOrDefault("X-Amz-Signature")
  valid_604074 = validateParameter(valid_604074, JString, required = false,
                                 default = nil)
  if valid_604074 != nil:
    section.add "X-Amz-Signature", valid_604074
  var valid_604075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-SignedHeaders", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-Credential")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-Credential", valid_604076
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_604077 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_604077 = validateParameter(valid_604077, JString, required = true,
                                 default = nil)
  if valid_604077 != nil:
    section.add "OpenIDConnectProviderArn", valid_604077
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604078: Call_PostDeleteOpenIDConnectProvider_604065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_604078.validator(path, query, header, formData, body)
  let scheme = call_604078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604078.url(scheme.get, call_604078.host, call_604078.base,
                         call_604078.route, valid.getOrDefault("path"))
  result = hook(call_604078, url, valid)

proc call*(call_604079: Call_PostDeleteOpenIDConnectProvider_604065;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604080 = newJObject()
  var formData_604081 = newJObject()
  add(formData_604081, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_604080, "Action", newJString(Action))
  add(query_604080, "Version", newJString(Version))
  result = call_604079.call(nil, query_604080, nil, formData_604081, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_604065(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_604066, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_604067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_604049 = ref object of OpenApiRestCall_602433
proc url_GetDeleteOpenIDConnectProvider_604051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteOpenIDConnectProvider_604050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_604052 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_604052 = validateParameter(valid_604052, JString, required = true,
                                 default = nil)
  if valid_604052 != nil:
    section.add "OpenIDConnectProviderArn", valid_604052
  var valid_604053 = query.getOrDefault("Action")
  valid_604053 = validateParameter(valid_604053, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_604053 != nil:
    section.add "Action", valid_604053
  var valid_604054 = query.getOrDefault("Version")
  valid_604054 = validateParameter(valid_604054, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604054 != nil:
    section.add "Version", valid_604054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604055 = header.getOrDefault("X-Amz-Date")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Date", valid_604055
  var valid_604056 = header.getOrDefault("X-Amz-Security-Token")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Security-Token", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Content-Sha256", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Algorithm")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Algorithm", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-Signature")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-Signature", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-SignedHeaders", valid_604060
  var valid_604061 = header.getOrDefault("X-Amz-Credential")
  valid_604061 = validateParameter(valid_604061, JString, required = false,
                                 default = nil)
  if valid_604061 != nil:
    section.add "X-Amz-Credential", valid_604061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604062: Call_GetDeleteOpenIDConnectProvider_604049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_604062.validator(path, query, header, formData, body)
  let scheme = call_604062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604062.url(scheme.get, call_604062.host, call_604062.base,
                         call_604062.route, valid.getOrDefault("path"))
  result = hook(call_604062, url, valid)

proc call*(call_604063: Call_GetDeleteOpenIDConnectProvider_604049;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604064 = newJObject()
  add(query_604064, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_604064, "Action", newJString(Action))
  add(query_604064, "Version", newJString(Version))
  result = call_604063.call(nil, query_604064, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_604049(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_604050, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_604051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_604098 = ref object of OpenApiRestCall_602433
proc url_PostDeletePolicy_604100(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicy_604099(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604101 = query.getOrDefault("Action")
  valid_604101 = validateParameter(valid_604101, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_604101 != nil:
    section.add "Action", valid_604101
  var valid_604102 = query.getOrDefault("Version")
  valid_604102 = validateParameter(valid_604102, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604102 != nil:
    section.add "Version", valid_604102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604103 = header.getOrDefault("X-Amz-Date")
  valid_604103 = validateParameter(valid_604103, JString, required = false,
                                 default = nil)
  if valid_604103 != nil:
    section.add "X-Amz-Date", valid_604103
  var valid_604104 = header.getOrDefault("X-Amz-Security-Token")
  valid_604104 = validateParameter(valid_604104, JString, required = false,
                                 default = nil)
  if valid_604104 != nil:
    section.add "X-Amz-Security-Token", valid_604104
  var valid_604105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604105 = validateParameter(valid_604105, JString, required = false,
                                 default = nil)
  if valid_604105 != nil:
    section.add "X-Amz-Content-Sha256", valid_604105
  var valid_604106 = header.getOrDefault("X-Amz-Algorithm")
  valid_604106 = validateParameter(valid_604106, JString, required = false,
                                 default = nil)
  if valid_604106 != nil:
    section.add "X-Amz-Algorithm", valid_604106
  var valid_604107 = header.getOrDefault("X-Amz-Signature")
  valid_604107 = validateParameter(valid_604107, JString, required = false,
                                 default = nil)
  if valid_604107 != nil:
    section.add "X-Amz-Signature", valid_604107
  var valid_604108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604108 = validateParameter(valid_604108, JString, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "X-Amz-SignedHeaders", valid_604108
  var valid_604109 = header.getOrDefault("X-Amz-Credential")
  valid_604109 = validateParameter(valid_604109, JString, required = false,
                                 default = nil)
  if valid_604109 != nil:
    section.add "X-Amz-Credential", valid_604109
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_604110 = formData.getOrDefault("PolicyArn")
  valid_604110 = validateParameter(valid_604110, JString, required = true,
                                 default = nil)
  if valid_604110 != nil:
    section.add "PolicyArn", valid_604110
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604111: Call_PostDeletePolicy_604098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604111.validator(path, query, header, formData, body)
  let scheme = call_604111.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604111.url(scheme.get, call_604111.host, call_604111.base,
                         call_604111.route, valid.getOrDefault("path"))
  result = hook(call_604111, url, valid)

proc call*(call_604112: Call_PostDeletePolicy_604098; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604113 = newJObject()
  var formData_604114 = newJObject()
  add(formData_604114, "PolicyArn", newJString(PolicyArn))
  add(query_604113, "Action", newJString(Action))
  add(query_604113, "Version", newJString(Version))
  result = call_604112.call(nil, query_604113, nil, formData_604114, nil)

var postDeletePolicy* = Call_PostDeletePolicy_604098(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_604099,
    base: "/", url: url_PostDeletePolicy_604100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_604082 = ref object of OpenApiRestCall_602433
proc url_GetDeletePolicy_604084(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicy_604083(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604085 = query.getOrDefault("PolicyArn")
  valid_604085 = validateParameter(valid_604085, JString, required = true,
                                 default = nil)
  if valid_604085 != nil:
    section.add "PolicyArn", valid_604085
  var valid_604086 = query.getOrDefault("Action")
  valid_604086 = validateParameter(valid_604086, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_604086 != nil:
    section.add "Action", valid_604086
  var valid_604087 = query.getOrDefault("Version")
  valid_604087 = validateParameter(valid_604087, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604087 != nil:
    section.add "Version", valid_604087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604088 = header.getOrDefault("X-Amz-Date")
  valid_604088 = validateParameter(valid_604088, JString, required = false,
                                 default = nil)
  if valid_604088 != nil:
    section.add "X-Amz-Date", valid_604088
  var valid_604089 = header.getOrDefault("X-Amz-Security-Token")
  valid_604089 = validateParameter(valid_604089, JString, required = false,
                                 default = nil)
  if valid_604089 != nil:
    section.add "X-Amz-Security-Token", valid_604089
  var valid_604090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604090 = validateParameter(valid_604090, JString, required = false,
                                 default = nil)
  if valid_604090 != nil:
    section.add "X-Amz-Content-Sha256", valid_604090
  var valid_604091 = header.getOrDefault("X-Amz-Algorithm")
  valid_604091 = validateParameter(valid_604091, JString, required = false,
                                 default = nil)
  if valid_604091 != nil:
    section.add "X-Amz-Algorithm", valid_604091
  var valid_604092 = header.getOrDefault("X-Amz-Signature")
  valid_604092 = validateParameter(valid_604092, JString, required = false,
                                 default = nil)
  if valid_604092 != nil:
    section.add "X-Amz-Signature", valid_604092
  var valid_604093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604093 = validateParameter(valid_604093, JString, required = false,
                                 default = nil)
  if valid_604093 != nil:
    section.add "X-Amz-SignedHeaders", valid_604093
  var valid_604094 = header.getOrDefault("X-Amz-Credential")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "X-Amz-Credential", valid_604094
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604095: Call_GetDeletePolicy_604082; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604095.validator(path, query, header, formData, body)
  let scheme = call_604095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604095.url(scheme.get, call_604095.host, call_604095.base,
                         call_604095.route, valid.getOrDefault("path"))
  result = hook(call_604095, url, valid)

proc call*(call_604096: Call_GetDeletePolicy_604082; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604097 = newJObject()
  add(query_604097, "PolicyArn", newJString(PolicyArn))
  add(query_604097, "Action", newJString(Action))
  add(query_604097, "Version", newJString(Version))
  result = call_604096.call(nil, query_604097, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_604082(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_604083,
    base: "/", url: url_GetDeletePolicy_604084, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_604132 = ref object of OpenApiRestCall_602433
proc url_PostDeletePolicyVersion_604134(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicyVersion_604133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604135 = query.getOrDefault("Action")
  valid_604135 = validateParameter(valid_604135, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_604135 != nil:
    section.add "Action", valid_604135
  var valid_604136 = query.getOrDefault("Version")
  valid_604136 = validateParameter(valid_604136, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604136 != nil:
    section.add "Version", valid_604136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604137 = header.getOrDefault("X-Amz-Date")
  valid_604137 = validateParameter(valid_604137, JString, required = false,
                                 default = nil)
  if valid_604137 != nil:
    section.add "X-Amz-Date", valid_604137
  var valid_604138 = header.getOrDefault("X-Amz-Security-Token")
  valid_604138 = validateParameter(valid_604138, JString, required = false,
                                 default = nil)
  if valid_604138 != nil:
    section.add "X-Amz-Security-Token", valid_604138
  var valid_604139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604139 = validateParameter(valid_604139, JString, required = false,
                                 default = nil)
  if valid_604139 != nil:
    section.add "X-Amz-Content-Sha256", valid_604139
  var valid_604140 = header.getOrDefault("X-Amz-Algorithm")
  valid_604140 = validateParameter(valid_604140, JString, required = false,
                                 default = nil)
  if valid_604140 != nil:
    section.add "X-Amz-Algorithm", valid_604140
  var valid_604141 = header.getOrDefault("X-Amz-Signature")
  valid_604141 = validateParameter(valid_604141, JString, required = false,
                                 default = nil)
  if valid_604141 != nil:
    section.add "X-Amz-Signature", valid_604141
  var valid_604142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604142 = validateParameter(valid_604142, JString, required = false,
                                 default = nil)
  if valid_604142 != nil:
    section.add "X-Amz-SignedHeaders", valid_604142
  var valid_604143 = header.getOrDefault("X-Amz-Credential")
  valid_604143 = validateParameter(valid_604143, JString, required = false,
                                 default = nil)
  if valid_604143 != nil:
    section.add "X-Amz-Credential", valid_604143
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_604144 = formData.getOrDefault("PolicyArn")
  valid_604144 = validateParameter(valid_604144, JString, required = true,
                                 default = nil)
  if valid_604144 != nil:
    section.add "PolicyArn", valid_604144
  var valid_604145 = formData.getOrDefault("VersionId")
  valid_604145 = validateParameter(valid_604145, JString, required = true,
                                 default = nil)
  if valid_604145 != nil:
    section.add "VersionId", valid_604145
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604146: Call_PostDeletePolicyVersion_604132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604146.validator(path, query, header, formData, body)
  let scheme = call_604146.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604146.url(scheme.get, call_604146.host, call_604146.base,
                         call_604146.route, valid.getOrDefault("path"))
  result = hook(call_604146, url, valid)

proc call*(call_604147: Call_PostDeletePolicyVersion_604132; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_604148 = newJObject()
  var formData_604149 = newJObject()
  add(formData_604149, "PolicyArn", newJString(PolicyArn))
  add(query_604148, "Action", newJString(Action))
  add(query_604148, "Version", newJString(Version))
  add(formData_604149, "VersionId", newJString(VersionId))
  result = call_604147.call(nil, query_604148, nil, formData_604149, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_604132(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_604133, base: "/",
    url: url_PostDeletePolicyVersion_604134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_604115 = ref object of OpenApiRestCall_602433
proc url_GetDeletePolicyVersion_604117(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicyVersion_604116(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604118 = query.getOrDefault("PolicyArn")
  valid_604118 = validateParameter(valid_604118, JString, required = true,
                                 default = nil)
  if valid_604118 != nil:
    section.add "PolicyArn", valid_604118
  var valid_604119 = query.getOrDefault("VersionId")
  valid_604119 = validateParameter(valid_604119, JString, required = true,
                                 default = nil)
  if valid_604119 != nil:
    section.add "VersionId", valid_604119
  var valid_604120 = query.getOrDefault("Action")
  valid_604120 = validateParameter(valid_604120, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_604120 != nil:
    section.add "Action", valid_604120
  var valid_604121 = query.getOrDefault("Version")
  valid_604121 = validateParameter(valid_604121, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604121 != nil:
    section.add "Version", valid_604121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604122 = header.getOrDefault("X-Amz-Date")
  valid_604122 = validateParameter(valid_604122, JString, required = false,
                                 default = nil)
  if valid_604122 != nil:
    section.add "X-Amz-Date", valid_604122
  var valid_604123 = header.getOrDefault("X-Amz-Security-Token")
  valid_604123 = validateParameter(valid_604123, JString, required = false,
                                 default = nil)
  if valid_604123 != nil:
    section.add "X-Amz-Security-Token", valid_604123
  var valid_604124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604124 = validateParameter(valid_604124, JString, required = false,
                                 default = nil)
  if valid_604124 != nil:
    section.add "X-Amz-Content-Sha256", valid_604124
  var valid_604125 = header.getOrDefault("X-Amz-Algorithm")
  valid_604125 = validateParameter(valid_604125, JString, required = false,
                                 default = nil)
  if valid_604125 != nil:
    section.add "X-Amz-Algorithm", valid_604125
  var valid_604126 = header.getOrDefault("X-Amz-Signature")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Signature", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-SignedHeaders", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-Credential")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-Credential", valid_604128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604129: Call_GetDeletePolicyVersion_604115; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604129.validator(path, query, header, formData, body)
  let scheme = call_604129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604129.url(scheme.get, call_604129.host, call_604129.base,
                         call_604129.route, valid.getOrDefault("path"))
  result = hook(call_604129, url, valid)

proc call*(call_604130: Call_GetDeletePolicyVersion_604115; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604131 = newJObject()
  add(query_604131, "PolicyArn", newJString(PolicyArn))
  add(query_604131, "VersionId", newJString(VersionId))
  add(query_604131, "Action", newJString(Action))
  add(query_604131, "Version", newJString(Version))
  result = call_604130.call(nil, query_604131, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_604115(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_604116, base: "/",
    url: url_GetDeletePolicyVersion_604117, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_604166 = ref object of OpenApiRestCall_602433
proc url_PostDeleteRole_604168(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRole_604167(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604169 = query.getOrDefault("Action")
  valid_604169 = validateParameter(valid_604169, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_604169 != nil:
    section.add "Action", valid_604169
  var valid_604170 = query.getOrDefault("Version")
  valid_604170 = validateParameter(valid_604170, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604170 != nil:
    section.add "Version", valid_604170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604171 = header.getOrDefault("X-Amz-Date")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = nil)
  if valid_604171 != nil:
    section.add "X-Amz-Date", valid_604171
  var valid_604172 = header.getOrDefault("X-Amz-Security-Token")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Security-Token", valid_604172
  var valid_604173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "X-Amz-Content-Sha256", valid_604173
  var valid_604174 = header.getOrDefault("X-Amz-Algorithm")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = nil)
  if valid_604174 != nil:
    section.add "X-Amz-Algorithm", valid_604174
  var valid_604175 = header.getOrDefault("X-Amz-Signature")
  valid_604175 = validateParameter(valid_604175, JString, required = false,
                                 default = nil)
  if valid_604175 != nil:
    section.add "X-Amz-Signature", valid_604175
  var valid_604176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604176 = validateParameter(valid_604176, JString, required = false,
                                 default = nil)
  if valid_604176 != nil:
    section.add "X-Amz-SignedHeaders", valid_604176
  var valid_604177 = header.getOrDefault("X-Amz-Credential")
  valid_604177 = validateParameter(valid_604177, JString, required = false,
                                 default = nil)
  if valid_604177 != nil:
    section.add "X-Amz-Credential", valid_604177
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604178 = formData.getOrDefault("RoleName")
  valid_604178 = validateParameter(valid_604178, JString, required = true,
                                 default = nil)
  if valid_604178 != nil:
    section.add "RoleName", valid_604178
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604179: Call_PostDeleteRole_604166; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_604179.validator(path, query, header, formData, body)
  let scheme = call_604179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604179.url(scheme.get, call_604179.host, call_604179.base,
                         call_604179.route, valid.getOrDefault("path"))
  result = hook(call_604179, url, valid)

proc call*(call_604180: Call_PostDeleteRole_604166; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604181 = newJObject()
  var formData_604182 = newJObject()
  add(formData_604182, "RoleName", newJString(RoleName))
  add(query_604181, "Action", newJString(Action))
  add(query_604181, "Version", newJString(Version))
  result = call_604180.call(nil, query_604181, nil, formData_604182, nil)

var postDeleteRole* = Call_PostDeleteRole_604166(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_604167,
    base: "/", url: url_PostDeleteRole_604168, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_604150 = ref object of OpenApiRestCall_602433
proc url_GetDeleteRole_604152(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRole_604151(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604153 = query.getOrDefault("Action")
  valid_604153 = validateParameter(valid_604153, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_604153 != nil:
    section.add "Action", valid_604153
  var valid_604154 = query.getOrDefault("RoleName")
  valid_604154 = validateParameter(valid_604154, JString, required = true,
                                 default = nil)
  if valid_604154 != nil:
    section.add "RoleName", valid_604154
  var valid_604155 = query.getOrDefault("Version")
  valid_604155 = validateParameter(valid_604155, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604155 != nil:
    section.add "Version", valid_604155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604156 = header.getOrDefault("X-Amz-Date")
  valid_604156 = validateParameter(valid_604156, JString, required = false,
                                 default = nil)
  if valid_604156 != nil:
    section.add "X-Amz-Date", valid_604156
  var valid_604157 = header.getOrDefault("X-Amz-Security-Token")
  valid_604157 = validateParameter(valid_604157, JString, required = false,
                                 default = nil)
  if valid_604157 != nil:
    section.add "X-Amz-Security-Token", valid_604157
  var valid_604158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604158 = validateParameter(valid_604158, JString, required = false,
                                 default = nil)
  if valid_604158 != nil:
    section.add "X-Amz-Content-Sha256", valid_604158
  var valid_604159 = header.getOrDefault("X-Amz-Algorithm")
  valid_604159 = validateParameter(valid_604159, JString, required = false,
                                 default = nil)
  if valid_604159 != nil:
    section.add "X-Amz-Algorithm", valid_604159
  var valid_604160 = header.getOrDefault("X-Amz-Signature")
  valid_604160 = validateParameter(valid_604160, JString, required = false,
                                 default = nil)
  if valid_604160 != nil:
    section.add "X-Amz-Signature", valid_604160
  var valid_604161 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604161 = validateParameter(valid_604161, JString, required = false,
                                 default = nil)
  if valid_604161 != nil:
    section.add "X-Amz-SignedHeaders", valid_604161
  var valid_604162 = header.getOrDefault("X-Amz-Credential")
  valid_604162 = validateParameter(valid_604162, JString, required = false,
                                 default = nil)
  if valid_604162 != nil:
    section.add "X-Amz-Credential", valid_604162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604163: Call_GetDeleteRole_604150; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_604163.validator(path, query, header, formData, body)
  let scheme = call_604163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604163.url(scheme.get, call_604163.host, call_604163.base,
                         call_604163.route, valid.getOrDefault("path"))
  result = hook(call_604163, url, valid)

proc call*(call_604164: Call_GetDeleteRole_604150; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604165 = newJObject()
  add(query_604165, "Action", newJString(Action))
  add(query_604165, "RoleName", newJString(RoleName))
  add(query_604165, "Version", newJString(Version))
  result = call_604164.call(nil, query_604165, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_604150(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_604151,
    base: "/", url: url_GetDeleteRole_604152, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_604199 = ref object of OpenApiRestCall_602433
proc url_PostDeleteRolePermissionsBoundary_604201(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePermissionsBoundary_604200(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604202 = query.getOrDefault("Action")
  valid_604202 = validateParameter(valid_604202, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_604202 != nil:
    section.add "Action", valid_604202
  var valid_604203 = query.getOrDefault("Version")
  valid_604203 = validateParameter(valid_604203, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604203 != nil:
    section.add "Version", valid_604203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604204 = header.getOrDefault("X-Amz-Date")
  valid_604204 = validateParameter(valid_604204, JString, required = false,
                                 default = nil)
  if valid_604204 != nil:
    section.add "X-Amz-Date", valid_604204
  var valid_604205 = header.getOrDefault("X-Amz-Security-Token")
  valid_604205 = validateParameter(valid_604205, JString, required = false,
                                 default = nil)
  if valid_604205 != nil:
    section.add "X-Amz-Security-Token", valid_604205
  var valid_604206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604206 = validateParameter(valid_604206, JString, required = false,
                                 default = nil)
  if valid_604206 != nil:
    section.add "X-Amz-Content-Sha256", valid_604206
  var valid_604207 = header.getOrDefault("X-Amz-Algorithm")
  valid_604207 = validateParameter(valid_604207, JString, required = false,
                                 default = nil)
  if valid_604207 != nil:
    section.add "X-Amz-Algorithm", valid_604207
  var valid_604208 = header.getOrDefault("X-Amz-Signature")
  valid_604208 = validateParameter(valid_604208, JString, required = false,
                                 default = nil)
  if valid_604208 != nil:
    section.add "X-Amz-Signature", valid_604208
  var valid_604209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604209 = validateParameter(valid_604209, JString, required = false,
                                 default = nil)
  if valid_604209 != nil:
    section.add "X-Amz-SignedHeaders", valid_604209
  var valid_604210 = header.getOrDefault("X-Amz-Credential")
  valid_604210 = validateParameter(valid_604210, JString, required = false,
                                 default = nil)
  if valid_604210 != nil:
    section.add "X-Amz-Credential", valid_604210
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604211 = formData.getOrDefault("RoleName")
  valid_604211 = validateParameter(valid_604211, JString, required = true,
                                 default = nil)
  if valid_604211 != nil:
    section.add "RoleName", valid_604211
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604212: Call_PostDeleteRolePermissionsBoundary_604199;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_604212.validator(path, query, header, formData, body)
  let scheme = call_604212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604212.url(scheme.get, call_604212.host, call_604212.base,
                         call_604212.route, valid.getOrDefault("path"))
  result = hook(call_604212, url, valid)

proc call*(call_604213: Call_PostDeleteRolePermissionsBoundary_604199;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604214 = newJObject()
  var formData_604215 = newJObject()
  add(formData_604215, "RoleName", newJString(RoleName))
  add(query_604214, "Action", newJString(Action))
  add(query_604214, "Version", newJString(Version))
  result = call_604213.call(nil, query_604214, nil, formData_604215, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_604199(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_604200, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_604201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_604183 = ref object of OpenApiRestCall_602433
proc url_GetDeleteRolePermissionsBoundary_604185(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePermissionsBoundary_604184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604186 = query.getOrDefault("Action")
  valid_604186 = validateParameter(valid_604186, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_604186 != nil:
    section.add "Action", valid_604186
  var valid_604187 = query.getOrDefault("RoleName")
  valid_604187 = validateParameter(valid_604187, JString, required = true,
                                 default = nil)
  if valid_604187 != nil:
    section.add "RoleName", valid_604187
  var valid_604188 = query.getOrDefault("Version")
  valid_604188 = validateParameter(valid_604188, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604188 != nil:
    section.add "Version", valid_604188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604189 = header.getOrDefault("X-Amz-Date")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "X-Amz-Date", valid_604189
  var valid_604190 = header.getOrDefault("X-Amz-Security-Token")
  valid_604190 = validateParameter(valid_604190, JString, required = false,
                                 default = nil)
  if valid_604190 != nil:
    section.add "X-Amz-Security-Token", valid_604190
  var valid_604191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604191 = validateParameter(valid_604191, JString, required = false,
                                 default = nil)
  if valid_604191 != nil:
    section.add "X-Amz-Content-Sha256", valid_604191
  var valid_604192 = header.getOrDefault("X-Amz-Algorithm")
  valid_604192 = validateParameter(valid_604192, JString, required = false,
                                 default = nil)
  if valid_604192 != nil:
    section.add "X-Amz-Algorithm", valid_604192
  var valid_604193 = header.getOrDefault("X-Amz-Signature")
  valid_604193 = validateParameter(valid_604193, JString, required = false,
                                 default = nil)
  if valid_604193 != nil:
    section.add "X-Amz-Signature", valid_604193
  var valid_604194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604194 = validateParameter(valid_604194, JString, required = false,
                                 default = nil)
  if valid_604194 != nil:
    section.add "X-Amz-SignedHeaders", valid_604194
  var valid_604195 = header.getOrDefault("X-Amz-Credential")
  valid_604195 = validateParameter(valid_604195, JString, required = false,
                                 default = nil)
  if valid_604195 != nil:
    section.add "X-Amz-Credential", valid_604195
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604196: Call_GetDeleteRolePermissionsBoundary_604183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_604196.validator(path, query, header, formData, body)
  let scheme = call_604196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604196.url(scheme.get, call_604196.host, call_604196.base,
                         call_604196.route, valid.getOrDefault("path"))
  result = hook(call_604196, url, valid)

proc call*(call_604197: Call_GetDeleteRolePermissionsBoundary_604183;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: string (required)
  var query_604198 = newJObject()
  add(query_604198, "Action", newJString(Action))
  add(query_604198, "RoleName", newJString(RoleName))
  add(query_604198, "Version", newJString(Version))
  result = call_604197.call(nil, query_604198, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_604183(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_604184, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_604185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_604233 = ref object of OpenApiRestCall_602433
proc url_PostDeleteRolePolicy_604235(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePolicy_604234(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604236 = query.getOrDefault("Action")
  valid_604236 = validateParameter(valid_604236, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_604236 != nil:
    section.add "Action", valid_604236
  var valid_604237 = query.getOrDefault("Version")
  valid_604237 = validateParameter(valid_604237, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604237 != nil:
    section.add "Version", valid_604237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604238 = header.getOrDefault("X-Amz-Date")
  valid_604238 = validateParameter(valid_604238, JString, required = false,
                                 default = nil)
  if valid_604238 != nil:
    section.add "X-Amz-Date", valid_604238
  var valid_604239 = header.getOrDefault("X-Amz-Security-Token")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "X-Amz-Security-Token", valid_604239
  var valid_604240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604240 = validateParameter(valid_604240, JString, required = false,
                                 default = nil)
  if valid_604240 != nil:
    section.add "X-Amz-Content-Sha256", valid_604240
  var valid_604241 = header.getOrDefault("X-Amz-Algorithm")
  valid_604241 = validateParameter(valid_604241, JString, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "X-Amz-Algorithm", valid_604241
  var valid_604242 = header.getOrDefault("X-Amz-Signature")
  valid_604242 = validateParameter(valid_604242, JString, required = false,
                                 default = nil)
  if valid_604242 != nil:
    section.add "X-Amz-Signature", valid_604242
  var valid_604243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604243 = validateParameter(valid_604243, JString, required = false,
                                 default = nil)
  if valid_604243 != nil:
    section.add "X-Amz-SignedHeaders", valid_604243
  var valid_604244 = header.getOrDefault("X-Amz-Credential")
  valid_604244 = validateParameter(valid_604244, JString, required = false,
                                 default = nil)
  if valid_604244 != nil:
    section.add "X-Amz-Credential", valid_604244
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604245 = formData.getOrDefault("PolicyName")
  valid_604245 = validateParameter(valid_604245, JString, required = true,
                                 default = nil)
  if valid_604245 != nil:
    section.add "PolicyName", valid_604245
  var valid_604246 = formData.getOrDefault("RoleName")
  valid_604246 = validateParameter(valid_604246, JString, required = true,
                                 default = nil)
  if valid_604246 != nil:
    section.add "RoleName", valid_604246
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604247: Call_PostDeleteRolePolicy_604233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604247.validator(path, query, header, formData, body)
  let scheme = call_604247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604247.url(scheme.get, call_604247.host, call_604247.base,
                         call_604247.route, valid.getOrDefault("path"))
  result = hook(call_604247, url, valid)

proc call*(call_604248: Call_PostDeleteRolePolicy_604233; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604249 = newJObject()
  var formData_604250 = newJObject()
  add(formData_604250, "PolicyName", newJString(PolicyName))
  add(formData_604250, "RoleName", newJString(RoleName))
  add(query_604249, "Action", newJString(Action))
  add(query_604249, "Version", newJString(Version))
  result = call_604248.call(nil, query_604249, nil, formData_604250, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_604233(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_604234, base: "/",
    url: url_PostDeleteRolePolicy_604235, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_604216 = ref object of OpenApiRestCall_602433
proc url_GetDeleteRolePolicy_604218(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePolicy_604217(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604219 = query.getOrDefault("Action")
  valid_604219 = validateParameter(valid_604219, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_604219 != nil:
    section.add "Action", valid_604219
  var valid_604220 = query.getOrDefault("RoleName")
  valid_604220 = validateParameter(valid_604220, JString, required = true,
                                 default = nil)
  if valid_604220 != nil:
    section.add "RoleName", valid_604220
  var valid_604221 = query.getOrDefault("Version")
  valid_604221 = validateParameter(valid_604221, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604221 != nil:
    section.add "Version", valid_604221
  var valid_604222 = query.getOrDefault("PolicyName")
  valid_604222 = validateParameter(valid_604222, JString, required = true,
                                 default = nil)
  if valid_604222 != nil:
    section.add "PolicyName", valid_604222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604223 = header.getOrDefault("X-Amz-Date")
  valid_604223 = validateParameter(valid_604223, JString, required = false,
                                 default = nil)
  if valid_604223 != nil:
    section.add "X-Amz-Date", valid_604223
  var valid_604224 = header.getOrDefault("X-Amz-Security-Token")
  valid_604224 = validateParameter(valid_604224, JString, required = false,
                                 default = nil)
  if valid_604224 != nil:
    section.add "X-Amz-Security-Token", valid_604224
  var valid_604225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604225 = validateParameter(valid_604225, JString, required = false,
                                 default = nil)
  if valid_604225 != nil:
    section.add "X-Amz-Content-Sha256", valid_604225
  var valid_604226 = header.getOrDefault("X-Amz-Algorithm")
  valid_604226 = validateParameter(valid_604226, JString, required = false,
                                 default = nil)
  if valid_604226 != nil:
    section.add "X-Amz-Algorithm", valid_604226
  var valid_604227 = header.getOrDefault("X-Amz-Signature")
  valid_604227 = validateParameter(valid_604227, JString, required = false,
                                 default = nil)
  if valid_604227 != nil:
    section.add "X-Amz-Signature", valid_604227
  var valid_604228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604228 = validateParameter(valid_604228, JString, required = false,
                                 default = nil)
  if valid_604228 != nil:
    section.add "X-Amz-SignedHeaders", valid_604228
  var valid_604229 = header.getOrDefault("X-Amz-Credential")
  valid_604229 = validateParameter(valid_604229, JString, required = false,
                                 default = nil)
  if valid_604229 != nil:
    section.add "X-Amz-Credential", valid_604229
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604230: Call_GetDeleteRolePolicy_604216; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604230.validator(path, query, header, formData, body)
  let scheme = call_604230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604230.url(scheme.get, call_604230.host, call_604230.base,
                         call_604230.route, valid.getOrDefault("path"))
  result = hook(call_604230, url, valid)

proc call*(call_604231: Call_GetDeleteRolePolicy_604216; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_604232 = newJObject()
  add(query_604232, "Action", newJString(Action))
  add(query_604232, "RoleName", newJString(RoleName))
  add(query_604232, "Version", newJString(Version))
  add(query_604232, "PolicyName", newJString(PolicyName))
  result = call_604231.call(nil, query_604232, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_604216(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_604217, base: "/",
    url: url_GetDeleteRolePolicy_604218, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_604267 = ref object of OpenApiRestCall_602433
proc url_PostDeleteSAMLProvider_604269(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSAMLProvider_604268(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604270 = query.getOrDefault("Action")
  valid_604270 = validateParameter(valid_604270, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_604270 != nil:
    section.add "Action", valid_604270
  var valid_604271 = query.getOrDefault("Version")
  valid_604271 = validateParameter(valid_604271, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604271 != nil:
    section.add "Version", valid_604271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604272 = header.getOrDefault("X-Amz-Date")
  valid_604272 = validateParameter(valid_604272, JString, required = false,
                                 default = nil)
  if valid_604272 != nil:
    section.add "X-Amz-Date", valid_604272
  var valid_604273 = header.getOrDefault("X-Amz-Security-Token")
  valid_604273 = validateParameter(valid_604273, JString, required = false,
                                 default = nil)
  if valid_604273 != nil:
    section.add "X-Amz-Security-Token", valid_604273
  var valid_604274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604274 = validateParameter(valid_604274, JString, required = false,
                                 default = nil)
  if valid_604274 != nil:
    section.add "X-Amz-Content-Sha256", valid_604274
  var valid_604275 = header.getOrDefault("X-Amz-Algorithm")
  valid_604275 = validateParameter(valid_604275, JString, required = false,
                                 default = nil)
  if valid_604275 != nil:
    section.add "X-Amz-Algorithm", valid_604275
  var valid_604276 = header.getOrDefault("X-Amz-Signature")
  valid_604276 = validateParameter(valid_604276, JString, required = false,
                                 default = nil)
  if valid_604276 != nil:
    section.add "X-Amz-Signature", valid_604276
  var valid_604277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604277 = validateParameter(valid_604277, JString, required = false,
                                 default = nil)
  if valid_604277 != nil:
    section.add "X-Amz-SignedHeaders", valid_604277
  var valid_604278 = header.getOrDefault("X-Amz-Credential")
  valid_604278 = validateParameter(valid_604278, JString, required = false,
                                 default = nil)
  if valid_604278 != nil:
    section.add "X-Amz-Credential", valid_604278
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_604279 = formData.getOrDefault("SAMLProviderArn")
  valid_604279 = validateParameter(valid_604279, JString, required = true,
                                 default = nil)
  if valid_604279 != nil:
    section.add "SAMLProviderArn", valid_604279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604280: Call_PostDeleteSAMLProvider_604267; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_604280.validator(path, query, header, formData, body)
  let scheme = call_604280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604280.url(scheme.get, call_604280.host, call_604280.base,
                         call_604280.route, valid.getOrDefault("path"))
  result = hook(call_604280, url, valid)

proc call*(call_604281: Call_PostDeleteSAMLProvider_604267;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604282 = newJObject()
  var formData_604283 = newJObject()
  add(formData_604283, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_604282, "Action", newJString(Action))
  add(query_604282, "Version", newJString(Version))
  result = call_604281.call(nil, query_604282, nil, formData_604283, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_604267(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_604268, base: "/",
    url: url_PostDeleteSAMLProvider_604269, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_604251 = ref object of OpenApiRestCall_602433
proc url_GetDeleteSAMLProvider_604253(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSAMLProvider_604252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604254 = query.getOrDefault("Action")
  valid_604254 = validateParameter(valid_604254, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_604254 != nil:
    section.add "Action", valid_604254
  var valid_604255 = query.getOrDefault("SAMLProviderArn")
  valid_604255 = validateParameter(valid_604255, JString, required = true,
                                 default = nil)
  if valid_604255 != nil:
    section.add "SAMLProviderArn", valid_604255
  var valid_604256 = query.getOrDefault("Version")
  valid_604256 = validateParameter(valid_604256, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604256 != nil:
    section.add "Version", valid_604256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604257 = header.getOrDefault("X-Amz-Date")
  valid_604257 = validateParameter(valid_604257, JString, required = false,
                                 default = nil)
  if valid_604257 != nil:
    section.add "X-Amz-Date", valid_604257
  var valid_604258 = header.getOrDefault("X-Amz-Security-Token")
  valid_604258 = validateParameter(valid_604258, JString, required = false,
                                 default = nil)
  if valid_604258 != nil:
    section.add "X-Amz-Security-Token", valid_604258
  var valid_604259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604259 = validateParameter(valid_604259, JString, required = false,
                                 default = nil)
  if valid_604259 != nil:
    section.add "X-Amz-Content-Sha256", valid_604259
  var valid_604260 = header.getOrDefault("X-Amz-Algorithm")
  valid_604260 = validateParameter(valid_604260, JString, required = false,
                                 default = nil)
  if valid_604260 != nil:
    section.add "X-Amz-Algorithm", valid_604260
  var valid_604261 = header.getOrDefault("X-Amz-Signature")
  valid_604261 = validateParameter(valid_604261, JString, required = false,
                                 default = nil)
  if valid_604261 != nil:
    section.add "X-Amz-Signature", valid_604261
  var valid_604262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604262 = validateParameter(valid_604262, JString, required = false,
                                 default = nil)
  if valid_604262 != nil:
    section.add "X-Amz-SignedHeaders", valid_604262
  var valid_604263 = header.getOrDefault("X-Amz-Credential")
  valid_604263 = validateParameter(valid_604263, JString, required = false,
                                 default = nil)
  if valid_604263 != nil:
    section.add "X-Amz-Credential", valid_604263
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604264: Call_GetDeleteSAMLProvider_604251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_604264.validator(path, query, header, formData, body)
  let scheme = call_604264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604264.url(scheme.get, call_604264.host, call_604264.base,
                         call_604264.route, valid.getOrDefault("path"))
  result = hook(call_604264, url, valid)

proc call*(call_604265: Call_GetDeleteSAMLProvider_604251; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_604266 = newJObject()
  add(query_604266, "Action", newJString(Action))
  add(query_604266, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_604266, "Version", newJString(Version))
  result = call_604265.call(nil, query_604266, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_604251(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_604252, base: "/",
    url: url_GetDeleteSAMLProvider_604253, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_604301 = ref object of OpenApiRestCall_602433
proc url_PostDeleteSSHPublicKey_604303(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSSHPublicKey_604302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604304 = query.getOrDefault("Action")
  valid_604304 = validateParameter(valid_604304, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_604304 != nil:
    section.add "Action", valid_604304
  var valid_604305 = query.getOrDefault("Version")
  valid_604305 = validateParameter(valid_604305, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604305 != nil:
    section.add "Version", valid_604305
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604306 = header.getOrDefault("X-Amz-Date")
  valid_604306 = validateParameter(valid_604306, JString, required = false,
                                 default = nil)
  if valid_604306 != nil:
    section.add "X-Amz-Date", valid_604306
  var valid_604307 = header.getOrDefault("X-Amz-Security-Token")
  valid_604307 = validateParameter(valid_604307, JString, required = false,
                                 default = nil)
  if valid_604307 != nil:
    section.add "X-Amz-Security-Token", valid_604307
  var valid_604308 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Content-Sha256", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-Algorithm")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-Algorithm", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Signature")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Signature", valid_604310
  var valid_604311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-SignedHeaders", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-Credential")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-Credential", valid_604312
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604313 = formData.getOrDefault("UserName")
  valid_604313 = validateParameter(valid_604313, JString, required = true,
                                 default = nil)
  if valid_604313 != nil:
    section.add "UserName", valid_604313
  var valid_604314 = formData.getOrDefault("SSHPublicKeyId")
  valid_604314 = validateParameter(valid_604314, JString, required = true,
                                 default = nil)
  if valid_604314 != nil:
    section.add "SSHPublicKeyId", valid_604314
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604315: Call_PostDeleteSSHPublicKey_604301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_604315.validator(path, query, header, formData, body)
  let scheme = call_604315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604315.url(scheme.get, call_604315.host, call_604315.base,
                         call_604315.route, valid.getOrDefault("path"))
  result = hook(call_604315, url, valid)

proc call*(call_604316: Call_PostDeleteSSHPublicKey_604301; UserName: string;
          SSHPublicKeyId: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604317 = newJObject()
  var formData_604318 = newJObject()
  add(formData_604318, "UserName", newJString(UserName))
  add(formData_604318, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_604317, "Action", newJString(Action))
  add(query_604317, "Version", newJString(Version))
  result = call_604316.call(nil, query_604317, nil, formData_604318, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_604301(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_604302, base: "/",
    url: url_PostDeleteSSHPublicKey_604303, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_604284 = ref object of OpenApiRestCall_602433
proc url_GetDeleteSSHPublicKey_604286(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSSHPublicKey_604285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_604287 = query.getOrDefault("SSHPublicKeyId")
  valid_604287 = validateParameter(valid_604287, JString, required = true,
                                 default = nil)
  if valid_604287 != nil:
    section.add "SSHPublicKeyId", valid_604287
  var valid_604288 = query.getOrDefault("UserName")
  valid_604288 = validateParameter(valid_604288, JString, required = true,
                                 default = nil)
  if valid_604288 != nil:
    section.add "UserName", valid_604288
  var valid_604289 = query.getOrDefault("Action")
  valid_604289 = validateParameter(valid_604289, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_604289 != nil:
    section.add "Action", valid_604289
  var valid_604290 = query.getOrDefault("Version")
  valid_604290 = validateParameter(valid_604290, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604290 != nil:
    section.add "Version", valid_604290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604291 = header.getOrDefault("X-Amz-Date")
  valid_604291 = validateParameter(valid_604291, JString, required = false,
                                 default = nil)
  if valid_604291 != nil:
    section.add "X-Amz-Date", valid_604291
  var valid_604292 = header.getOrDefault("X-Amz-Security-Token")
  valid_604292 = validateParameter(valid_604292, JString, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "X-Amz-Security-Token", valid_604292
  var valid_604293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604293 = validateParameter(valid_604293, JString, required = false,
                                 default = nil)
  if valid_604293 != nil:
    section.add "X-Amz-Content-Sha256", valid_604293
  var valid_604294 = header.getOrDefault("X-Amz-Algorithm")
  valid_604294 = validateParameter(valid_604294, JString, required = false,
                                 default = nil)
  if valid_604294 != nil:
    section.add "X-Amz-Algorithm", valid_604294
  var valid_604295 = header.getOrDefault("X-Amz-Signature")
  valid_604295 = validateParameter(valid_604295, JString, required = false,
                                 default = nil)
  if valid_604295 != nil:
    section.add "X-Amz-Signature", valid_604295
  var valid_604296 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604296 = validateParameter(valid_604296, JString, required = false,
                                 default = nil)
  if valid_604296 != nil:
    section.add "X-Amz-SignedHeaders", valid_604296
  var valid_604297 = header.getOrDefault("X-Amz-Credential")
  valid_604297 = validateParameter(valid_604297, JString, required = false,
                                 default = nil)
  if valid_604297 != nil:
    section.add "X-Amz-Credential", valid_604297
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604298: Call_GetDeleteSSHPublicKey_604284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_604298.validator(path, query, header, formData, body)
  let scheme = call_604298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604298.url(scheme.get, call_604298.host, call_604298.base,
                         call_604298.route, valid.getOrDefault("path"))
  result = hook(call_604298, url, valid)

proc call*(call_604299: Call_GetDeleteSSHPublicKey_604284; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604300 = newJObject()
  add(query_604300, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_604300, "UserName", newJString(UserName))
  add(query_604300, "Action", newJString(Action))
  add(query_604300, "Version", newJString(Version))
  result = call_604299.call(nil, query_604300, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_604284(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_604285, base: "/",
    url: url_GetDeleteSSHPublicKey_604286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_604335 = ref object of OpenApiRestCall_602433
proc url_PostDeleteServerCertificate_604337(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServerCertificate_604336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604338 = query.getOrDefault("Action")
  valid_604338 = validateParameter(valid_604338, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_604338 != nil:
    section.add "Action", valid_604338
  var valid_604339 = query.getOrDefault("Version")
  valid_604339 = validateParameter(valid_604339, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604339 != nil:
    section.add "Version", valid_604339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604340 = header.getOrDefault("X-Amz-Date")
  valid_604340 = validateParameter(valid_604340, JString, required = false,
                                 default = nil)
  if valid_604340 != nil:
    section.add "X-Amz-Date", valid_604340
  var valid_604341 = header.getOrDefault("X-Amz-Security-Token")
  valid_604341 = validateParameter(valid_604341, JString, required = false,
                                 default = nil)
  if valid_604341 != nil:
    section.add "X-Amz-Security-Token", valid_604341
  var valid_604342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604342 = validateParameter(valid_604342, JString, required = false,
                                 default = nil)
  if valid_604342 != nil:
    section.add "X-Amz-Content-Sha256", valid_604342
  var valid_604343 = header.getOrDefault("X-Amz-Algorithm")
  valid_604343 = validateParameter(valid_604343, JString, required = false,
                                 default = nil)
  if valid_604343 != nil:
    section.add "X-Amz-Algorithm", valid_604343
  var valid_604344 = header.getOrDefault("X-Amz-Signature")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Signature", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-SignedHeaders", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-Credential")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-Credential", valid_604346
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_604347 = formData.getOrDefault("ServerCertificateName")
  valid_604347 = validateParameter(valid_604347, JString, required = true,
                                 default = nil)
  if valid_604347 != nil:
    section.add "ServerCertificateName", valid_604347
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604348: Call_PostDeleteServerCertificate_604335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_604348.validator(path, query, header, formData, body)
  let scheme = call_604348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604348.url(scheme.get, call_604348.host, call_604348.base,
                         call_604348.route, valid.getOrDefault("path"))
  result = hook(call_604348, url, valid)

proc call*(call_604349: Call_PostDeleteServerCertificate_604335;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604350 = newJObject()
  var formData_604351 = newJObject()
  add(formData_604351, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_604350, "Action", newJString(Action))
  add(query_604350, "Version", newJString(Version))
  result = call_604349.call(nil, query_604350, nil, formData_604351, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_604335(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_604336, base: "/",
    url: url_PostDeleteServerCertificate_604337,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_604319 = ref object of OpenApiRestCall_602433
proc url_GetDeleteServerCertificate_604321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServerCertificate_604320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_604322 = query.getOrDefault("ServerCertificateName")
  valid_604322 = validateParameter(valid_604322, JString, required = true,
                                 default = nil)
  if valid_604322 != nil:
    section.add "ServerCertificateName", valid_604322
  var valid_604323 = query.getOrDefault("Action")
  valid_604323 = validateParameter(valid_604323, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_604323 != nil:
    section.add "Action", valid_604323
  var valid_604324 = query.getOrDefault("Version")
  valid_604324 = validateParameter(valid_604324, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604324 != nil:
    section.add "Version", valid_604324
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604325 = header.getOrDefault("X-Amz-Date")
  valid_604325 = validateParameter(valid_604325, JString, required = false,
                                 default = nil)
  if valid_604325 != nil:
    section.add "X-Amz-Date", valid_604325
  var valid_604326 = header.getOrDefault("X-Amz-Security-Token")
  valid_604326 = validateParameter(valid_604326, JString, required = false,
                                 default = nil)
  if valid_604326 != nil:
    section.add "X-Amz-Security-Token", valid_604326
  var valid_604327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604327 = validateParameter(valid_604327, JString, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "X-Amz-Content-Sha256", valid_604327
  var valid_604328 = header.getOrDefault("X-Amz-Algorithm")
  valid_604328 = validateParameter(valid_604328, JString, required = false,
                                 default = nil)
  if valid_604328 != nil:
    section.add "X-Amz-Algorithm", valid_604328
  var valid_604329 = header.getOrDefault("X-Amz-Signature")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-Signature", valid_604329
  var valid_604330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604330 = validateParameter(valid_604330, JString, required = false,
                                 default = nil)
  if valid_604330 != nil:
    section.add "X-Amz-SignedHeaders", valid_604330
  var valid_604331 = header.getOrDefault("X-Amz-Credential")
  valid_604331 = validateParameter(valid_604331, JString, required = false,
                                 default = nil)
  if valid_604331 != nil:
    section.add "X-Amz-Credential", valid_604331
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604332: Call_GetDeleteServerCertificate_604319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_604332.validator(path, query, header, formData, body)
  let scheme = call_604332.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604332.url(scheme.get, call_604332.host, call_604332.base,
                         call_604332.route, valid.getOrDefault("path"))
  result = hook(call_604332, url, valid)

proc call*(call_604333: Call_GetDeleteServerCertificate_604319;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604334 = newJObject()
  add(query_604334, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_604334, "Action", newJString(Action))
  add(query_604334, "Version", newJString(Version))
  result = call_604333.call(nil, query_604334, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_604319(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_604320, base: "/",
    url: url_GetDeleteServerCertificate_604321,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_604368 = ref object of OpenApiRestCall_602433
proc url_PostDeleteServiceLinkedRole_604370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceLinkedRole_604369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604371 = query.getOrDefault("Action")
  valid_604371 = validateParameter(valid_604371, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_604371 != nil:
    section.add "Action", valid_604371
  var valid_604372 = query.getOrDefault("Version")
  valid_604372 = validateParameter(valid_604372, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604372 != nil:
    section.add "Version", valid_604372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604373 = header.getOrDefault("X-Amz-Date")
  valid_604373 = validateParameter(valid_604373, JString, required = false,
                                 default = nil)
  if valid_604373 != nil:
    section.add "X-Amz-Date", valid_604373
  var valid_604374 = header.getOrDefault("X-Amz-Security-Token")
  valid_604374 = validateParameter(valid_604374, JString, required = false,
                                 default = nil)
  if valid_604374 != nil:
    section.add "X-Amz-Security-Token", valid_604374
  var valid_604375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604375 = validateParameter(valid_604375, JString, required = false,
                                 default = nil)
  if valid_604375 != nil:
    section.add "X-Amz-Content-Sha256", valid_604375
  var valid_604376 = header.getOrDefault("X-Amz-Algorithm")
  valid_604376 = validateParameter(valid_604376, JString, required = false,
                                 default = nil)
  if valid_604376 != nil:
    section.add "X-Amz-Algorithm", valid_604376
  var valid_604377 = header.getOrDefault("X-Amz-Signature")
  valid_604377 = validateParameter(valid_604377, JString, required = false,
                                 default = nil)
  if valid_604377 != nil:
    section.add "X-Amz-Signature", valid_604377
  var valid_604378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604378 = validateParameter(valid_604378, JString, required = false,
                                 default = nil)
  if valid_604378 != nil:
    section.add "X-Amz-SignedHeaders", valid_604378
  var valid_604379 = header.getOrDefault("X-Amz-Credential")
  valid_604379 = validateParameter(valid_604379, JString, required = false,
                                 default = nil)
  if valid_604379 != nil:
    section.add "X-Amz-Credential", valid_604379
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604380 = formData.getOrDefault("RoleName")
  valid_604380 = validateParameter(valid_604380, JString, required = true,
                                 default = nil)
  if valid_604380 != nil:
    section.add "RoleName", valid_604380
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604381: Call_PostDeleteServiceLinkedRole_604368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604381.validator(path, query, header, formData, body)
  let scheme = call_604381.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604381.url(scheme.get, call_604381.host, call_604381.base,
                         call_604381.route, valid.getOrDefault("path"))
  result = hook(call_604381, url, valid)

proc call*(call_604382: Call_PostDeleteServiceLinkedRole_604368; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604383 = newJObject()
  var formData_604384 = newJObject()
  add(formData_604384, "RoleName", newJString(RoleName))
  add(query_604383, "Action", newJString(Action))
  add(query_604383, "Version", newJString(Version))
  result = call_604382.call(nil, query_604383, nil, formData_604384, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_604368(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_604369, base: "/",
    url: url_PostDeleteServiceLinkedRole_604370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_604352 = ref object of OpenApiRestCall_602433
proc url_GetDeleteServiceLinkedRole_604354(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceLinkedRole_604353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604355 = query.getOrDefault("Action")
  valid_604355 = validateParameter(valid_604355, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_604355 != nil:
    section.add "Action", valid_604355
  var valid_604356 = query.getOrDefault("RoleName")
  valid_604356 = validateParameter(valid_604356, JString, required = true,
                                 default = nil)
  if valid_604356 != nil:
    section.add "RoleName", valid_604356
  var valid_604357 = query.getOrDefault("Version")
  valid_604357 = validateParameter(valid_604357, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604357 != nil:
    section.add "Version", valid_604357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604358 = header.getOrDefault("X-Amz-Date")
  valid_604358 = validateParameter(valid_604358, JString, required = false,
                                 default = nil)
  if valid_604358 != nil:
    section.add "X-Amz-Date", valid_604358
  var valid_604359 = header.getOrDefault("X-Amz-Security-Token")
  valid_604359 = validateParameter(valid_604359, JString, required = false,
                                 default = nil)
  if valid_604359 != nil:
    section.add "X-Amz-Security-Token", valid_604359
  var valid_604360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604360 = validateParameter(valid_604360, JString, required = false,
                                 default = nil)
  if valid_604360 != nil:
    section.add "X-Amz-Content-Sha256", valid_604360
  var valid_604361 = header.getOrDefault("X-Amz-Algorithm")
  valid_604361 = validateParameter(valid_604361, JString, required = false,
                                 default = nil)
  if valid_604361 != nil:
    section.add "X-Amz-Algorithm", valid_604361
  var valid_604362 = header.getOrDefault("X-Amz-Signature")
  valid_604362 = validateParameter(valid_604362, JString, required = false,
                                 default = nil)
  if valid_604362 != nil:
    section.add "X-Amz-Signature", valid_604362
  var valid_604363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604363 = validateParameter(valid_604363, JString, required = false,
                                 default = nil)
  if valid_604363 != nil:
    section.add "X-Amz-SignedHeaders", valid_604363
  var valid_604364 = header.getOrDefault("X-Amz-Credential")
  valid_604364 = validateParameter(valid_604364, JString, required = false,
                                 default = nil)
  if valid_604364 != nil:
    section.add "X-Amz-Credential", valid_604364
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604365: Call_GetDeleteServiceLinkedRole_604352; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604365.validator(path, query, header, formData, body)
  let scheme = call_604365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604365.url(scheme.get, call_604365.host, call_604365.base,
                         call_604365.route, valid.getOrDefault("path"))
  result = hook(call_604365, url, valid)

proc call*(call_604366: Call_GetDeleteServiceLinkedRole_604352; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: string (required)
  var query_604367 = newJObject()
  add(query_604367, "Action", newJString(Action))
  add(query_604367, "RoleName", newJString(RoleName))
  add(query_604367, "Version", newJString(Version))
  result = call_604366.call(nil, query_604367, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_604352(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_604353, base: "/",
    url: url_GetDeleteServiceLinkedRole_604354,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_604402 = ref object of OpenApiRestCall_602433
proc url_PostDeleteServiceSpecificCredential_604404(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceSpecificCredential_604403(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604405 = query.getOrDefault("Action")
  valid_604405 = validateParameter(valid_604405, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_604405 != nil:
    section.add "Action", valid_604405
  var valid_604406 = query.getOrDefault("Version")
  valid_604406 = validateParameter(valid_604406, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604406 != nil:
    section.add "Version", valid_604406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604407 = header.getOrDefault("X-Amz-Date")
  valid_604407 = validateParameter(valid_604407, JString, required = false,
                                 default = nil)
  if valid_604407 != nil:
    section.add "X-Amz-Date", valid_604407
  var valid_604408 = header.getOrDefault("X-Amz-Security-Token")
  valid_604408 = validateParameter(valid_604408, JString, required = false,
                                 default = nil)
  if valid_604408 != nil:
    section.add "X-Amz-Security-Token", valid_604408
  var valid_604409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604409 = validateParameter(valid_604409, JString, required = false,
                                 default = nil)
  if valid_604409 != nil:
    section.add "X-Amz-Content-Sha256", valid_604409
  var valid_604410 = header.getOrDefault("X-Amz-Algorithm")
  valid_604410 = validateParameter(valid_604410, JString, required = false,
                                 default = nil)
  if valid_604410 != nil:
    section.add "X-Amz-Algorithm", valid_604410
  var valid_604411 = header.getOrDefault("X-Amz-Signature")
  valid_604411 = validateParameter(valid_604411, JString, required = false,
                                 default = nil)
  if valid_604411 != nil:
    section.add "X-Amz-Signature", valid_604411
  var valid_604412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604412 = validateParameter(valid_604412, JString, required = false,
                                 default = nil)
  if valid_604412 != nil:
    section.add "X-Amz-SignedHeaders", valid_604412
  var valid_604413 = header.getOrDefault("X-Amz-Credential")
  valid_604413 = validateParameter(valid_604413, JString, required = false,
                                 default = nil)
  if valid_604413 != nil:
    section.add "X-Amz-Credential", valid_604413
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_604414 = formData.getOrDefault("UserName")
  valid_604414 = validateParameter(valid_604414, JString, required = false,
                                 default = nil)
  if valid_604414 != nil:
    section.add "UserName", valid_604414
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_604415 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_604415 = validateParameter(valid_604415, JString, required = true,
                                 default = nil)
  if valid_604415 != nil:
    section.add "ServiceSpecificCredentialId", valid_604415
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604416: Call_PostDeleteServiceSpecificCredential_604402;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_604416.validator(path, query, header, formData, body)
  let scheme = call_604416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604416.url(scheme.get, call_604416.host, call_604416.base,
                         call_604416.route, valid.getOrDefault("path"))
  result = hook(call_604416, url, valid)

proc call*(call_604417: Call_PostDeleteServiceSpecificCredential_604402;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604418 = newJObject()
  var formData_604419 = newJObject()
  add(formData_604419, "UserName", newJString(UserName))
  add(formData_604419, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_604418, "Action", newJString(Action))
  add(query_604418, "Version", newJString(Version))
  result = call_604417.call(nil, query_604418, nil, formData_604419, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_604402(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_604403, base: "/",
    url: url_PostDeleteServiceSpecificCredential_604404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_604385 = ref object of OpenApiRestCall_602433
proc url_GetDeleteServiceSpecificCredential_604387(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceSpecificCredential_604386(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604388 = query.getOrDefault("UserName")
  valid_604388 = validateParameter(valid_604388, JString, required = false,
                                 default = nil)
  if valid_604388 != nil:
    section.add "UserName", valid_604388
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604389 = query.getOrDefault("Action")
  valid_604389 = validateParameter(valid_604389, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_604389 != nil:
    section.add "Action", valid_604389
  var valid_604390 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_604390 = validateParameter(valid_604390, JString, required = true,
                                 default = nil)
  if valid_604390 != nil:
    section.add "ServiceSpecificCredentialId", valid_604390
  var valid_604391 = query.getOrDefault("Version")
  valid_604391 = validateParameter(valid_604391, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604391 != nil:
    section.add "Version", valid_604391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604392 = header.getOrDefault("X-Amz-Date")
  valid_604392 = validateParameter(valid_604392, JString, required = false,
                                 default = nil)
  if valid_604392 != nil:
    section.add "X-Amz-Date", valid_604392
  var valid_604393 = header.getOrDefault("X-Amz-Security-Token")
  valid_604393 = validateParameter(valid_604393, JString, required = false,
                                 default = nil)
  if valid_604393 != nil:
    section.add "X-Amz-Security-Token", valid_604393
  var valid_604394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604394 = validateParameter(valid_604394, JString, required = false,
                                 default = nil)
  if valid_604394 != nil:
    section.add "X-Amz-Content-Sha256", valid_604394
  var valid_604395 = header.getOrDefault("X-Amz-Algorithm")
  valid_604395 = validateParameter(valid_604395, JString, required = false,
                                 default = nil)
  if valid_604395 != nil:
    section.add "X-Amz-Algorithm", valid_604395
  var valid_604396 = header.getOrDefault("X-Amz-Signature")
  valid_604396 = validateParameter(valid_604396, JString, required = false,
                                 default = nil)
  if valid_604396 != nil:
    section.add "X-Amz-Signature", valid_604396
  var valid_604397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604397 = validateParameter(valid_604397, JString, required = false,
                                 default = nil)
  if valid_604397 != nil:
    section.add "X-Amz-SignedHeaders", valid_604397
  var valid_604398 = header.getOrDefault("X-Amz-Credential")
  valid_604398 = validateParameter(valid_604398, JString, required = false,
                                 default = nil)
  if valid_604398 != nil:
    section.add "X-Amz-Credential", valid_604398
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604399: Call_GetDeleteServiceSpecificCredential_604385;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_604399.validator(path, query, header, formData, body)
  let scheme = call_604399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604399.url(scheme.get, call_604399.host, call_604399.base,
                         call_604399.route, valid.getOrDefault("path"))
  result = hook(call_604399, url, valid)

proc call*(call_604400: Call_GetDeleteServiceSpecificCredential_604385;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_604401 = newJObject()
  add(query_604401, "UserName", newJString(UserName))
  add(query_604401, "Action", newJString(Action))
  add(query_604401, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_604401, "Version", newJString(Version))
  result = call_604400.call(nil, query_604401, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_604385(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_604386, base: "/",
    url: url_GetDeleteServiceSpecificCredential_604387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_604437 = ref object of OpenApiRestCall_602433
proc url_PostDeleteSigningCertificate_604439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSigningCertificate_604438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604440 = query.getOrDefault("Action")
  valid_604440 = validateParameter(valid_604440, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_604440 != nil:
    section.add "Action", valid_604440
  var valid_604441 = query.getOrDefault("Version")
  valid_604441 = validateParameter(valid_604441, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604441 != nil:
    section.add "Version", valid_604441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604442 = header.getOrDefault("X-Amz-Date")
  valid_604442 = validateParameter(valid_604442, JString, required = false,
                                 default = nil)
  if valid_604442 != nil:
    section.add "X-Amz-Date", valid_604442
  var valid_604443 = header.getOrDefault("X-Amz-Security-Token")
  valid_604443 = validateParameter(valid_604443, JString, required = false,
                                 default = nil)
  if valid_604443 != nil:
    section.add "X-Amz-Security-Token", valid_604443
  var valid_604444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604444 = validateParameter(valid_604444, JString, required = false,
                                 default = nil)
  if valid_604444 != nil:
    section.add "X-Amz-Content-Sha256", valid_604444
  var valid_604445 = header.getOrDefault("X-Amz-Algorithm")
  valid_604445 = validateParameter(valid_604445, JString, required = false,
                                 default = nil)
  if valid_604445 != nil:
    section.add "X-Amz-Algorithm", valid_604445
  var valid_604446 = header.getOrDefault("X-Amz-Signature")
  valid_604446 = validateParameter(valid_604446, JString, required = false,
                                 default = nil)
  if valid_604446 != nil:
    section.add "X-Amz-Signature", valid_604446
  var valid_604447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604447 = validateParameter(valid_604447, JString, required = false,
                                 default = nil)
  if valid_604447 != nil:
    section.add "X-Amz-SignedHeaders", valid_604447
  var valid_604448 = header.getOrDefault("X-Amz-Credential")
  valid_604448 = validateParameter(valid_604448, JString, required = false,
                                 default = nil)
  if valid_604448 != nil:
    section.add "X-Amz-Credential", valid_604448
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_604449 = formData.getOrDefault("UserName")
  valid_604449 = validateParameter(valid_604449, JString, required = false,
                                 default = nil)
  if valid_604449 != nil:
    section.add "UserName", valid_604449
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_604450 = formData.getOrDefault("CertificateId")
  valid_604450 = validateParameter(valid_604450, JString, required = true,
                                 default = nil)
  if valid_604450 != nil:
    section.add "CertificateId", valid_604450
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604451: Call_PostDeleteSigningCertificate_604437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_604451.validator(path, query, header, formData, body)
  let scheme = call_604451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604451.url(scheme.get, call_604451.host, call_604451.base,
                         call_604451.route, valid.getOrDefault("path"))
  result = hook(call_604451, url, valid)

proc call*(call_604452: Call_PostDeleteSigningCertificate_604437;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604453 = newJObject()
  var formData_604454 = newJObject()
  add(formData_604454, "UserName", newJString(UserName))
  add(formData_604454, "CertificateId", newJString(CertificateId))
  add(query_604453, "Action", newJString(Action))
  add(query_604453, "Version", newJString(Version))
  result = call_604452.call(nil, query_604453, nil, formData_604454, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_604437(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_604438, base: "/",
    url: url_PostDeleteSigningCertificate_604439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_604420 = ref object of OpenApiRestCall_602433
proc url_GetDeleteSigningCertificate_604422(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSigningCertificate_604421(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateId` field"
  var valid_604423 = query.getOrDefault("CertificateId")
  valid_604423 = validateParameter(valid_604423, JString, required = true,
                                 default = nil)
  if valid_604423 != nil:
    section.add "CertificateId", valid_604423
  var valid_604424 = query.getOrDefault("UserName")
  valid_604424 = validateParameter(valid_604424, JString, required = false,
                                 default = nil)
  if valid_604424 != nil:
    section.add "UserName", valid_604424
  var valid_604425 = query.getOrDefault("Action")
  valid_604425 = validateParameter(valid_604425, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_604425 != nil:
    section.add "Action", valid_604425
  var valid_604426 = query.getOrDefault("Version")
  valid_604426 = validateParameter(valid_604426, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604426 != nil:
    section.add "Version", valid_604426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604427 = header.getOrDefault("X-Amz-Date")
  valid_604427 = validateParameter(valid_604427, JString, required = false,
                                 default = nil)
  if valid_604427 != nil:
    section.add "X-Amz-Date", valid_604427
  var valid_604428 = header.getOrDefault("X-Amz-Security-Token")
  valid_604428 = validateParameter(valid_604428, JString, required = false,
                                 default = nil)
  if valid_604428 != nil:
    section.add "X-Amz-Security-Token", valid_604428
  var valid_604429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604429 = validateParameter(valid_604429, JString, required = false,
                                 default = nil)
  if valid_604429 != nil:
    section.add "X-Amz-Content-Sha256", valid_604429
  var valid_604430 = header.getOrDefault("X-Amz-Algorithm")
  valid_604430 = validateParameter(valid_604430, JString, required = false,
                                 default = nil)
  if valid_604430 != nil:
    section.add "X-Amz-Algorithm", valid_604430
  var valid_604431 = header.getOrDefault("X-Amz-Signature")
  valid_604431 = validateParameter(valid_604431, JString, required = false,
                                 default = nil)
  if valid_604431 != nil:
    section.add "X-Amz-Signature", valid_604431
  var valid_604432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604432 = validateParameter(valid_604432, JString, required = false,
                                 default = nil)
  if valid_604432 != nil:
    section.add "X-Amz-SignedHeaders", valid_604432
  var valid_604433 = header.getOrDefault("X-Amz-Credential")
  valid_604433 = validateParameter(valid_604433, JString, required = false,
                                 default = nil)
  if valid_604433 != nil:
    section.add "X-Amz-Credential", valid_604433
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604434: Call_GetDeleteSigningCertificate_604420; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_604434.validator(path, query, header, formData, body)
  let scheme = call_604434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604434.url(scheme.get, call_604434.host, call_604434.base,
                         call_604434.route, valid.getOrDefault("path"))
  result = hook(call_604434, url, valid)

proc call*(call_604435: Call_GetDeleteSigningCertificate_604420;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604436 = newJObject()
  add(query_604436, "CertificateId", newJString(CertificateId))
  add(query_604436, "UserName", newJString(UserName))
  add(query_604436, "Action", newJString(Action))
  add(query_604436, "Version", newJString(Version))
  result = call_604435.call(nil, query_604436, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_604420(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_604421, base: "/",
    url: url_GetDeleteSigningCertificate_604422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_604471 = ref object of OpenApiRestCall_602433
proc url_PostDeleteUser_604473(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUser_604472(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604474 = query.getOrDefault("Action")
  valid_604474 = validateParameter(valid_604474, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_604474 != nil:
    section.add "Action", valid_604474
  var valid_604475 = query.getOrDefault("Version")
  valid_604475 = validateParameter(valid_604475, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604475 != nil:
    section.add "Version", valid_604475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604476 = header.getOrDefault("X-Amz-Date")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-Date", valid_604476
  var valid_604477 = header.getOrDefault("X-Amz-Security-Token")
  valid_604477 = validateParameter(valid_604477, JString, required = false,
                                 default = nil)
  if valid_604477 != nil:
    section.add "X-Amz-Security-Token", valid_604477
  var valid_604478 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604478 = validateParameter(valid_604478, JString, required = false,
                                 default = nil)
  if valid_604478 != nil:
    section.add "X-Amz-Content-Sha256", valid_604478
  var valid_604479 = header.getOrDefault("X-Amz-Algorithm")
  valid_604479 = validateParameter(valid_604479, JString, required = false,
                                 default = nil)
  if valid_604479 != nil:
    section.add "X-Amz-Algorithm", valid_604479
  var valid_604480 = header.getOrDefault("X-Amz-Signature")
  valid_604480 = validateParameter(valid_604480, JString, required = false,
                                 default = nil)
  if valid_604480 != nil:
    section.add "X-Amz-Signature", valid_604480
  var valid_604481 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604481 = validateParameter(valid_604481, JString, required = false,
                                 default = nil)
  if valid_604481 != nil:
    section.add "X-Amz-SignedHeaders", valid_604481
  var valid_604482 = header.getOrDefault("X-Amz-Credential")
  valid_604482 = validateParameter(valid_604482, JString, required = false,
                                 default = nil)
  if valid_604482 != nil:
    section.add "X-Amz-Credential", valid_604482
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604483 = formData.getOrDefault("UserName")
  valid_604483 = validateParameter(valid_604483, JString, required = true,
                                 default = nil)
  if valid_604483 != nil:
    section.add "UserName", valid_604483
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604484: Call_PostDeleteUser_604471; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_604484.validator(path, query, header, formData, body)
  let scheme = call_604484.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604484.url(scheme.get, call_604484.host, call_604484.base,
                         call_604484.route, valid.getOrDefault("path"))
  result = hook(call_604484, url, valid)

proc call*(call_604485: Call_PostDeleteUser_604471; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604486 = newJObject()
  var formData_604487 = newJObject()
  add(formData_604487, "UserName", newJString(UserName))
  add(query_604486, "Action", newJString(Action))
  add(query_604486, "Version", newJString(Version))
  result = call_604485.call(nil, query_604486, nil, formData_604487, nil)

var postDeleteUser* = Call_PostDeleteUser_604471(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_604472,
    base: "/", url: url_PostDeleteUser_604473, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_604455 = ref object of OpenApiRestCall_602433
proc url_GetDeleteUser_604457(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUser_604456(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604458 = query.getOrDefault("UserName")
  valid_604458 = validateParameter(valid_604458, JString, required = true,
                                 default = nil)
  if valid_604458 != nil:
    section.add "UserName", valid_604458
  var valid_604459 = query.getOrDefault("Action")
  valid_604459 = validateParameter(valid_604459, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_604459 != nil:
    section.add "Action", valid_604459
  var valid_604460 = query.getOrDefault("Version")
  valid_604460 = validateParameter(valid_604460, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604460 != nil:
    section.add "Version", valid_604460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604461 = header.getOrDefault("X-Amz-Date")
  valid_604461 = validateParameter(valid_604461, JString, required = false,
                                 default = nil)
  if valid_604461 != nil:
    section.add "X-Amz-Date", valid_604461
  var valid_604462 = header.getOrDefault("X-Amz-Security-Token")
  valid_604462 = validateParameter(valid_604462, JString, required = false,
                                 default = nil)
  if valid_604462 != nil:
    section.add "X-Amz-Security-Token", valid_604462
  var valid_604463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604463 = validateParameter(valid_604463, JString, required = false,
                                 default = nil)
  if valid_604463 != nil:
    section.add "X-Amz-Content-Sha256", valid_604463
  var valid_604464 = header.getOrDefault("X-Amz-Algorithm")
  valid_604464 = validateParameter(valid_604464, JString, required = false,
                                 default = nil)
  if valid_604464 != nil:
    section.add "X-Amz-Algorithm", valid_604464
  var valid_604465 = header.getOrDefault("X-Amz-Signature")
  valid_604465 = validateParameter(valid_604465, JString, required = false,
                                 default = nil)
  if valid_604465 != nil:
    section.add "X-Amz-Signature", valid_604465
  var valid_604466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604466 = validateParameter(valid_604466, JString, required = false,
                                 default = nil)
  if valid_604466 != nil:
    section.add "X-Amz-SignedHeaders", valid_604466
  var valid_604467 = header.getOrDefault("X-Amz-Credential")
  valid_604467 = validateParameter(valid_604467, JString, required = false,
                                 default = nil)
  if valid_604467 != nil:
    section.add "X-Amz-Credential", valid_604467
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604468: Call_GetDeleteUser_604455; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_604468.validator(path, query, header, formData, body)
  let scheme = call_604468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604468.url(scheme.get, call_604468.host, call_604468.base,
                         call_604468.route, valid.getOrDefault("path"))
  result = hook(call_604468, url, valid)

proc call*(call_604469: Call_GetDeleteUser_604455; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604470 = newJObject()
  add(query_604470, "UserName", newJString(UserName))
  add(query_604470, "Action", newJString(Action))
  add(query_604470, "Version", newJString(Version))
  result = call_604469.call(nil, query_604470, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_604455(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_604456,
    base: "/", url: url_GetDeleteUser_604457, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_604504 = ref object of OpenApiRestCall_602433
proc url_PostDeleteUserPermissionsBoundary_604506(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPermissionsBoundary_604505(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604507 = query.getOrDefault("Action")
  valid_604507 = validateParameter(valid_604507, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_604507 != nil:
    section.add "Action", valid_604507
  var valid_604508 = query.getOrDefault("Version")
  valid_604508 = validateParameter(valid_604508, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604508 != nil:
    section.add "Version", valid_604508
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604509 = header.getOrDefault("X-Amz-Date")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "X-Amz-Date", valid_604509
  var valid_604510 = header.getOrDefault("X-Amz-Security-Token")
  valid_604510 = validateParameter(valid_604510, JString, required = false,
                                 default = nil)
  if valid_604510 != nil:
    section.add "X-Amz-Security-Token", valid_604510
  var valid_604511 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604511 = validateParameter(valid_604511, JString, required = false,
                                 default = nil)
  if valid_604511 != nil:
    section.add "X-Amz-Content-Sha256", valid_604511
  var valid_604512 = header.getOrDefault("X-Amz-Algorithm")
  valid_604512 = validateParameter(valid_604512, JString, required = false,
                                 default = nil)
  if valid_604512 != nil:
    section.add "X-Amz-Algorithm", valid_604512
  var valid_604513 = header.getOrDefault("X-Amz-Signature")
  valid_604513 = validateParameter(valid_604513, JString, required = false,
                                 default = nil)
  if valid_604513 != nil:
    section.add "X-Amz-Signature", valid_604513
  var valid_604514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604514 = validateParameter(valid_604514, JString, required = false,
                                 default = nil)
  if valid_604514 != nil:
    section.add "X-Amz-SignedHeaders", valid_604514
  var valid_604515 = header.getOrDefault("X-Amz-Credential")
  valid_604515 = validateParameter(valid_604515, JString, required = false,
                                 default = nil)
  if valid_604515 != nil:
    section.add "X-Amz-Credential", valid_604515
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604516 = formData.getOrDefault("UserName")
  valid_604516 = validateParameter(valid_604516, JString, required = true,
                                 default = nil)
  if valid_604516 != nil:
    section.add "UserName", valid_604516
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604517: Call_PostDeleteUserPermissionsBoundary_604504;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_604517.validator(path, query, header, formData, body)
  let scheme = call_604517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604517.url(scheme.get, call_604517.host, call_604517.base,
                         call_604517.route, valid.getOrDefault("path"))
  result = hook(call_604517, url, valid)

proc call*(call_604518: Call_PostDeleteUserPermissionsBoundary_604504;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604519 = newJObject()
  var formData_604520 = newJObject()
  add(formData_604520, "UserName", newJString(UserName))
  add(query_604519, "Action", newJString(Action))
  add(query_604519, "Version", newJString(Version))
  result = call_604518.call(nil, query_604519, nil, formData_604520, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_604504(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_604505, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_604506,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_604488 = ref object of OpenApiRestCall_602433
proc url_GetDeleteUserPermissionsBoundary_604490(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPermissionsBoundary_604489(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604491 = query.getOrDefault("UserName")
  valid_604491 = validateParameter(valid_604491, JString, required = true,
                                 default = nil)
  if valid_604491 != nil:
    section.add "UserName", valid_604491
  var valid_604492 = query.getOrDefault("Action")
  valid_604492 = validateParameter(valid_604492, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_604492 != nil:
    section.add "Action", valid_604492
  var valid_604493 = query.getOrDefault("Version")
  valid_604493 = validateParameter(valid_604493, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604493 != nil:
    section.add "Version", valid_604493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604494 = header.getOrDefault("X-Amz-Date")
  valid_604494 = validateParameter(valid_604494, JString, required = false,
                                 default = nil)
  if valid_604494 != nil:
    section.add "X-Amz-Date", valid_604494
  var valid_604495 = header.getOrDefault("X-Amz-Security-Token")
  valid_604495 = validateParameter(valid_604495, JString, required = false,
                                 default = nil)
  if valid_604495 != nil:
    section.add "X-Amz-Security-Token", valid_604495
  var valid_604496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604496 = validateParameter(valid_604496, JString, required = false,
                                 default = nil)
  if valid_604496 != nil:
    section.add "X-Amz-Content-Sha256", valid_604496
  var valid_604497 = header.getOrDefault("X-Amz-Algorithm")
  valid_604497 = validateParameter(valid_604497, JString, required = false,
                                 default = nil)
  if valid_604497 != nil:
    section.add "X-Amz-Algorithm", valid_604497
  var valid_604498 = header.getOrDefault("X-Amz-Signature")
  valid_604498 = validateParameter(valid_604498, JString, required = false,
                                 default = nil)
  if valid_604498 != nil:
    section.add "X-Amz-Signature", valid_604498
  var valid_604499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604499 = validateParameter(valid_604499, JString, required = false,
                                 default = nil)
  if valid_604499 != nil:
    section.add "X-Amz-SignedHeaders", valid_604499
  var valid_604500 = header.getOrDefault("X-Amz-Credential")
  valid_604500 = validateParameter(valid_604500, JString, required = false,
                                 default = nil)
  if valid_604500 != nil:
    section.add "X-Amz-Credential", valid_604500
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604501: Call_GetDeleteUserPermissionsBoundary_604488;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_604501.validator(path, query, header, formData, body)
  let scheme = call_604501.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604501.url(scheme.get, call_604501.host, call_604501.base,
                         call_604501.route, valid.getOrDefault("path"))
  result = hook(call_604501, url, valid)

proc call*(call_604502: Call_GetDeleteUserPermissionsBoundary_604488;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604503 = newJObject()
  add(query_604503, "UserName", newJString(UserName))
  add(query_604503, "Action", newJString(Action))
  add(query_604503, "Version", newJString(Version))
  result = call_604502.call(nil, query_604503, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_604488(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_604489, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_604490,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_604538 = ref object of OpenApiRestCall_602433
proc url_PostDeleteUserPolicy_604540(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPolicy_604539(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604541 = query.getOrDefault("Action")
  valid_604541 = validateParameter(valid_604541, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_604541 != nil:
    section.add "Action", valid_604541
  var valid_604542 = query.getOrDefault("Version")
  valid_604542 = validateParameter(valid_604542, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604542 != nil:
    section.add "Version", valid_604542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604543 = header.getOrDefault("X-Amz-Date")
  valid_604543 = validateParameter(valid_604543, JString, required = false,
                                 default = nil)
  if valid_604543 != nil:
    section.add "X-Amz-Date", valid_604543
  var valid_604544 = header.getOrDefault("X-Amz-Security-Token")
  valid_604544 = validateParameter(valid_604544, JString, required = false,
                                 default = nil)
  if valid_604544 != nil:
    section.add "X-Amz-Security-Token", valid_604544
  var valid_604545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "X-Amz-Content-Sha256", valid_604545
  var valid_604546 = header.getOrDefault("X-Amz-Algorithm")
  valid_604546 = validateParameter(valid_604546, JString, required = false,
                                 default = nil)
  if valid_604546 != nil:
    section.add "X-Amz-Algorithm", valid_604546
  var valid_604547 = header.getOrDefault("X-Amz-Signature")
  valid_604547 = validateParameter(valid_604547, JString, required = false,
                                 default = nil)
  if valid_604547 != nil:
    section.add "X-Amz-Signature", valid_604547
  var valid_604548 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604548 = validateParameter(valid_604548, JString, required = false,
                                 default = nil)
  if valid_604548 != nil:
    section.add "X-Amz-SignedHeaders", valid_604548
  var valid_604549 = header.getOrDefault("X-Amz-Credential")
  valid_604549 = validateParameter(valid_604549, JString, required = false,
                                 default = nil)
  if valid_604549 != nil:
    section.add "X-Amz-Credential", valid_604549
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604550 = formData.getOrDefault("PolicyName")
  valid_604550 = validateParameter(valid_604550, JString, required = true,
                                 default = nil)
  if valid_604550 != nil:
    section.add "PolicyName", valid_604550
  var valid_604551 = formData.getOrDefault("UserName")
  valid_604551 = validateParameter(valid_604551, JString, required = true,
                                 default = nil)
  if valid_604551 != nil:
    section.add "UserName", valid_604551
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604552: Call_PostDeleteUserPolicy_604538; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604552.validator(path, query, header, formData, body)
  let scheme = call_604552.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604552.url(scheme.get, call_604552.host, call_604552.base,
                         call_604552.route, valid.getOrDefault("path"))
  result = hook(call_604552, url, valid)

proc call*(call_604553: Call_PostDeleteUserPolicy_604538; PolicyName: string;
          UserName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604554 = newJObject()
  var formData_604555 = newJObject()
  add(formData_604555, "PolicyName", newJString(PolicyName))
  add(formData_604555, "UserName", newJString(UserName))
  add(query_604554, "Action", newJString(Action))
  add(query_604554, "Version", newJString(Version))
  result = call_604553.call(nil, query_604554, nil, formData_604555, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_604538(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_604539, base: "/",
    url: url_PostDeleteUserPolicy_604540, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_604521 = ref object of OpenApiRestCall_602433
proc url_GetDeleteUserPolicy_604523(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPolicy_604522(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604524 = query.getOrDefault("UserName")
  valid_604524 = validateParameter(valid_604524, JString, required = true,
                                 default = nil)
  if valid_604524 != nil:
    section.add "UserName", valid_604524
  var valid_604525 = query.getOrDefault("Action")
  valid_604525 = validateParameter(valid_604525, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_604525 != nil:
    section.add "Action", valid_604525
  var valid_604526 = query.getOrDefault("Version")
  valid_604526 = validateParameter(valid_604526, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604526 != nil:
    section.add "Version", valid_604526
  var valid_604527 = query.getOrDefault("PolicyName")
  valid_604527 = validateParameter(valid_604527, JString, required = true,
                                 default = nil)
  if valid_604527 != nil:
    section.add "PolicyName", valid_604527
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604528 = header.getOrDefault("X-Amz-Date")
  valid_604528 = validateParameter(valid_604528, JString, required = false,
                                 default = nil)
  if valid_604528 != nil:
    section.add "X-Amz-Date", valid_604528
  var valid_604529 = header.getOrDefault("X-Amz-Security-Token")
  valid_604529 = validateParameter(valid_604529, JString, required = false,
                                 default = nil)
  if valid_604529 != nil:
    section.add "X-Amz-Security-Token", valid_604529
  var valid_604530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604530 = validateParameter(valid_604530, JString, required = false,
                                 default = nil)
  if valid_604530 != nil:
    section.add "X-Amz-Content-Sha256", valid_604530
  var valid_604531 = header.getOrDefault("X-Amz-Algorithm")
  valid_604531 = validateParameter(valid_604531, JString, required = false,
                                 default = nil)
  if valid_604531 != nil:
    section.add "X-Amz-Algorithm", valid_604531
  var valid_604532 = header.getOrDefault("X-Amz-Signature")
  valid_604532 = validateParameter(valid_604532, JString, required = false,
                                 default = nil)
  if valid_604532 != nil:
    section.add "X-Amz-Signature", valid_604532
  var valid_604533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604533 = validateParameter(valid_604533, JString, required = false,
                                 default = nil)
  if valid_604533 != nil:
    section.add "X-Amz-SignedHeaders", valid_604533
  var valid_604534 = header.getOrDefault("X-Amz-Credential")
  valid_604534 = validateParameter(valid_604534, JString, required = false,
                                 default = nil)
  if valid_604534 != nil:
    section.add "X-Amz-Credential", valid_604534
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604535: Call_GetDeleteUserPolicy_604521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604535.validator(path, query, header, formData, body)
  let scheme = call_604535.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604535.url(scheme.get, call_604535.host, call_604535.base,
                         call_604535.route, valid.getOrDefault("path"))
  result = hook(call_604535, url, valid)

proc call*(call_604536: Call_GetDeleteUserPolicy_604521; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_604537 = newJObject()
  add(query_604537, "UserName", newJString(UserName))
  add(query_604537, "Action", newJString(Action))
  add(query_604537, "Version", newJString(Version))
  add(query_604537, "PolicyName", newJString(PolicyName))
  result = call_604536.call(nil, query_604537, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_604521(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_604522, base: "/",
    url: url_GetDeleteUserPolicy_604523, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_604572 = ref object of OpenApiRestCall_602433
proc url_PostDeleteVirtualMFADevice_604574(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVirtualMFADevice_604573(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604575 = query.getOrDefault("Action")
  valid_604575 = validateParameter(valid_604575, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_604575 != nil:
    section.add "Action", valid_604575
  var valid_604576 = query.getOrDefault("Version")
  valid_604576 = validateParameter(valid_604576, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604576 != nil:
    section.add "Version", valid_604576
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604577 = header.getOrDefault("X-Amz-Date")
  valid_604577 = validateParameter(valid_604577, JString, required = false,
                                 default = nil)
  if valid_604577 != nil:
    section.add "X-Amz-Date", valid_604577
  var valid_604578 = header.getOrDefault("X-Amz-Security-Token")
  valid_604578 = validateParameter(valid_604578, JString, required = false,
                                 default = nil)
  if valid_604578 != nil:
    section.add "X-Amz-Security-Token", valid_604578
  var valid_604579 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604579 = validateParameter(valid_604579, JString, required = false,
                                 default = nil)
  if valid_604579 != nil:
    section.add "X-Amz-Content-Sha256", valid_604579
  var valid_604580 = header.getOrDefault("X-Amz-Algorithm")
  valid_604580 = validateParameter(valid_604580, JString, required = false,
                                 default = nil)
  if valid_604580 != nil:
    section.add "X-Amz-Algorithm", valid_604580
  var valid_604581 = header.getOrDefault("X-Amz-Signature")
  valid_604581 = validateParameter(valid_604581, JString, required = false,
                                 default = nil)
  if valid_604581 != nil:
    section.add "X-Amz-Signature", valid_604581
  var valid_604582 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604582 = validateParameter(valid_604582, JString, required = false,
                                 default = nil)
  if valid_604582 != nil:
    section.add "X-Amz-SignedHeaders", valid_604582
  var valid_604583 = header.getOrDefault("X-Amz-Credential")
  valid_604583 = validateParameter(valid_604583, JString, required = false,
                                 default = nil)
  if valid_604583 != nil:
    section.add "X-Amz-Credential", valid_604583
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_604584 = formData.getOrDefault("SerialNumber")
  valid_604584 = validateParameter(valid_604584, JString, required = true,
                                 default = nil)
  if valid_604584 != nil:
    section.add "SerialNumber", valid_604584
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604585: Call_PostDeleteVirtualMFADevice_604572; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_604585.validator(path, query, header, formData, body)
  let scheme = call_604585.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604585.url(scheme.get, call_604585.host, call_604585.base,
                         call_604585.route, valid.getOrDefault("path"))
  result = hook(call_604585, url, valid)

proc call*(call_604586: Call_PostDeleteVirtualMFADevice_604572;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604587 = newJObject()
  var formData_604588 = newJObject()
  add(formData_604588, "SerialNumber", newJString(SerialNumber))
  add(query_604587, "Action", newJString(Action))
  add(query_604587, "Version", newJString(Version))
  result = call_604586.call(nil, query_604587, nil, formData_604588, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_604572(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_604573, base: "/",
    url: url_PostDeleteVirtualMFADevice_604574,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_604556 = ref object of OpenApiRestCall_602433
proc url_GetDeleteVirtualMFADevice_604558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVirtualMFADevice_604557(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_604559 = query.getOrDefault("SerialNumber")
  valid_604559 = validateParameter(valid_604559, JString, required = true,
                                 default = nil)
  if valid_604559 != nil:
    section.add "SerialNumber", valid_604559
  var valid_604560 = query.getOrDefault("Action")
  valid_604560 = validateParameter(valid_604560, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_604560 != nil:
    section.add "Action", valid_604560
  var valid_604561 = query.getOrDefault("Version")
  valid_604561 = validateParameter(valid_604561, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604561 != nil:
    section.add "Version", valid_604561
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604562 = header.getOrDefault("X-Amz-Date")
  valid_604562 = validateParameter(valid_604562, JString, required = false,
                                 default = nil)
  if valid_604562 != nil:
    section.add "X-Amz-Date", valid_604562
  var valid_604563 = header.getOrDefault("X-Amz-Security-Token")
  valid_604563 = validateParameter(valid_604563, JString, required = false,
                                 default = nil)
  if valid_604563 != nil:
    section.add "X-Amz-Security-Token", valid_604563
  var valid_604564 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604564 = validateParameter(valid_604564, JString, required = false,
                                 default = nil)
  if valid_604564 != nil:
    section.add "X-Amz-Content-Sha256", valid_604564
  var valid_604565 = header.getOrDefault("X-Amz-Algorithm")
  valid_604565 = validateParameter(valid_604565, JString, required = false,
                                 default = nil)
  if valid_604565 != nil:
    section.add "X-Amz-Algorithm", valid_604565
  var valid_604566 = header.getOrDefault("X-Amz-Signature")
  valid_604566 = validateParameter(valid_604566, JString, required = false,
                                 default = nil)
  if valid_604566 != nil:
    section.add "X-Amz-Signature", valid_604566
  var valid_604567 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604567 = validateParameter(valid_604567, JString, required = false,
                                 default = nil)
  if valid_604567 != nil:
    section.add "X-Amz-SignedHeaders", valid_604567
  var valid_604568 = header.getOrDefault("X-Amz-Credential")
  valid_604568 = validateParameter(valid_604568, JString, required = false,
                                 default = nil)
  if valid_604568 != nil:
    section.add "X-Amz-Credential", valid_604568
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604569: Call_GetDeleteVirtualMFADevice_604556; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_604569.validator(path, query, header, formData, body)
  let scheme = call_604569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604569.url(scheme.get, call_604569.host, call_604569.base,
                         call_604569.route, valid.getOrDefault("path"))
  result = hook(call_604569, url, valid)

proc call*(call_604570: Call_GetDeleteVirtualMFADevice_604556;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604571 = newJObject()
  add(query_604571, "SerialNumber", newJString(SerialNumber))
  add(query_604571, "Action", newJString(Action))
  add(query_604571, "Version", newJString(Version))
  result = call_604570.call(nil, query_604571, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_604556(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_604557, base: "/",
    url: url_GetDeleteVirtualMFADevice_604558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_604606 = ref object of OpenApiRestCall_602433
proc url_PostDetachGroupPolicy_604608(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachGroupPolicy_604607(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604609 = query.getOrDefault("Action")
  valid_604609 = validateParameter(valid_604609, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_604609 != nil:
    section.add "Action", valid_604609
  var valid_604610 = query.getOrDefault("Version")
  valid_604610 = validateParameter(valid_604610, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604610 != nil:
    section.add "Version", valid_604610
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604611 = header.getOrDefault("X-Amz-Date")
  valid_604611 = validateParameter(valid_604611, JString, required = false,
                                 default = nil)
  if valid_604611 != nil:
    section.add "X-Amz-Date", valid_604611
  var valid_604612 = header.getOrDefault("X-Amz-Security-Token")
  valid_604612 = validateParameter(valid_604612, JString, required = false,
                                 default = nil)
  if valid_604612 != nil:
    section.add "X-Amz-Security-Token", valid_604612
  var valid_604613 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604613 = validateParameter(valid_604613, JString, required = false,
                                 default = nil)
  if valid_604613 != nil:
    section.add "X-Amz-Content-Sha256", valid_604613
  var valid_604614 = header.getOrDefault("X-Amz-Algorithm")
  valid_604614 = validateParameter(valid_604614, JString, required = false,
                                 default = nil)
  if valid_604614 != nil:
    section.add "X-Amz-Algorithm", valid_604614
  var valid_604615 = header.getOrDefault("X-Amz-Signature")
  valid_604615 = validateParameter(valid_604615, JString, required = false,
                                 default = nil)
  if valid_604615 != nil:
    section.add "X-Amz-Signature", valid_604615
  var valid_604616 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604616 = validateParameter(valid_604616, JString, required = false,
                                 default = nil)
  if valid_604616 != nil:
    section.add "X-Amz-SignedHeaders", valid_604616
  var valid_604617 = header.getOrDefault("X-Amz-Credential")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "X-Amz-Credential", valid_604617
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_604618 = formData.getOrDefault("PolicyArn")
  valid_604618 = validateParameter(valid_604618, JString, required = true,
                                 default = nil)
  if valid_604618 != nil:
    section.add "PolicyArn", valid_604618
  var valid_604619 = formData.getOrDefault("GroupName")
  valid_604619 = validateParameter(valid_604619, JString, required = true,
                                 default = nil)
  if valid_604619 != nil:
    section.add "GroupName", valid_604619
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604620: Call_PostDetachGroupPolicy_604606; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604620.validator(path, query, header, formData, body)
  let scheme = call_604620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604620.url(scheme.get, call_604620.host, call_604620.base,
                         call_604620.route, valid.getOrDefault("path"))
  result = hook(call_604620, url, valid)

proc call*(call_604621: Call_PostDetachGroupPolicy_604606; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604622 = newJObject()
  var formData_604623 = newJObject()
  add(formData_604623, "PolicyArn", newJString(PolicyArn))
  add(formData_604623, "GroupName", newJString(GroupName))
  add(query_604622, "Action", newJString(Action))
  add(query_604622, "Version", newJString(Version))
  result = call_604621.call(nil, query_604622, nil, formData_604623, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_604606(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_604607, base: "/",
    url: url_PostDetachGroupPolicy_604608, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_604589 = ref object of OpenApiRestCall_602433
proc url_GetDetachGroupPolicy_604591(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachGroupPolicy_604590(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604592 = query.getOrDefault("PolicyArn")
  valid_604592 = validateParameter(valid_604592, JString, required = true,
                                 default = nil)
  if valid_604592 != nil:
    section.add "PolicyArn", valid_604592
  var valid_604593 = query.getOrDefault("Action")
  valid_604593 = validateParameter(valid_604593, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_604593 != nil:
    section.add "Action", valid_604593
  var valid_604594 = query.getOrDefault("GroupName")
  valid_604594 = validateParameter(valid_604594, JString, required = true,
                                 default = nil)
  if valid_604594 != nil:
    section.add "GroupName", valid_604594
  var valid_604595 = query.getOrDefault("Version")
  valid_604595 = validateParameter(valid_604595, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604595 != nil:
    section.add "Version", valid_604595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604596 = header.getOrDefault("X-Amz-Date")
  valid_604596 = validateParameter(valid_604596, JString, required = false,
                                 default = nil)
  if valid_604596 != nil:
    section.add "X-Amz-Date", valid_604596
  var valid_604597 = header.getOrDefault("X-Amz-Security-Token")
  valid_604597 = validateParameter(valid_604597, JString, required = false,
                                 default = nil)
  if valid_604597 != nil:
    section.add "X-Amz-Security-Token", valid_604597
  var valid_604598 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604598 = validateParameter(valid_604598, JString, required = false,
                                 default = nil)
  if valid_604598 != nil:
    section.add "X-Amz-Content-Sha256", valid_604598
  var valid_604599 = header.getOrDefault("X-Amz-Algorithm")
  valid_604599 = validateParameter(valid_604599, JString, required = false,
                                 default = nil)
  if valid_604599 != nil:
    section.add "X-Amz-Algorithm", valid_604599
  var valid_604600 = header.getOrDefault("X-Amz-Signature")
  valid_604600 = validateParameter(valid_604600, JString, required = false,
                                 default = nil)
  if valid_604600 != nil:
    section.add "X-Amz-Signature", valid_604600
  var valid_604601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604601 = validateParameter(valid_604601, JString, required = false,
                                 default = nil)
  if valid_604601 != nil:
    section.add "X-Amz-SignedHeaders", valid_604601
  var valid_604602 = header.getOrDefault("X-Amz-Credential")
  valid_604602 = validateParameter(valid_604602, JString, required = false,
                                 default = nil)
  if valid_604602 != nil:
    section.add "X-Amz-Credential", valid_604602
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604603: Call_GetDetachGroupPolicy_604589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604603.validator(path, query, header, formData, body)
  let scheme = call_604603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604603.url(scheme.get, call_604603.host, call_604603.base,
                         call_604603.route, valid.getOrDefault("path"))
  result = hook(call_604603, url, valid)

proc call*(call_604604: Call_GetDetachGroupPolicy_604589; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604605 = newJObject()
  add(query_604605, "PolicyArn", newJString(PolicyArn))
  add(query_604605, "Action", newJString(Action))
  add(query_604605, "GroupName", newJString(GroupName))
  add(query_604605, "Version", newJString(Version))
  result = call_604604.call(nil, query_604605, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_604589(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_604590, base: "/",
    url: url_GetDetachGroupPolicy_604591, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_604641 = ref object of OpenApiRestCall_602433
proc url_PostDetachRolePolicy_604643(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachRolePolicy_604642(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604644 = query.getOrDefault("Action")
  valid_604644 = validateParameter(valid_604644, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_604644 != nil:
    section.add "Action", valid_604644
  var valid_604645 = query.getOrDefault("Version")
  valid_604645 = validateParameter(valid_604645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604645 != nil:
    section.add "Version", valid_604645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604646 = header.getOrDefault("X-Amz-Date")
  valid_604646 = validateParameter(valid_604646, JString, required = false,
                                 default = nil)
  if valid_604646 != nil:
    section.add "X-Amz-Date", valid_604646
  var valid_604647 = header.getOrDefault("X-Amz-Security-Token")
  valid_604647 = validateParameter(valid_604647, JString, required = false,
                                 default = nil)
  if valid_604647 != nil:
    section.add "X-Amz-Security-Token", valid_604647
  var valid_604648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604648 = validateParameter(valid_604648, JString, required = false,
                                 default = nil)
  if valid_604648 != nil:
    section.add "X-Amz-Content-Sha256", valid_604648
  var valid_604649 = header.getOrDefault("X-Amz-Algorithm")
  valid_604649 = validateParameter(valid_604649, JString, required = false,
                                 default = nil)
  if valid_604649 != nil:
    section.add "X-Amz-Algorithm", valid_604649
  var valid_604650 = header.getOrDefault("X-Amz-Signature")
  valid_604650 = validateParameter(valid_604650, JString, required = false,
                                 default = nil)
  if valid_604650 != nil:
    section.add "X-Amz-Signature", valid_604650
  var valid_604651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604651 = validateParameter(valid_604651, JString, required = false,
                                 default = nil)
  if valid_604651 != nil:
    section.add "X-Amz-SignedHeaders", valid_604651
  var valid_604652 = header.getOrDefault("X-Amz-Credential")
  valid_604652 = validateParameter(valid_604652, JString, required = false,
                                 default = nil)
  if valid_604652 != nil:
    section.add "X-Amz-Credential", valid_604652
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604653 = formData.getOrDefault("RoleName")
  valid_604653 = validateParameter(valid_604653, JString, required = true,
                                 default = nil)
  if valid_604653 != nil:
    section.add "RoleName", valid_604653
  var valid_604654 = formData.getOrDefault("PolicyArn")
  valid_604654 = validateParameter(valid_604654, JString, required = true,
                                 default = nil)
  if valid_604654 != nil:
    section.add "PolicyArn", valid_604654
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604655: Call_PostDetachRolePolicy_604641; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604655.validator(path, query, header, formData, body)
  let scheme = call_604655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604655.url(scheme.get, call_604655.host, call_604655.base,
                         call_604655.route, valid.getOrDefault("path"))
  result = hook(call_604655, url, valid)

proc call*(call_604656: Call_PostDetachRolePolicy_604641; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604657 = newJObject()
  var formData_604658 = newJObject()
  add(formData_604658, "RoleName", newJString(RoleName))
  add(formData_604658, "PolicyArn", newJString(PolicyArn))
  add(query_604657, "Action", newJString(Action))
  add(query_604657, "Version", newJString(Version))
  result = call_604656.call(nil, query_604657, nil, formData_604658, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_604641(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_604642, base: "/",
    url: url_PostDetachRolePolicy_604643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_604624 = ref object of OpenApiRestCall_602433
proc url_GetDetachRolePolicy_604626(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachRolePolicy_604625(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604627 = query.getOrDefault("PolicyArn")
  valid_604627 = validateParameter(valid_604627, JString, required = true,
                                 default = nil)
  if valid_604627 != nil:
    section.add "PolicyArn", valid_604627
  var valid_604628 = query.getOrDefault("Action")
  valid_604628 = validateParameter(valid_604628, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_604628 != nil:
    section.add "Action", valid_604628
  var valid_604629 = query.getOrDefault("RoleName")
  valid_604629 = validateParameter(valid_604629, JString, required = true,
                                 default = nil)
  if valid_604629 != nil:
    section.add "RoleName", valid_604629
  var valid_604630 = query.getOrDefault("Version")
  valid_604630 = validateParameter(valid_604630, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604630 != nil:
    section.add "Version", valid_604630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604631 = header.getOrDefault("X-Amz-Date")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "X-Amz-Date", valid_604631
  var valid_604632 = header.getOrDefault("X-Amz-Security-Token")
  valid_604632 = validateParameter(valid_604632, JString, required = false,
                                 default = nil)
  if valid_604632 != nil:
    section.add "X-Amz-Security-Token", valid_604632
  var valid_604633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Content-Sha256", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Algorithm")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Algorithm", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Signature")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Signature", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-SignedHeaders", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Credential")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Credential", valid_604637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604638: Call_GetDetachRolePolicy_604624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604638.validator(path, query, header, formData, body)
  let scheme = call_604638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604638.url(scheme.get, call_604638.host, call_604638.base,
                         call_604638.route, valid.getOrDefault("path"))
  result = hook(call_604638, url, valid)

proc call*(call_604639: Call_GetDetachRolePolicy_604624; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604640 = newJObject()
  add(query_604640, "PolicyArn", newJString(PolicyArn))
  add(query_604640, "Action", newJString(Action))
  add(query_604640, "RoleName", newJString(RoleName))
  add(query_604640, "Version", newJString(Version))
  result = call_604639.call(nil, query_604640, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_604624(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_604625, base: "/",
    url: url_GetDetachRolePolicy_604626, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_604676 = ref object of OpenApiRestCall_602433
proc url_PostDetachUserPolicy_604678(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachUserPolicy_604677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604679 = query.getOrDefault("Action")
  valid_604679 = validateParameter(valid_604679, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_604679 != nil:
    section.add "Action", valid_604679
  var valid_604680 = query.getOrDefault("Version")
  valid_604680 = validateParameter(valid_604680, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604680 != nil:
    section.add "Version", valid_604680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604681 = header.getOrDefault("X-Amz-Date")
  valid_604681 = validateParameter(valid_604681, JString, required = false,
                                 default = nil)
  if valid_604681 != nil:
    section.add "X-Amz-Date", valid_604681
  var valid_604682 = header.getOrDefault("X-Amz-Security-Token")
  valid_604682 = validateParameter(valid_604682, JString, required = false,
                                 default = nil)
  if valid_604682 != nil:
    section.add "X-Amz-Security-Token", valid_604682
  var valid_604683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604683 = validateParameter(valid_604683, JString, required = false,
                                 default = nil)
  if valid_604683 != nil:
    section.add "X-Amz-Content-Sha256", valid_604683
  var valid_604684 = header.getOrDefault("X-Amz-Algorithm")
  valid_604684 = validateParameter(valid_604684, JString, required = false,
                                 default = nil)
  if valid_604684 != nil:
    section.add "X-Amz-Algorithm", valid_604684
  var valid_604685 = header.getOrDefault("X-Amz-Signature")
  valid_604685 = validateParameter(valid_604685, JString, required = false,
                                 default = nil)
  if valid_604685 != nil:
    section.add "X-Amz-Signature", valid_604685
  var valid_604686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "X-Amz-SignedHeaders", valid_604686
  var valid_604687 = header.getOrDefault("X-Amz-Credential")
  valid_604687 = validateParameter(valid_604687, JString, required = false,
                                 default = nil)
  if valid_604687 != nil:
    section.add "X-Amz-Credential", valid_604687
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604688 = formData.getOrDefault("UserName")
  valid_604688 = validateParameter(valid_604688, JString, required = true,
                                 default = nil)
  if valid_604688 != nil:
    section.add "UserName", valid_604688
  var valid_604689 = formData.getOrDefault("PolicyArn")
  valid_604689 = validateParameter(valid_604689, JString, required = true,
                                 default = nil)
  if valid_604689 != nil:
    section.add "PolicyArn", valid_604689
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604690: Call_PostDetachUserPolicy_604676; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604690.validator(path, query, header, formData, body)
  let scheme = call_604690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604690.url(scheme.get, call_604690.host, call_604690.base,
                         call_604690.route, valid.getOrDefault("path"))
  result = hook(call_604690, url, valid)

proc call*(call_604691: Call_PostDetachUserPolicy_604676; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604692 = newJObject()
  var formData_604693 = newJObject()
  add(formData_604693, "UserName", newJString(UserName))
  add(formData_604693, "PolicyArn", newJString(PolicyArn))
  add(query_604692, "Action", newJString(Action))
  add(query_604692, "Version", newJString(Version))
  result = call_604691.call(nil, query_604692, nil, formData_604693, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_604676(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_604677, base: "/",
    url: url_PostDetachUserPolicy_604678, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_604659 = ref object of OpenApiRestCall_602433
proc url_GetDetachUserPolicy_604661(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachUserPolicy_604660(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604662 = query.getOrDefault("PolicyArn")
  valid_604662 = validateParameter(valid_604662, JString, required = true,
                                 default = nil)
  if valid_604662 != nil:
    section.add "PolicyArn", valid_604662
  var valid_604663 = query.getOrDefault("UserName")
  valid_604663 = validateParameter(valid_604663, JString, required = true,
                                 default = nil)
  if valid_604663 != nil:
    section.add "UserName", valid_604663
  var valid_604664 = query.getOrDefault("Action")
  valid_604664 = validateParameter(valid_604664, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_604664 != nil:
    section.add "Action", valid_604664
  var valid_604665 = query.getOrDefault("Version")
  valid_604665 = validateParameter(valid_604665, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604665 != nil:
    section.add "Version", valid_604665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604666 = header.getOrDefault("X-Amz-Date")
  valid_604666 = validateParameter(valid_604666, JString, required = false,
                                 default = nil)
  if valid_604666 != nil:
    section.add "X-Amz-Date", valid_604666
  var valid_604667 = header.getOrDefault("X-Amz-Security-Token")
  valid_604667 = validateParameter(valid_604667, JString, required = false,
                                 default = nil)
  if valid_604667 != nil:
    section.add "X-Amz-Security-Token", valid_604667
  var valid_604668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604668 = validateParameter(valid_604668, JString, required = false,
                                 default = nil)
  if valid_604668 != nil:
    section.add "X-Amz-Content-Sha256", valid_604668
  var valid_604669 = header.getOrDefault("X-Amz-Algorithm")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Algorithm", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Signature")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Signature", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-SignedHeaders", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-Credential")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-Credential", valid_604672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604673: Call_GetDetachUserPolicy_604659; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604673.validator(path, query, header, formData, body)
  let scheme = call_604673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604673.url(scheme.get, call_604673.host, call_604673.base,
                         call_604673.route, valid.getOrDefault("path"))
  result = hook(call_604673, url, valid)

proc call*(call_604674: Call_GetDetachUserPolicy_604659; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604675 = newJObject()
  add(query_604675, "PolicyArn", newJString(PolicyArn))
  add(query_604675, "UserName", newJString(UserName))
  add(query_604675, "Action", newJString(Action))
  add(query_604675, "Version", newJString(Version))
  result = call_604674.call(nil, query_604675, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_604659(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_604660, base: "/",
    url: url_GetDetachUserPolicy_604661, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_604713 = ref object of OpenApiRestCall_602433
proc url_PostEnableMFADevice_604715(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostEnableMFADevice_604714(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604716 = query.getOrDefault("Action")
  valid_604716 = validateParameter(valid_604716, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_604716 != nil:
    section.add "Action", valid_604716
  var valid_604717 = query.getOrDefault("Version")
  valid_604717 = validateParameter(valid_604717, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604717 != nil:
    section.add "Version", valid_604717
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604718 = header.getOrDefault("X-Amz-Date")
  valid_604718 = validateParameter(valid_604718, JString, required = false,
                                 default = nil)
  if valid_604718 != nil:
    section.add "X-Amz-Date", valid_604718
  var valid_604719 = header.getOrDefault("X-Amz-Security-Token")
  valid_604719 = validateParameter(valid_604719, JString, required = false,
                                 default = nil)
  if valid_604719 != nil:
    section.add "X-Amz-Security-Token", valid_604719
  var valid_604720 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604720 = validateParameter(valid_604720, JString, required = false,
                                 default = nil)
  if valid_604720 != nil:
    section.add "X-Amz-Content-Sha256", valid_604720
  var valid_604721 = header.getOrDefault("X-Amz-Algorithm")
  valid_604721 = validateParameter(valid_604721, JString, required = false,
                                 default = nil)
  if valid_604721 != nil:
    section.add "X-Amz-Algorithm", valid_604721
  var valid_604722 = header.getOrDefault("X-Amz-Signature")
  valid_604722 = validateParameter(valid_604722, JString, required = false,
                                 default = nil)
  if valid_604722 != nil:
    section.add "X-Amz-Signature", valid_604722
  var valid_604723 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604723 = validateParameter(valid_604723, JString, required = false,
                                 default = nil)
  if valid_604723 != nil:
    section.add "X-Amz-SignedHeaders", valid_604723
  var valid_604724 = header.getOrDefault("X-Amz-Credential")
  valid_604724 = validateParameter(valid_604724, JString, required = false,
                                 default = nil)
  if valid_604724 != nil:
    section.add "X-Amz-Credential", valid_604724
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_604725 = formData.getOrDefault("SerialNumber")
  valid_604725 = validateParameter(valid_604725, JString, required = true,
                                 default = nil)
  if valid_604725 != nil:
    section.add "SerialNumber", valid_604725
  var valid_604726 = formData.getOrDefault("UserName")
  valid_604726 = validateParameter(valid_604726, JString, required = true,
                                 default = nil)
  if valid_604726 != nil:
    section.add "UserName", valid_604726
  var valid_604727 = formData.getOrDefault("AuthenticationCode2")
  valid_604727 = validateParameter(valid_604727, JString, required = true,
                                 default = nil)
  if valid_604727 != nil:
    section.add "AuthenticationCode2", valid_604727
  var valid_604728 = formData.getOrDefault("AuthenticationCode1")
  valid_604728 = validateParameter(valid_604728, JString, required = true,
                                 default = nil)
  if valid_604728 != nil:
    section.add "AuthenticationCode1", valid_604728
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604729: Call_PostEnableMFADevice_604713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_604729.validator(path, query, header, formData, body)
  let scheme = call_604729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604729.url(scheme.get, call_604729.host, call_604729.base,
                         call_604729.route, valid.getOrDefault("path"))
  result = hook(call_604729, url, valid)

proc call*(call_604730: Call_PostEnableMFADevice_604713; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_604731 = newJObject()
  var formData_604732 = newJObject()
  add(formData_604732, "SerialNumber", newJString(SerialNumber))
  add(formData_604732, "UserName", newJString(UserName))
  add(formData_604732, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_604731, "Action", newJString(Action))
  add(formData_604732, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_604731, "Version", newJString(Version))
  result = call_604730.call(nil, query_604731, nil, formData_604732, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_604713(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_604714, base: "/",
    url: url_PostEnableMFADevice_604715, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_604694 = ref object of OpenApiRestCall_602433
proc url_GetEnableMFADevice_604696(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetEnableMFADevice_604695(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_604697 = query.getOrDefault("SerialNumber")
  valid_604697 = validateParameter(valid_604697, JString, required = true,
                                 default = nil)
  if valid_604697 != nil:
    section.add "SerialNumber", valid_604697
  var valid_604698 = query.getOrDefault("AuthenticationCode2")
  valid_604698 = validateParameter(valid_604698, JString, required = true,
                                 default = nil)
  if valid_604698 != nil:
    section.add "AuthenticationCode2", valid_604698
  var valid_604699 = query.getOrDefault("AuthenticationCode1")
  valid_604699 = validateParameter(valid_604699, JString, required = true,
                                 default = nil)
  if valid_604699 != nil:
    section.add "AuthenticationCode1", valid_604699
  var valid_604700 = query.getOrDefault("UserName")
  valid_604700 = validateParameter(valid_604700, JString, required = true,
                                 default = nil)
  if valid_604700 != nil:
    section.add "UserName", valid_604700
  var valid_604701 = query.getOrDefault("Action")
  valid_604701 = validateParameter(valid_604701, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_604701 != nil:
    section.add "Action", valid_604701
  var valid_604702 = query.getOrDefault("Version")
  valid_604702 = validateParameter(valid_604702, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604702 != nil:
    section.add "Version", valid_604702
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604703 = header.getOrDefault("X-Amz-Date")
  valid_604703 = validateParameter(valid_604703, JString, required = false,
                                 default = nil)
  if valid_604703 != nil:
    section.add "X-Amz-Date", valid_604703
  var valid_604704 = header.getOrDefault("X-Amz-Security-Token")
  valid_604704 = validateParameter(valid_604704, JString, required = false,
                                 default = nil)
  if valid_604704 != nil:
    section.add "X-Amz-Security-Token", valid_604704
  var valid_604705 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604705 = validateParameter(valid_604705, JString, required = false,
                                 default = nil)
  if valid_604705 != nil:
    section.add "X-Amz-Content-Sha256", valid_604705
  var valid_604706 = header.getOrDefault("X-Amz-Algorithm")
  valid_604706 = validateParameter(valid_604706, JString, required = false,
                                 default = nil)
  if valid_604706 != nil:
    section.add "X-Amz-Algorithm", valid_604706
  var valid_604707 = header.getOrDefault("X-Amz-Signature")
  valid_604707 = validateParameter(valid_604707, JString, required = false,
                                 default = nil)
  if valid_604707 != nil:
    section.add "X-Amz-Signature", valid_604707
  var valid_604708 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604708 = validateParameter(valid_604708, JString, required = false,
                                 default = nil)
  if valid_604708 != nil:
    section.add "X-Amz-SignedHeaders", valid_604708
  var valid_604709 = header.getOrDefault("X-Amz-Credential")
  valid_604709 = validateParameter(valid_604709, JString, required = false,
                                 default = nil)
  if valid_604709 != nil:
    section.add "X-Amz-Credential", valid_604709
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604710: Call_GetEnableMFADevice_604694; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_604710.validator(path, query, header, formData, body)
  let scheme = call_604710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604710.url(scheme.get, call_604710.host, call_604710.base,
                         call_604710.route, valid.getOrDefault("path"))
  result = hook(call_604710, url, valid)

proc call*(call_604711: Call_GetEnableMFADevice_604694; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604712 = newJObject()
  add(query_604712, "SerialNumber", newJString(SerialNumber))
  add(query_604712, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_604712, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_604712, "UserName", newJString(UserName))
  add(query_604712, "Action", newJString(Action))
  add(query_604712, "Version", newJString(Version))
  result = call_604711.call(nil, query_604712, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_604694(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_604695,
    base: "/", url: url_GetEnableMFADevice_604696,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_604748 = ref object of OpenApiRestCall_602433
proc url_PostGenerateCredentialReport_604750(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateCredentialReport_604749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604751 = query.getOrDefault("Action")
  valid_604751 = validateParameter(valid_604751, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_604751 != nil:
    section.add "Action", valid_604751
  var valid_604752 = query.getOrDefault("Version")
  valid_604752 = validateParameter(valid_604752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604752 != nil:
    section.add "Version", valid_604752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604753 = header.getOrDefault("X-Amz-Date")
  valid_604753 = validateParameter(valid_604753, JString, required = false,
                                 default = nil)
  if valid_604753 != nil:
    section.add "X-Amz-Date", valid_604753
  var valid_604754 = header.getOrDefault("X-Amz-Security-Token")
  valid_604754 = validateParameter(valid_604754, JString, required = false,
                                 default = nil)
  if valid_604754 != nil:
    section.add "X-Amz-Security-Token", valid_604754
  var valid_604755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604755 = validateParameter(valid_604755, JString, required = false,
                                 default = nil)
  if valid_604755 != nil:
    section.add "X-Amz-Content-Sha256", valid_604755
  var valid_604756 = header.getOrDefault("X-Amz-Algorithm")
  valid_604756 = validateParameter(valid_604756, JString, required = false,
                                 default = nil)
  if valid_604756 != nil:
    section.add "X-Amz-Algorithm", valid_604756
  var valid_604757 = header.getOrDefault("X-Amz-Signature")
  valid_604757 = validateParameter(valid_604757, JString, required = false,
                                 default = nil)
  if valid_604757 != nil:
    section.add "X-Amz-Signature", valid_604757
  var valid_604758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604758 = validateParameter(valid_604758, JString, required = false,
                                 default = nil)
  if valid_604758 != nil:
    section.add "X-Amz-SignedHeaders", valid_604758
  var valid_604759 = header.getOrDefault("X-Amz-Credential")
  valid_604759 = validateParameter(valid_604759, JString, required = false,
                                 default = nil)
  if valid_604759 != nil:
    section.add "X-Amz-Credential", valid_604759
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604760: Call_PostGenerateCredentialReport_604748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604760.validator(path, query, header, formData, body)
  let scheme = call_604760.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604760.url(scheme.get, call_604760.host, call_604760.base,
                         call_604760.route, valid.getOrDefault("path"))
  result = hook(call_604760, url, valid)

proc call*(call_604761: Call_PostGenerateCredentialReport_604748;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604762 = newJObject()
  add(query_604762, "Action", newJString(Action))
  add(query_604762, "Version", newJString(Version))
  result = call_604761.call(nil, query_604762, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_604748(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_604749, base: "/",
    url: url_PostGenerateCredentialReport_604750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_604733 = ref object of OpenApiRestCall_602433
proc url_GetGenerateCredentialReport_604735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateCredentialReport_604734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604736 = query.getOrDefault("Action")
  valid_604736 = validateParameter(valid_604736, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_604736 != nil:
    section.add "Action", valid_604736
  var valid_604737 = query.getOrDefault("Version")
  valid_604737 = validateParameter(valid_604737, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604737 != nil:
    section.add "Version", valid_604737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604738 = header.getOrDefault("X-Amz-Date")
  valid_604738 = validateParameter(valid_604738, JString, required = false,
                                 default = nil)
  if valid_604738 != nil:
    section.add "X-Amz-Date", valid_604738
  var valid_604739 = header.getOrDefault("X-Amz-Security-Token")
  valid_604739 = validateParameter(valid_604739, JString, required = false,
                                 default = nil)
  if valid_604739 != nil:
    section.add "X-Amz-Security-Token", valid_604739
  var valid_604740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604740 = validateParameter(valid_604740, JString, required = false,
                                 default = nil)
  if valid_604740 != nil:
    section.add "X-Amz-Content-Sha256", valid_604740
  var valid_604741 = header.getOrDefault("X-Amz-Algorithm")
  valid_604741 = validateParameter(valid_604741, JString, required = false,
                                 default = nil)
  if valid_604741 != nil:
    section.add "X-Amz-Algorithm", valid_604741
  var valid_604742 = header.getOrDefault("X-Amz-Signature")
  valid_604742 = validateParameter(valid_604742, JString, required = false,
                                 default = nil)
  if valid_604742 != nil:
    section.add "X-Amz-Signature", valid_604742
  var valid_604743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604743 = validateParameter(valid_604743, JString, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "X-Amz-SignedHeaders", valid_604743
  var valid_604744 = header.getOrDefault("X-Amz-Credential")
  valid_604744 = validateParameter(valid_604744, JString, required = false,
                                 default = nil)
  if valid_604744 != nil:
    section.add "X-Amz-Credential", valid_604744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604745: Call_GetGenerateCredentialReport_604733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604745.validator(path, query, header, formData, body)
  let scheme = call_604745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604745.url(scheme.get, call_604745.host, call_604745.base,
                         call_604745.route, valid.getOrDefault("path"))
  result = hook(call_604745, url, valid)

proc call*(call_604746: Call_GetGenerateCredentialReport_604733;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604747 = newJObject()
  add(query_604747, "Action", newJString(Action))
  add(query_604747, "Version", newJString(Version))
  result = call_604746.call(nil, query_604747, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_604733(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_604734, base: "/",
    url: url_GetGenerateCredentialReport_604735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_604780 = ref object of OpenApiRestCall_602433
proc url_PostGenerateOrganizationsAccessReport_604782(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateOrganizationsAccessReport_604781(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604783 = query.getOrDefault("Action")
  valid_604783 = validateParameter(valid_604783, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_604783 != nil:
    section.add "Action", valid_604783
  var valid_604784 = query.getOrDefault("Version")
  valid_604784 = validateParameter(valid_604784, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604784 != nil:
    section.add "Version", valid_604784
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604785 = header.getOrDefault("X-Amz-Date")
  valid_604785 = validateParameter(valid_604785, JString, required = false,
                                 default = nil)
  if valid_604785 != nil:
    section.add "X-Amz-Date", valid_604785
  var valid_604786 = header.getOrDefault("X-Amz-Security-Token")
  valid_604786 = validateParameter(valid_604786, JString, required = false,
                                 default = nil)
  if valid_604786 != nil:
    section.add "X-Amz-Security-Token", valid_604786
  var valid_604787 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604787 = validateParameter(valid_604787, JString, required = false,
                                 default = nil)
  if valid_604787 != nil:
    section.add "X-Amz-Content-Sha256", valid_604787
  var valid_604788 = header.getOrDefault("X-Amz-Algorithm")
  valid_604788 = validateParameter(valid_604788, JString, required = false,
                                 default = nil)
  if valid_604788 != nil:
    section.add "X-Amz-Algorithm", valid_604788
  var valid_604789 = header.getOrDefault("X-Amz-Signature")
  valid_604789 = validateParameter(valid_604789, JString, required = false,
                                 default = nil)
  if valid_604789 != nil:
    section.add "X-Amz-Signature", valid_604789
  var valid_604790 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604790 = validateParameter(valid_604790, JString, required = false,
                                 default = nil)
  if valid_604790 != nil:
    section.add "X-Amz-SignedHeaders", valid_604790
  var valid_604791 = header.getOrDefault("X-Amz-Credential")
  valid_604791 = validateParameter(valid_604791, JString, required = false,
                                 default = nil)
  if valid_604791 != nil:
    section.add "X-Amz-Credential", valid_604791
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_604792 = formData.getOrDefault("OrganizationsPolicyId")
  valid_604792 = validateParameter(valid_604792, JString, required = false,
                                 default = nil)
  if valid_604792 != nil:
    section.add "OrganizationsPolicyId", valid_604792
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_604793 = formData.getOrDefault("EntityPath")
  valid_604793 = validateParameter(valid_604793, JString, required = true,
                                 default = nil)
  if valid_604793 != nil:
    section.add "EntityPath", valid_604793
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604794: Call_PostGenerateOrganizationsAccessReport_604780;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604794.validator(path, query, header, formData, body)
  let scheme = call_604794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604794.url(scheme.get, call_604794.host, call_604794.base,
                         call_604794.route, valid.getOrDefault("path"))
  result = hook(call_604794, url, valid)

proc call*(call_604795: Call_PostGenerateOrganizationsAccessReport_604780;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   Version: string (required)
  var query_604796 = newJObject()
  var formData_604797 = newJObject()
  add(formData_604797, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_604796, "Action", newJString(Action))
  add(formData_604797, "EntityPath", newJString(EntityPath))
  add(query_604796, "Version", newJString(Version))
  result = call_604795.call(nil, query_604796, nil, formData_604797, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_604780(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_604781, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_604782,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_604763 = ref object of OpenApiRestCall_602433
proc url_GetGenerateOrganizationsAccessReport_604765(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateOrganizationsAccessReport_604764(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_604766 = query.getOrDefault("EntityPath")
  valid_604766 = validateParameter(valid_604766, JString, required = true,
                                 default = nil)
  if valid_604766 != nil:
    section.add "EntityPath", valid_604766
  var valid_604767 = query.getOrDefault("OrganizationsPolicyId")
  valid_604767 = validateParameter(valid_604767, JString, required = false,
                                 default = nil)
  if valid_604767 != nil:
    section.add "OrganizationsPolicyId", valid_604767
  var valid_604768 = query.getOrDefault("Action")
  valid_604768 = validateParameter(valid_604768, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_604768 != nil:
    section.add "Action", valid_604768
  var valid_604769 = query.getOrDefault("Version")
  valid_604769 = validateParameter(valid_604769, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604769 != nil:
    section.add "Version", valid_604769
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604770 = header.getOrDefault("X-Amz-Date")
  valid_604770 = validateParameter(valid_604770, JString, required = false,
                                 default = nil)
  if valid_604770 != nil:
    section.add "X-Amz-Date", valid_604770
  var valid_604771 = header.getOrDefault("X-Amz-Security-Token")
  valid_604771 = validateParameter(valid_604771, JString, required = false,
                                 default = nil)
  if valid_604771 != nil:
    section.add "X-Amz-Security-Token", valid_604771
  var valid_604772 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "X-Amz-Content-Sha256", valid_604772
  var valid_604773 = header.getOrDefault("X-Amz-Algorithm")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "X-Amz-Algorithm", valid_604773
  var valid_604774 = header.getOrDefault("X-Amz-Signature")
  valid_604774 = validateParameter(valid_604774, JString, required = false,
                                 default = nil)
  if valid_604774 != nil:
    section.add "X-Amz-Signature", valid_604774
  var valid_604775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-SignedHeaders", valid_604775
  var valid_604776 = header.getOrDefault("X-Amz-Credential")
  valid_604776 = validateParameter(valid_604776, JString, required = false,
                                 default = nil)
  if valid_604776 != nil:
    section.add "X-Amz-Credential", valid_604776
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604777: Call_GetGenerateOrganizationsAccessReport_604763;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604777.validator(path, query, header, formData, body)
  let scheme = call_604777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604777.url(scheme.get, call_604777.host, call_604777.base,
                         call_604777.route, valid.getOrDefault("path"))
  result = hook(call_604777, url, valid)

proc call*(call_604778: Call_GetGenerateOrganizationsAccessReport_604763;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604779 = newJObject()
  add(query_604779, "EntityPath", newJString(EntityPath))
  add(query_604779, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_604779, "Action", newJString(Action))
  add(query_604779, "Version", newJString(Version))
  result = call_604778.call(nil, query_604779, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_604763(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_604764, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_604765,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_604814 = ref object of OpenApiRestCall_602433
proc url_PostGenerateServiceLastAccessedDetails_604816(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateServiceLastAccessedDetails_604815(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604817 = query.getOrDefault("Action")
  valid_604817 = validateParameter(valid_604817, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_604817 != nil:
    section.add "Action", valid_604817
  var valid_604818 = query.getOrDefault("Version")
  valid_604818 = validateParameter(valid_604818, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604818 != nil:
    section.add "Version", valid_604818
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604819 = header.getOrDefault("X-Amz-Date")
  valid_604819 = validateParameter(valid_604819, JString, required = false,
                                 default = nil)
  if valid_604819 != nil:
    section.add "X-Amz-Date", valid_604819
  var valid_604820 = header.getOrDefault("X-Amz-Security-Token")
  valid_604820 = validateParameter(valid_604820, JString, required = false,
                                 default = nil)
  if valid_604820 != nil:
    section.add "X-Amz-Security-Token", valid_604820
  var valid_604821 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604821 = validateParameter(valid_604821, JString, required = false,
                                 default = nil)
  if valid_604821 != nil:
    section.add "X-Amz-Content-Sha256", valid_604821
  var valid_604822 = header.getOrDefault("X-Amz-Algorithm")
  valid_604822 = validateParameter(valid_604822, JString, required = false,
                                 default = nil)
  if valid_604822 != nil:
    section.add "X-Amz-Algorithm", valid_604822
  var valid_604823 = header.getOrDefault("X-Amz-Signature")
  valid_604823 = validateParameter(valid_604823, JString, required = false,
                                 default = nil)
  if valid_604823 != nil:
    section.add "X-Amz-Signature", valid_604823
  var valid_604824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604824 = validateParameter(valid_604824, JString, required = false,
                                 default = nil)
  if valid_604824 != nil:
    section.add "X-Amz-SignedHeaders", valid_604824
  var valid_604825 = header.getOrDefault("X-Amz-Credential")
  valid_604825 = validateParameter(valid_604825, JString, required = false,
                                 default = nil)
  if valid_604825 != nil:
    section.add "X-Amz-Credential", valid_604825
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_604826 = formData.getOrDefault("Arn")
  valid_604826 = validateParameter(valid_604826, JString, required = true,
                                 default = nil)
  if valid_604826 != nil:
    section.add "Arn", valid_604826
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604827: Call_PostGenerateServiceLastAccessedDetails_604814;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604827.validator(path, query, header, formData, body)
  let scheme = call_604827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604827.url(scheme.get, call_604827.host, call_604827.base,
                         call_604827.route, valid.getOrDefault("path"))
  result = hook(call_604827, url, valid)

proc call*(call_604828: Call_PostGenerateServiceLastAccessedDetails_604814;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604829 = newJObject()
  var formData_604830 = newJObject()
  add(formData_604830, "Arn", newJString(Arn))
  add(query_604829, "Action", newJString(Action))
  add(query_604829, "Version", newJString(Version))
  result = call_604828.call(nil, query_604829, nil, formData_604830, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_604814(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_604815, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_604816,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_604798 = ref object of OpenApiRestCall_602433
proc url_GetGenerateServiceLastAccessedDetails_604800(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateServiceLastAccessedDetails_604799(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604801 = query.getOrDefault("Action")
  valid_604801 = validateParameter(valid_604801, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_604801 != nil:
    section.add "Action", valid_604801
  var valid_604802 = query.getOrDefault("Arn")
  valid_604802 = validateParameter(valid_604802, JString, required = true,
                                 default = nil)
  if valid_604802 != nil:
    section.add "Arn", valid_604802
  var valid_604803 = query.getOrDefault("Version")
  valid_604803 = validateParameter(valid_604803, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604803 != nil:
    section.add "Version", valid_604803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604804 = header.getOrDefault("X-Amz-Date")
  valid_604804 = validateParameter(valid_604804, JString, required = false,
                                 default = nil)
  if valid_604804 != nil:
    section.add "X-Amz-Date", valid_604804
  var valid_604805 = header.getOrDefault("X-Amz-Security-Token")
  valid_604805 = validateParameter(valid_604805, JString, required = false,
                                 default = nil)
  if valid_604805 != nil:
    section.add "X-Amz-Security-Token", valid_604805
  var valid_604806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604806 = validateParameter(valid_604806, JString, required = false,
                                 default = nil)
  if valid_604806 != nil:
    section.add "X-Amz-Content-Sha256", valid_604806
  var valid_604807 = header.getOrDefault("X-Amz-Algorithm")
  valid_604807 = validateParameter(valid_604807, JString, required = false,
                                 default = nil)
  if valid_604807 != nil:
    section.add "X-Amz-Algorithm", valid_604807
  var valid_604808 = header.getOrDefault("X-Amz-Signature")
  valid_604808 = validateParameter(valid_604808, JString, required = false,
                                 default = nil)
  if valid_604808 != nil:
    section.add "X-Amz-Signature", valid_604808
  var valid_604809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604809 = validateParameter(valid_604809, JString, required = false,
                                 default = nil)
  if valid_604809 != nil:
    section.add "X-Amz-SignedHeaders", valid_604809
  var valid_604810 = header.getOrDefault("X-Amz-Credential")
  valid_604810 = validateParameter(valid_604810, JString, required = false,
                                 default = nil)
  if valid_604810 != nil:
    section.add "X-Amz-Credential", valid_604810
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604811: Call_GetGenerateServiceLastAccessedDetails_604798;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604811.validator(path, query, header, formData, body)
  let scheme = call_604811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604811.url(scheme.get, call_604811.host, call_604811.base,
                         call_604811.route, valid.getOrDefault("path"))
  result = hook(call_604811, url, valid)

proc call*(call_604812: Call_GetGenerateServiceLastAccessedDetails_604798;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_604813 = newJObject()
  add(query_604813, "Action", newJString(Action))
  add(query_604813, "Arn", newJString(Arn))
  add(query_604813, "Version", newJString(Version))
  result = call_604812.call(nil, query_604813, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_604798(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_604799, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_604800,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_604847 = ref object of OpenApiRestCall_602433
proc url_PostGetAccessKeyLastUsed_604849(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccessKeyLastUsed_604848(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604850 = query.getOrDefault("Action")
  valid_604850 = validateParameter(valid_604850, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_604850 != nil:
    section.add "Action", valid_604850
  var valid_604851 = query.getOrDefault("Version")
  valid_604851 = validateParameter(valid_604851, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604851 != nil:
    section.add "Version", valid_604851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604852 = header.getOrDefault("X-Amz-Date")
  valid_604852 = validateParameter(valid_604852, JString, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "X-Amz-Date", valid_604852
  var valid_604853 = header.getOrDefault("X-Amz-Security-Token")
  valid_604853 = validateParameter(valid_604853, JString, required = false,
                                 default = nil)
  if valid_604853 != nil:
    section.add "X-Amz-Security-Token", valid_604853
  var valid_604854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604854 = validateParameter(valid_604854, JString, required = false,
                                 default = nil)
  if valid_604854 != nil:
    section.add "X-Amz-Content-Sha256", valid_604854
  var valid_604855 = header.getOrDefault("X-Amz-Algorithm")
  valid_604855 = validateParameter(valid_604855, JString, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "X-Amz-Algorithm", valid_604855
  var valid_604856 = header.getOrDefault("X-Amz-Signature")
  valid_604856 = validateParameter(valid_604856, JString, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "X-Amz-Signature", valid_604856
  var valid_604857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604857 = validateParameter(valid_604857, JString, required = false,
                                 default = nil)
  if valid_604857 != nil:
    section.add "X-Amz-SignedHeaders", valid_604857
  var valid_604858 = header.getOrDefault("X-Amz-Credential")
  valid_604858 = validateParameter(valid_604858, JString, required = false,
                                 default = nil)
  if valid_604858 != nil:
    section.add "X-Amz-Credential", valid_604858
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_604859 = formData.getOrDefault("AccessKeyId")
  valid_604859 = validateParameter(valid_604859, JString, required = true,
                                 default = nil)
  if valid_604859 != nil:
    section.add "AccessKeyId", valid_604859
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604860: Call_PostGetAccessKeyLastUsed_604847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_604860.validator(path, query, header, formData, body)
  let scheme = call_604860.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604860.url(scheme.get, call_604860.host, call_604860.base,
                         call_604860.route, valid.getOrDefault("path"))
  result = hook(call_604860, url, valid)

proc call*(call_604861: Call_PostGetAccessKeyLastUsed_604847; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604862 = newJObject()
  var formData_604863 = newJObject()
  add(formData_604863, "AccessKeyId", newJString(AccessKeyId))
  add(query_604862, "Action", newJString(Action))
  add(query_604862, "Version", newJString(Version))
  result = call_604861.call(nil, query_604862, nil, formData_604863, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_604847(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_604848, base: "/",
    url: url_PostGetAccessKeyLastUsed_604849, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_604831 = ref object of OpenApiRestCall_602433
proc url_GetGetAccessKeyLastUsed_604833(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccessKeyLastUsed_604832(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_604834 = query.getOrDefault("AccessKeyId")
  valid_604834 = validateParameter(valid_604834, JString, required = true,
                                 default = nil)
  if valid_604834 != nil:
    section.add "AccessKeyId", valid_604834
  var valid_604835 = query.getOrDefault("Action")
  valid_604835 = validateParameter(valid_604835, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_604835 != nil:
    section.add "Action", valid_604835
  var valid_604836 = query.getOrDefault("Version")
  valid_604836 = validateParameter(valid_604836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604836 != nil:
    section.add "Version", valid_604836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604837 = header.getOrDefault("X-Amz-Date")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "X-Amz-Date", valid_604837
  var valid_604838 = header.getOrDefault("X-Amz-Security-Token")
  valid_604838 = validateParameter(valid_604838, JString, required = false,
                                 default = nil)
  if valid_604838 != nil:
    section.add "X-Amz-Security-Token", valid_604838
  var valid_604839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604839 = validateParameter(valid_604839, JString, required = false,
                                 default = nil)
  if valid_604839 != nil:
    section.add "X-Amz-Content-Sha256", valid_604839
  var valid_604840 = header.getOrDefault("X-Amz-Algorithm")
  valid_604840 = validateParameter(valid_604840, JString, required = false,
                                 default = nil)
  if valid_604840 != nil:
    section.add "X-Amz-Algorithm", valid_604840
  var valid_604841 = header.getOrDefault("X-Amz-Signature")
  valid_604841 = validateParameter(valid_604841, JString, required = false,
                                 default = nil)
  if valid_604841 != nil:
    section.add "X-Amz-Signature", valid_604841
  var valid_604842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604842 = validateParameter(valid_604842, JString, required = false,
                                 default = nil)
  if valid_604842 != nil:
    section.add "X-Amz-SignedHeaders", valid_604842
  var valid_604843 = header.getOrDefault("X-Amz-Credential")
  valid_604843 = validateParameter(valid_604843, JString, required = false,
                                 default = nil)
  if valid_604843 != nil:
    section.add "X-Amz-Credential", valid_604843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604844: Call_GetGetAccessKeyLastUsed_604831; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_604844.validator(path, query, header, formData, body)
  let scheme = call_604844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604844.url(scheme.get, call_604844.host, call_604844.base,
                         call_604844.route, valid.getOrDefault("path"))
  result = hook(call_604844, url, valid)

proc call*(call_604845: Call_GetGetAccessKeyLastUsed_604831; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604846 = newJObject()
  add(query_604846, "AccessKeyId", newJString(AccessKeyId))
  add(query_604846, "Action", newJString(Action))
  add(query_604846, "Version", newJString(Version))
  result = call_604845.call(nil, query_604846, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_604831(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_604832, base: "/",
    url: url_GetGetAccessKeyLastUsed_604833, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_604882 = ref object of OpenApiRestCall_602433
proc url_PostGetAccountAuthorizationDetails_604884(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountAuthorizationDetails_604883(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604885 = query.getOrDefault("Action")
  valid_604885 = validateParameter(valid_604885, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_604885 != nil:
    section.add "Action", valid_604885
  var valid_604886 = query.getOrDefault("Version")
  valid_604886 = validateParameter(valid_604886, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604886 != nil:
    section.add "Version", valid_604886
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604887 = header.getOrDefault("X-Amz-Date")
  valid_604887 = validateParameter(valid_604887, JString, required = false,
                                 default = nil)
  if valid_604887 != nil:
    section.add "X-Amz-Date", valid_604887
  var valid_604888 = header.getOrDefault("X-Amz-Security-Token")
  valid_604888 = validateParameter(valid_604888, JString, required = false,
                                 default = nil)
  if valid_604888 != nil:
    section.add "X-Amz-Security-Token", valid_604888
  var valid_604889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "X-Amz-Content-Sha256", valid_604889
  var valid_604890 = header.getOrDefault("X-Amz-Algorithm")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "X-Amz-Algorithm", valid_604890
  var valid_604891 = header.getOrDefault("X-Amz-Signature")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "X-Amz-Signature", valid_604891
  var valid_604892 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604892 = validateParameter(valid_604892, JString, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "X-Amz-SignedHeaders", valid_604892
  var valid_604893 = header.getOrDefault("X-Amz-Credential")
  valid_604893 = validateParameter(valid_604893, JString, required = false,
                                 default = nil)
  if valid_604893 != nil:
    section.add "X-Amz-Credential", valid_604893
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604894 = formData.getOrDefault("Filter")
  valid_604894 = validateParameter(valid_604894, JArray, required = false,
                                 default = nil)
  if valid_604894 != nil:
    section.add "Filter", valid_604894
  var valid_604895 = formData.getOrDefault("Marker")
  valid_604895 = validateParameter(valid_604895, JString, required = false,
                                 default = nil)
  if valid_604895 != nil:
    section.add "Marker", valid_604895
  var valid_604896 = formData.getOrDefault("MaxItems")
  valid_604896 = validateParameter(valid_604896, JInt, required = false, default = nil)
  if valid_604896 != nil:
    section.add "MaxItems", valid_604896
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604897: Call_PostGetAccountAuthorizationDetails_604882;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604897.validator(path, query, header, formData, body)
  let scheme = call_604897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604897.url(scheme.get, call_604897.host, call_604897.base,
                         call_604897.route, valid.getOrDefault("path"))
  result = hook(call_604897, url, valid)

proc call*(call_604898: Call_PostGetAccountAuthorizationDetails_604882;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "GetAccountAuthorizationDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604899 = newJObject()
  var formData_604900 = newJObject()
  if Filter != nil:
    formData_604900.add "Filter", Filter
  add(formData_604900, "Marker", newJString(Marker))
  add(query_604899, "Action", newJString(Action))
  add(formData_604900, "MaxItems", newJInt(MaxItems))
  add(query_604899, "Version", newJString(Version))
  result = call_604898.call(nil, query_604899, nil, formData_604900, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_604882(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_604883, base: "/",
    url: url_PostGetAccountAuthorizationDetails_604884,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_604864 = ref object of OpenApiRestCall_602433
proc url_GetGetAccountAuthorizationDetails_604866(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountAuthorizationDetails_604865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604867 = query.getOrDefault("Filter")
  valid_604867 = validateParameter(valid_604867, JArray, required = false,
                                 default = nil)
  if valid_604867 != nil:
    section.add "Filter", valid_604867
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604868 = query.getOrDefault("Action")
  valid_604868 = validateParameter(valid_604868, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_604868 != nil:
    section.add "Action", valid_604868
  var valid_604869 = query.getOrDefault("Marker")
  valid_604869 = validateParameter(valid_604869, JString, required = false,
                                 default = nil)
  if valid_604869 != nil:
    section.add "Marker", valid_604869
  var valid_604870 = query.getOrDefault("MaxItems")
  valid_604870 = validateParameter(valid_604870, JInt, required = false, default = nil)
  if valid_604870 != nil:
    section.add "MaxItems", valid_604870
  var valid_604871 = query.getOrDefault("Version")
  valid_604871 = validateParameter(valid_604871, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604871 != nil:
    section.add "Version", valid_604871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604872 = header.getOrDefault("X-Amz-Date")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Date", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-Security-Token")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-Security-Token", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-Content-Sha256", valid_604874
  var valid_604875 = header.getOrDefault("X-Amz-Algorithm")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-Algorithm", valid_604875
  var valid_604876 = header.getOrDefault("X-Amz-Signature")
  valid_604876 = validateParameter(valid_604876, JString, required = false,
                                 default = nil)
  if valid_604876 != nil:
    section.add "X-Amz-Signature", valid_604876
  var valid_604877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604877 = validateParameter(valid_604877, JString, required = false,
                                 default = nil)
  if valid_604877 != nil:
    section.add "X-Amz-SignedHeaders", valid_604877
  var valid_604878 = header.getOrDefault("X-Amz-Credential")
  valid_604878 = validateParameter(valid_604878, JString, required = false,
                                 default = nil)
  if valid_604878 != nil:
    section.add "X-Amz-Credential", valid_604878
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604879: Call_GetGetAccountAuthorizationDetails_604864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604879.validator(path, query, header, formData, body)
  let scheme = call_604879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604879.url(scheme.get, call_604879.host, call_604879.base,
                         call_604879.route, valid.getOrDefault("path"))
  result = hook(call_604879, url, valid)

proc call*(call_604880: Call_GetGetAccountAuthorizationDetails_604864;
          Filter: JsonNode = nil; Action: string = "GetAccountAuthorizationDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604881 = newJObject()
  if Filter != nil:
    query_604881.add "Filter", Filter
  add(query_604881, "Action", newJString(Action))
  add(query_604881, "Marker", newJString(Marker))
  add(query_604881, "MaxItems", newJInt(MaxItems))
  add(query_604881, "Version", newJString(Version))
  result = call_604880.call(nil, query_604881, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_604864(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_604865, base: "/",
    url: url_GetGetAccountAuthorizationDetails_604866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_604916 = ref object of OpenApiRestCall_602433
proc url_PostGetAccountPasswordPolicy_604918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountPasswordPolicy_604917(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604919 = query.getOrDefault("Action")
  valid_604919 = validateParameter(valid_604919, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_604919 != nil:
    section.add "Action", valid_604919
  var valid_604920 = query.getOrDefault("Version")
  valid_604920 = validateParameter(valid_604920, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604920 != nil:
    section.add "Version", valid_604920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604921 = header.getOrDefault("X-Amz-Date")
  valid_604921 = validateParameter(valid_604921, JString, required = false,
                                 default = nil)
  if valid_604921 != nil:
    section.add "X-Amz-Date", valid_604921
  var valid_604922 = header.getOrDefault("X-Amz-Security-Token")
  valid_604922 = validateParameter(valid_604922, JString, required = false,
                                 default = nil)
  if valid_604922 != nil:
    section.add "X-Amz-Security-Token", valid_604922
  var valid_604923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604923 = validateParameter(valid_604923, JString, required = false,
                                 default = nil)
  if valid_604923 != nil:
    section.add "X-Amz-Content-Sha256", valid_604923
  var valid_604924 = header.getOrDefault("X-Amz-Algorithm")
  valid_604924 = validateParameter(valid_604924, JString, required = false,
                                 default = nil)
  if valid_604924 != nil:
    section.add "X-Amz-Algorithm", valid_604924
  var valid_604925 = header.getOrDefault("X-Amz-Signature")
  valid_604925 = validateParameter(valid_604925, JString, required = false,
                                 default = nil)
  if valid_604925 != nil:
    section.add "X-Amz-Signature", valid_604925
  var valid_604926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-SignedHeaders", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-Credential")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-Credential", valid_604927
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604928: Call_PostGetAccountPasswordPolicy_604916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_604928.validator(path, query, header, formData, body)
  let scheme = call_604928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604928.url(scheme.get, call_604928.host, call_604928.base,
                         call_604928.route, valid.getOrDefault("path"))
  result = hook(call_604928, url, valid)

proc call*(call_604929: Call_PostGetAccountPasswordPolicy_604916;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604930 = newJObject()
  add(query_604930, "Action", newJString(Action))
  add(query_604930, "Version", newJString(Version))
  result = call_604929.call(nil, query_604930, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_604916(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_604917, base: "/",
    url: url_PostGetAccountPasswordPolicy_604918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_604901 = ref object of OpenApiRestCall_602433
proc url_GetGetAccountPasswordPolicy_604903(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountPasswordPolicy_604902(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604904 = query.getOrDefault("Action")
  valid_604904 = validateParameter(valid_604904, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_604904 != nil:
    section.add "Action", valid_604904
  var valid_604905 = query.getOrDefault("Version")
  valid_604905 = validateParameter(valid_604905, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604905 != nil:
    section.add "Version", valid_604905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604906 = header.getOrDefault("X-Amz-Date")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "X-Amz-Date", valid_604906
  var valid_604907 = header.getOrDefault("X-Amz-Security-Token")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Security-Token", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Content-Sha256", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-Algorithm")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-Algorithm", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-Signature")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-Signature", valid_604910
  var valid_604911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604911 = validateParameter(valid_604911, JString, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "X-Amz-SignedHeaders", valid_604911
  var valid_604912 = header.getOrDefault("X-Amz-Credential")
  valid_604912 = validateParameter(valid_604912, JString, required = false,
                                 default = nil)
  if valid_604912 != nil:
    section.add "X-Amz-Credential", valid_604912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604913: Call_GetGetAccountPasswordPolicy_604901; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_604913.validator(path, query, header, formData, body)
  let scheme = call_604913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604913.url(scheme.get, call_604913.host, call_604913.base,
                         call_604913.route, valid.getOrDefault("path"))
  result = hook(call_604913, url, valid)

proc call*(call_604914: Call_GetGetAccountPasswordPolicy_604901;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604915 = newJObject()
  add(query_604915, "Action", newJString(Action))
  add(query_604915, "Version", newJString(Version))
  result = call_604914.call(nil, query_604915, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_604901(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_604902, base: "/",
    url: url_GetGetAccountPasswordPolicy_604903,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_604946 = ref object of OpenApiRestCall_602433
proc url_PostGetAccountSummary_604948(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSummary_604947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604949 = query.getOrDefault("Action")
  valid_604949 = validateParameter(valid_604949, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_604949 != nil:
    section.add "Action", valid_604949
  var valid_604950 = query.getOrDefault("Version")
  valid_604950 = validateParameter(valid_604950, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604950 != nil:
    section.add "Version", valid_604950
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604951 = header.getOrDefault("X-Amz-Date")
  valid_604951 = validateParameter(valid_604951, JString, required = false,
                                 default = nil)
  if valid_604951 != nil:
    section.add "X-Amz-Date", valid_604951
  var valid_604952 = header.getOrDefault("X-Amz-Security-Token")
  valid_604952 = validateParameter(valid_604952, JString, required = false,
                                 default = nil)
  if valid_604952 != nil:
    section.add "X-Amz-Security-Token", valid_604952
  var valid_604953 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604953 = validateParameter(valid_604953, JString, required = false,
                                 default = nil)
  if valid_604953 != nil:
    section.add "X-Amz-Content-Sha256", valid_604953
  var valid_604954 = header.getOrDefault("X-Amz-Algorithm")
  valid_604954 = validateParameter(valid_604954, JString, required = false,
                                 default = nil)
  if valid_604954 != nil:
    section.add "X-Amz-Algorithm", valid_604954
  var valid_604955 = header.getOrDefault("X-Amz-Signature")
  valid_604955 = validateParameter(valid_604955, JString, required = false,
                                 default = nil)
  if valid_604955 != nil:
    section.add "X-Amz-Signature", valid_604955
  var valid_604956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604956 = validateParameter(valid_604956, JString, required = false,
                                 default = nil)
  if valid_604956 != nil:
    section.add "X-Amz-SignedHeaders", valid_604956
  var valid_604957 = header.getOrDefault("X-Amz-Credential")
  valid_604957 = validateParameter(valid_604957, JString, required = false,
                                 default = nil)
  if valid_604957 != nil:
    section.add "X-Amz-Credential", valid_604957
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604958: Call_PostGetAccountSummary_604946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604958.validator(path, query, header, formData, body)
  let scheme = call_604958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604958.url(scheme.get, call_604958.host, call_604958.base,
                         call_604958.route, valid.getOrDefault("path"))
  result = hook(call_604958, url, valid)

proc call*(call_604959: Call_PostGetAccountSummary_604946;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604960 = newJObject()
  add(query_604960, "Action", newJString(Action))
  add(query_604960, "Version", newJString(Version))
  result = call_604959.call(nil, query_604960, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_604946(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_604947, base: "/",
    url: url_PostGetAccountSummary_604948, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_604931 = ref object of OpenApiRestCall_602433
proc url_GetGetAccountSummary_604933(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSummary_604932(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604934 = query.getOrDefault("Action")
  valid_604934 = validateParameter(valid_604934, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_604934 != nil:
    section.add "Action", valid_604934
  var valid_604935 = query.getOrDefault("Version")
  valid_604935 = validateParameter(valid_604935, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604935 != nil:
    section.add "Version", valid_604935
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604936 = header.getOrDefault("X-Amz-Date")
  valid_604936 = validateParameter(valid_604936, JString, required = false,
                                 default = nil)
  if valid_604936 != nil:
    section.add "X-Amz-Date", valid_604936
  var valid_604937 = header.getOrDefault("X-Amz-Security-Token")
  valid_604937 = validateParameter(valid_604937, JString, required = false,
                                 default = nil)
  if valid_604937 != nil:
    section.add "X-Amz-Security-Token", valid_604937
  var valid_604938 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604938 = validateParameter(valid_604938, JString, required = false,
                                 default = nil)
  if valid_604938 != nil:
    section.add "X-Amz-Content-Sha256", valid_604938
  var valid_604939 = header.getOrDefault("X-Amz-Algorithm")
  valid_604939 = validateParameter(valid_604939, JString, required = false,
                                 default = nil)
  if valid_604939 != nil:
    section.add "X-Amz-Algorithm", valid_604939
  var valid_604940 = header.getOrDefault("X-Amz-Signature")
  valid_604940 = validateParameter(valid_604940, JString, required = false,
                                 default = nil)
  if valid_604940 != nil:
    section.add "X-Amz-Signature", valid_604940
  var valid_604941 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "X-Amz-SignedHeaders", valid_604941
  var valid_604942 = header.getOrDefault("X-Amz-Credential")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Credential", valid_604942
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604943: Call_GetGetAccountSummary_604931; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604943.validator(path, query, header, formData, body)
  let scheme = call_604943.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604943.url(scheme.get, call_604943.host, call_604943.base,
                         call_604943.route, valid.getOrDefault("path"))
  result = hook(call_604943, url, valid)

proc call*(call_604944: Call_GetGetAccountSummary_604931;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604945 = newJObject()
  add(query_604945, "Action", newJString(Action))
  add(query_604945, "Version", newJString(Version))
  result = call_604944.call(nil, query_604945, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_604931(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_604932, base: "/",
    url: url_GetGetAccountSummary_604933, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_604977 = ref object of OpenApiRestCall_602433
proc url_PostGetContextKeysForCustomPolicy_604979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForCustomPolicy_604978(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604980 = query.getOrDefault("Action")
  valid_604980 = validateParameter(valid_604980, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_604980 != nil:
    section.add "Action", valid_604980
  var valid_604981 = query.getOrDefault("Version")
  valid_604981 = validateParameter(valid_604981, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604981 != nil:
    section.add "Version", valid_604981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604982 = header.getOrDefault("X-Amz-Date")
  valid_604982 = validateParameter(valid_604982, JString, required = false,
                                 default = nil)
  if valid_604982 != nil:
    section.add "X-Amz-Date", valid_604982
  var valid_604983 = header.getOrDefault("X-Amz-Security-Token")
  valid_604983 = validateParameter(valid_604983, JString, required = false,
                                 default = nil)
  if valid_604983 != nil:
    section.add "X-Amz-Security-Token", valid_604983
  var valid_604984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604984 = validateParameter(valid_604984, JString, required = false,
                                 default = nil)
  if valid_604984 != nil:
    section.add "X-Amz-Content-Sha256", valid_604984
  var valid_604985 = header.getOrDefault("X-Amz-Algorithm")
  valid_604985 = validateParameter(valid_604985, JString, required = false,
                                 default = nil)
  if valid_604985 != nil:
    section.add "X-Amz-Algorithm", valid_604985
  var valid_604986 = header.getOrDefault("X-Amz-Signature")
  valid_604986 = validateParameter(valid_604986, JString, required = false,
                                 default = nil)
  if valid_604986 != nil:
    section.add "X-Amz-Signature", valid_604986
  var valid_604987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604987 = validateParameter(valid_604987, JString, required = false,
                                 default = nil)
  if valid_604987 != nil:
    section.add "X-Amz-SignedHeaders", valid_604987
  var valid_604988 = header.getOrDefault("X-Amz-Credential")
  valid_604988 = validateParameter(valid_604988, JString, required = false,
                                 default = nil)
  if valid_604988 != nil:
    section.add "X-Amz-Credential", valid_604988
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_604989 = formData.getOrDefault("PolicyInputList")
  valid_604989 = validateParameter(valid_604989, JArray, required = true, default = nil)
  if valid_604989 != nil:
    section.add "PolicyInputList", valid_604989
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604990: Call_PostGetContextKeysForCustomPolicy_604977;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_604990.validator(path, query, header, formData, body)
  let scheme = call_604990.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604990.url(scheme.get, call_604990.host, call_604990.base,
                         call_604990.route, valid.getOrDefault("path"))
  result = hook(call_604990, url, valid)

proc call*(call_604991: Call_PostGetContextKeysForCustomPolicy_604977;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_604992 = newJObject()
  var formData_604993 = newJObject()
  add(query_604992, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_604993.add "PolicyInputList", PolicyInputList
  add(query_604992, "Version", newJString(Version))
  result = call_604991.call(nil, query_604992, nil, formData_604993, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_604977(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_604978, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_604979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_604961 = ref object of OpenApiRestCall_602433
proc url_GetGetContextKeysForCustomPolicy_604963(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForCustomPolicy_604962(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_604964 = query.getOrDefault("PolicyInputList")
  valid_604964 = validateParameter(valid_604964, JArray, required = true, default = nil)
  if valid_604964 != nil:
    section.add "PolicyInputList", valid_604964
  var valid_604965 = query.getOrDefault("Action")
  valid_604965 = validateParameter(valid_604965, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_604965 != nil:
    section.add "Action", valid_604965
  var valid_604966 = query.getOrDefault("Version")
  valid_604966 = validateParameter(valid_604966, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604966 != nil:
    section.add "Version", valid_604966
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604967 = header.getOrDefault("X-Amz-Date")
  valid_604967 = validateParameter(valid_604967, JString, required = false,
                                 default = nil)
  if valid_604967 != nil:
    section.add "X-Amz-Date", valid_604967
  var valid_604968 = header.getOrDefault("X-Amz-Security-Token")
  valid_604968 = validateParameter(valid_604968, JString, required = false,
                                 default = nil)
  if valid_604968 != nil:
    section.add "X-Amz-Security-Token", valid_604968
  var valid_604969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604969 = validateParameter(valid_604969, JString, required = false,
                                 default = nil)
  if valid_604969 != nil:
    section.add "X-Amz-Content-Sha256", valid_604969
  var valid_604970 = header.getOrDefault("X-Amz-Algorithm")
  valid_604970 = validateParameter(valid_604970, JString, required = false,
                                 default = nil)
  if valid_604970 != nil:
    section.add "X-Amz-Algorithm", valid_604970
  var valid_604971 = header.getOrDefault("X-Amz-Signature")
  valid_604971 = validateParameter(valid_604971, JString, required = false,
                                 default = nil)
  if valid_604971 != nil:
    section.add "X-Amz-Signature", valid_604971
  var valid_604972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604972 = validateParameter(valid_604972, JString, required = false,
                                 default = nil)
  if valid_604972 != nil:
    section.add "X-Amz-SignedHeaders", valid_604972
  var valid_604973 = header.getOrDefault("X-Amz-Credential")
  valid_604973 = validateParameter(valid_604973, JString, required = false,
                                 default = nil)
  if valid_604973 != nil:
    section.add "X-Amz-Credential", valid_604973
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604974: Call_GetGetContextKeysForCustomPolicy_604961;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_604974.validator(path, query, header, formData, body)
  let scheme = call_604974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604974.url(scheme.get, call_604974.host, call_604974.base,
                         call_604974.route, valid.getOrDefault("path"))
  result = hook(call_604974, url, valid)

proc call*(call_604975: Call_GetGetContextKeysForCustomPolicy_604961;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604976 = newJObject()
  if PolicyInputList != nil:
    query_604976.add "PolicyInputList", PolicyInputList
  add(query_604976, "Action", newJString(Action))
  add(query_604976, "Version", newJString(Version))
  result = call_604975.call(nil, query_604976, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_604961(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_604962, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_604963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_605011 = ref object of OpenApiRestCall_602433
proc url_PostGetContextKeysForPrincipalPolicy_605013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForPrincipalPolicy_605012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605014 = query.getOrDefault("Action")
  valid_605014 = validateParameter(valid_605014, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_605014 != nil:
    section.add "Action", valid_605014
  var valid_605015 = query.getOrDefault("Version")
  valid_605015 = validateParameter(valid_605015, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605015 != nil:
    section.add "Version", valid_605015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605016 = header.getOrDefault("X-Amz-Date")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-Date", valid_605016
  var valid_605017 = header.getOrDefault("X-Amz-Security-Token")
  valid_605017 = validateParameter(valid_605017, JString, required = false,
                                 default = nil)
  if valid_605017 != nil:
    section.add "X-Amz-Security-Token", valid_605017
  var valid_605018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605018 = validateParameter(valid_605018, JString, required = false,
                                 default = nil)
  if valid_605018 != nil:
    section.add "X-Amz-Content-Sha256", valid_605018
  var valid_605019 = header.getOrDefault("X-Amz-Algorithm")
  valid_605019 = validateParameter(valid_605019, JString, required = false,
                                 default = nil)
  if valid_605019 != nil:
    section.add "X-Amz-Algorithm", valid_605019
  var valid_605020 = header.getOrDefault("X-Amz-Signature")
  valid_605020 = validateParameter(valid_605020, JString, required = false,
                                 default = nil)
  if valid_605020 != nil:
    section.add "X-Amz-Signature", valid_605020
  var valid_605021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605021 = validateParameter(valid_605021, JString, required = false,
                                 default = nil)
  if valid_605021 != nil:
    section.add "X-Amz-SignedHeaders", valid_605021
  var valid_605022 = header.getOrDefault("X-Amz-Credential")
  valid_605022 = validateParameter(valid_605022, JString, required = false,
                                 default = nil)
  if valid_605022 != nil:
    section.add "X-Amz-Credential", valid_605022
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_605023 = formData.getOrDefault("PolicyInputList")
  valid_605023 = validateParameter(valid_605023, JArray, required = false,
                                 default = nil)
  if valid_605023 != nil:
    section.add "PolicyInputList", valid_605023
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_605024 = formData.getOrDefault("PolicySourceArn")
  valid_605024 = validateParameter(valid_605024, JString, required = true,
                                 default = nil)
  if valid_605024 != nil:
    section.add "PolicySourceArn", valid_605024
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605025: Call_PostGetContextKeysForPrincipalPolicy_605011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_605025.validator(path, query, header, formData, body)
  let scheme = call_605025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605025.url(scheme.get, call_605025.host, call_605025.base,
                         call_605025.route, valid.getOrDefault("path"))
  result = hook(call_605025, url, valid)

proc call*(call_605026: Call_PostGetContextKeysForPrincipalPolicy_605011;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          PolicyInputList: JsonNode = nil; Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_605027 = newJObject()
  var formData_605028 = newJObject()
  add(query_605027, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_605028.add "PolicyInputList", PolicyInputList
  add(formData_605028, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_605027, "Version", newJString(Version))
  result = call_605026.call(nil, query_605027, nil, formData_605028, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_605011(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_605012, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_605013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_604994 = ref object of OpenApiRestCall_602433
proc url_GetGetContextKeysForPrincipalPolicy_604996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForPrincipalPolicy_604995(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604997 = query.getOrDefault("PolicyInputList")
  valid_604997 = validateParameter(valid_604997, JArray, required = false,
                                 default = nil)
  if valid_604997 != nil:
    section.add "PolicyInputList", valid_604997
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_604998 = query.getOrDefault("PolicySourceArn")
  valid_604998 = validateParameter(valid_604998, JString, required = true,
                                 default = nil)
  if valid_604998 != nil:
    section.add "PolicySourceArn", valid_604998
  var valid_604999 = query.getOrDefault("Action")
  valid_604999 = validateParameter(valid_604999, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_604999 != nil:
    section.add "Action", valid_604999
  var valid_605000 = query.getOrDefault("Version")
  valid_605000 = validateParameter(valid_605000, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605000 != nil:
    section.add "Version", valid_605000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605001 = header.getOrDefault("X-Amz-Date")
  valid_605001 = validateParameter(valid_605001, JString, required = false,
                                 default = nil)
  if valid_605001 != nil:
    section.add "X-Amz-Date", valid_605001
  var valid_605002 = header.getOrDefault("X-Amz-Security-Token")
  valid_605002 = validateParameter(valid_605002, JString, required = false,
                                 default = nil)
  if valid_605002 != nil:
    section.add "X-Amz-Security-Token", valid_605002
  var valid_605003 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605003 = validateParameter(valid_605003, JString, required = false,
                                 default = nil)
  if valid_605003 != nil:
    section.add "X-Amz-Content-Sha256", valid_605003
  var valid_605004 = header.getOrDefault("X-Amz-Algorithm")
  valid_605004 = validateParameter(valid_605004, JString, required = false,
                                 default = nil)
  if valid_605004 != nil:
    section.add "X-Amz-Algorithm", valid_605004
  var valid_605005 = header.getOrDefault("X-Amz-Signature")
  valid_605005 = validateParameter(valid_605005, JString, required = false,
                                 default = nil)
  if valid_605005 != nil:
    section.add "X-Amz-Signature", valid_605005
  var valid_605006 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605006 = validateParameter(valid_605006, JString, required = false,
                                 default = nil)
  if valid_605006 != nil:
    section.add "X-Amz-SignedHeaders", valid_605006
  var valid_605007 = header.getOrDefault("X-Amz-Credential")
  valid_605007 = validateParameter(valid_605007, JString, required = false,
                                 default = nil)
  if valid_605007 != nil:
    section.add "X-Amz-Credential", valid_605007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605008: Call_GetGetContextKeysForPrincipalPolicy_604994;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_605008.validator(path, query, header, formData, body)
  let scheme = call_605008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605008.url(scheme.get, call_605008.host, call_605008.base,
                         call_605008.route, valid.getOrDefault("path"))
  result = hook(call_605008, url, valid)

proc call*(call_605009: Call_GetGetContextKeysForPrincipalPolicy_604994;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605010 = newJObject()
  if PolicyInputList != nil:
    query_605010.add "PolicyInputList", PolicyInputList
  add(query_605010, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_605010, "Action", newJString(Action))
  add(query_605010, "Version", newJString(Version))
  result = call_605009.call(nil, query_605010, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_604994(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_604995, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_604996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_605044 = ref object of OpenApiRestCall_602433
proc url_PostGetCredentialReport_605046(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCredentialReport_605045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605047 = query.getOrDefault("Action")
  valid_605047 = validateParameter(valid_605047, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_605047 != nil:
    section.add "Action", valid_605047
  var valid_605048 = query.getOrDefault("Version")
  valid_605048 = validateParameter(valid_605048, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605048 != nil:
    section.add "Version", valid_605048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605049 = header.getOrDefault("X-Amz-Date")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Date", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Security-Token")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Security-Token", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Content-Sha256", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-Algorithm")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-Algorithm", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Signature")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Signature", valid_605053
  var valid_605054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605054 = validateParameter(valid_605054, JString, required = false,
                                 default = nil)
  if valid_605054 != nil:
    section.add "X-Amz-SignedHeaders", valid_605054
  var valid_605055 = header.getOrDefault("X-Amz-Credential")
  valid_605055 = validateParameter(valid_605055, JString, required = false,
                                 default = nil)
  if valid_605055 != nil:
    section.add "X-Amz-Credential", valid_605055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605056: Call_PostGetCredentialReport_605044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605056.validator(path, query, header, formData, body)
  let scheme = call_605056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605056.url(scheme.get, call_605056.host, call_605056.base,
                         call_605056.route, valid.getOrDefault("path"))
  result = hook(call_605056, url, valid)

proc call*(call_605057: Call_PostGetCredentialReport_605044;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605058 = newJObject()
  add(query_605058, "Action", newJString(Action))
  add(query_605058, "Version", newJString(Version))
  result = call_605057.call(nil, query_605058, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_605044(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_605045, base: "/",
    url: url_PostGetCredentialReport_605046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_605029 = ref object of OpenApiRestCall_602433
proc url_GetGetCredentialReport_605031(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCredentialReport_605030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605032 = query.getOrDefault("Action")
  valid_605032 = validateParameter(valid_605032, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_605032 != nil:
    section.add "Action", valid_605032
  var valid_605033 = query.getOrDefault("Version")
  valid_605033 = validateParameter(valid_605033, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605033 != nil:
    section.add "Version", valid_605033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605034 = header.getOrDefault("X-Amz-Date")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "X-Amz-Date", valid_605034
  var valid_605035 = header.getOrDefault("X-Amz-Security-Token")
  valid_605035 = validateParameter(valid_605035, JString, required = false,
                                 default = nil)
  if valid_605035 != nil:
    section.add "X-Amz-Security-Token", valid_605035
  var valid_605036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605036 = validateParameter(valid_605036, JString, required = false,
                                 default = nil)
  if valid_605036 != nil:
    section.add "X-Amz-Content-Sha256", valid_605036
  var valid_605037 = header.getOrDefault("X-Amz-Algorithm")
  valid_605037 = validateParameter(valid_605037, JString, required = false,
                                 default = nil)
  if valid_605037 != nil:
    section.add "X-Amz-Algorithm", valid_605037
  var valid_605038 = header.getOrDefault("X-Amz-Signature")
  valid_605038 = validateParameter(valid_605038, JString, required = false,
                                 default = nil)
  if valid_605038 != nil:
    section.add "X-Amz-Signature", valid_605038
  var valid_605039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605039 = validateParameter(valid_605039, JString, required = false,
                                 default = nil)
  if valid_605039 != nil:
    section.add "X-Amz-SignedHeaders", valid_605039
  var valid_605040 = header.getOrDefault("X-Amz-Credential")
  valid_605040 = validateParameter(valid_605040, JString, required = false,
                                 default = nil)
  if valid_605040 != nil:
    section.add "X-Amz-Credential", valid_605040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605041: Call_GetGetCredentialReport_605029; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605041.validator(path, query, header, formData, body)
  let scheme = call_605041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605041.url(scheme.get, call_605041.host, call_605041.base,
                         call_605041.route, valid.getOrDefault("path"))
  result = hook(call_605041, url, valid)

proc call*(call_605042: Call_GetGetCredentialReport_605029;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605043 = newJObject()
  add(query_605043, "Action", newJString(Action))
  add(query_605043, "Version", newJString(Version))
  result = call_605042.call(nil, query_605043, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_605029(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_605030, base: "/",
    url: url_GetGetCredentialReport_605031, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_605077 = ref object of OpenApiRestCall_602433
proc url_PostGetGroup_605079(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroup_605078(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605080 = query.getOrDefault("Action")
  valid_605080 = validateParameter(valid_605080, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_605080 != nil:
    section.add "Action", valid_605080
  var valid_605081 = query.getOrDefault("Version")
  valid_605081 = validateParameter(valid_605081, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605081 != nil:
    section.add "Version", valid_605081
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605082 = header.getOrDefault("X-Amz-Date")
  valid_605082 = validateParameter(valid_605082, JString, required = false,
                                 default = nil)
  if valid_605082 != nil:
    section.add "X-Amz-Date", valid_605082
  var valid_605083 = header.getOrDefault("X-Amz-Security-Token")
  valid_605083 = validateParameter(valid_605083, JString, required = false,
                                 default = nil)
  if valid_605083 != nil:
    section.add "X-Amz-Security-Token", valid_605083
  var valid_605084 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605084 = validateParameter(valid_605084, JString, required = false,
                                 default = nil)
  if valid_605084 != nil:
    section.add "X-Amz-Content-Sha256", valid_605084
  var valid_605085 = header.getOrDefault("X-Amz-Algorithm")
  valid_605085 = validateParameter(valid_605085, JString, required = false,
                                 default = nil)
  if valid_605085 != nil:
    section.add "X-Amz-Algorithm", valid_605085
  var valid_605086 = header.getOrDefault("X-Amz-Signature")
  valid_605086 = validateParameter(valid_605086, JString, required = false,
                                 default = nil)
  if valid_605086 != nil:
    section.add "X-Amz-Signature", valid_605086
  var valid_605087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605087 = validateParameter(valid_605087, JString, required = false,
                                 default = nil)
  if valid_605087 != nil:
    section.add "X-Amz-SignedHeaders", valid_605087
  var valid_605088 = header.getOrDefault("X-Amz-Credential")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Credential", valid_605088
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_605089 = formData.getOrDefault("GroupName")
  valid_605089 = validateParameter(valid_605089, JString, required = true,
                                 default = nil)
  if valid_605089 != nil:
    section.add "GroupName", valid_605089
  var valid_605090 = formData.getOrDefault("Marker")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "Marker", valid_605090
  var valid_605091 = formData.getOrDefault("MaxItems")
  valid_605091 = validateParameter(valid_605091, JInt, required = false, default = nil)
  if valid_605091 != nil:
    section.add "MaxItems", valid_605091
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605092: Call_PostGetGroup_605077; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_605092.validator(path, query, header, formData, body)
  let scheme = call_605092.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605092.url(scheme.get, call_605092.host, call_605092.base,
                         call_605092.route, valid.getOrDefault("path"))
  result = hook(call_605092, url, valid)

proc call*(call_605093: Call_PostGetGroup_605077; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605094 = newJObject()
  var formData_605095 = newJObject()
  add(formData_605095, "GroupName", newJString(GroupName))
  add(formData_605095, "Marker", newJString(Marker))
  add(query_605094, "Action", newJString(Action))
  add(formData_605095, "MaxItems", newJInt(MaxItems))
  add(query_605094, "Version", newJString(Version))
  result = call_605093.call(nil, query_605094, nil, formData_605095, nil)

var postGetGroup* = Call_PostGetGroup_605077(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_605078, base: "/",
    url: url_PostGetGroup_605079, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_605059 = ref object of OpenApiRestCall_602433
proc url_GetGetGroup_605061(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroup_605060(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605062 = query.getOrDefault("Action")
  valid_605062 = validateParameter(valid_605062, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_605062 != nil:
    section.add "Action", valid_605062
  var valid_605063 = query.getOrDefault("Marker")
  valid_605063 = validateParameter(valid_605063, JString, required = false,
                                 default = nil)
  if valid_605063 != nil:
    section.add "Marker", valid_605063
  var valid_605064 = query.getOrDefault("GroupName")
  valid_605064 = validateParameter(valid_605064, JString, required = true,
                                 default = nil)
  if valid_605064 != nil:
    section.add "GroupName", valid_605064
  var valid_605065 = query.getOrDefault("MaxItems")
  valid_605065 = validateParameter(valid_605065, JInt, required = false, default = nil)
  if valid_605065 != nil:
    section.add "MaxItems", valid_605065
  var valid_605066 = query.getOrDefault("Version")
  valid_605066 = validateParameter(valid_605066, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605066 != nil:
    section.add "Version", valid_605066
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605067 = header.getOrDefault("X-Amz-Date")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "X-Amz-Date", valid_605067
  var valid_605068 = header.getOrDefault("X-Amz-Security-Token")
  valid_605068 = validateParameter(valid_605068, JString, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "X-Amz-Security-Token", valid_605068
  var valid_605069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605069 = validateParameter(valid_605069, JString, required = false,
                                 default = nil)
  if valid_605069 != nil:
    section.add "X-Amz-Content-Sha256", valid_605069
  var valid_605070 = header.getOrDefault("X-Amz-Algorithm")
  valid_605070 = validateParameter(valid_605070, JString, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "X-Amz-Algorithm", valid_605070
  var valid_605071 = header.getOrDefault("X-Amz-Signature")
  valid_605071 = validateParameter(valid_605071, JString, required = false,
                                 default = nil)
  if valid_605071 != nil:
    section.add "X-Amz-Signature", valid_605071
  var valid_605072 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605072 = validateParameter(valid_605072, JString, required = false,
                                 default = nil)
  if valid_605072 != nil:
    section.add "X-Amz-SignedHeaders", valid_605072
  var valid_605073 = header.getOrDefault("X-Amz-Credential")
  valid_605073 = validateParameter(valid_605073, JString, required = false,
                                 default = nil)
  if valid_605073 != nil:
    section.add "X-Amz-Credential", valid_605073
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605074: Call_GetGetGroup_605059; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_605074.validator(path, query, header, formData, body)
  let scheme = call_605074.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605074.url(scheme.get, call_605074.host, call_605074.base,
                         call_605074.route, valid.getOrDefault("path"))
  result = hook(call_605074, url, valid)

proc call*(call_605075: Call_GetGetGroup_605059; GroupName: string;
          Action: string = "GetGroup"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605076 = newJObject()
  add(query_605076, "Action", newJString(Action))
  add(query_605076, "Marker", newJString(Marker))
  add(query_605076, "GroupName", newJString(GroupName))
  add(query_605076, "MaxItems", newJInt(MaxItems))
  add(query_605076, "Version", newJString(Version))
  result = call_605075.call(nil, query_605076, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_605059(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_605060,
                                        base: "/", url: url_GetGetGroup_605061,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_605113 = ref object of OpenApiRestCall_602433
proc url_PostGetGroupPolicy_605115(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroupPolicy_605114(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605116 = query.getOrDefault("Action")
  valid_605116 = validateParameter(valid_605116, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_605116 != nil:
    section.add "Action", valid_605116
  var valid_605117 = query.getOrDefault("Version")
  valid_605117 = validateParameter(valid_605117, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605117 != nil:
    section.add "Version", valid_605117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605118 = header.getOrDefault("X-Amz-Date")
  valid_605118 = validateParameter(valid_605118, JString, required = false,
                                 default = nil)
  if valid_605118 != nil:
    section.add "X-Amz-Date", valid_605118
  var valid_605119 = header.getOrDefault("X-Amz-Security-Token")
  valid_605119 = validateParameter(valid_605119, JString, required = false,
                                 default = nil)
  if valid_605119 != nil:
    section.add "X-Amz-Security-Token", valid_605119
  var valid_605120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605120 = validateParameter(valid_605120, JString, required = false,
                                 default = nil)
  if valid_605120 != nil:
    section.add "X-Amz-Content-Sha256", valid_605120
  var valid_605121 = header.getOrDefault("X-Amz-Algorithm")
  valid_605121 = validateParameter(valid_605121, JString, required = false,
                                 default = nil)
  if valid_605121 != nil:
    section.add "X-Amz-Algorithm", valid_605121
  var valid_605122 = header.getOrDefault("X-Amz-Signature")
  valid_605122 = validateParameter(valid_605122, JString, required = false,
                                 default = nil)
  if valid_605122 != nil:
    section.add "X-Amz-Signature", valid_605122
  var valid_605123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605123 = validateParameter(valid_605123, JString, required = false,
                                 default = nil)
  if valid_605123 != nil:
    section.add "X-Amz-SignedHeaders", valid_605123
  var valid_605124 = header.getOrDefault("X-Amz-Credential")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "X-Amz-Credential", valid_605124
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_605125 = formData.getOrDefault("PolicyName")
  valid_605125 = validateParameter(valid_605125, JString, required = true,
                                 default = nil)
  if valid_605125 != nil:
    section.add "PolicyName", valid_605125
  var valid_605126 = formData.getOrDefault("GroupName")
  valid_605126 = validateParameter(valid_605126, JString, required = true,
                                 default = nil)
  if valid_605126 != nil:
    section.add "GroupName", valid_605126
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605127: Call_PostGetGroupPolicy_605113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605127.validator(path, query, header, formData, body)
  let scheme = call_605127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605127.url(scheme.get, call_605127.host, call_605127.base,
                         call_605127.route, valid.getOrDefault("path"))
  result = hook(call_605127, url, valid)

proc call*(call_605128: Call_PostGetGroupPolicy_605113; PolicyName: string;
          GroupName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605129 = newJObject()
  var formData_605130 = newJObject()
  add(formData_605130, "PolicyName", newJString(PolicyName))
  add(formData_605130, "GroupName", newJString(GroupName))
  add(query_605129, "Action", newJString(Action))
  add(query_605129, "Version", newJString(Version))
  result = call_605128.call(nil, query_605129, nil, formData_605130, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_605113(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_605114, base: "/",
    url: url_PostGetGroupPolicy_605115, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_605096 = ref object of OpenApiRestCall_602433
proc url_GetGetGroupPolicy_605098(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroupPolicy_605097(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605099 = query.getOrDefault("Action")
  valid_605099 = validateParameter(valid_605099, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_605099 != nil:
    section.add "Action", valid_605099
  var valid_605100 = query.getOrDefault("GroupName")
  valid_605100 = validateParameter(valid_605100, JString, required = true,
                                 default = nil)
  if valid_605100 != nil:
    section.add "GroupName", valid_605100
  var valid_605101 = query.getOrDefault("Version")
  valid_605101 = validateParameter(valid_605101, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605101 != nil:
    section.add "Version", valid_605101
  var valid_605102 = query.getOrDefault("PolicyName")
  valid_605102 = validateParameter(valid_605102, JString, required = true,
                                 default = nil)
  if valid_605102 != nil:
    section.add "PolicyName", valid_605102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605103 = header.getOrDefault("X-Amz-Date")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Date", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-Security-Token")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-Security-Token", valid_605104
  var valid_605105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605105 = validateParameter(valid_605105, JString, required = false,
                                 default = nil)
  if valid_605105 != nil:
    section.add "X-Amz-Content-Sha256", valid_605105
  var valid_605106 = header.getOrDefault("X-Amz-Algorithm")
  valid_605106 = validateParameter(valid_605106, JString, required = false,
                                 default = nil)
  if valid_605106 != nil:
    section.add "X-Amz-Algorithm", valid_605106
  var valid_605107 = header.getOrDefault("X-Amz-Signature")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "X-Amz-Signature", valid_605107
  var valid_605108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605108 = validateParameter(valid_605108, JString, required = false,
                                 default = nil)
  if valid_605108 != nil:
    section.add "X-Amz-SignedHeaders", valid_605108
  var valid_605109 = header.getOrDefault("X-Amz-Credential")
  valid_605109 = validateParameter(valid_605109, JString, required = false,
                                 default = nil)
  if valid_605109 != nil:
    section.add "X-Amz-Credential", valid_605109
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605110: Call_GetGetGroupPolicy_605096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605110.validator(path, query, header, formData, body)
  let scheme = call_605110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605110.url(scheme.get, call_605110.host, call_605110.base,
                         call_605110.route, valid.getOrDefault("path"))
  result = hook(call_605110, url, valid)

proc call*(call_605111: Call_GetGetGroupPolicy_605096; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_605112 = newJObject()
  add(query_605112, "Action", newJString(Action))
  add(query_605112, "GroupName", newJString(GroupName))
  add(query_605112, "Version", newJString(Version))
  add(query_605112, "PolicyName", newJString(PolicyName))
  result = call_605111.call(nil, query_605112, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_605096(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_605097,
    base: "/", url: url_GetGetGroupPolicy_605098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_605147 = ref object of OpenApiRestCall_602433
proc url_PostGetInstanceProfile_605149(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetInstanceProfile_605148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605150 = query.getOrDefault("Action")
  valid_605150 = validateParameter(valid_605150, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_605150 != nil:
    section.add "Action", valid_605150
  var valid_605151 = query.getOrDefault("Version")
  valid_605151 = validateParameter(valid_605151, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605151 != nil:
    section.add "Version", valid_605151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605152 = header.getOrDefault("X-Amz-Date")
  valid_605152 = validateParameter(valid_605152, JString, required = false,
                                 default = nil)
  if valid_605152 != nil:
    section.add "X-Amz-Date", valid_605152
  var valid_605153 = header.getOrDefault("X-Amz-Security-Token")
  valid_605153 = validateParameter(valid_605153, JString, required = false,
                                 default = nil)
  if valid_605153 != nil:
    section.add "X-Amz-Security-Token", valid_605153
  var valid_605154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605154 = validateParameter(valid_605154, JString, required = false,
                                 default = nil)
  if valid_605154 != nil:
    section.add "X-Amz-Content-Sha256", valid_605154
  var valid_605155 = header.getOrDefault("X-Amz-Algorithm")
  valid_605155 = validateParameter(valid_605155, JString, required = false,
                                 default = nil)
  if valid_605155 != nil:
    section.add "X-Amz-Algorithm", valid_605155
  var valid_605156 = header.getOrDefault("X-Amz-Signature")
  valid_605156 = validateParameter(valid_605156, JString, required = false,
                                 default = nil)
  if valid_605156 != nil:
    section.add "X-Amz-Signature", valid_605156
  var valid_605157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605157 = validateParameter(valid_605157, JString, required = false,
                                 default = nil)
  if valid_605157 != nil:
    section.add "X-Amz-SignedHeaders", valid_605157
  var valid_605158 = header.getOrDefault("X-Amz-Credential")
  valid_605158 = validateParameter(valid_605158, JString, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "X-Amz-Credential", valid_605158
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_605159 = formData.getOrDefault("InstanceProfileName")
  valid_605159 = validateParameter(valid_605159, JString, required = true,
                                 default = nil)
  if valid_605159 != nil:
    section.add "InstanceProfileName", valid_605159
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605160: Call_PostGetInstanceProfile_605147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605160.validator(path, query, header, formData, body)
  let scheme = call_605160.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605160.url(scheme.get, call_605160.host, call_605160.base,
                         call_605160.route, valid.getOrDefault("path"))
  result = hook(call_605160, url, valid)

proc call*(call_605161: Call_PostGetInstanceProfile_605147;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605162 = newJObject()
  var formData_605163 = newJObject()
  add(query_605162, "Action", newJString(Action))
  add(formData_605163, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_605162, "Version", newJString(Version))
  result = call_605161.call(nil, query_605162, nil, formData_605163, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_605147(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_605148, base: "/",
    url: url_PostGetInstanceProfile_605149, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_605131 = ref object of OpenApiRestCall_602433
proc url_GetGetInstanceProfile_605133(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetInstanceProfile_605132(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_605134 = query.getOrDefault("InstanceProfileName")
  valid_605134 = validateParameter(valid_605134, JString, required = true,
                                 default = nil)
  if valid_605134 != nil:
    section.add "InstanceProfileName", valid_605134
  var valid_605135 = query.getOrDefault("Action")
  valid_605135 = validateParameter(valid_605135, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_605135 != nil:
    section.add "Action", valid_605135
  var valid_605136 = query.getOrDefault("Version")
  valid_605136 = validateParameter(valid_605136, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605136 != nil:
    section.add "Version", valid_605136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605137 = header.getOrDefault("X-Amz-Date")
  valid_605137 = validateParameter(valid_605137, JString, required = false,
                                 default = nil)
  if valid_605137 != nil:
    section.add "X-Amz-Date", valid_605137
  var valid_605138 = header.getOrDefault("X-Amz-Security-Token")
  valid_605138 = validateParameter(valid_605138, JString, required = false,
                                 default = nil)
  if valid_605138 != nil:
    section.add "X-Amz-Security-Token", valid_605138
  var valid_605139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "X-Amz-Content-Sha256", valid_605139
  var valid_605140 = header.getOrDefault("X-Amz-Algorithm")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "X-Amz-Algorithm", valid_605140
  var valid_605141 = header.getOrDefault("X-Amz-Signature")
  valid_605141 = validateParameter(valid_605141, JString, required = false,
                                 default = nil)
  if valid_605141 != nil:
    section.add "X-Amz-Signature", valid_605141
  var valid_605142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605142 = validateParameter(valid_605142, JString, required = false,
                                 default = nil)
  if valid_605142 != nil:
    section.add "X-Amz-SignedHeaders", valid_605142
  var valid_605143 = header.getOrDefault("X-Amz-Credential")
  valid_605143 = validateParameter(valid_605143, JString, required = false,
                                 default = nil)
  if valid_605143 != nil:
    section.add "X-Amz-Credential", valid_605143
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605144: Call_GetGetInstanceProfile_605131; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605144.validator(path, query, header, formData, body)
  let scheme = call_605144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605144.url(scheme.get, call_605144.host, call_605144.base,
                         call_605144.route, valid.getOrDefault("path"))
  result = hook(call_605144, url, valid)

proc call*(call_605145: Call_GetGetInstanceProfile_605131;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605146 = newJObject()
  add(query_605146, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_605146, "Action", newJString(Action))
  add(query_605146, "Version", newJString(Version))
  result = call_605145.call(nil, query_605146, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_605131(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_605132, base: "/",
    url: url_GetGetInstanceProfile_605133, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_605180 = ref object of OpenApiRestCall_602433
proc url_PostGetLoginProfile_605182(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetLoginProfile_605181(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605183 = query.getOrDefault("Action")
  valid_605183 = validateParameter(valid_605183, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_605183 != nil:
    section.add "Action", valid_605183
  var valid_605184 = query.getOrDefault("Version")
  valid_605184 = validateParameter(valid_605184, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605184 != nil:
    section.add "Version", valid_605184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605185 = header.getOrDefault("X-Amz-Date")
  valid_605185 = validateParameter(valid_605185, JString, required = false,
                                 default = nil)
  if valid_605185 != nil:
    section.add "X-Amz-Date", valid_605185
  var valid_605186 = header.getOrDefault("X-Amz-Security-Token")
  valid_605186 = validateParameter(valid_605186, JString, required = false,
                                 default = nil)
  if valid_605186 != nil:
    section.add "X-Amz-Security-Token", valid_605186
  var valid_605187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605187 = validateParameter(valid_605187, JString, required = false,
                                 default = nil)
  if valid_605187 != nil:
    section.add "X-Amz-Content-Sha256", valid_605187
  var valid_605188 = header.getOrDefault("X-Amz-Algorithm")
  valid_605188 = validateParameter(valid_605188, JString, required = false,
                                 default = nil)
  if valid_605188 != nil:
    section.add "X-Amz-Algorithm", valid_605188
  var valid_605189 = header.getOrDefault("X-Amz-Signature")
  valid_605189 = validateParameter(valid_605189, JString, required = false,
                                 default = nil)
  if valid_605189 != nil:
    section.add "X-Amz-Signature", valid_605189
  var valid_605190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605190 = validateParameter(valid_605190, JString, required = false,
                                 default = nil)
  if valid_605190 != nil:
    section.add "X-Amz-SignedHeaders", valid_605190
  var valid_605191 = header.getOrDefault("X-Amz-Credential")
  valid_605191 = validateParameter(valid_605191, JString, required = false,
                                 default = nil)
  if valid_605191 != nil:
    section.add "X-Amz-Credential", valid_605191
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605192 = formData.getOrDefault("UserName")
  valid_605192 = validateParameter(valid_605192, JString, required = true,
                                 default = nil)
  if valid_605192 != nil:
    section.add "UserName", valid_605192
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605193: Call_PostGetLoginProfile_605180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_605193.validator(path, query, header, formData, body)
  let scheme = call_605193.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605193.url(scheme.get, call_605193.host, call_605193.base,
                         call_605193.route, valid.getOrDefault("path"))
  result = hook(call_605193, url, valid)

proc call*(call_605194: Call_PostGetLoginProfile_605180; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605195 = newJObject()
  var formData_605196 = newJObject()
  add(formData_605196, "UserName", newJString(UserName))
  add(query_605195, "Action", newJString(Action))
  add(query_605195, "Version", newJString(Version))
  result = call_605194.call(nil, query_605195, nil, formData_605196, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_605180(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_605181, base: "/",
    url: url_PostGetLoginProfile_605182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_605164 = ref object of OpenApiRestCall_602433
proc url_GetGetLoginProfile_605166(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetLoginProfile_605165(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605167 = query.getOrDefault("UserName")
  valid_605167 = validateParameter(valid_605167, JString, required = true,
                                 default = nil)
  if valid_605167 != nil:
    section.add "UserName", valid_605167
  var valid_605168 = query.getOrDefault("Action")
  valid_605168 = validateParameter(valid_605168, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_605168 != nil:
    section.add "Action", valid_605168
  var valid_605169 = query.getOrDefault("Version")
  valid_605169 = validateParameter(valid_605169, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605169 != nil:
    section.add "Version", valid_605169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605170 = header.getOrDefault("X-Amz-Date")
  valid_605170 = validateParameter(valid_605170, JString, required = false,
                                 default = nil)
  if valid_605170 != nil:
    section.add "X-Amz-Date", valid_605170
  var valid_605171 = header.getOrDefault("X-Amz-Security-Token")
  valid_605171 = validateParameter(valid_605171, JString, required = false,
                                 default = nil)
  if valid_605171 != nil:
    section.add "X-Amz-Security-Token", valid_605171
  var valid_605172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605172 = validateParameter(valid_605172, JString, required = false,
                                 default = nil)
  if valid_605172 != nil:
    section.add "X-Amz-Content-Sha256", valid_605172
  var valid_605173 = header.getOrDefault("X-Amz-Algorithm")
  valid_605173 = validateParameter(valid_605173, JString, required = false,
                                 default = nil)
  if valid_605173 != nil:
    section.add "X-Amz-Algorithm", valid_605173
  var valid_605174 = header.getOrDefault("X-Amz-Signature")
  valid_605174 = validateParameter(valid_605174, JString, required = false,
                                 default = nil)
  if valid_605174 != nil:
    section.add "X-Amz-Signature", valid_605174
  var valid_605175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605175 = validateParameter(valid_605175, JString, required = false,
                                 default = nil)
  if valid_605175 != nil:
    section.add "X-Amz-SignedHeaders", valid_605175
  var valid_605176 = header.getOrDefault("X-Amz-Credential")
  valid_605176 = validateParameter(valid_605176, JString, required = false,
                                 default = nil)
  if valid_605176 != nil:
    section.add "X-Amz-Credential", valid_605176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605177: Call_GetGetLoginProfile_605164; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_605177.validator(path, query, header, formData, body)
  let scheme = call_605177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605177.url(scheme.get, call_605177.host, call_605177.base,
                         call_605177.route, valid.getOrDefault("path"))
  result = hook(call_605177, url, valid)

proc call*(call_605178: Call_GetGetLoginProfile_605164; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605179 = newJObject()
  add(query_605179, "UserName", newJString(UserName))
  add(query_605179, "Action", newJString(Action))
  add(query_605179, "Version", newJString(Version))
  result = call_605178.call(nil, query_605179, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_605164(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_605165,
    base: "/", url: url_GetGetLoginProfile_605166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_605213 = ref object of OpenApiRestCall_602433
proc url_PostGetOpenIDConnectProvider_605215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOpenIDConnectProvider_605214(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605216 = query.getOrDefault("Action")
  valid_605216 = validateParameter(valid_605216, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_605216 != nil:
    section.add "Action", valid_605216
  var valid_605217 = query.getOrDefault("Version")
  valid_605217 = validateParameter(valid_605217, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605217 != nil:
    section.add "Version", valid_605217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605218 = header.getOrDefault("X-Amz-Date")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Date", valid_605218
  var valid_605219 = header.getOrDefault("X-Amz-Security-Token")
  valid_605219 = validateParameter(valid_605219, JString, required = false,
                                 default = nil)
  if valid_605219 != nil:
    section.add "X-Amz-Security-Token", valid_605219
  var valid_605220 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605220 = validateParameter(valid_605220, JString, required = false,
                                 default = nil)
  if valid_605220 != nil:
    section.add "X-Amz-Content-Sha256", valid_605220
  var valid_605221 = header.getOrDefault("X-Amz-Algorithm")
  valid_605221 = validateParameter(valid_605221, JString, required = false,
                                 default = nil)
  if valid_605221 != nil:
    section.add "X-Amz-Algorithm", valid_605221
  var valid_605222 = header.getOrDefault("X-Amz-Signature")
  valid_605222 = validateParameter(valid_605222, JString, required = false,
                                 default = nil)
  if valid_605222 != nil:
    section.add "X-Amz-Signature", valid_605222
  var valid_605223 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605223 = validateParameter(valid_605223, JString, required = false,
                                 default = nil)
  if valid_605223 != nil:
    section.add "X-Amz-SignedHeaders", valid_605223
  var valid_605224 = header.getOrDefault("X-Amz-Credential")
  valid_605224 = validateParameter(valid_605224, JString, required = false,
                                 default = nil)
  if valid_605224 != nil:
    section.add "X-Amz-Credential", valid_605224
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_605225 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_605225 = validateParameter(valid_605225, JString, required = true,
                                 default = nil)
  if valid_605225 != nil:
    section.add "OpenIDConnectProviderArn", valid_605225
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605226: Call_PostGetOpenIDConnectProvider_605213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_605226.validator(path, query, header, formData, body)
  let scheme = call_605226.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605226.url(scheme.get, call_605226.host, call_605226.base,
                         call_605226.route, valid.getOrDefault("path"))
  result = hook(call_605226, url, valid)

proc call*(call_605227: Call_PostGetOpenIDConnectProvider_605213;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605228 = newJObject()
  var formData_605229 = newJObject()
  add(formData_605229, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_605228, "Action", newJString(Action))
  add(query_605228, "Version", newJString(Version))
  result = call_605227.call(nil, query_605228, nil, formData_605229, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_605213(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_605214, base: "/",
    url: url_PostGetOpenIDConnectProvider_605215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_605197 = ref object of OpenApiRestCall_602433
proc url_GetGetOpenIDConnectProvider_605199(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOpenIDConnectProvider_605198(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_605200 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_605200 = validateParameter(valid_605200, JString, required = true,
                                 default = nil)
  if valid_605200 != nil:
    section.add "OpenIDConnectProviderArn", valid_605200
  var valid_605201 = query.getOrDefault("Action")
  valid_605201 = validateParameter(valid_605201, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_605201 != nil:
    section.add "Action", valid_605201
  var valid_605202 = query.getOrDefault("Version")
  valid_605202 = validateParameter(valid_605202, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605202 != nil:
    section.add "Version", valid_605202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605203 = header.getOrDefault("X-Amz-Date")
  valid_605203 = validateParameter(valid_605203, JString, required = false,
                                 default = nil)
  if valid_605203 != nil:
    section.add "X-Amz-Date", valid_605203
  var valid_605204 = header.getOrDefault("X-Amz-Security-Token")
  valid_605204 = validateParameter(valid_605204, JString, required = false,
                                 default = nil)
  if valid_605204 != nil:
    section.add "X-Amz-Security-Token", valid_605204
  var valid_605205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605205 = validateParameter(valid_605205, JString, required = false,
                                 default = nil)
  if valid_605205 != nil:
    section.add "X-Amz-Content-Sha256", valid_605205
  var valid_605206 = header.getOrDefault("X-Amz-Algorithm")
  valid_605206 = validateParameter(valid_605206, JString, required = false,
                                 default = nil)
  if valid_605206 != nil:
    section.add "X-Amz-Algorithm", valid_605206
  var valid_605207 = header.getOrDefault("X-Amz-Signature")
  valid_605207 = validateParameter(valid_605207, JString, required = false,
                                 default = nil)
  if valid_605207 != nil:
    section.add "X-Amz-Signature", valid_605207
  var valid_605208 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605208 = validateParameter(valid_605208, JString, required = false,
                                 default = nil)
  if valid_605208 != nil:
    section.add "X-Amz-SignedHeaders", valid_605208
  var valid_605209 = header.getOrDefault("X-Amz-Credential")
  valid_605209 = validateParameter(valid_605209, JString, required = false,
                                 default = nil)
  if valid_605209 != nil:
    section.add "X-Amz-Credential", valid_605209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605210: Call_GetGetOpenIDConnectProvider_605197; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_605210.validator(path, query, header, formData, body)
  let scheme = call_605210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605210.url(scheme.get, call_605210.host, call_605210.base,
                         call_605210.route, valid.getOrDefault("path"))
  result = hook(call_605210, url, valid)

proc call*(call_605211: Call_GetGetOpenIDConnectProvider_605197;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605212 = newJObject()
  add(query_605212, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_605212, "Action", newJString(Action))
  add(query_605212, "Version", newJString(Version))
  result = call_605211.call(nil, query_605212, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_605197(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_605198, base: "/",
    url: url_GetGetOpenIDConnectProvider_605199,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_605249 = ref object of OpenApiRestCall_602433
proc url_PostGetOrganizationsAccessReport_605251(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOrganizationsAccessReport_605250(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605252 = query.getOrDefault("Action")
  valid_605252 = validateParameter(valid_605252, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_605252 != nil:
    section.add "Action", valid_605252
  var valid_605253 = query.getOrDefault("Version")
  valid_605253 = validateParameter(valid_605253, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605253 != nil:
    section.add "Version", valid_605253
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605254 = header.getOrDefault("X-Amz-Date")
  valid_605254 = validateParameter(valid_605254, JString, required = false,
                                 default = nil)
  if valid_605254 != nil:
    section.add "X-Amz-Date", valid_605254
  var valid_605255 = header.getOrDefault("X-Amz-Security-Token")
  valid_605255 = validateParameter(valid_605255, JString, required = false,
                                 default = nil)
  if valid_605255 != nil:
    section.add "X-Amz-Security-Token", valid_605255
  var valid_605256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605256 = validateParameter(valid_605256, JString, required = false,
                                 default = nil)
  if valid_605256 != nil:
    section.add "X-Amz-Content-Sha256", valid_605256
  var valid_605257 = header.getOrDefault("X-Amz-Algorithm")
  valid_605257 = validateParameter(valid_605257, JString, required = false,
                                 default = nil)
  if valid_605257 != nil:
    section.add "X-Amz-Algorithm", valid_605257
  var valid_605258 = header.getOrDefault("X-Amz-Signature")
  valid_605258 = validateParameter(valid_605258, JString, required = false,
                                 default = nil)
  if valid_605258 != nil:
    section.add "X-Amz-Signature", valid_605258
  var valid_605259 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605259 = validateParameter(valid_605259, JString, required = false,
                                 default = nil)
  if valid_605259 != nil:
    section.add "X-Amz-SignedHeaders", valid_605259
  var valid_605260 = header.getOrDefault("X-Amz-Credential")
  valid_605260 = validateParameter(valid_605260, JString, required = false,
                                 default = nil)
  if valid_605260 != nil:
    section.add "X-Amz-Credential", valid_605260
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605261 = formData.getOrDefault("Marker")
  valid_605261 = validateParameter(valid_605261, JString, required = false,
                                 default = nil)
  if valid_605261 != nil:
    section.add "Marker", valid_605261
  var valid_605262 = formData.getOrDefault("SortKey")
  valid_605262 = validateParameter(valid_605262, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_605262 != nil:
    section.add "SortKey", valid_605262
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_605263 = formData.getOrDefault("JobId")
  valid_605263 = validateParameter(valid_605263, JString, required = true,
                                 default = nil)
  if valid_605263 != nil:
    section.add "JobId", valid_605263
  var valid_605264 = formData.getOrDefault("MaxItems")
  valid_605264 = validateParameter(valid_605264, JInt, required = false, default = nil)
  if valid_605264 != nil:
    section.add "MaxItems", valid_605264
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605265: Call_PostGetOrganizationsAccessReport_605249;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_605265.validator(path, query, header, formData, body)
  let scheme = call_605265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605265.url(scheme.get, call_605265.host, call_605265.base,
                         call_605265.route, valid.getOrDefault("path"))
  result = hook(call_605265, url, valid)

proc call*(call_605266: Call_PostGetOrganizationsAccessReport_605249;
          JobId: string; Marker: string = "";
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605267 = newJObject()
  var formData_605268 = newJObject()
  add(formData_605268, "Marker", newJString(Marker))
  add(formData_605268, "SortKey", newJString(SortKey))
  add(query_605267, "Action", newJString(Action))
  add(formData_605268, "JobId", newJString(JobId))
  add(formData_605268, "MaxItems", newJInt(MaxItems))
  add(query_605267, "Version", newJString(Version))
  result = call_605266.call(nil, query_605267, nil, formData_605268, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_605249(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_605250, base: "/",
    url: url_PostGetOrganizationsAccessReport_605251,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_605230 = ref object of OpenApiRestCall_602433
proc url_GetGetOrganizationsAccessReport_605232(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOrganizationsAccessReport_605231(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605233 = query.getOrDefault("SortKey")
  valid_605233 = validateParameter(valid_605233, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_605233 != nil:
    section.add "SortKey", valid_605233
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_605234 = query.getOrDefault("JobId")
  valid_605234 = validateParameter(valid_605234, JString, required = true,
                                 default = nil)
  if valid_605234 != nil:
    section.add "JobId", valid_605234
  var valid_605235 = query.getOrDefault("Action")
  valid_605235 = validateParameter(valid_605235, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_605235 != nil:
    section.add "Action", valid_605235
  var valid_605236 = query.getOrDefault("Marker")
  valid_605236 = validateParameter(valid_605236, JString, required = false,
                                 default = nil)
  if valid_605236 != nil:
    section.add "Marker", valid_605236
  var valid_605237 = query.getOrDefault("MaxItems")
  valid_605237 = validateParameter(valid_605237, JInt, required = false, default = nil)
  if valid_605237 != nil:
    section.add "MaxItems", valid_605237
  var valid_605238 = query.getOrDefault("Version")
  valid_605238 = validateParameter(valid_605238, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605238 != nil:
    section.add "Version", valid_605238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605239 = header.getOrDefault("X-Amz-Date")
  valid_605239 = validateParameter(valid_605239, JString, required = false,
                                 default = nil)
  if valid_605239 != nil:
    section.add "X-Amz-Date", valid_605239
  var valid_605240 = header.getOrDefault("X-Amz-Security-Token")
  valid_605240 = validateParameter(valid_605240, JString, required = false,
                                 default = nil)
  if valid_605240 != nil:
    section.add "X-Amz-Security-Token", valid_605240
  var valid_605241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605241 = validateParameter(valid_605241, JString, required = false,
                                 default = nil)
  if valid_605241 != nil:
    section.add "X-Amz-Content-Sha256", valid_605241
  var valid_605242 = header.getOrDefault("X-Amz-Algorithm")
  valid_605242 = validateParameter(valid_605242, JString, required = false,
                                 default = nil)
  if valid_605242 != nil:
    section.add "X-Amz-Algorithm", valid_605242
  var valid_605243 = header.getOrDefault("X-Amz-Signature")
  valid_605243 = validateParameter(valid_605243, JString, required = false,
                                 default = nil)
  if valid_605243 != nil:
    section.add "X-Amz-Signature", valid_605243
  var valid_605244 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605244 = validateParameter(valid_605244, JString, required = false,
                                 default = nil)
  if valid_605244 != nil:
    section.add "X-Amz-SignedHeaders", valid_605244
  var valid_605245 = header.getOrDefault("X-Amz-Credential")
  valid_605245 = validateParameter(valid_605245, JString, required = false,
                                 default = nil)
  if valid_605245 != nil:
    section.add "X-Amz-Credential", valid_605245
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605246: Call_GetGetOrganizationsAccessReport_605230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_605246.validator(path, query, header, formData, body)
  let scheme = call_605246.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605246.url(scheme.get, call_605246.host, call_605246.base,
                         call_605246.route, valid.getOrDefault("path"))
  result = hook(call_605246, url, valid)

proc call*(call_605247: Call_GetGetOrganizationsAccessReport_605230; JobId: string;
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605248 = newJObject()
  add(query_605248, "SortKey", newJString(SortKey))
  add(query_605248, "JobId", newJString(JobId))
  add(query_605248, "Action", newJString(Action))
  add(query_605248, "Marker", newJString(Marker))
  add(query_605248, "MaxItems", newJInt(MaxItems))
  add(query_605248, "Version", newJString(Version))
  result = call_605247.call(nil, query_605248, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_605230(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_605231, base: "/",
    url: url_GetGetOrganizationsAccessReport_605232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_605285 = ref object of OpenApiRestCall_602433
proc url_PostGetPolicy_605287(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicy_605286(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605288 = query.getOrDefault("Action")
  valid_605288 = validateParameter(valid_605288, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_605288 != nil:
    section.add "Action", valid_605288
  var valid_605289 = query.getOrDefault("Version")
  valid_605289 = validateParameter(valid_605289, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605289 != nil:
    section.add "Version", valid_605289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605290 = header.getOrDefault("X-Amz-Date")
  valid_605290 = validateParameter(valid_605290, JString, required = false,
                                 default = nil)
  if valid_605290 != nil:
    section.add "X-Amz-Date", valid_605290
  var valid_605291 = header.getOrDefault("X-Amz-Security-Token")
  valid_605291 = validateParameter(valid_605291, JString, required = false,
                                 default = nil)
  if valid_605291 != nil:
    section.add "X-Amz-Security-Token", valid_605291
  var valid_605292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605292 = validateParameter(valid_605292, JString, required = false,
                                 default = nil)
  if valid_605292 != nil:
    section.add "X-Amz-Content-Sha256", valid_605292
  var valid_605293 = header.getOrDefault("X-Amz-Algorithm")
  valid_605293 = validateParameter(valid_605293, JString, required = false,
                                 default = nil)
  if valid_605293 != nil:
    section.add "X-Amz-Algorithm", valid_605293
  var valid_605294 = header.getOrDefault("X-Amz-Signature")
  valid_605294 = validateParameter(valid_605294, JString, required = false,
                                 default = nil)
  if valid_605294 != nil:
    section.add "X-Amz-Signature", valid_605294
  var valid_605295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605295 = validateParameter(valid_605295, JString, required = false,
                                 default = nil)
  if valid_605295 != nil:
    section.add "X-Amz-SignedHeaders", valid_605295
  var valid_605296 = header.getOrDefault("X-Amz-Credential")
  valid_605296 = validateParameter(valid_605296, JString, required = false,
                                 default = nil)
  if valid_605296 != nil:
    section.add "X-Amz-Credential", valid_605296
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_605297 = formData.getOrDefault("PolicyArn")
  valid_605297 = validateParameter(valid_605297, JString, required = true,
                                 default = nil)
  if valid_605297 != nil:
    section.add "PolicyArn", valid_605297
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605298: Call_PostGetPolicy_605285; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605298.validator(path, query, header, formData, body)
  let scheme = call_605298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605298.url(scheme.get, call_605298.host, call_605298.base,
                         call_605298.route, valid.getOrDefault("path"))
  result = hook(call_605298, url, valid)

proc call*(call_605299: Call_PostGetPolicy_605285; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605300 = newJObject()
  var formData_605301 = newJObject()
  add(formData_605301, "PolicyArn", newJString(PolicyArn))
  add(query_605300, "Action", newJString(Action))
  add(query_605300, "Version", newJString(Version))
  result = call_605299.call(nil, query_605300, nil, formData_605301, nil)

var postGetPolicy* = Call_PostGetPolicy_605285(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_605286,
    base: "/", url: url_PostGetPolicy_605287, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_605269 = ref object of OpenApiRestCall_602433
proc url_GetGetPolicy_605271(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicy_605270(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_605272 = query.getOrDefault("PolicyArn")
  valid_605272 = validateParameter(valid_605272, JString, required = true,
                                 default = nil)
  if valid_605272 != nil:
    section.add "PolicyArn", valid_605272
  var valid_605273 = query.getOrDefault("Action")
  valid_605273 = validateParameter(valid_605273, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_605273 != nil:
    section.add "Action", valid_605273
  var valid_605274 = query.getOrDefault("Version")
  valid_605274 = validateParameter(valid_605274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605274 != nil:
    section.add "Version", valid_605274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605275 = header.getOrDefault("X-Amz-Date")
  valid_605275 = validateParameter(valid_605275, JString, required = false,
                                 default = nil)
  if valid_605275 != nil:
    section.add "X-Amz-Date", valid_605275
  var valid_605276 = header.getOrDefault("X-Amz-Security-Token")
  valid_605276 = validateParameter(valid_605276, JString, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "X-Amz-Security-Token", valid_605276
  var valid_605277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605277 = validateParameter(valid_605277, JString, required = false,
                                 default = nil)
  if valid_605277 != nil:
    section.add "X-Amz-Content-Sha256", valid_605277
  var valid_605278 = header.getOrDefault("X-Amz-Algorithm")
  valid_605278 = validateParameter(valid_605278, JString, required = false,
                                 default = nil)
  if valid_605278 != nil:
    section.add "X-Amz-Algorithm", valid_605278
  var valid_605279 = header.getOrDefault("X-Amz-Signature")
  valid_605279 = validateParameter(valid_605279, JString, required = false,
                                 default = nil)
  if valid_605279 != nil:
    section.add "X-Amz-Signature", valid_605279
  var valid_605280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605280 = validateParameter(valid_605280, JString, required = false,
                                 default = nil)
  if valid_605280 != nil:
    section.add "X-Amz-SignedHeaders", valid_605280
  var valid_605281 = header.getOrDefault("X-Amz-Credential")
  valid_605281 = validateParameter(valid_605281, JString, required = false,
                                 default = nil)
  if valid_605281 != nil:
    section.add "X-Amz-Credential", valid_605281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605282: Call_GetGetPolicy_605269; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605282.validator(path, query, header, formData, body)
  let scheme = call_605282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605282.url(scheme.get, call_605282.host, call_605282.base,
                         call_605282.route, valid.getOrDefault("path"))
  result = hook(call_605282, url, valid)

proc call*(call_605283: Call_GetGetPolicy_605269; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605284 = newJObject()
  add(query_605284, "PolicyArn", newJString(PolicyArn))
  add(query_605284, "Action", newJString(Action))
  add(query_605284, "Version", newJString(Version))
  result = call_605283.call(nil, query_605284, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_605269(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_605270, base: "/",
    url: url_GetGetPolicy_605271, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_605319 = ref object of OpenApiRestCall_602433
proc url_PostGetPolicyVersion_605321(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicyVersion_605320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605322 = query.getOrDefault("Action")
  valid_605322 = validateParameter(valid_605322, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_605322 != nil:
    section.add "Action", valid_605322
  var valid_605323 = query.getOrDefault("Version")
  valid_605323 = validateParameter(valid_605323, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605323 != nil:
    section.add "Version", valid_605323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605324 = header.getOrDefault("X-Amz-Date")
  valid_605324 = validateParameter(valid_605324, JString, required = false,
                                 default = nil)
  if valid_605324 != nil:
    section.add "X-Amz-Date", valid_605324
  var valid_605325 = header.getOrDefault("X-Amz-Security-Token")
  valid_605325 = validateParameter(valid_605325, JString, required = false,
                                 default = nil)
  if valid_605325 != nil:
    section.add "X-Amz-Security-Token", valid_605325
  var valid_605326 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605326 = validateParameter(valid_605326, JString, required = false,
                                 default = nil)
  if valid_605326 != nil:
    section.add "X-Amz-Content-Sha256", valid_605326
  var valid_605327 = header.getOrDefault("X-Amz-Algorithm")
  valid_605327 = validateParameter(valid_605327, JString, required = false,
                                 default = nil)
  if valid_605327 != nil:
    section.add "X-Amz-Algorithm", valid_605327
  var valid_605328 = header.getOrDefault("X-Amz-Signature")
  valid_605328 = validateParameter(valid_605328, JString, required = false,
                                 default = nil)
  if valid_605328 != nil:
    section.add "X-Amz-Signature", valid_605328
  var valid_605329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605329 = validateParameter(valid_605329, JString, required = false,
                                 default = nil)
  if valid_605329 != nil:
    section.add "X-Amz-SignedHeaders", valid_605329
  var valid_605330 = header.getOrDefault("X-Amz-Credential")
  valid_605330 = validateParameter(valid_605330, JString, required = false,
                                 default = nil)
  if valid_605330 != nil:
    section.add "X-Amz-Credential", valid_605330
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_605331 = formData.getOrDefault("PolicyArn")
  valid_605331 = validateParameter(valid_605331, JString, required = true,
                                 default = nil)
  if valid_605331 != nil:
    section.add "PolicyArn", valid_605331
  var valid_605332 = formData.getOrDefault("VersionId")
  valid_605332 = validateParameter(valid_605332, JString, required = true,
                                 default = nil)
  if valid_605332 != nil:
    section.add "VersionId", valid_605332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605333: Call_PostGetPolicyVersion_605319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605333.validator(path, query, header, formData, body)
  let scheme = call_605333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605333.url(scheme.get, call_605333.host, call_605333.base,
                         call_605333.route, valid.getOrDefault("path"))
  result = hook(call_605333, url, valid)

proc call*(call_605334: Call_PostGetPolicyVersion_605319; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  var query_605335 = newJObject()
  var formData_605336 = newJObject()
  add(formData_605336, "PolicyArn", newJString(PolicyArn))
  add(query_605335, "Action", newJString(Action))
  add(query_605335, "Version", newJString(Version))
  add(formData_605336, "VersionId", newJString(VersionId))
  result = call_605334.call(nil, query_605335, nil, formData_605336, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_605319(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_605320, base: "/",
    url: url_PostGetPolicyVersion_605321, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_605302 = ref object of OpenApiRestCall_602433
proc url_GetGetPolicyVersion_605304(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicyVersion_605303(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_605305 = query.getOrDefault("PolicyArn")
  valid_605305 = validateParameter(valid_605305, JString, required = true,
                                 default = nil)
  if valid_605305 != nil:
    section.add "PolicyArn", valid_605305
  var valid_605306 = query.getOrDefault("VersionId")
  valid_605306 = validateParameter(valid_605306, JString, required = true,
                                 default = nil)
  if valid_605306 != nil:
    section.add "VersionId", valid_605306
  var valid_605307 = query.getOrDefault("Action")
  valid_605307 = validateParameter(valid_605307, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_605307 != nil:
    section.add "Action", valid_605307
  var valid_605308 = query.getOrDefault("Version")
  valid_605308 = validateParameter(valid_605308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605308 != nil:
    section.add "Version", valid_605308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605309 = header.getOrDefault("X-Amz-Date")
  valid_605309 = validateParameter(valid_605309, JString, required = false,
                                 default = nil)
  if valid_605309 != nil:
    section.add "X-Amz-Date", valid_605309
  var valid_605310 = header.getOrDefault("X-Amz-Security-Token")
  valid_605310 = validateParameter(valid_605310, JString, required = false,
                                 default = nil)
  if valid_605310 != nil:
    section.add "X-Amz-Security-Token", valid_605310
  var valid_605311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605311 = validateParameter(valid_605311, JString, required = false,
                                 default = nil)
  if valid_605311 != nil:
    section.add "X-Amz-Content-Sha256", valid_605311
  var valid_605312 = header.getOrDefault("X-Amz-Algorithm")
  valid_605312 = validateParameter(valid_605312, JString, required = false,
                                 default = nil)
  if valid_605312 != nil:
    section.add "X-Amz-Algorithm", valid_605312
  var valid_605313 = header.getOrDefault("X-Amz-Signature")
  valid_605313 = validateParameter(valid_605313, JString, required = false,
                                 default = nil)
  if valid_605313 != nil:
    section.add "X-Amz-Signature", valid_605313
  var valid_605314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605314 = validateParameter(valid_605314, JString, required = false,
                                 default = nil)
  if valid_605314 != nil:
    section.add "X-Amz-SignedHeaders", valid_605314
  var valid_605315 = header.getOrDefault("X-Amz-Credential")
  valid_605315 = validateParameter(valid_605315, JString, required = false,
                                 default = nil)
  if valid_605315 != nil:
    section.add "X-Amz-Credential", valid_605315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605316: Call_GetGetPolicyVersion_605302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605316.validator(path, query, header, formData, body)
  let scheme = call_605316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605316.url(scheme.get, call_605316.host, call_605316.base,
                         call_605316.route, valid.getOrDefault("path"))
  result = hook(call_605316, url, valid)

proc call*(call_605317: Call_GetGetPolicyVersion_605302; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605318 = newJObject()
  add(query_605318, "PolicyArn", newJString(PolicyArn))
  add(query_605318, "VersionId", newJString(VersionId))
  add(query_605318, "Action", newJString(Action))
  add(query_605318, "Version", newJString(Version))
  result = call_605317.call(nil, query_605318, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_605302(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_605303, base: "/",
    url: url_GetGetPolicyVersion_605304, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_605353 = ref object of OpenApiRestCall_602433
proc url_PostGetRole_605355(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRole_605354(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605356 = query.getOrDefault("Action")
  valid_605356 = validateParameter(valid_605356, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_605356 != nil:
    section.add "Action", valid_605356
  var valid_605357 = query.getOrDefault("Version")
  valid_605357 = validateParameter(valid_605357, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605357 != nil:
    section.add "Version", valid_605357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605358 = header.getOrDefault("X-Amz-Date")
  valid_605358 = validateParameter(valid_605358, JString, required = false,
                                 default = nil)
  if valid_605358 != nil:
    section.add "X-Amz-Date", valid_605358
  var valid_605359 = header.getOrDefault("X-Amz-Security-Token")
  valid_605359 = validateParameter(valid_605359, JString, required = false,
                                 default = nil)
  if valid_605359 != nil:
    section.add "X-Amz-Security-Token", valid_605359
  var valid_605360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605360 = validateParameter(valid_605360, JString, required = false,
                                 default = nil)
  if valid_605360 != nil:
    section.add "X-Amz-Content-Sha256", valid_605360
  var valid_605361 = header.getOrDefault("X-Amz-Algorithm")
  valid_605361 = validateParameter(valid_605361, JString, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "X-Amz-Algorithm", valid_605361
  var valid_605362 = header.getOrDefault("X-Amz-Signature")
  valid_605362 = validateParameter(valid_605362, JString, required = false,
                                 default = nil)
  if valid_605362 != nil:
    section.add "X-Amz-Signature", valid_605362
  var valid_605363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "X-Amz-SignedHeaders", valid_605363
  var valid_605364 = header.getOrDefault("X-Amz-Credential")
  valid_605364 = validateParameter(valid_605364, JString, required = false,
                                 default = nil)
  if valid_605364 != nil:
    section.add "X-Amz-Credential", valid_605364
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605365 = formData.getOrDefault("RoleName")
  valid_605365 = validateParameter(valid_605365, JString, required = true,
                                 default = nil)
  if valid_605365 != nil:
    section.add "RoleName", valid_605365
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605366: Call_PostGetRole_605353; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_605366.validator(path, query, header, formData, body)
  let scheme = call_605366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605366.url(scheme.get, call_605366.host, call_605366.base,
                         call_605366.route, valid.getOrDefault("path"))
  result = hook(call_605366, url, valid)

proc call*(call_605367: Call_PostGetRole_605353; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605368 = newJObject()
  var formData_605369 = newJObject()
  add(formData_605369, "RoleName", newJString(RoleName))
  add(query_605368, "Action", newJString(Action))
  add(query_605368, "Version", newJString(Version))
  result = call_605367.call(nil, query_605368, nil, formData_605369, nil)

var postGetRole* = Call_PostGetRole_605353(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_605354,
                                        base: "/", url: url_PostGetRole_605355,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_605337 = ref object of OpenApiRestCall_602433
proc url_GetGetRole_605339(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRole_605338(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605340 = query.getOrDefault("Action")
  valid_605340 = validateParameter(valid_605340, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_605340 != nil:
    section.add "Action", valid_605340
  var valid_605341 = query.getOrDefault("RoleName")
  valid_605341 = validateParameter(valid_605341, JString, required = true,
                                 default = nil)
  if valid_605341 != nil:
    section.add "RoleName", valid_605341
  var valid_605342 = query.getOrDefault("Version")
  valid_605342 = validateParameter(valid_605342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605342 != nil:
    section.add "Version", valid_605342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605343 = header.getOrDefault("X-Amz-Date")
  valid_605343 = validateParameter(valid_605343, JString, required = false,
                                 default = nil)
  if valid_605343 != nil:
    section.add "X-Amz-Date", valid_605343
  var valid_605344 = header.getOrDefault("X-Amz-Security-Token")
  valid_605344 = validateParameter(valid_605344, JString, required = false,
                                 default = nil)
  if valid_605344 != nil:
    section.add "X-Amz-Security-Token", valid_605344
  var valid_605345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605345 = validateParameter(valid_605345, JString, required = false,
                                 default = nil)
  if valid_605345 != nil:
    section.add "X-Amz-Content-Sha256", valid_605345
  var valid_605346 = header.getOrDefault("X-Amz-Algorithm")
  valid_605346 = validateParameter(valid_605346, JString, required = false,
                                 default = nil)
  if valid_605346 != nil:
    section.add "X-Amz-Algorithm", valid_605346
  var valid_605347 = header.getOrDefault("X-Amz-Signature")
  valid_605347 = validateParameter(valid_605347, JString, required = false,
                                 default = nil)
  if valid_605347 != nil:
    section.add "X-Amz-Signature", valid_605347
  var valid_605348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605348 = validateParameter(valid_605348, JString, required = false,
                                 default = nil)
  if valid_605348 != nil:
    section.add "X-Amz-SignedHeaders", valid_605348
  var valid_605349 = header.getOrDefault("X-Amz-Credential")
  valid_605349 = validateParameter(valid_605349, JString, required = false,
                                 default = nil)
  if valid_605349 != nil:
    section.add "X-Amz-Credential", valid_605349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605350: Call_GetGetRole_605337; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_605350.validator(path, query, header, formData, body)
  let scheme = call_605350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605350.url(scheme.get, call_605350.host, call_605350.base,
                         call_605350.route, valid.getOrDefault("path"))
  result = hook(call_605350, url, valid)

proc call*(call_605351: Call_GetGetRole_605337; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605352 = newJObject()
  add(query_605352, "Action", newJString(Action))
  add(query_605352, "RoleName", newJString(RoleName))
  add(query_605352, "Version", newJString(Version))
  result = call_605351.call(nil, query_605352, nil, nil, nil)

var getGetRole* = Call_GetGetRole_605337(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_605338,
                                      base: "/", url: url_GetGetRole_605339,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_605387 = ref object of OpenApiRestCall_602433
proc url_PostGetRolePolicy_605389(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRolePolicy_605388(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605390 = query.getOrDefault("Action")
  valid_605390 = validateParameter(valid_605390, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_605390 != nil:
    section.add "Action", valid_605390
  var valid_605391 = query.getOrDefault("Version")
  valid_605391 = validateParameter(valid_605391, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605391 != nil:
    section.add "Version", valid_605391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605392 = header.getOrDefault("X-Amz-Date")
  valid_605392 = validateParameter(valid_605392, JString, required = false,
                                 default = nil)
  if valid_605392 != nil:
    section.add "X-Amz-Date", valid_605392
  var valid_605393 = header.getOrDefault("X-Amz-Security-Token")
  valid_605393 = validateParameter(valid_605393, JString, required = false,
                                 default = nil)
  if valid_605393 != nil:
    section.add "X-Amz-Security-Token", valid_605393
  var valid_605394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605394 = validateParameter(valid_605394, JString, required = false,
                                 default = nil)
  if valid_605394 != nil:
    section.add "X-Amz-Content-Sha256", valid_605394
  var valid_605395 = header.getOrDefault("X-Amz-Algorithm")
  valid_605395 = validateParameter(valid_605395, JString, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "X-Amz-Algorithm", valid_605395
  var valid_605396 = header.getOrDefault("X-Amz-Signature")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "X-Amz-Signature", valid_605396
  var valid_605397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605397 = validateParameter(valid_605397, JString, required = false,
                                 default = nil)
  if valid_605397 != nil:
    section.add "X-Amz-SignedHeaders", valid_605397
  var valid_605398 = header.getOrDefault("X-Amz-Credential")
  valid_605398 = validateParameter(valid_605398, JString, required = false,
                                 default = nil)
  if valid_605398 != nil:
    section.add "X-Amz-Credential", valid_605398
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_605399 = formData.getOrDefault("PolicyName")
  valid_605399 = validateParameter(valid_605399, JString, required = true,
                                 default = nil)
  if valid_605399 != nil:
    section.add "PolicyName", valid_605399
  var valid_605400 = formData.getOrDefault("RoleName")
  valid_605400 = validateParameter(valid_605400, JString, required = true,
                                 default = nil)
  if valid_605400 != nil:
    section.add "RoleName", valid_605400
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605401: Call_PostGetRolePolicy_605387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_605401.validator(path, query, header, formData, body)
  let scheme = call_605401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605401.url(scheme.get, call_605401.host, call_605401.base,
                         call_605401.route, valid.getOrDefault("path"))
  result = hook(call_605401, url, valid)

proc call*(call_605402: Call_PostGetRolePolicy_605387; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605403 = newJObject()
  var formData_605404 = newJObject()
  add(formData_605404, "PolicyName", newJString(PolicyName))
  add(formData_605404, "RoleName", newJString(RoleName))
  add(query_605403, "Action", newJString(Action))
  add(query_605403, "Version", newJString(Version))
  result = call_605402.call(nil, query_605403, nil, formData_605404, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_605387(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_605388,
    base: "/", url: url_PostGetRolePolicy_605389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_605370 = ref object of OpenApiRestCall_602433
proc url_GetGetRolePolicy_605372(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRolePolicy_605371(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605373 = query.getOrDefault("Action")
  valid_605373 = validateParameter(valid_605373, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_605373 != nil:
    section.add "Action", valid_605373
  var valid_605374 = query.getOrDefault("RoleName")
  valid_605374 = validateParameter(valid_605374, JString, required = true,
                                 default = nil)
  if valid_605374 != nil:
    section.add "RoleName", valid_605374
  var valid_605375 = query.getOrDefault("Version")
  valid_605375 = validateParameter(valid_605375, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605375 != nil:
    section.add "Version", valid_605375
  var valid_605376 = query.getOrDefault("PolicyName")
  valid_605376 = validateParameter(valid_605376, JString, required = true,
                                 default = nil)
  if valid_605376 != nil:
    section.add "PolicyName", valid_605376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605377 = header.getOrDefault("X-Amz-Date")
  valid_605377 = validateParameter(valid_605377, JString, required = false,
                                 default = nil)
  if valid_605377 != nil:
    section.add "X-Amz-Date", valid_605377
  var valid_605378 = header.getOrDefault("X-Amz-Security-Token")
  valid_605378 = validateParameter(valid_605378, JString, required = false,
                                 default = nil)
  if valid_605378 != nil:
    section.add "X-Amz-Security-Token", valid_605378
  var valid_605379 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605379 = validateParameter(valid_605379, JString, required = false,
                                 default = nil)
  if valid_605379 != nil:
    section.add "X-Amz-Content-Sha256", valid_605379
  var valid_605380 = header.getOrDefault("X-Amz-Algorithm")
  valid_605380 = validateParameter(valid_605380, JString, required = false,
                                 default = nil)
  if valid_605380 != nil:
    section.add "X-Amz-Algorithm", valid_605380
  var valid_605381 = header.getOrDefault("X-Amz-Signature")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "X-Amz-Signature", valid_605381
  var valid_605382 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "X-Amz-SignedHeaders", valid_605382
  var valid_605383 = header.getOrDefault("X-Amz-Credential")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "X-Amz-Credential", valid_605383
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605384: Call_GetGetRolePolicy_605370; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_605384.validator(path, query, header, formData, body)
  let scheme = call_605384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605384.url(scheme.get, call_605384.host, call_605384.base,
                         call_605384.route, valid.getOrDefault("path"))
  result = hook(call_605384, url, valid)

proc call*(call_605385: Call_GetGetRolePolicy_605370; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_605386 = newJObject()
  add(query_605386, "Action", newJString(Action))
  add(query_605386, "RoleName", newJString(RoleName))
  add(query_605386, "Version", newJString(Version))
  add(query_605386, "PolicyName", newJString(PolicyName))
  result = call_605385.call(nil, query_605386, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_605370(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_605371,
    base: "/", url: url_GetGetRolePolicy_605372,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_605421 = ref object of OpenApiRestCall_602433
proc url_PostGetSAMLProvider_605423(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSAMLProvider_605422(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605424 = query.getOrDefault("Action")
  valid_605424 = validateParameter(valid_605424, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_605424 != nil:
    section.add "Action", valid_605424
  var valid_605425 = query.getOrDefault("Version")
  valid_605425 = validateParameter(valid_605425, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605425 != nil:
    section.add "Version", valid_605425
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605426 = header.getOrDefault("X-Amz-Date")
  valid_605426 = validateParameter(valid_605426, JString, required = false,
                                 default = nil)
  if valid_605426 != nil:
    section.add "X-Amz-Date", valid_605426
  var valid_605427 = header.getOrDefault("X-Amz-Security-Token")
  valid_605427 = validateParameter(valid_605427, JString, required = false,
                                 default = nil)
  if valid_605427 != nil:
    section.add "X-Amz-Security-Token", valid_605427
  var valid_605428 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605428 = validateParameter(valid_605428, JString, required = false,
                                 default = nil)
  if valid_605428 != nil:
    section.add "X-Amz-Content-Sha256", valid_605428
  var valid_605429 = header.getOrDefault("X-Amz-Algorithm")
  valid_605429 = validateParameter(valid_605429, JString, required = false,
                                 default = nil)
  if valid_605429 != nil:
    section.add "X-Amz-Algorithm", valid_605429
  var valid_605430 = header.getOrDefault("X-Amz-Signature")
  valid_605430 = validateParameter(valid_605430, JString, required = false,
                                 default = nil)
  if valid_605430 != nil:
    section.add "X-Amz-Signature", valid_605430
  var valid_605431 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605431 = validateParameter(valid_605431, JString, required = false,
                                 default = nil)
  if valid_605431 != nil:
    section.add "X-Amz-SignedHeaders", valid_605431
  var valid_605432 = header.getOrDefault("X-Amz-Credential")
  valid_605432 = validateParameter(valid_605432, JString, required = false,
                                 default = nil)
  if valid_605432 != nil:
    section.add "X-Amz-Credential", valid_605432
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_605433 = formData.getOrDefault("SAMLProviderArn")
  valid_605433 = validateParameter(valid_605433, JString, required = true,
                                 default = nil)
  if valid_605433 != nil:
    section.add "SAMLProviderArn", valid_605433
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605434: Call_PostGetSAMLProvider_605421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_605434.validator(path, query, header, formData, body)
  let scheme = call_605434.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605434.url(scheme.get, call_605434.host, call_605434.base,
                         call_605434.route, valid.getOrDefault("path"))
  result = hook(call_605434, url, valid)

proc call*(call_605435: Call_PostGetSAMLProvider_605421; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605436 = newJObject()
  var formData_605437 = newJObject()
  add(formData_605437, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_605436, "Action", newJString(Action))
  add(query_605436, "Version", newJString(Version))
  result = call_605435.call(nil, query_605436, nil, formData_605437, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_605421(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_605422, base: "/",
    url: url_PostGetSAMLProvider_605423, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_605405 = ref object of OpenApiRestCall_602433
proc url_GetGetSAMLProvider_605407(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSAMLProvider_605406(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605408 = query.getOrDefault("Action")
  valid_605408 = validateParameter(valid_605408, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_605408 != nil:
    section.add "Action", valid_605408
  var valid_605409 = query.getOrDefault("SAMLProviderArn")
  valid_605409 = validateParameter(valid_605409, JString, required = true,
                                 default = nil)
  if valid_605409 != nil:
    section.add "SAMLProviderArn", valid_605409
  var valid_605410 = query.getOrDefault("Version")
  valid_605410 = validateParameter(valid_605410, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605410 != nil:
    section.add "Version", valid_605410
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605411 = header.getOrDefault("X-Amz-Date")
  valid_605411 = validateParameter(valid_605411, JString, required = false,
                                 default = nil)
  if valid_605411 != nil:
    section.add "X-Amz-Date", valid_605411
  var valid_605412 = header.getOrDefault("X-Amz-Security-Token")
  valid_605412 = validateParameter(valid_605412, JString, required = false,
                                 default = nil)
  if valid_605412 != nil:
    section.add "X-Amz-Security-Token", valid_605412
  var valid_605413 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605413 = validateParameter(valid_605413, JString, required = false,
                                 default = nil)
  if valid_605413 != nil:
    section.add "X-Amz-Content-Sha256", valid_605413
  var valid_605414 = header.getOrDefault("X-Amz-Algorithm")
  valid_605414 = validateParameter(valid_605414, JString, required = false,
                                 default = nil)
  if valid_605414 != nil:
    section.add "X-Amz-Algorithm", valid_605414
  var valid_605415 = header.getOrDefault("X-Amz-Signature")
  valid_605415 = validateParameter(valid_605415, JString, required = false,
                                 default = nil)
  if valid_605415 != nil:
    section.add "X-Amz-Signature", valid_605415
  var valid_605416 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605416 = validateParameter(valid_605416, JString, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "X-Amz-SignedHeaders", valid_605416
  var valid_605417 = header.getOrDefault("X-Amz-Credential")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "X-Amz-Credential", valid_605417
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605418: Call_GetGetSAMLProvider_605405; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_605418.validator(path, query, header, formData, body)
  let scheme = call_605418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605418.url(scheme.get, call_605418.host, call_605418.base,
                         call_605418.route, valid.getOrDefault("path"))
  result = hook(call_605418, url, valid)

proc call*(call_605419: Call_GetGetSAMLProvider_605405; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_605420 = newJObject()
  add(query_605420, "Action", newJString(Action))
  add(query_605420, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_605420, "Version", newJString(Version))
  result = call_605419.call(nil, query_605420, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_605405(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_605406,
    base: "/", url: url_GetGetSAMLProvider_605407,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_605456 = ref object of OpenApiRestCall_602433
proc url_PostGetSSHPublicKey_605458(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSSHPublicKey_605457(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605459 = query.getOrDefault("Action")
  valid_605459 = validateParameter(valid_605459, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_605459 != nil:
    section.add "Action", valid_605459
  var valid_605460 = query.getOrDefault("Version")
  valid_605460 = validateParameter(valid_605460, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605460 != nil:
    section.add "Version", valid_605460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605461 = header.getOrDefault("X-Amz-Date")
  valid_605461 = validateParameter(valid_605461, JString, required = false,
                                 default = nil)
  if valid_605461 != nil:
    section.add "X-Amz-Date", valid_605461
  var valid_605462 = header.getOrDefault("X-Amz-Security-Token")
  valid_605462 = validateParameter(valid_605462, JString, required = false,
                                 default = nil)
  if valid_605462 != nil:
    section.add "X-Amz-Security-Token", valid_605462
  var valid_605463 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605463 = validateParameter(valid_605463, JString, required = false,
                                 default = nil)
  if valid_605463 != nil:
    section.add "X-Amz-Content-Sha256", valid_605463
  var valid_605464 = header.getOrDefault("X-Amz-Algorithm")
  valid_605464 = validateParameter(valid_605464, JString, required = false,
                                 default = nil)
  if valid_605464 != nil:
    section.add "X-Amz-Algorithm", valid_605464
  var valid_605465 = header.getOrDefault("X-Amz-Signature")
  valid_605465 = validateParameter(valid_605465, JString, required = false,
                                 default = nil)
  if valid_605465 != nil:
    section.add "X-Amz-Signature", valid_605465
  var valid_605466 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605466 = validateParameter(valid_605466, JString, required = false,
                                 default = nil)
  if valid_605466 != nil:
    section.add "X-Amz-SignedHeaders", valid_605466
  var valid_605467 = header.getOrDefault("X-Amz-Credential")
  valid_605467 = validateParameter(valid_605467, JString, required = false,
                                 default = nil)
  if valid_605467 != nil:
    section.add "X-Amz-Credential", valid_605467
  result.add "header", section
  ## parameters in `formData` object:
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Encoding` field"
  var valid_605468 = formData.getOrDefault("Encoding")
  valid_605468 = validateParameter(valid_605468, JString, required = true,
                                 default = newJString("SSH"))
  if valid_605468 != nil:
    section.add "Encoding", valid_605468
  var valid_605469 = formData.getOrDefault("UserName")
  valid_605469 = validateParameter(valid_605469, JString, required = true,
                                 default = nil)
  if valid_605469 != nil:
    section.add "UserName", valid_605469
  var valid_605470 = formData.getOrDefault("SSHPublicKeyId")
  valid_605470 = validateParameter(valid_605470, JString, required = true,
                                 default = nil)
  if valid_605470 != nil:
    section.add "SSHPublicKeyId", valid_605470
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605471: Call_PostGetSSHPublicKey_605456; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605471.validator(path, query, header, formData, body)
  let scheme = call_605471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605471.url(scheme.get, call_605471.host, call_605471.base,
                         call_605471.route, valid.getOrDefault("path"))
  result = hook(call_605471, url, valid)

proc call*(call_605472: Call_PostGetSSHPublicKey_605456; UserName: string;
          SSHPublicKeyId: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605473 = newJObject()
  var formData_605474 = newJObject()
  add(formData_605474, "Encoding", newJString(Encoding))
  add(formData_605474, "UserName", newJString(UserName))
  add(formData_605474, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_605473, "Action", newJString(Action))
  add(query_605473, "Version", newJString(Version))
  result = call_605472.call(nil, query_605473, nil, formData_605474, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_605456(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_605457, base: "/",
    url: url_PostGetSSHPublicKey_605458, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_605438 = ref object of OpenApiRestCall_602433
proc url_GetGetSSHPublicKey_605440(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSSHPublicKey_605439(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_605441 = query.getOrDefault("SSHPublicKeyId")
  valid_605441 = validateParameter(valid_605441, JString, required = true,
                                 default = nil)
  if valid_605441 != nil:
    section.add "SSHPublicKeyId", valid_605441
  var valid_605442 = query.getOrDefault("UserName")
  valid_605442 = validateParameter(valid_605442, JString, required = true,
                                 default = nil)
  if valid_605442 != nil:
    section.add "UserName", valid_605442
  var valid_605443 = query.getOrDefault("Action")
  valid_605443 = validateParameter(valid_605443, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_605443 != nil:
    section.add "Action", valid_605443
  var valid_605444 = query.getOrDefault("Encoding")
  valid_605444 = validateParameter(valid_605444, JString, required = true,
                                 default = newJString("SSH"))
  if valid_605444 != nil:
    section.add "Encoding", valid_605444
  var valid_605445 = query.getOrDefault("Version")
  valid_605445 = validateParameter(valid_605445, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605445 != nil:
    section.add "Version", valid_605445
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605446 = header.getOrDefault("X-Amz-Date")
  valid_605446 = validateParameter(valid_605446, JString, required = false,
                                 default = nil)
  if valid_605446 != nil:
    section.add "X-Amz-Date", valid_605446
  var valid_605447 = header.getOrDefault("X-Amz-Security-Token")
  valid_605447 = validateParameter(valid_605447, JString, required = false,
                                 default = nil)
  if valid_605447 != nil:
    section.add "X-Amz-Security-Token", valid_605447
  var valid_605448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605448 = validateParameter(valid_605448, JString, required = false,
                                 default = nil)
  if valid_605448 != nil:
    section.add "X-Amz-Content-Sha256", valid_605448
  var valid_605449 = header.getOrDefault("X-Amz-Algorithm")
  valid_605449 = validateParameter(valid_605449, JString, required = false,
                                 default = nil)
  if valid_605449 != nil:
    section.add "X-Amz-Algorithm", valid_605449
  var valid_605450 = header.getOrDefault("X-Amz-Signature")
  valid_605450 = validateParameter(valid_605450, JString, required = false,
                                 default = nil)
  if valid_605450 != nil:
    section.add "X-Amz-Signature", valid_605450
  var valid_605451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605451 = validateParameter(valid_605451, JString, required = false,
                                 default = nil)
  if valid_605451 != nil:
    section.add "X-Amz-SignedHeaders", valid_605451
  var valid_605452 = header.getOrDefault("X-Amz-Credential")
  valid_605452 = validateParameter(valid_605452, JString, required = false,
                                 default = nil)
  if valid_605452 != nil:
    section.add "X-Amz-Credential", valid_605452
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605453: Call_GetGetSSHPublicKey_605438; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605453.validator(path, query, header, formData, body)
  let scheme = call_605453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605453.url(scheme.get, call_605453.host, call_605453.base,
                         call_605453.route, valid.getOrDefault("path"))
  result = hook(call_605453, url, valid)

proc call*(call_605454: Call_GetGetSSHPublicKey_605438; SSHPublicKeyId: string;
          UserName: string; Action: string = "GetSSHPublicKey";
          Encoding: string = "SSH"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: string (required)
  var query_605455 = newJObject()
  add(query_605455, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_605455, "UserName", newJString(UserName))
  add(query_605455, "Action", newJString(Action))
  add(query_605455, "Encoding", newJString(Encoding))
  add(query_605455, "Version", newJString(Version))
  result = call_605454.call(nil, query_605455, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_605438(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_605439,
    base: "/", url: url_GetGetSSHPublicKey_605440,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_605491 = ref object of OpenApiRestCall_602433
proc url_PostGetServerCertificate_605493(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServerCertificate_605492(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605494 = query.getOrDefault("Action")
  valid_605494 = validateParameter(valid_605494, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_605494 != nil:
    section.add "Action", valid_605494
  var valid_605495 = query.getOrDefault("Version")
  valid_605495 = validateParameter(valid_605495, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605495 != nil:
    section.add "Version", valid_605495
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605496 = header.getOrDefault("X-Amz-Date")
  valid_605496 = validateParameter(valid_605496, JString, required = false,
                                 default = nil)
  if valid_605496 != nil:
    section.add "X-Amz-Date", valid_605496
  var valid_605497 = header.getOrDefault("X-Amz-Security-Token")
  valid_605497 = validateParameter(valid_605497, JString, required = false,
                                 default = nil)
  if valid_605497 != nil:
    section.add "X-Amz-Security-Token", valid_605497
  var valid_605498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605498 = validateParameter(valid_605498, JString, required = false,
                                 default = nil)
  if valid_605498 != nil:
    section.add "X-Amz-Content-Sha256", valid_605498
  var valid_605499 = header.getOrDefault("X-Amz-Algorithm")
  valid_605499 = validateParameter(valid_605499, JString, required = false,
                                 default = nil)
  if valid_605499 != nil:
    section.add "X-Amz-Algorithm", valid_605499
  var valid_605500 = header.getOrDefault("X-Amz-Signature")
  valid_605500 = validateParameter(valid_605500, JString, required = false,
                                 default = nil)
  if valid_605500 != nil:
    section.add "X-Amz-Signature", valid_605500
  var valid_605501 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605501 = validateParameter(valid_605501, JString, required = false,
                                 default = nil)
  if valid_605501 != nil:
    section.add "X-Amz-SignedHeaders", valid_605501
  var valid_605502 = header.getOrDefault("X-Amz-Credential")
  valid_605502 = validateParameter(valid_605502, JString, required = false,
                                 default = nil)
  if valid_605502 != nil:
    section.add "X-Amz-Credential", valid_605502
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_605503 = formData.getOrDefault("ServerCertificateName")
  valid_605503 = validateParameter(valid_605503, JString, required = true,
                                 default = nil)
  if valid_605503 != nil:
    section.add "ServerCertificateName", valid_605503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605504: Call_PostGetServerCertificate_605491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_605504.validator(path, query, header, formData, body)
  let scheme = call_605504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605504.url(scheme.get, call_605504.host, call_605504.base,
                         call_605504.route, valid.getOrDefault("path"))
  result = hook(call_605504, url, valid)

proc call*(call_605505: Call_PostGetServerCertificate_605491;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605506 = newJObject()
  var formData_605507 = newJObject()
  add(formData_605507, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605506, "Action", newJString(Action))
  add(query_605506, "Version", newJString(Version))
  result = call_605505.call(nil, query_605506, nil, formData_605507, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_605491(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_605492, base: "/",
    url: url_PostGetServerCertificate_605493, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_605475 = ref object of OpenApiRestCall_602433
proc url_GetGetServerCertificate_605477(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServerCertificate_605476(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_605478 = query.getOrDefault("ServerCertificateName")
  valid_605478 = validateParameter(valid_605478, JString, required = true,
                                 default = nil)
  if valid_605478 != nil:
    section.add "ServerCertificateName", valid_605478
  var valid_605479 = query.getOrDefault("Action")
  valid_605479 = validateParameter(valid_605479, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_605479 != nil:
    section.add "Action", valid_605479
  var valid_605480 = query.getOrDefault("Version")
  valid_605480 = validateParameter(valid_605480, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605480 != nil:
    section.add "Version", valid_605480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605481 = header.getOrDefault("X-Amz-Date")
  valid_605481 = validateParameter(valid_605481, JString, required = false,
                                 default = nil)
  if valid_605481 != nil:
    section.add "X-Amz-Date", valid_605481
  var valid_605482 = header.getOrDefault("X-Amz-Security-Token")
  valid_605482 = validateParameter(valid_605482, JString, required = false,
                                 default = nil)
  if valid_605482 != nil:
    section.add "X-Amz-Security-Token", valid_605482
  var valid_605483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605483 = validateParameter(valid_605483, JString, required = false,
                                 default = nil)
  if valid_605483 != nil:
    section.add "X-Amz-Content-Sha256", valid_605483
  var valid_605484 = header.getOrDefault("X-Amz-Algorithm")
  valid_605484 = validateParameter(valid_605484, JString, required = false,
                                 default = nil)
  if valid_605484 != nil:
    section.add "X-Amz-Algorithm", valid_605484
  var valid_605485 = header.getOrDefault("X-Amz-Signature")
  valid_605485 = validateParameter(valid_605485, JString, required = false,
                                 default = nil)
  if valid_605485 != nil:
    section.add "X-Amz-Signature", valid_605485
  var valid_605486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605486 = validateParameter(valid_605486, JString, required = false,
                                 default = nil)
  if valid_605486 != nil:
    section.add "X-Amz-SignedHeaders", valid_605486
  var valid_605487 = header.getOrDefault("X-Amz-Credential")
  valid_605487 = validateParameter(valid_605487, JString, required = false,
                                 default = nil)
  if valid_605487 != nil:
    section.add "X-Amz-Credential", valid_605487
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605488: Call_GetGetServerCertificate_605475; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_605488.validator(path, query, header, formData, body)
  let scheme = call_605488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605488.url(scheme.get, call_605488.host, call_605488.base,
                         call_605488.route, valid.getOrDefault("path"))
  result = hook(call_605488, url, valid)

proc call*(call_605489: Call_GetGetServerCertificate_605475;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605490 = newJObject()
  add(query_605490, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605490, "Action", newJString(Action))
  add(query_605490, "Version", newJString(Version))
  result = call_605489.call(nil, query_605490, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_605475(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_605476, base: "/",
    url: url_GetGetServerCertificate_605477, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_605526 = ref object of OpenApiRestCall_602433
proc url_PostGetServiceLastAccessedDetails_605528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetails_605527(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605529 = query.getOrDefault("Action")
  valid_605529 = validateParameter(valid_605529, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_605529 != nil:
    section.add "Action", valid_605529
  var valid_605530 = query.getOrDefault("Version")
  valid_605530 = validateParameter(valid_605530, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605530 != nil:
    section.add "Version", valid_605530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605531 = header.getOrDefault("X-Amz-Date")
  valid_605531 = validateParameter(valid_605531, JString, required = false,
                                 default = nil)
  if valid_605531 != nil:
    section.add "X-Amz-Date", valid_605531
  var valid_605532 = header.getOrDefault("X-Amz-Security-Token")
  valid_605532 = validateParameter(valid_605532, JString, required = false,
                                 default = nil)
  if valid_605532 != nil:
    section.add "X-Amz-Security-Token", valid_605532
  var valid_605533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605533 = validateParameter(valid_605533, JString, required = false,
                                 default = nil)
  if valid_605533 != nil:
    section.add "X-Amz-Content-Sha256", valid_605533
  var valid_605534 = header.getOrDefault("X-Amz-Algorithm")
  valid_605534 = validateParameter(valid_605534, JString, required = false,
                                 default = nil)
  if valid_605534 != nil:
    section.add "X-Amz-Algorithm", valid_605534
  var valid_605535 = header.getOrDefault("X-Amz-Signature")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "X-Amz-Signature", valid_605535
  var valid_605536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605536 = validateParameter(valid_605536, JString, required = false,
                                 default = nil)
  if valid_605536 != nil:
    section.add "X-Amz-SignedHeaders", valid_605536
  var valid_605537 = header.getOrDefault("X-Amz-Credential")
  valid_605537 = validateParameter(valid_605537, JString, required = false,
                                 default = nil)
  if valid_605537 != nil:
    section.add "X-Amz-Credential", valid_605537
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605538 = formData.getOrDefault("Marker")
  valid_605538 = validateParameter(valid_605538, JString, required = false,
                                 default = nil)
  if valid_605538 != nil:
    section.add "Marker", valid_605538
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_605539 = formData.getOrDefault("JobId")
  valid_605539 = validateParameter(valid_605539, JString, required = true,
                                 default = nil)
  if valid_605539 != nil:
    section.add "JobId", valid_605539
  var valid_605540 = formData.getOrDefault("MaxItems")
  valid_605540 = validateParameter(valid_605540, JInt, required = false, default = nil)
  if valid_605540 != nil:
    section.add "MaxItems", valid_605540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605541: Call_PostGetServiceLastAccessedDetails_605526;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_605541.validator(path, query, header, formData, body)
  let scheme = call_605541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605541.url(scheme.get, call_605541.host, call_605541.base,
                         call_605541.route, valid.getOrDefault("path"))
  result = hook(call_605541, url, valid)

proc call*(call_605542: Call_PostGetServiceLastAccessedDetails_605526;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605543 = newJObject()
  var formData_605544 = newJObject()
  add(formData_605544, "Marker", newJString(Marker))
  add(query_605543, "Action", newJString(Action))
  add(formData_605544, "JobId", newJString(JobId))
  add(formData_605544, "MaxItems", newJInt(MaxItems))
  add(query_605543, "Version", newJString(Version))
  result = call_605542.call(nil, query_605543, nil, formData_605544, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_605526(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_605527, base: "/",
    url: url_PostGetServiceLastAccessedDetails_605528,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_605508 = ref object of OpenApiRestCall_602433
proc url_GetGetServiceLastAccessedDetails_605510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetails_605509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_605511 = query.getOrDefault("JobId")
  valid_605511 = validateParameter(valid_605511, JString, required = true,
                                 default = nil)
  if valid_605511 != nil:
    section.add "JobId", valid_605511
  var valid_605512 = query.getOrDefault("Action")
  valid_605512 = validateParameter(valid_605512, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_605512 != nil:
    section.add "Action", valid_605512
  var valid_605513 = query.getOrDefault("Marker")
  valid_605513 = validateParameter(valid_605513, JString, required = false,
                                 default = nil)
  if valid_605513 != nil:
    section.add "Marker", valid_605513
  var valid_605514 = query.getOrDefault("MaxItems")
  valid_605514 = validateParameter(valid_605514, JInt, required = false, default = nil)
  if valid_605514 != nil:
    section.add "MaxItems", valid_605514
  var valid_605515 = query.getOrDefault("Version")
  valid_605515 = validateParameter(valid_605515, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605515 != nil:
    section.add "Version", valid_605515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605516 = header.getOrDefault("X-Amz-Date")
  valid_605516 = validateParameter(valid_605516, JString, required = false,
                                 default = nil)
  if valid_605516 != nil:
    section.add "X-Amz-Date", valid_605516
  var valid_605517 = header.getOrDefault("X-Amz-Security-Token")
  valid_605517 = validateParameter(valid_605517, JString, required = false,
                                 default = nil)
  if valid_605517 != nil:
    section.add "X-Amz-Security-Token", valid_605517
  var valid_605518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605518 = validateParameter(valid_605518, JString, required = false,
                                 default = nil)
  if valid_605518 != nil:
    section.add "X-Amz-Content-Sha256", valid_605518
  var valid_605519 = header.getOrDefault("X-Amz-Algorithm")
  valid_605519 = validateParameter(valid_605519, JString, required = false,
                                 default = nil)
  if valid_605519 != nil:
    section.add "X-Amz-Algorithm", valid_605519
  var valid_605520 = header.getOrDefault("X-Amz-Signature")
  valid_605520 = validateParameter(valid_605520, JString, required = false,
                                 default = nil)
  if valid_605520 != nil:
    section.add "X-Amz-Signature", valid_605520
  var valid_605521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605521 = validateParameter(valid_605521, JString, required = false,
                                 default = nil)
  if valid_605521 != nil:
    section.add "X-Amz-SignedHeaders", valid_605521
  var valid_605522 = header.getOrDefault("X-Amz-Credential")
  valid_605522 = validateParameter(valid_605522, JString, required = false,
                                 default = nil)
  if valid_605522 != nil:
    section.add "X-Amz-Credential", valid_605522
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605523: Call_GetGetServiceLastAccessedDetails_605508;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_605523.validator(path, query, header, formData, body)
  let scheme = call_605523.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605523.url(scheme.get, call_605523.host, call_605523.base,
                         call_605523.route, valid.getOrDefault("path"))
  result = hook(call_605523, url, valid)

proc call*(call_605524: Call_GetGetServiceLastAccessedDetails_605508;
          JobId: string; Action: string = "GetServiceLastAccessedDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605525 = newJObject()
  add(query_605525, "JobId", newJString(JobId))
  add(query_605525, "Action", newJString(Action))
  add(query_605525, "Marker", newJString(Marker))
  add(query_605525, "MaxItems", newJInt(MaxItems))
  add(query_605525, "Version", newJString(Version))
  result = call_605524.call(nil, query_605525, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_605508(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_605509, base: "/",
    url: url_GetGetServiceLastAccessedDetails_605510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_605564 = ref object of OpenApiRestCall_602433
proc url_PostGetServiceLastAccessedDetailsWithEntities_605566(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_605565(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605567 = query.getOrDefault("Action")
  valid_605567 = validateParameter(valid_605567, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_605567 != nil:
    section.add "Action", valid_605567
  var valid_605568 = query.getOrDefault("Version")
  valid_605568 = validateParameter(valid_605568, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605568 != nil:
    section.add "Version", valid_605568
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605569 = header.getOrDefault("X-Amz-Date")
  valid_605569 = validateParameter(valid_605569, JString, required = false,
                                 default = nil)
  if valid_605569 != nil:
    section.add "X-Amz-Date", valid_605569
  var valid_605570 = header.getOrDefault("X-Amz-Security-Token")
  valid_605570 = validateParameter(valid_605570, JString, required = false,
                                 default = nil)
  if valid_605570 != nil:
    section.add "X-Amz-Security-Token", valid_605570
  var valid_605571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605571 = validateParameter(valid_605571, JString, required = false,
                                 default = nil)
  if valid_605571 != nil:
    section.add "X-Amz-Content-Sha256", valid_605571
  var valid_605572 = header.getOrDefault("X-Amz-Algorithm")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "X-Amz-Algorithm", valid_605572
  var valid_605573 = header.getOrDefault("X-Amz-Signature")
  valid_605573 = validateParameter(valid_605573, JString, required = false,
                                 default = nil)
  if valid_605573 != nil:
    section.add "X-Amz-Signature", valid_605573
  var valid_605574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605574 = validateParameter(valid_605574, JString, required = false,
                                 default = nil)
  if valid_605574 != nil:
    section.add "X-Amz-SignedHeaders", valid_605574
  var valid_605575 = header.getOrDefault("X-Amz-Credential")
  valid_605575 = validateParameter(valid_605575, JString, required = false,
                                 default = nil)
  if valid_605575 != nil:
    section.add "X-Amz-Credential", valid_605575
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_605576 = formData.getOrDefault("ServiceNamespace")
  valid_605576 = validateParameter(valid_605576, JString, required = true,
                                 default = nil)
  if valid_605576 != nil:
    section.add "ServiceNamespace", valid_605576
  var valid_605577 = formData.getOrDefault("Marker")
  valid_605577 = validateParameter(valid_605577, JString, required = false,
                                 default = nil)
  if valid_605577 != nil:
    section.add "Marker", valid_605577
  var valid_605578 = formData.getOrDefault("JobId")
  valid_605578 = validateParameter(valid_605578, JString, required = true,
                                 default = nil)
  if valid_605578 != nil:
    section.add "JobId", valid_605578
  var valid_605579 = formData.getOrDefault("MaxItems")
  valid_605579 = validateParameter(valid_605579, JInt, required = false, default = nil)
  if valid_605579 != nil:
    section.add "MaxItems", valid_605579
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605580: Call_PostGetServiceLastAccessedDetailsWithEntities_605564;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_605580.validator(path, query, header, formData, body)
  let scheme = call_605580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605580.url(scheme.get, call_605580.host, call_605580.base,
                         call_605580.route, valid.getOrDefault("path"))
  result = hook(call_605580, url, valid)

proc call*(call_605581: Call_PostGetServiceLastAccessedDetailsWithEntities_605564;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605582 = newJObject()
  var formData_605583 = newJObject()
  add(formData_605583, "ServiceNamespace", newJString(ServiceNamespace))
  add(formData_605583, "Marker", newJString(Marker))
  add(query_605582, "Action", newJString(Action))
  add(formData_605583, "JobId", newJString(JobId))
  add(formData_605583, "MaxItems", newJInt(MaxItems))
  add(query_605582, "Version", newJString(Version))
  result = call_605581.call(nil, query_605582, nil, formData_605583, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_605564(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_605565,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_605566,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_605545 = ref object of OpenApiRestCall_602433
proc url_GetGetServiceLastAccessedDetailsWithEntities_605547(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_605546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_605548 = query.getOrDefault("JobId")
  valid_605548 = validateParameter(valid_605548, JString, required = true,
                                 default = nil)
  if valid_605548 != nil:
    section.add "JobId", valid_605548
  var valid_605549 = query.getOrDefault("Action")
  valid_605549 = validateParameter(valid_605549, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_605549 != nil:
    section.add "Action", valid_605549
  var valid_605550 = query.getOrDefault("Marker")
  valid_605550 = validateParameter(valid_605550, JString, required = false,
                                 default = nil)
  if valid_605550 != nil:
    section.add "Marker", valid_605550
  var valid_605551 = query.getOrDefault("MaxItems")
  valid_605551 = validateParameter(valid_605551, JInt, required = false, default = nil)
  if valid_605551 != nil:
    section.add "MaxItems", valid_605551
  var valid_605552 = query.getOrDefault("Version")
  valid_605552 = validateParameter(valid_605552, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605552 != nil:
    section.add "Version", valid_605552
  var valid_605553 = query.getOrDefault("ServiceNamespace")
  valid_605553 = validateParameter(valid_605553, JString, required = true,
                                 default = nil)
  if valid_605553 != nil:
    section.add "ServiceNamespace", valid_605553
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605554 = header.getOrDefault("X-Amz-Date")
  valid_605554 = validateParameter(valid_605554, JString, required = false,
                                 default = nil)
  if valid_605554 != nil:
    section.add "X-Amz-Date", valid_605554
  var valid_605555 = header.getOrDefault("X-Amz-Security-Token")
  valid_605555 = validateParameter(valid_605555, JString, required = false,
                                 default = nil)
  if valid_605555 != nil:
    section.add "X-Amz-Security-Token", valid_605555
  var valid_605556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605556 = validateParameter(valid_605556, JString, required = false,
                                 default = nil)
  if valid_605556 != nil:
    section.add "X-Amz-Content-Sha256", valid_605556
  var valid_605557 = header.getOrDefault("X-Amz-Algorithm")
  valid_605557 = validateParameter(valid_605557, JString, required = false,
                                 default = nil)
  if valid_605557 != nil:
    section.add "X-Amz-Algorithm", valid_605557
  var valid_605558 = header.getOrDefault("X-Amz-Signature")
  valid_605558 = validateParameter(valid_605558, JString, required = false,
                                 default = nil)
  if valid_605558 != nil:
    section.add "X-Amz-Signature", valid_605558
  var valid_605559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605559 = validateParameter(valid_605559, JString, required = false,
                                 default = nil)
  if valid_605559 != nil:
    section.add "X-Amz-SignedHeaders", valid_605559
  var valid_605560 = header.getOrDefault("X-Amz-Credential")
  valid_605560 = validateParameter(valid_605560, JString, required = false,
                                 default = nil)
  if valid_605560 != nil:
    section.add "X-Amz-Credential", valid_605560
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605561: Call_GetGetServiceLastAccessedDetailsWithEntities_605545;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_605561.validator(path, query, header, formData, body)
  let scheme = call_605561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605561.url(scheme.get, call_605561.host, call_605561.base,
                         call_605561.route, valid.getOrDefault("path"))
  result = hook(call_605561, url, valid)

proc call*(call_605562: Call_GetGetServiceLastAccessedDetailsWithEntities_605545;
          JobId: string; ServiceNamespace: string;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  var query_605563 = newJObject()
  add(query_605563, "JobId", newJString(JobId))
  add(query_605563, "Action", newJString(Action))
  add(query_605563, "Marker", newJString(Marker))
  add(query_605563, "MaxItems", newJInt(MaxItems))
  add(query_605563, "Version", newJString(Version))
  add(query_605563, "ServiceNamespace", newJString(ServiceNamespace))
  result = call_605562.call(nil, query_605563, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_605545(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_605546,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_605547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_605600 = ref object of OpenApiRestCall_602433
proc url_PostGetServiceLinkedRoleDeletionStatus_605602(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_605601(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605603 = query.getOrDefault("Action")
  valid_605603 = validateParameter(valid_605603, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_605603 != nil:
    section.add "Action", valid_605603
  var valid_605604 = query.getOrDefault("Version")
  valid_605604 = validateParameter(valid_605604, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605604 != nil:
    section.add "Version", valid_605604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605605 = header.getOrDefault("X-Amz-Date")
  valid_605605 = validateParameter(valid_605605, JString, required = false,
                                 default = nil)
  if valid_605605 != nil:
    section.add "X-Amz-Date", valid_605605
  var valid_605606 = header.getOrDefault("X-Amz-Security-Token")
  valid_605606 = validateParameter(valid_605606, JString, required = false,
                                 default = nil)
  if valid_605606 != nil:
    section.add "X-Amz-Security-Token", valid_605606
  var valid_605607 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605607 = validateParameter(valid_605607, JString, required = false,
                                 default = nil)
  if valid_605607 != nil:
    section.add "X-Amz-Content-Sha256", valid_605607
  var valid_605608 = header.getOrDefault("X-Amz-Algorithm")
  valid_605608 = validateParameter(valid_605608, JString, required = false,
                                 default = nil)
  if valid_605608 != nil:
    section.add "X-Amz-Algorithm", valid_605608
  var valid_605609 = header.getOrDefault("X-Amz-Signature")
  valid_605609 = validateParameter(valid_605609, JString, required = false,
                                 default = nil)
  if valid_605609 != nil:
    section.add "X-Amz-Signature", valid_605609
  var valid_605610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605610 = validateParameter(valid_605610, JString, required = false,
                                 default = nil)
  if valid_605610 != nil:
    section.add "X-Amz-SignedHeaders", valid_605610
  var valid_605611 = header.getOrDefault("X-Amz-Credential")
  valid_605611 = validateParameter(valid_605611, JString, required = false,
                                 default = nil)
  if valid_605611 != nil:
    section.add "X-Amz-Credential", valid_605611
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_605612 = formData.getOrDefault("DeletionTaskId")
  valid_605612 = validateParameter(valid_605612, JString, required = true,
                                 default = nil)
  if valid_605612 != nil:
    section.add "DeletionTaskId", valid_605612
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605613: Call_PostGetServiceLinkedRoleDeletionStatus_605600;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_605613.validator(path, query, header, formData, body)
  let scheme = call_605613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605613.url(scheme.get, call_605613.host, call_605613.base,
                         call_605613.route, valid.getOrDefault("path"))
  result = hook(call_605613, url, valid)

proc call*(call_605614: Call_PostGetServiceLinkedRoleDeletionStatus_605600;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_605615 = newJObject()
  var formData_605616 = newJObject()
  add(query_605615, "Action", newJString(Action))
  add(formData_605616, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_605615, "Version", newJString(Version))
  result = call_605614.call(nil, query_605615, nil, formData_605616, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_605600(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_605601, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_605602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_605584 = ref object of OpenApiRestCall_602433
proc url_GetGetServiceLinkedRoleDeletionStatus_605586(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_605585(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605587 = query.getOrDefault("Action")
  valid_605587 = validateParameter(valid_605587, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_605587 != nil:
    section.add "Action", valid_605587
  var valid_605588 = query.getOrDefault("DeletionTaskId")
  valid_605588 = validateParameter(valid_605588, JString, required = true,
                                 default = nil)
  if valid_605588 != nil:
    section.add "DeletionTaskId", valid_605588
  var valid_605589 = query.getOrDefault("Version")
  valid_605589 = validateParameter(valid_605589, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605589 != nil:
    section.add "Version", valid_605589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605590 = header.getOrDefault("X-Amz-Date")
  valid_605590 = validateParameter(valid_605590, JString, required = false,
                                 default = nil)
  if valid_605590 != nil:
    section.add "X-Amz-Date", valid_605590
  var valid_605591 = header.getOrDefault("X-Amz-Security-Token")
  valid_605591 = validateParameter(valid_605591, JString, required = false,
                                 default = nil)
  if valid_605591 != nil:
    section.add "X-Amz-Security-Token", valid_605591
  var valid_605592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605592 = validateParameter(valid_605592, JString, required = false,
                                 default = nil)
  if valid_605592 != nil:
    section.add "X-Amz-Content-Sha256", valid_605592
  var valid_605593 = header.getOrDefault("X-Amz-Algorithm")
  valid_605593 = validateParameter(valid_605593, JString, required = false,
                                 default = nil)
  if valid_605593 != nil:
    section.add "X-Amz-Algorithm", valid_605593
  var valid_605594 = header.getOrDefault("X-Amz-Signature")
  valid_605594 = validateParameter(valid_605594, JString, required = false,
                                 default = nil)
  if valid_605594 != nil:
    section.add "X-Amz-Signature", valid_605594
  var valid_605595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605595 = validateParameter(valid_605595, JString, required = false,
                                 default = nil)
  if valid_605595 != nil:
    section.add "X-Amz-SignedHeaders", valid_605595
  var valid_605596 = header.getOrDefault("X-Amz-Credential")
  valid_605596 = validateParameter(valid_605596, JString, required = false,
                                 default = nil)
  if valid_605596 != nil:
    section.add "X-Amz-Credential", valid_605596
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605597: Call_GetGetServiceLinkedRoleDeletionStatus_605584;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_605597.validator(path, query, header, formData, body)
  let scheme = call_605597.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605597.url(scheme.get, call_605597.host, call_605597.base,
                         call_605597.route, valid.getOrDefault("path"))
  result = hook(call_605597, url, valid)

proc call*(call_605598: Call_GetGetServiceLinkedRoleDeletionStatus_605584;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_605599 = newJObject()
  add(query_605599, "Action", newJString(Action))
  add(query_605599, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_605599, "Version", newJString(Version))
  result = call_605598.call(nil, query_605599, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_605584(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_605585, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_605586,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_605633 = ref object of OpenApiRestCall_602433
proc url_PostGetUser_605635(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUser_605634(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605636 = query.getOrDefault("Action")
  valid_605636 = validateParameter(valid_605636, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_605636 != nil:
    section.add "Action", valid_605636
  var valid_605637 = query.getOrDefault("Version")
  valid_605637 = validateParameter(valid_605637, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605637 != nil:
    section.add "Version", valid_605637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605638 = header.getOrDefault("X-Amz-Date")
  valid_605638 = validateParameter(valid_605638, JString, required = false,
                                 default = nil)
  if valid_605638 != nil:
    section.add "X-Amz-Date", valid_605638
  var valid_605639 = header.getOrDefault("X-Amz-Security-Token")
  valid_605639 = validateParameter(valid_605639, JString, required = false,
                                 default = nil)
  if valid_605639 != nil:
    section.add "X-Amz-Security-Token", valid_605639
  var valid_605640 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605640 = validateParameter(valid_605640, JString, required = false,
                                 default = nil)
  if valid_605640 != nil:
    section.add "X-Amz-Content-Sha256", valid_605640
  var valid_605641 = header.getOrDefault("X-Amz-Algorithm")
  valid_605641 = validateParameter(valid_605641, JString, required = false,
                                 default = nil)
  if valid_605641 != nil:
    section.add "X-Amz-Algorithm", valid_605641
  var valid_605642 = header.getOrDefault("X-Amz-Signature")
  valid_605642 = validateParameter(valid_605642, JString, required = false,
                                 default = nil)
  if valid_605642 != nil:
    section.add "X-Amz-Signature", valid_605642
  var valid_605643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605643 = validateParameter(valid_605643, JString, required = false,
                                 default = nil)
  if valid_605643 != nil:
    section.add "X-Amz-SignedHeaders", valid_605643
  var valid_605644 = header.getOrDefault("X-Amz-Credential")
  valid_605644 = validateParameter(valid_605644, JString, required = false,
                                 default = nil)
  if valid_605644 != nil:
    section.add "X-Amz-Credential", valid_605644
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_605645 = formData.getOrDefault("UserName")
  valid_605645 = validateParameter(valid_605645, JString, required = false,
                                 default = nil)
  if valid_605645 != nil:
    section.add "UserName", valid_605645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605646: Call_PostGetUser_605633; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_605646.validator(path, query, header, formData, body)
  let scheme = call_605646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605646.url(scheme.get, call_605646.host, call_605646.base,
                         call_605646.route, valid.getOrDefault("path"))
  result = hook(call_605646, url, valid)

proc call*(call_605647: Call_PostGetUser_605633; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605648 = newJObject()
  var formData_605649 = newJObject()
  add(formData_605649, "UserName", newJString(UserName))
  add(query_605648, "Action", newJString(Action))
  add(query_605648, "Version", newJString(Version))
  result = call_605647.call(nil, query_605648, nil, formData_605649, nil)

var postGetUser* = Call_PostGetUser_605633(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_605634,
                                        base: "/", url: url_PostGetUser_605635,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_605617 = ref object of OpenApiRestCall_602433
proc url_GetGetUser_605619(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUser_605618(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605620 = query.getOrDefault("UserName")
  valid_605620 = validateParameter(valid_605620, JString, required = false,
                                 default = nil)
  if valid_605620 != nil:
    section.add "UserName", valid_605620
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605621 = query.getOrDefault("Action")
  valid_605621 = validateParameter(valid_605621, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_605621 != nil:
    section.add "Action", valid_605621
  var valid_605622 = query.getOrDefault("Version")
  valid_605622 = validateParameter(valid_605622, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605622 != nil:
    section.add "Version", valid_605622
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605623 = header.getOrDefault("X-Amz-Date")
  valid_605623 = validateParameter(valid_605623, JString, required = false,
                                 default = nil)
  if valid_605623 != nil:
    section.add "X-Amz-Date", valid_605623
  var valid_605624 = header.getOrDefault("X-Amz-Security-Token")
  valid_605624 = validateParameter(valid_605624, JString, required = false,
                                 default = nil)
  if valid_605624 != nil:
    section.add "X-Amz-Security-Token", valid_605624
  var valid_605625 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605625 = validateParameter(valid_605625, JString, required = false,
                                 default = nil)
  if valid_605625 != nil:
    section.add "X-Amz-Content-Sha256", valid_605625
  var valid_605626 = header.getOrDefault("X-Amz-Algorithm")
  valid_605626 = validateParameter(valid_605626, JString, required = false,
                                 default = nil)
  if valid_605626 != nil:
    section.add "X-Amz-Algorithm", valid_605626
  var valid_605627 = header.getOrDefault("X-Amz-Signature")
  valid_605627 = validateParameter(valid_605627, JString, required = false,
                                 default = nil)
  if valid_605627 != nil:
    section.add "X-Amz-Signature", valid_605627
  var valid_605628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605628 = validateParameter(valid_605628, JString, required = false,
                                 default = nil)
  if valid_605628 != nil:
    section.add "X-Amz-SignedHeaders", valid_605628
  var valid_605629 = header.getOrDefault("X-Amz-Credential")
  valid_605629 = validateParameter(valid_605629, JString, required = false,
                                 default = nil)
  if valid_605629 != nil:
    section.add "X-Amz-Credential", valid_605629
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605630: Call_GetGetUser_605617; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_605630.validator(path, query, header, formData, body)
  let scheme = call_605630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605630.url(scheme.get, call_605630.host, call_605630.base,
                         call_605630.route, valid.getOrDefault("path"))
  result = hook(call_605630, url, valid)

proc call*(call_605631: Call_GetGetUser_605617; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605632 = newJObject()
  add(query_605632, "UserName", newJString(UserName))
  add(query_605632, "Action", newJString(Action))
  add(query_605632, "Version", newJString(Version))
  result = call_605631.call(nil, query_605632, nil, nil, nil)

var getGetUser* = Call_GetGetUser_605617(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_605618,
                                      base: "/", url: url_GetGetUser_605619,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_605667 = ref object of OpenApiRestCall_602433
proc url_PostGetUserPolicy_605669(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUserPolicy_605668(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605670 = query.getOrDefault("Action")
  valid_605670 = validateParameter(valid_605670, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_605670 != nil:
    section.add "Action", valid_605670
  var valid_605671 = query.getOrDefault("Version")
  valid_605671 = validateParameter(valid_605671, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605671 != nil:
    section.add "Version", valid_605671
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605672 = header.getOrDefault("X-Amz-Date")
  valid_605672 = validateParameter(valid_605672, JString, required = false,
                                 default = nil)
  if valid_605672 != nil:
    section.add "X-Amz-Date", valid_605672
  var valid_605673 = header.getOrDefault("X-Amz-Security-Token")
  valid_605673 = validateParameter(valid_605673, JString, required = false,
                                 default = nil)
  if valid_605673 != nil:
    section.add "X-Amz-Security-Token", valid_605673
  var valid_605674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605674 = validateParameter(valid_605674, JString, required = false,
                                 default = nil)
  if valid_605674 != nil:
    section.add "X-Amz-Content-Sha256", valid_605674
  var valid_605675 = header.getOrDefault("X-Amz-Algorithm")
  valid_605675 = validateParameter(valid_605675, JString, required = false,
                                 default = nil)
  if valid_605675 != nil:
    section.add "X-Amz-Algorithm", valid_605675
  var valid_605676 = header.getOrDefault("X-Amz-Signature")
  valid_605676 = validateParameter(valid_605676, JString, required = false,
                                 default = nil)
  if valid_605676 != nil:
    section.add "X-Amz-Signature", valid_605676
  var valid_605677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605677 = validateParameter(valid_605677, JString, required = false,
                                 default = nil)
  if valid_605677 != nil:
    section.add "X-Amz-SignedHeaders", valid_605677
  var valid_605678 = header.getOrDefault("X-Amz-Credential")
  valid_605678 = validateParameter(valid_605678, JString, required = false,
                                 default = nil)
  if valid_605678 != nil:
    section.add "X-Amz-Credential", valid_605678
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_605679 = formData.getOrDefault("PolicyName")
  valid_605679 = validateParameter(valid_605679, JString, required = true,
                                 default = nil)
  if valid_605679 != nil:
    section.add "PolicyName", valid_605679
  var valid_605680 = formData.getOrDefault("UserName")
  valid_605680 = validateParameter(valid_605680, JString, required = true,
                                 default = nil)
  if valid_605680 != nil:
    section.add "UserName", valid_605680
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605681: Call_PostGetUserPolicy_605667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605681.validator(path, query, header, formData, body)
  let scheme = call_605681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605681.url(scheme.get, call_605681.host, call_605681.base,
                         call_605681.route, valid.getOrDefault("path"))
  result = hook(call_605681, url, valid)

proc call*(call_605682: Call_PostGetUserPolicy_605667; PolicyName: string;
          UserName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605683 = newJObject()
  var formData_605684 = newJObject()
  add(formData_605684, "PolicyName", newJString(PolicyName))
  add(formData_605684, "UserName", newJString(UserName))
  add(query_605683, "Action", newJString(Action))
  add(query_605683, "Version", newJString(Version))
  result = call_605682.call(nil, query_605683, nil, formData_605684, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_605667(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_605668,
    base: "/", url: url_PostGetUserPolicy_605669,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_605650 = ref object of OpenApiRestCall_602433
proc url_GetGetUserPolicy_605652(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUserPolicy_605651(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605653 = query.getOrDefault("UserName")
  valid_605653 = validateParameter(valid_605653, JString, required = true,
                                 default = nil)
  if valid_605653 != nil:
    section.add "UserName", valid_605653
  var valid_605654 = query.getOrDefault("Action")
  valid_605654 = validateParameter(valid_605654, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_605654 != nil:
    section.add "Action", valid_605654
  var valid_605655 = query.getOrDefault("Version")
  valid_605655 = validateParameter(valid_605655, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605655 != nil:
    section.add "Version", valid_605655
  var valid_605656 = query.getOrDefault("PolicyName")
  valid_605656 = validateParameter(valid_605656, JString, required = true,
                                 default = nil)
  if valid_605656 != nil:
    section.add "PolicyName", valid_605656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605657 = header.getOrDefault("X-Amz-Date")
  valid_605657 = validateParameter(valid_605657, JString, required = false,
                                 default = nil)
  if valid_605657 != nil:
    section.add "X-Amz-Date", valid_605657
  var valid_605658 = header.getOrDefault("X-Amz-Security-Token")
  valid_605658 = validateParameter(valid_605658, JString, required = false,
                                 default = nil)
  if valid_605658 != nil:
    section.add "X-Amz-Security-Token", valid_605658
  var valid_605659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605659 = validateParameter(valid_605659, JString, required = false,
                                 default = nil)
  if valid_605659 != nil:
    section.add "X-Amz-Content-Sha256", valid_605659
  var valid_605660 = header.getOrDefault("X-Amz-Algorithm")
  valid_605660 = validateParameter(valid_605660, JString, required = false,
                                 default = nil)
  if valid_605660 != nil:
    section.add "X-Amz-Algorithm", valid_605660
  var valid_605661 = header.getOrDefault("X-Amz-Signature")
  valid_605661 = validateParameter(valid_605661, JString, required = false,
                                 default = nil)
  if valid_605661 != nil:
    section.add "X-Amz-Signature", valid_605661
  var valid_605662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605662 = validateParameter(valid_605662, JString, required = false,
                                 default = nil)
  if valid_605662 != nil:
    section.add "X-Amz-SignedHeaders", valid_605662
  var valid_605663 = header.getOrDefault("X-Amz-Credential")
  valid_605663 = validateParameter(valid_605663, JString, required = false,
                                 default = nil)
  if valid_605663 != nil:
    section.add "X-Amz-Credential", valid_605663
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605664: Call_GetGetUserPolicy_605650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605664.validator(path, query, header, formData, body)
  let scheme = call_605664.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605664.url(scheme.get, call_605664.host, call_605664.base,
                         call_605664.route, valid.getOrDefault("path"))
  result = hook(call_605664, url, valid)

proc call*(call_605665: Call_GetGetUserPolicy_605650; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_605666 = newJObject()
  add(query_605666, "UserName", newJString(UserName))
  add(query_605666, "Action", newJString(Action))
  add(query_605666, "Version", newJString(Version))
  add(query_605666, "PolicyName", newJString(PolicyName))
  result = call_605665.call(nil, query_605666, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_605650(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_605651,
    base: "/", url: url_GetGetUserPolicy_605652,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_605703 = ref object of OpenApiRestCall_602433
proc url_PostListAccessKeys_605705(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccessKeys_605704(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605706 = query.getOrDefault("Action")
  valid_605706 = validateParameter(valid_605706, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_605706 != nil:
    section.add "Action", valid_605706
  var valid_605707 = query.getOrDefault("Version")
  valid_605707 = validateParameter(valid_605707, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605707 != nil:
    section.add "Version", valid_605707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605708 = header.getOrDefault("X-Amz-Date")
  valid_605708 = validateParameter(valid_605708, JString, required = false,
                                 default = nil)
  if valid_605708 != nil:
    section.add "X-Amz-Date", valid_605708
  var valid_605709 = header.getOrDefault("X-Amz-Security-Token")
  valid_605709 = validateParameter(valid_605709, JString, required = false,
                                 default = nil)
  if valid_605709 != nil:
    section.add "X-Amz-Security-Token", valid_605709
  var valid_605710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605710 = validateParameter(valid_605710, JString, required = false,
                                 default = nil)
  if valid_605710 != nil:
    section.add "X-Amz-Content-Sha256", valid_605710
  var valid_605711 = header.getOrDefault("X-Amz-Algorithm")
  valid_605711 = validateParameter(valid_605711, JString, required = false,
                                 default = nil)
  if valid_605711 != nil:
    section.add "X-Amz-Algorithm", valid_605711
  var valid_605712 = header.getOrDefault("X-Amz-Signature")
  valid_605712 = validateParameter(valid_605712, JString, required = false,
                                 default = nil)
  if valid_605712 != nil:
    section.add "X-Amz-Signature", valid_605712
  var valid_605713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605713 = validateParameter(valid_605713, JString, required = false,
                                 default = nil)
  if valid_605713 != nil:
    section.add "X-Amz-SignedHeaders", valid_605713
  var valid_605714 = header.getOrDefault("X-Amz-Credential")
  valid_605714 = validateParameter(valid_605714, JString, required = false,
                                 default = nil)
  if valid_605714 != nil:
    section.add "X-Amz-Credential", valid_605714
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605715 = formData.getOrDefault("UserName")
  valid_605715 = validateParameter(valid_605715, JString, required = false,
                                 default = nil)
  if valid_605715 != nil:
    section.add "UserName", valid_605715
  var valid_605716 = formData.getOrDefault("Marker")
  valid_605716 = validateParameter(valid_605716, JString, required = false,
                                 default = nil)
  if valid_605716 != nil:
    section.add "Marker", valid_605716
  var valid_605717 = formData.getOrDefault("MaxItems")
  valid_605717 = validateParameter(valid_605717, JInt, required = false, default = nil)
  if valid_605717 != nil:
    section.add "MaxItems", valid_605717
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605718: Call_PostListAccessKeys_605703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_605718.validator(path, query, header, formData, body)
  let scheme = call_605718.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605718.url(scheme.get, call_605718.host, call_605718.base,
                         call_605718.route, valid.getOrDefault("path"))
  result = hook(call_605718, url, valid)

proc call*(call_605719: Call_PostListAccessKeys_605703; UserName: string = "";
          Marker: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605720 = newJObject()
  var formData_605721 = newJObject()
  add(formData_605721, "UserName", newJString(UserName))
  add(formData_605721, "Marker", newJString(Marker))
  add(query_605720, "Action", newJString(Action))
  add(formData_605721, "MaxItems", newJInt(MaxItems))
  add(query_605720, "Version", newJString(Version))
  result = call_605719.call(nil, query_605720, nil, formData_605721, nil)

var postListAccessKeys* = Call_PostListAccessKeys_605703(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_605704, base: "/",
    url: url_PostListAccessKeys_605705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_605685 = ref object of OpenApiRestCall_602433
proc url_GetListAccessKeys_605687(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccessKeys_605686(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605688 = query.getOrDefault("UserName")
  valid_605688 = validateParameter(valid_605688, JString, required = false,
                                 default = nil)
  if valid_605688 != nil:
    section.add "UserName", valid_605688
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605689 = query.getOrDefault("Action")
  valid_605689 = validateParameter(valid_605689, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_605689 != nil:
    section.add "Action", valid_605689
  var valid_605690 = query.getOrDefault("Marker")
  valid_605690 = validateParameter(valid_605690, JString, required = false,
                                 default = nil)
  if valid_605690 != nil:
    section.add "Marker", valid_605690
  var valid_605691 = query.getOrDefault("MaxItems")
  valid_605691 = validateParameter(valid_605691, JInt, required = false, default = nil)
  if valid_605691 != nil:
    section.add "MaxItems", valid_605691
  var valid_605692 = query.getOrDefault("Version")
  valid_605692 = validateParameter(valid_605692, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605692 != nil:
    section.add "Version", valid_605692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605693 = header.getOrDefault("X-Amz-Date")
  valid_605693 = validateParameter(valid_605693, JString, required = false,
                                 default = nil)
  if valid_605693 != nil:
    section.add "X-Amz-Date", valid_605693
  var valid_605694 = header.getOrDefault("X-Amz-Security-Token")
  valid_605694 = validateParameter(valid_605694, JString, required = false,
                                 default = nil)
  if valid_605694 != nil:
    section.add "X-Amz-Security-Token", valid_605694
  var valid_605695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605695 = validateParameter(valid_605695, JString, required = false,
                                 default = nil)
  if valid_605695 != nil:
    section.add "X-Amz-Content-Sha256", valid_605695
  var valid_605696 = header.getOrDefault("X-Amz-Algorithm")
  valid_605696 = validateParameter(valid_605696, JString, required = false,
                                 default = nil)
  if valid_605696 != nil:
    section.add "X-Amz-Algorithm", valid_605696
  var valid_605697 = header.getOrDefault("X-Amz-Signature")
  valid_605697 = validateParameter(valid_605697, JString, required = false,
                                 default = nil)
  if valid_605697 != nil:
    section.add "X-Amz-Signature", valid_605697
  var valid_605698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605698 = validateParameter(valid_605698, JString, required = false,
                                 default = nil)
  if valid_605698 != nil:
    section.add "X-Amz-SignedHeaders", valid_605698
  var valid_605699 = header.getOrDefault("X-Amz-Credential")
  valid_605699 = validateParameter(valid_605699, JString, required = false,
                                 default = nil)
  if valid_605699 != nil:
    section.add "X-Amz-Credential", valid_605699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605700: Call_GetListAccessKeys_605685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_605700.validator(path, query, header, formData, body)
  let scheme = call_605700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605700.url(scheme.get, call_605700.host, call_605700.base,
                         call_605700.route, valid.getOrDefault("path"))
  result = hook(call_605700, url, valid)

proc call*(call_605701: Call_GetListAccessKeys_605685; UserName: string = "";
          Action: string = "ListAccessKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605702 = newJObject()
  add(query_605702, "UserName", newJString(UserName))
  add(query_605702, "Action", newJString(Action))
  add(query_605702, "Marker", newJString(Marker))
  add(query_605702, "MaxItems", newJInt(MaxItems))
  add(query_605702, "Version", newJString(Version))
  result = call_605701.call(nil, query_605702, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_605685(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_605686,
    base: "/", url: url_GetListAccessKeys_605687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_605739 = ref object of OpenApiRestCall_602433
proc url_PostListAccountAliases_605741(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccountAliases_605740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605742 = query.getOrDefault("Action")
  valid_605742 = validateParameter(valid_605742, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_605742 != nil:
    section.add "Action", valid_605742
  var valid_605743 = query.getOrDefault("Version")
  valid_605743 = validateParameter(valid_605743, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605743 != nil:
    section.add "Version", valid_605743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605744 = header.getOrDefault("X-Amz-Date")
  valid_605744 = validateParameter(valid_605744, JString, required = false,
                                 default = nil)
  if valid_605744 != nil:
    section.add "X-Amz-Date", valid_605744
  var valid_605745 = header.getOrDefault("X-Amz-Security-Token")
  valid_605745 = validateParameter(valid_605745, JString, required = false,
                                 default = nil)
  if valid_605745 != nil:
    section.add "X-Amz-Security-Token", valid_605745
  var valid_605746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605746 = validateParameter(valid_605746, JString, required = false,
                                 default = nil)
  if valid_605746 != nil:
    section.add "X-Amz-Content-Sha256", valid_605746
  var valid_605747 = header.getOrDefault("X-Amz-Algorithm")
  valid_605747 = validateParameter(valid_605747, JString, required = false,
                                 default = nil)
  if valid_605747 != nil:
    section.add "X-Amz-Algorithm", valid_605747
  var valid_605748 = header.getOrDefault("X-Amz-Signature")
  valid_605748 = validateParameter(valid_605748, JString, required = false,
                                 default = nil)
  if valid_605748 != nil:
    section.add "X-Amz-Signature", valid_605748
  var valid_605749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605749 = validateParameter(valid_605749, JString, required = false,
                                 default = nil)
  if valid_605749 != nil:
    section.add "X-Amz-SignedHeaders", valid_605749
  var valid_605750 = header.getOrDefault("X-Amz-Credential")
  valid_605750 = validateParameter(valid_605750, JString, required = false,
                                 default = nil)
  if valid_605750 != nil:
    section.add "X-Amz-Credential", valid_605750
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605751 = formData.getOrDefault("Marker")
  valid_605751 = validateParameter(valid_605751, JString, required = false,
                                 default = nil)
  if valid_605751 != nil:
    section.add "Marker", valid_605751
  var valid_605752 = formData.getOrDefault("MaxItems")
  valid_605752 = validateParameter(valid_605752, JInt, required = false, default = nil)
  if valid_605752 != nil:
    section.add "MaxItems", valid_605752
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605753: Call_PostListAccountAliases_605739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605753.validator(path, query, header, formData, body)
  let scheme = call_605753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605753.url(scheme.get, call_605753.host, call_605753.base,
                         call_605753.route, valid.getOrDefault("path"))
  result = hook(call_605753, url, valid)

proc call*(call_605754: Call_PostListAccountAliases_605739; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605755 = newJObject()
  var formData_605756 = newJObject()
  add(formData_605756, "Marker", newJString(Marker))
  add(query_605755, "Action", newJString(Action))
  add(formData_605756, "MaxItems", newJInt(MaxItems))
  add(query_605755, "Version", newJString(Version))
  result = call_605754.call(nil, query_605755, nil, formData_605756, nil)

var postListAccountAliases* = Call_PostListAccountAliases_605739(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_605740, base: "/",
    url: url_PostListAccountAliases_605741, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_605722 = ref object of OpenApiRestCall_602433
proc url_GetListAccountAliases_605724(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccountAliases_605723(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605725 = query.getOrDefault("Action")
  valid_605725 = validateParameter(valid_605725, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_605725 != nil:
    section.add "Action", valid_605725
  var valid_605726 = query.getOrDefault("Marker")
  valid_605726 = validateParameter(valid_605726, JString, required = false,
                                 default = nil)
  if valid_605726 != nil:
    section.add "Marker", valid_605726
  var valid_605727 = query.getOrDefault("MaxItems")
  valid_605727 = validateParameter(valid_605727, JInt, required = false, default = nil)
  if valid_605727 != nil:
    section.add "MaxItems", valid_605727
  var valid_605728 = query.getOrDefault("Version")
  valid_605728 = validateParameter(valid_605728, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605728 != nil:
    section.add "Version", valid_605728
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605729 = header.getOrDefault("X-Amz-Date")
  valid_605729 = validateParameter(valid_605729, JString, required = false,
                                 default = nil)
  if valid_605729 != nil:
    section.add "X-Amz-Date", valid_605729
  var valid_605730 = header.getOrDefault("X-Amz-Security-Token")
  valid_605730 = validateParameter(valid_605730, JString, required = false,
                                 default = nil)
  if valid_605730 != nil:
    section.add "X-Amz-Security-Token", valid_605730
  var valid_605731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605731 = validateParameter(valid_605731, JString, required = false,
                                 default = nil)
  if valid_605731 != nil:
    section.add "X-Amz-Content-Sha256", valid_605731
  var valid_605732 = header.getOrDefault("X-Amz-Algorithm")
  valid_605732 = validateParameter(valid_605732, JString, required = false,
                                 default = nil)
  if valid_605732 != nil:
    section.add "X-Amz-Algorithm", valid_605732
  var valid_605733 = header.getOrDefault("X-Amz-Signature")
  valid_605733 = validateParameter(valid_605733, JString, required = false,
                                 default = nil)
  if valid_605733 != nil:
    section.add "X-Amz-Signature", valid_605733
  var valid_605734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605734 = validateParameter(valid_605734, JString, required = false,
                                 default = nil)
  if valid_605734 != nil:
    section.add "X-Amz-SignedHeaders", valid_605734
  var valid_605735 = header.getOrDefault("X-Amz-Credential")
  valid_605735 = validateParameter(valid_605735, JString, required = false,
                                 default = nil)
  if valid_605735 != nil:
    section.add "X-Amz-Credential", valid_605735
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605736: Call_GetListAccountAliases_605722; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605736.validator(path, query, header, formData, body)
  let scheme = call_605736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605736.url(scheme.get, call_605736.host, call_605736.base,
                         call_605736.route, valid.getOrDefault("path"))
  result = hook(call_605736, url, valid)

proc call*(call_605737: Call_GetListAccountAliases_605722;
          Action: string = "ListAccountAliases"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605738 = newJObject()
  add(query_605738, "Action", newJString(Action))
  add(query_605738, "Marker", newJString(Marker))
  add(query_605738, "MaxItems", newJInt(MaxItems))
  add(query_605738, "Version", newJString(Version))
  result = call_605737.call(nil, query_605738, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_605722(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_605723, base: "/",
    url: url_GetListAccountAliases_605724, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_605776 = ref object of OpenApiRestCall_602433
proc url_PostListAttachedGroupPolicies_605778(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedGroupPolicies_605777(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605779 = query.getOrDefault("Action")
  valid_605779 = validateParameter(valid_605779, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_605779 != nil:
    section.add "Action", valid_605779
  var valid_605780 = query.getOrDefault("Version")
  valid_605780 = validateParameter(valid_605780, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605780 != nil:
    section.add "Version", valid_605780
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605781 = header.getOrDefault("X-Amz-Date")
  valid_605781 = validateParameter(valid_605781, JString, required = false,
                                 default = nil)
  if valid_605781 != nil:
    section.add "X-Amz-Date", valid_605781
  var valid_605782 = header.getOrDefault("X-Amz-Security-Token")
  valid_605782 = validateParameter(valid_605782, JString, required = false,
                                 default = nil)
  if valid_605782 != nil:
    section.add "X-Amz-Security-Token", valid_605782
  var valid_605783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605783 = validateParameter(valid_605783, JString, required = false,
                                 default = nil)
  if valid_605783 != nil:
    section.add "X-Amz-Content-Sha256", valid_605783
  var valid_605784 = header.getOrDefault("X-Amz-Algorithm")
  valid_605784 = validateParameter(valid_605784, JString, required = false,
                                 default = nil)
  if valid_605784 != nil:
    section.add "X-Amz-Algorithm", valid_605784
  var valid_605785 = header.getOrDefault("X-Amz-Signature")
  valid_605785 = validateParameter(valid_605785, JString, required = false,
                                 default = nil)
  if valid_605785 != nil:
    section.add "X-Amz-Signature", valid_605785
  var valid_605786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605786 = validateParameter(valid_605786, JString, required = false,
                                 default = nil)
  if valid_605786 != nil:
    section.add "X-Amz-SignedHeaders", valid_605786
  var valid_605787 = header.getOrDefault("X-Amz-Credential")
  valid_605787 = validateParameter(valid_605787, JString, required = false,
                                 default = nil)
  if valid_605787 != nil:
    section.add "X-Amz-Credential", valid_605787
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605788 = formData.getOrDefault("PathPrefix")
  valid_605788 = validateParameter(valid_605788, JString, required = false,
                                 default = nil)
  if valid_605788 != nil:
    section.add "PathPrefix", valid_605788
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_605789 = formData.getOrDefault("GroupName")
  valid_605789 = validateParameter(valid_605789, JString, required = true,
                                 default = nil)
  if valid_605789 != nil:
    section.add "GroupName", valid_605789
  var valid_605790 = formData.getOrDefault("Marker")
  valid_605790 = validateParameter(valid_605790, JString, required = false,
                                 default = nil)
  if valid_605790 != nil:
    section.add "Marker", valid_605790
  var valid_605791 = formData.getOrDefault("MaxItems")
  valid_605791 = validateParameter(valid_605791, JInt, required = false, default = nil)
  if valid_605791 != nil:
    section.add "MaxItems", valid_605791
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605792: Call_PostListAttachedGroupPolicies_605776; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605792.validator(path, query, header, formData, body)
  let scheme = call_605792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605792.url(scheme.get, call_605792.host, call_605792.base,
                         call_605792.route, valid.getOrDefault("path"))
  result = hook(call_605792, url, valid)

proc call*(call_605793: Call_PostListAttachedGroupPolicies_605776;
          GroupName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605794 = newJObject()
  var formData_605795 = newJObject()
  add(formData_605795, "PathPrefix", newJString(PathPrefix))
  add(formData_605795, "GroupName", newJString(GroupName))
  add(formData_605795, "Marker", newJString(Marker))
  add(query_605794, "Action", newJString(Action))
  add(formData_605795, "MaxItems", newJInt(MaxItems))
  add(query_605794, "Version", newJString(Version))
  result = call_605793.call(nil, query_605794, nil, formData_605795, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_605776(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_605777, base: "/",
    url: url_PostListAttachedGroupPolicies_605778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_605757 = ref object of OpenApiRestCall_602433
proc url_GetListAttachedGroupPolicies_605759(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedGroupPolicies_605758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605760 = query.getOrDefault("PathPrefix")
  valid_605760 = validateParameter(valid_605760, JString, required = false,
                                 default = nil)
  if valid_605760 != nil:
    section.add "PathPrefix", valid_605760
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605761 = query.getOrDefault("Action")
  valid_605761 = validateParameter(valid_605761, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_605761 != nil:
    section.add "Action", valid_605761
  var valid_605762 = query.getOrDefault("Marker")
  valid_605762 = validateParameter(valid_605762, JString, required = false,
                                 default = nil)
  if valid_605762 != nil:
    section.add "Marker", valid_605762
  var valid_605763 = query.getOrDefault("GroupName")
  valid_605763 = validateParameter(valid_605763, JString, required = true,
                                 default = nil)
  if valid_605763 != nil:
    section.add "GroupName", valid_605763
  var valid_605764 = query.getOrDefault("MaxItems")
  valid_605764 = validateParameter(valid_605764, JInt, required = false, default = nil)
  if valid_605764 != nil:
    section.add "MaxItems", valid_605764
  var valid_605765 = query.getOrDefault("Version")
  valid_605765 = validateParameter(valid_605765, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605765 != nil:
    section.add "Version", valid_605765
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605766 = header.getOrDefault("X-Amz-Date")
  valid_605766 = validateParameter(valid_605766, JString, required = false,
                                 default = nil)
  if valid_605766 != nil:
    section.add "X-Amz-Date", valid_605766
  var valid_605767 = header.getOrDefault("X-Amz-Security-Token")
  valid_605767 = validateParameter(valid_605767, JString, required = false,
                                 default = nil)
  if valid_605767 != nil:
    section.add "X-Amz-Security-Token", valid_605767
  var valid_605768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605768 = validateParameter(valid_605768, JString, required = false,
                                 default = nil)
  if valid_605768 != nil:
    section.add "X-Amz-Content-Sha256", valid_605768
  var valid_605769 = header.getOrDefault("X-Amz-Algorithm")
  valid_605769 = validateParameter(valid_605769, JString, required = false,
                                 default = nil)
  if valid_605769 != nil:
    section.add "X-Amz-Algorithm", valid_605769
  var valid_605770 = header.getOrDefault("X-Amz-Signature")
  valid_605770 = validateParameter(valid_605770, JString, required = false,
                                 default = nil)
  if valid_605770 != nil:
    section.add "X-Amz-Signature", valid_605770
  var valid_605771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605771 = validateParameter(valid_605771, JString, required = false,
                                 default = nil)
  if valid_605771 != nil:
    section.add "X-Amz-SignedHeaders", valid_605771
  var valid_605772 = header.getOrDefault("X-Amz-Credential")
  valid_605772 = validateParameter(valid_605772, JString, required = false,
                                 default = nil)
  if valid_605772 != nil:
    section.add "X-Amz-Credential", valid_605772
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605773: Call_GetListAttachedGroupPolicies_605757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605773.validator(path, query, header, formData, body)
  let scheme = call_605773.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605773.url(scheme.get, call_605773.host, call_605773.base,
                         call_605773.route, valid.getOrDefault("path"))
  result = hook(call_605773, url, valid)

proc call*(call_605774: Call_GetListAttachedGroupPolicies_605757;
          GroupName: string; PathPrefix: string = "";
          Action: string = "ListAttachedGroupPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605775 = newJObject()
  add(query_605775, "PathPrefix", newJString(PathPrefix))
  add(query_605775, "Action", newJString(Action))
  add(query_605775, "Marker", newJString(Marker))
  add(query_605775, "GroupName", newJString(GroupName))
  add(query_605775, "MaxItems", newJInt(MaxItems))
  add(query_605775, "Version", newJString(Version))
  result = call_605774.call(nil, query_605775, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_605757(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_605758, base: "/",
    url: url_GetListAttachedGroupPolicies_605759,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_605815 = ref object of OpenApiRestCall_602433
proc url_PostListAttachedRolePolicies_605817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedRolePolicies_605816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605818 = query.getOrDefault("Action")
  valid_605818 = validateParameter(valid_605818, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_605818 != nil:
    section.add "Action", valid_605818
  var valid_605819 = query.getOrDefault("Version")
  valid_605819 = validateParameter(valid_605819, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605819 != nil:
    section.add "Version", valid_605819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605820 = header.getOrDefault("X-Amz-Date")
  valid_605820 = validateParameter(valid_605820, JString, required = false,
                                 default = nil)
  if valid_605820 != nil:
    section.add "X-Amz-Date", valid_605820
  var valid_605821 = header.getOrDefault("X-Amz-Security-Token")
  valid_605821 = validateParameter(valid_605821, JString, required = false,
                                 default = nil)
  if valid_605821 != nil:
    section.add "X-Amz-Security-Token", valid_605821
  var valid_605822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605822 = validateParameter(valid_605822, JString, required = false,
                                 default = nil)
  if valid_605822 != nil:
    section.add "X-Amz-Content-Sha256", valid_605822
  var valid_605823 = header.getOrDefault("X-Amz-Algorithm")
  valid_605823 = validateParameter(valid_605823, JString, required = false,
                                 default = nil)
  if valid_605823 != nil:
    section.add "X-Amz-Algorithm", valid_605823
  var valid_605824 = header.getOrDefault("X-Amz-Signature")
  valid_605824 = validateParameter(valid_605824, JString, required = false,
                                 default = nil)
  if valid_605824 != nil:
    section.add "X-Amz-Signature", valid_605824
  var valid_605825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605825 = validateParameter(valid_605825, JString, required = false,
                                 default = nil)
  if valid_605825 != nil:
    section.add "X-Amz-SignedHeaders", valid_605825
  var valid_605826 = header.getOrDefault("X-Amz-Credential")
  valid_605826 = validateParameter(valid_605826, JString, required = false,
                                 default = nil)
  if valid_605826 != nil:
    section.add "X-Amz-Credential", valid_605826
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605827 = formData.getOrDefault("PathPrefix")
  valid_605827 = validateParameter(valid_605827, JString, required = false,
                                 default = nil)
  if valid_605827 != nil:
    section.add "PathPrefix", valid_605827
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605828 = formData.getOrDefault("RoleName")
  valid_605828 = validateParameter(valid_605828, JString, required = true,
                                 default = nil)
  if valid_605828 != nil:
    section.add "RoleName", valid_605828
  var valid_605829 = formData.getOrDefault("Marker")
  valid_605829 = validateParameter(valid_605829, JString, required = false,
                                 default = nil)
  if valid_605829 != nil:
    section.add "Marker", valid_605829
  var valid_605830 = formData.getOrDefault("MaxItems")
  valid_605830 = validateParameter(valid_605830, JInt, required = false, default = nil)
  if valid_605830 != nil:
    section.add "MaxItems", valid_605830
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605831: Call_PostListAttachedRolePolicies_605815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605831.validator(path, query, header, formData, body)
  let scheme = call_605831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605831.url(scheme.get, call_605831.host, call_605831.base,
                         call_605831.route, valid.getOrDefault("path"))
  result = hook(call_605831, url, valid)

proc call*(call_605832: Call_PostListAttachedRolePolicies_605815; RoleName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605833 = newJObject()
  var formData_605834 = newJObject()
  add(formData_605834, "PathPrefix", newJString(PathPrefix))
  add(formData_605834, "RoleName", newJString(RoleName))
  add(formData_605834, "Marker", newJString(Marker))
  add(query_605833, "Action", newJString(Action))
  add(formData_605834, "MaxItems", newJInt(MaxItems))
  add(query_605833, "Version", newJString(Version))
  result = call_605832.call(nil, query_605833, nil, formData_605834, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_605815(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_605816, base: "/",
    url: url_PostListAttachedRolePolicies_605817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_605796 = ref object of OpenApiRestCall_602433
proc url_GetListAttachedRolePolicies_605798(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedRolePolicies_605797(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605799 = query.getOrDefault("PathPrefix")
  valid_605799 = validateParameter(valid_605799, JString, required = false,
                                 default = nil)
  if valid_605799 != nil:
    section.add "PathPrefix", valid_605799
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605800 = query.getOrDefault("Action")
  valid_605800 = validateParameter(valid_605800, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_605800 != nil:
    section.add "Action", valid_605800
  var valid_605801 = query.getOrDefault("Marker")
  valid_605801 = validateParameter(valid_605801, JString, required = false,
                                 default = nil)
  if valid_605801 != nil:
    section.add "Marker", valid_605801
  var valid_605802 = query.getOrDefault("MaxItems")
  valid_605802 = validateParameter(valid_605802, JInt, required = false, default = nil)
  if valid_605802 != nil:
    section.add "MaxItems", valid_605802
  var valid_605803 = query.getOrDefault("RoleName")
  valid_605803 = validateParameter(valid_605803, JString, required = true,
                                 default = nil)
  if valid_605803 != nil:
    section.add "RoleName", valid_605803
  var valid_605804 = query.getOrDefault("Version")
  valid_605804 = validateParameter(valid_605804, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605804 != nil:
    section.add "Version", valid_605804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605805 = header.getOrDefault("X-Amz-Date")
  valid_605805 = validateParameter(valid_605805, JString, required = false,
                                 default = nil)
  if valid_605805 != nil:
    section.add "X-Amz-Date", valid_605805
  var valid_605806 = header.getOrDefault("X-Amz-Security-Token")
  valid_605806 = validateParameter(valid_605806, JString, required = false,
                                 default = nil)
  if valid_605806 != nil:
    section.add "X-Amz-Security-Token", valid_605806
  var valid_605807 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605807 = validateParameter(valid_605807, JString, required = false,
                                 default = nil)
  if valid_605807 != nil:
    section.add "X-Amz-Content-Sha256", valid_605807
  var valid_605808 = header.getOrDefault("X-Amz-Algorithm")
  valid_605808 = validateParameter(valid_605808, JString, required = false,
                                 default = nil)
  if valid_605808 != nil:
    section.add "X-Amz-Algorithm", valid_605808
  var valid_605809 = header.getOrDefault("X-Amz-Signature")
  valid_605809 = validateParameter(valid_605809, JString, required = false,
                                 default = nil)
  if valid_605809 != nil:
    section.add "X-Amz-Signature", valid_605809
  var valid_605810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605810 = validateParameter(valid_605810, JString, required = false,
                                 default = nil)
  if valid_605810 != nil:
    section.add "X-Amz-SignedHeaders", valid_605810
  var valid_605811 = header.getOrDefault("X-Amz-Credential")
  valid_605811 = validateParameter(valid_605811, JString, required = false,
                                 default = nil)
  if valid_605811 != nil:
    section.add "X-Amz-Credential", valid_605811
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605812: Call_GetListAttachedRolePolicies_605796; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605812.validator(path, query, header, formData, body)
  let scheme = call_605812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605812.url(scheme.get, call_605812.host, call_605812.base,
                         call_605812.route, valid.getOrDefault("path"))
  result = hook(call_605812, url, valid)

proc call*(call_605813: Call_GetListAttachedRolePolicies_605796; RoleName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedRolePolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605814 = newJObject()
  add(query_605814, "PathPrefix", newJString(PathPrefix))
  add(query_605814, "Action", newJString(Action))
  add(query_605814, "Marker", newJString(Marker))
  add(query_605814, "MaxItems", newJInt(MaxItems))
  add(query_605814, "RoleName", newJString(RoleName))
  add(query_605814, "Version", newJString(Version))
  result = call_605813.call(nil, query_605814, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_605796(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_605797, base: "/",
    url: url_GetListAttachedRolePolicies_605798,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_605854 = ref object of OpenApiRestCall_602433
proc url_PostListAttachedUserPolicies_605856(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedUserPolicies_605855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605857 = query.getOrDefault("Action")
  valid_605857 = validateParameter(valid_605857, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_605857 != nil:
    section.add "Action", valid_605857
  var valid_605858 = query.getOrDefault("Version")
  valid_605858 = validateParameter(valid_605858, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605858 != nil:
    section.add "Version", valid_605858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605859 = header.getOrDefault("X-Amz-Date")
  valid_605859 = validateParameter(valid_605859, JString, required = false,
                                 default = nil)
  if valid_605859 != nil:
    section.add "X-Amz-Date", valid_605859
  var valid_605860 = header.getOrDefault("X-Amz-Security-Token")
  valid_605860 = validateParameter(valid_605860, JString, required = false,
                                 default = nil)
  if valid_605860 != nil:
    section.add "X-Amz-Security-Token", valid_605860
  var valid_605861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605861 = validateParameter(valid_605861, JString, required = false,
                                 default = nil)
  if valid_605861 != nil:
    section.add "X-Amz-Content-Sha256", valid_605861
  var valid_605862 = header.getOrDefault("X-Amz-Algorithm")
  valid_605862 = validateParameter(valid_605862, JString, required = false,
                                 default = nil)
  if valid_605862 != nil:
    section.add "X-Amz-Algorithm", valid_605862
  var valid_605863 = header.getOrDefault("X-Amz-Signature")
  valid_605863 = validateParameter(valid_605863, JString, required = false,
                                 default = nil)
  if valid_605863 != nil:
    section.add "X-Amz-Signature", valid_605863
  var valid_605864 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605864 = validateParameter(valid_605864, JString, required = false,
                                 default = nil)
  if valid_605864 != nil:
    section.add "X-Amz-SignedHeaders", valid_605864
  var valid_605865 = header.getOrDefault("X-Amz-Credential")
  valid_605865 = validateParameter(valid_605865, JString, required = false,
                                 default = nil)
  if valid_605865 != nil:
    section.add "X-Amz-Credential", valid_605865
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605866 = formData.getOrDefault("PathPrefix")
  valid_605866 = validateParameter(valid_605866, JString, required = false,
                                 default = nil)
  if valid_605866 != nil:
    section.add "PathPrefix", valid_605866
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605867 = formData.getOrDefault("UserName")
  valid_605867 = validateParameter(valid_605867, JString, required = true,
                                 default = nil)
  if valid_605867 != nil:
    section.add "UserName", valid_605867
  var valid_605868 = formData.getOrDefault("Marker")
  valid_605868 = validateParameter(valid_605868, JString, required = false,
                                 default = nil)
  if valid_605868 != nil:
    section.add "Marker", valid_605868
  var valid_605869 = formData.getOrDefault("MaxItems")
  valid_605869 = validateParameter(valid_605869, JInt, required = false, default = nil)
  if valid_605869 != nil:
    section.add "MaxItems", valid_605869
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605870: Call_PostListAttachedUserPolicies_605854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605870.validator(path, query, header, formData, body)
  let scheme = call_605870.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605870.url(scheme.get, call_605870.host, call_605870.base,
                         call_605870.route, valid.getOrDefault("path"))
  result = hook(call_605870, url, valid)

proc call*(call_605871: Call_PostListAttachedUserPolicies_605854; UserName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605872 = newJObject()
  var formData_605873 = newJObject()
  add(formData_605873, "PathPrefix", newJString(PathPrefix))
  add(formData_605873, "UserName", newJString(UserName))
  add(formData_605873, "Marker", newJString(Marker))
  add(query_605872, "Action", newJString(Action))
  add(formData_605873, "MaxItems", newJInt(MaxItems))
  add(query_605872, "Version", newJString(Version))
  result = call_605871.call(nil, query_605872, nil, formData_605873, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_605854(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_605855, base: "/",
    url: url_PostListAttachedUserPolicies_605856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_605835 = ref object of OpenApiRestCall_602433
proc url_GetListAttachedUserPolicies_605837(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedUserPolicies_605836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605838 = query.getOrDefault("PathPrefix")
  valid_605838 = validateParameter(valid_605838, JString, required = false,
                                 default = nil)
  if valid_605838 != nil:
    section.add "PathPrefix", valid_605838
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605839 = query.getOrDefault("UserName")
  valid_605839 = validateParameter(valid_605839, JString, required = true,
                                 default = nil)
  if valid_605839 != nil:
    section.add "UserName", valid_605839
  var valid_605840 = query.getOrDefault("Action")
  valid_605840 = validateParameter(valid_605840, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_605840 != nil:
    section.add "Action", valid_605840
  var valid_605841 = query.getOrDefault("Marker")
  valid_605841 = validateParameter(valid_605841, JString, required = false,
                                 default = nil)
  if valid_605841 != nil:
    section.add "Marker", valid_605841
  var valid_605842 = query.getOrDefault("MaxItems")
  valid_605842 = validateParameter(valid_605842, JInt, required = false, default = nil)
  if valid_605842 != nil:
    section.add "MaxItems", valid_605842
  var valid_605843 = query.getOrDefault("Version")
  valid_605843 = validateParameter(valid_605843, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605843 != nil:
    section.add "Version", valid_605843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605844 = header.getOrDefault("X-Amz-Date")
  valid_605844 = validateParameter(valid_605844, JString, required = false,
                                 default = nil)
  if valid_605844 != nil:
    section.add "X-Amz-Date", valid_605844
  var valid_605845 = header.getOrDefault("X-Amz-Security-Token")
  valid_605845 = validateParameter(valid_605845, JString, required = false,
                                 default = nil)
  if valid_605845 != nil:
    section.add "X-Amz-Security-Token", valid_605845
  var valid_605846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605846 = validateParameter(valid_605846, JString, required = false,
                                 default = nil)
  if valid_605846 != nil:
    section.add "X-Amz-Content-Sha256", valid_605846
  var valid_605847 = header.getOrDefault("X-Amz-Algorithm")
  valid_605847 = validateParameter(valid_605847, JString, required = false,
                                 default = nil)
  if valid_605847 != nil:
    section.add "X-Amz-Algorithm", valid_605847
  var valid_605848 = header.getOrDefault("X-Amz-Signature")
  valid_605848 = validateParameter(valid_605848, JString, required = false,
                                 default = nil)
  if valid_605848 != nil:
    section.add "X-Amz-Signature", valid_605848
  var valid_605849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605849 = validateParameter(valid_605849, JString, required = false,
                                 default = nil)
  if valid_605849 != nil:
    section.add "X-Amz-SignedHeaders", valid_605849
  var valid_605850 = header.getOrDefault("X-Amz-Credential")
  valid_605850 = validateParameter(valid_605850, JString, required = false,
                                 default = nil)
  if valid_605850 != nil:
    section.add "X-Amz-Credential", valid_605850
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605851: Call_GetListAttachedUserPolicies_605835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_605851.validator(path, query, header, formData, body)
  let scheme = call_605851.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605851.url(scheme.get, call_605851.host, call_605851.base,
                         call_605851.route, valid.getOrDefault("path"))
  result = hook(call_605851, url, valid)

proc call*(call_605852: Call_GetListAttachedUserPolicies_605835; UserName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedUserPolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605853 = newJObject()
  add(query_605853, "PathPrefix", newJString(PathPrefix))
  add(query_605853, "UserName", newJString(UserName))
  add(query_605853, "Action", newJString(Action))
  add(query_605853, "Marker", newJString(Marker))
  add(query_605853, "MaxItems", newJInt(MaxItems))
  add(query_605853, "Version", newJString(Version))
  result = call_605852.call(nil, query_605853, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_605835(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_605836, base: "/",
    url: url_GetListAttachedUserPolicies_605837,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_605895 = ref object of OpenApiRestCall_602433
proc url_PostListEntitiesForPolicy_605897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListEntitiesForPolicy_605896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605898 = query.getOrDefault("Action")
  valid_605898 = validateParameter(valid_605898, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_605898 != nil:
    section.add "Action", valid_605898
  var valid_605899 = query.getOrDefault("Version")
  valid_605899 = validateParameter(valid_605899, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605899 != nil:
    section.add "Version", valid_605899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605900 = header.getOrDefault("X-Amz-Date")
  valid_605900 = validateParameter(valid_605900, JString, required = false,
                                 default = nil)
  if valid_605900 != nil:
    section.add "X-Amz-Date", valid_605900
  var valid_605901 = header.getOrDefault("X-Amz-Security-Token")
  valid_605901 = validateParameter(valid_605901, JString, required = false,
                                 default = nil)
  if valid_605901 != nil:
    section.add "X-Amz-Security-Token", valid_605901
  var valid_605902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605902 = validateParameter(valid_605902, JString, required = false,
                                 default = nil)
  if valid_605902 != nil:
    section.add "X-Amz-Content-Sha256", valid_605902
  var valid_605903 = header.getOrDefault("X-Amz-Algorithm")
  valid_605903 = validateParameter(valid_605903, JString, required = false,
                                 default = nil)
  if valid_605903 != nil:
    section.add "X-Amz-Algorithm", valid_605903
  var valid_605904 = header.getOrDefault("X-Amz-Signature")
  valid_605904 = validateParameter(valid_605904, JString, required = false,
                                 default = nil)
  if valid_605904 != nil:
    section.add "X-Amz-Signature", valid_605904
  var valid_605905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605905 = validateParameter(valid_605905, JString, required = false,
                                 default = nil)
  if valid_605905 != nil:
    section.add "X-Amz-SignedHeaders", valid_605905
  var valid_605906 = header.getOrDefault("X-Amz-Credential")
  valid_605906 = validateParameter(valid_605906, JString, required = false,
                                 default = nil)
  if valid_605906 != nil:
    section.add "X-Amz-Credential", valid_605906
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605907 = formData.getOrDefault("PathPrefix")
  valid_605907 = validateParameter(valid_605907, JString, required = false,
                                 default = nil)
  if valid_605907 != nil:
    section.add "PathPrefix", valid_605907
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_605908 = formData.getOrDefault("PolicyArn")
  valid_605908 = validateParameter(valid_605908, JString, required = true,
                                 default = nil)
  if valid_605908 != nil:
    section.add "PolicyArn", valid_605908
  var valid_605909 = formData.getOrDefault("EntityFilter")
  valid_605909 = validateParameter(valid_605909, JString, required = false,
                                 default = newJString("User"))
  if valid_605909 != nil:
    section.add "EntityFilter", valid_605909
  var valid_605910 = formData.getOrDefault("Marker")
  valid_605910 = validateParameter(valid_605910, JString, required = false,
                                 default = nil)
  if valid_605910 != nil:
    section.add "Marker", valid_605910
  var valid_605911 = formData.getOrDefault("PolicyUsageFilter")
  valid_605911 = validateParameter(valid_605911, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_605911 != nil:
    section.add "PolicyUsageFilter", valid_605911
  var valid_605912 = formData.getOrDefault("MaxItems")
  valid_605912 = validateParameter(valid_605912, JInt, required = false, default = nil)
  if valid_605912 != nil:
    section.add "MaxItems", valid_605912
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605913: Call_PostListEntitiesForPolicy_605895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_605913.validator(path, query, header, formData, body)
  let scheme = call_605913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605913.url(scheme.get, call_605913.host, call_605913.base,
                         call_605913.route, valid.getOrDefault("path"))
  result = hook(call_605913, url, valid)

proc call*(call_605914: Call_PostListEntitiesForPolicy_605895; PolicyArn: string;
          PathPrefix: string = ""; EntityFilter: string = "User"; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605915 = newJObject()
  var formData_605916 = newJObject()
  add(formData_605916, "PathPrefix", newJString(PathPrefix))
  add(formData_605916, "PolicyArn", newJString(PolicyArn))
  add(formData_605916, "EntityFilter", newJString(EntityFilter))
  add(formData_605916, "Marker", newJString(Marker))
  add(formData_605916, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_605915, "Action", newJString(Action))
  add(formData_605916, "MaxItems", newJInt(MaxItems))
  add(query_605915, "Version", newJString(Version))
  result = call_605914.call(nil, query_605915, nil, formData_605916, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_605895(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_605896, base: "/",
    url: url_PostListEntitiesForPolicy_605897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_605874 = ref object of OpenApiRestCall_602433
proc url_GetListEntitiesForPolicy_605876(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListEntitiesForPolicy_605875(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605877 = query.getOrDefault("PathPrefix")
  valid_605877 = validateParameter(valid_605877, JString, required = false,
                                 default = nil)
  if valid_605877 != nil:
    section.add "PathPrefix", valid_605877
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_605878 = query.getOrDefault("PolicyArn")
  valid_605878 = validateParameter(valid_605878, JString, required = true,
                                 default = nil)
  if valid_605878 != nil:
    section.add "PolicyArn", valid_605878
  var valid_605879 = query.getOrDefault("PolicyUsageFilter")
  valid_605879 = validateParameter(valid_605879, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_605879 != nil:
    section.add "PolicyUsageFilter", valid_605879
  var valid_605880 = query.getOrDefault("Action")
  valid_605880 = validateParameter(valid_605880, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_605880 != nil:
    section.add "Action", valid_605880
  var valid_605881 = query.getOrDefault("Marker")
  valid_605881 = validateParameter(valid_605881, JString, required = false,
                                 default = nil)
  if valid_605881 != nil:
    section.add "Marker", valid_605881
  var valid_605882 = query.getOrDefault("EntityFilter")
  valid_605882 = validateParameter(valid_605882, JString, required = false,
                                 default = newJString("User"))
  if valid_605882 != nil:
    section.add "EntityFilter", valid_605882
  var valid_605883 = query.getOrDefault("MaxItems")
  valid_605883 = validateParameter(valid_605883, JInt, required = false, default = nil)
  if valid_605883 != nil:
    section.add "MaxItems", valid_605883
  var valid_605884 = query.getOrDefault("Version")
  valid_605884 = validateParameter(valid_605884, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605884 != nil:
    section.add "Version", valid_605884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605885 = header.getOrDefault("X-Amz-Date")
  valid_605885 = validateParameter(valid_605885, JString, required = false,
                                 default = nil)
  if valid_605885 != nil:
    section.add "X-Amz-Date", valid_605885
  var valid_605886 = header.getOrDefault("X-Amz-Security-Token")
  valid_605886 = validateParameter(valid_605886, JString, required = false,
                                 default = nil)
  if valid_605886 != nil:
    section.add "X-Amz-Security-Token", valid_605886
  var valid_605887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605887 = validateParameter(valid_605887, JString, required = false,
                                 default = nil)
  if valid_605887 != nil:
    section.add "X-Amz-Content-Sha256", valid_605887
  var valid_605888 = header.getOrDefault("X-Amz-Algorithm")
  valid_605888 = validateParameter(valid_605888, JString, required = false,
                                 default = nil)
  if valid_605888 != nil:
    section.add "X-Amz-Algorithm", valid_605888
  var valid_605889 = header.getOrDefault("X-Amz-Signature")
  valid_605889 = validateParameter(valid_605889, JString, required = false,
                                 default = nil)
  if valid_605889 != nil:
    section.add "X-Amz-Signature", valid_605889
  var valid_605890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605890 = validateParameter(valid_605890, JString, required = false,
                                 default = nil)
  if valid_605890 != nil:
    section.add "X-Amz-SignedHeaders", valid_605890
  var valid_605891 = header.getOrDefault("X-Amz-Credential")
  valid_605891 = validateParameter(valid_605891, JString, required = false,
                                 default = nil)
  if valid_605891 != nil:
    section.add "X-Amz-Credential", valid_605891
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605892: Call_GetListEntitiesForPolicy_605874; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_605892.validator(path, query, header, formData, body)
  let scheme = call_605892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605892.url(scheme.get, call_605892.host, call_605892.base,
                         call_605892.route, valid.getOrDefault("path"))
  result = hook(call_605892, url, valid)

proc call*(call_605893: Call_GetListEntitiesForPolicy_605874; PolicyArn: string;
          PathPrefix: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; Marker: string = "";
          EntityFilter: string = "User"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605894 = newJObject()
  add(query_605894, "PathPrefix", newJString(PathPrefix))
  add(query_605894, "PolicyArn", newJString(PolicyArn))
  add(query_605894, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_605894, "Action", newJString(Action))
  add(query_605894, "Marker", newJString(Marker))
  add(query_605894, "EntityFilter", newJString(EntityFilter))
  add(query_605894, "MaxItems", newJInt(MaxItems))
  add(query_605894, "Version", newJString(Version))
  result = call_605893.call(nil, query_605894, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_605874(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_605875, base: "/",
    url: url_GetListEntitiesForPolicy_605876, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_605935 = ref object of OpenApiRestCall_602433
proc url_PostListGroupPolicies_605937(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupPolicies_605936(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605938 = query.getOrDefault("Action")
  valid_605938 = validateParameter(valid_605938, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_605938 != nil:
    section.add "Action", valid_605938
  var valid_605939 = query.getOrDefault("Version")
  valid_605939 = validateParameter(valid_605939, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605939 != nil:
    section.add "Version", valid_605939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605940 = header.getOrDefault("X-Amz-Date")
  valid_605940 = validateParameter(valid_605940, JString, required = false,
                                 default = nil)
  if valid_605940 != nil:
    section.add "X-Amz-Date", valid_605940
  var valid_605941 = header.getOrDefault("X-Amz-Security-Token")
  valid_605941 = validateParameter(valid_605941, JString, required = false,
                                 default = nil)
  if valid_605941 != nil:
    section.add "X-Amz-Security-Token", valid_605941
  var valid_605942 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605942 = validateParameter(valid_605942, JString, required = false,
                                 default = nil)
  if valid_605942 != nil:
    section.add "X-Amz-Content-Sha256", valid_605942
  var valid_605943 = header.getOrDefault("X-Amz-Algorithm")
  valid_605943 = validateParameter(valid_605943, JString, required = false,
                                 default = nil)
  if valid_605943 != nil:
    section.add "X-Amz-Algorithm", valid_605943
  var valid_605944 = header.getOrDefault("X-Amz-Signature")
  valid_605944 = validateParameter(valid_605944, JString, required = false,
                                 default = nil)
  if valid_605944 != nil:
    section.add "X-Amz-Signature", valid_605944
  var valid_605945 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605945 = validateParameter(valid_605945, JString, required = false,
                                 default = nil)
  if valid_605945 != nil:
    section.add "X-Amz-SignedHeaders", valid_605945
  var valid_605946 = header.getOrDefault("X-Amz-Credential")
  valid_605946 = validateParameter(valid_605946, JString, required = false,
                                 default = nil)
  if valid_605946 != nil:
    section.add "X-Amz-Credential", valid_605946
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_605947 = formData.getOrDefault("GroupName")
  valid_605947 = validateParameter(valid_605947, JString, required = true,
                                 default = nil)
  if valid_605947 != nil:
    section.add "GroupName", valid_605947
  var valid_605948 = formData.getOrDefault("Marker")
  valid_605948 = validateParameter(valid_605948, JString, required = false,
                                 default = nil)
  if valid_605948 != nil:
    section.add "Marker", valid_605948
  var valid_605949 = formData.getOrDefault("MaxItems")
  valid_605949 = validateParameter(valid_605949, JInt, required = false, default = nil)
  if valid_605949 != nil:
    section.add "MaxItems", valid_605949
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605950: Call_PostListGroupPolicies_605935; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_605950.validator(path, query, header, formData, body)
  let scheme = call_605950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605950.url(scheme.get, call_605950.host, call_605950.base,
                         call_605950.route, valid.getOrDefault("path"))
  result = hook(call_605950, url, valid)

proc call*(call_605951: Call_PostListGroupPolicies_605935; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605952 = newJObject()
  var formData_605953 = newJObject()
  add(formData_605953, "GroupName", newJString(GroupName))
  add(formData_605953, "Marker", newJString(Marker))
  add(query_605952, "Action", newJString(Action))
  add(formData_605953, "MaxItems", newJInt(MaxItems))
  add(query_605952, "Version", newJString(Version))
  result = call_605951.call(nil, query_605952, nil, formData_605953, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_605935(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_605936, base: "/",
    url: url_PostListGroupPolicies_605937, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_605917 = ref object of OpenApiRestCall_602433
proc url_GetListGroupPolicies_605919(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupPolicies_605918(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605920 = query.getOrDefault("Action")
  valid_605920 = validateParameter(valid_605920, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_605920 != nil:
    section.add "Action", valid_605920
  var valid_605921 = query.getOrDefault("Marker")
  valid_605921 = validateParameter(valid_605921, JString, required = false,
                                 default = nil)
  if valid_605921 != nil:
    section.add "Marker", valid_605921
  var valid_605922 = query.getOrDefault("GroupName")
  valid_605922 = validateParameter(valid_605922, JString, required = true,
                                 default = nil)
  if valid_605922 != nil:
    section.add "GroupName", valid_605922
  var valid_605923 = query.getOrDefault("MaxItems")
  valid_605923 = validateParameter(valid_605923, JInt, required = false, default = nil)
  if valid_605923 != nil:
    section.add "MaxItems", valid_605923
  var valid_605924 = query.getOrDefault("Version")
  valid_605924 = validateParameter(valid_605924, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605924 != nil:
    section.add "Version", valid_605924
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605925 = header.getOrDefault("X-Amz-Date")
  valid_605925 = validateParameter(valid_605925, JString, required = false,
                                 default = nil)
  if valid_605925 != nil:
    section.add "X-Amz-Date", valid_605925
  var valid_605926 = header.getOrDefault("X-Amz-Security-Token")
  valid_605926 = validateParameter(valid_605926, JString, required = false,
                                 default = nil)
  if valid_605926 != nil:
    section.add "X-Amz-Security-Token", valid_605926
  var valid_605927 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605927 = validateParameter(valid_605927, JString, required = false,
                                 default = nil)
  if valid_605927 != nil:
    section.add "X-Amz-Content-Sha256", valid_605927
  var valid_605928 = header.getOrDefault("X-Amz-Algorithm")
  valid_605928 = validateParameter(valid_605928, JString, required = false,
                                 default = nil)
  if valid_605928 != nil:
    section.add "X-Amz-Algorithm", valid_605928
  var valid_605929 = header.getOrDefault("X-Amz-Signature")
  valid_605929 = validateParameter(valid_605929, JString, required = false,
                                 default = nil)
  if valid_605929 != nil:
    section.add "X-Amz-Signature", valid_605929
  var valid_605930 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605930 = validateParameter(valid_605930, JString, required = false,
                                 default = nil)
  if valid_605930 != nil:
    section.add "X-Amz-SignedHeaders", valid_605930
  var valid_605931 = header.getOrDefault("X-Amz-Credential")
  valid_605931 = validateParameter(valid_605931, JString, required = false,
                                 default = nil)
  if valid_605931 != nil:
    section.add "X-Amz-Credential", valid_605931
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605932: Call_GetListGroupPolicies_605917; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_605932.validator(path, query, header, formData, body)
  let scheme = call_605932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605932.url(scheme.get, call_605932.host, call_605932.base,
                         call_605932.route, valid.getOrDefault("path"))
  result = hook(call_605932, url, valid)

proc call*(call_605933: Call_GetListGroupPolicies_605917; GroupName: string;
          Action: string = "ListGroupPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605934 = newJObject()
  add(query_605934, "Action", newJString(Action))
  add(query_605934, "Marker", newJString(Marker))
  add(query_605934, "GroupName", newJString(GroupName))
  add(query_605934, "MaxItems", newJInt(MaxItems))
  add(query_605934, "Version", newJString(Version))
  result = call_605933.call(nil, query_605934, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_605917(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_605918, base: "/",
    url: url_GetListGroupPolicies_605919, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_605972 = ref object of OpenApiRestCall_602433
proc url_PostListGroups_605974(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroups_605973(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605975 = query.getOrDefault("Action")
  valid_605975 = validateParameter(valid_605975, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_605975 != nil:
    section.add "Action", valid_605975
  var valid_605976 = query.getOrDefault("Version")
  valid_605976 = validateParameter(valid_605976, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605976 != nil:
    section.add "Version", valid_605976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605977 = header.getOrDefault("X-Amz-Date")
  valid_605977 = validateParameter(valid_605977, JString, required = false,
                                 default = nil)
  if valid_605977 != nil:
    section.add "X-Amz-Date", valid_605977
  var valid_605978 = header.getOrDefault("X-Amz-Security-Token")
  valid_605978 = validateParameter(valid_605978, JString, required = false,
                                 default = nil)
  if valid_605978 != nil:
    section.add "X-Amz-Security-Token", valid_605978
  var valid_605979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605979 = validateParameter(valid_605979, JString, required = false,
                                 default = nil)
  if valid_605979 != nil:
    section.add "X-Amz-Content-Sha256", valid_605979
  var valid_605980 = header.getOrDefault("X-Amz-Algorithm")
  valid_605980 = validateParameter(valid_605980, JString, required = false,
                                 default = nil)
  if valid_605980 != nil:
    section.add "X-Amz-Algorithm", valid_605980
  var valid_605981 = header.getOrDefault("X-Amz-Signature")
  valid_605981 = validateParameter(valid_605981, JString, required = false,
                                 default = nil)
  if valid_605981 != nil:
    section.add "X-Amz-Signature", valid_605981
  var valid_605982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605982 = validateParameter(valid_605982, JString, required = false,
                                 default = nil)
  if valid_605982 != nil:
    section.add "X-Amz-SignedHeaders", valid_605982
  var valid_605983 = header.getOrDefault("X-Amz-Credential")
  valid_605983 = validateParameter(valid_605983, JString, required = false,
                                 default = nil)
  if valid_605983 != nil:
    section.add "X-Amz-Credential", valid_605983
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_605984 = formData.getOrDefault("PathPrefix")
  valid_605984 = validateParameter(valid_605984, JString, required = false,
                                 default = nil)
  if valid_605984 != nil:
    section.add "PathPrefix", valid_605984
  var valid_605985 = formData.getOrDefault("Marker")
  valid_605985 = validateParameter(valid_605985, JString, required = false,
                                 default = nil)
  if valid_605985 != nil:
    section.add "Marker", valid_605985
  var valid_605986 = formData.getOrDefault("MaxItems")
  valid_605986 = validateParameter(valid_605986, JInt, required = false, default = nil)
  if valid_605986 != nil:
    section.add "MaxItems", valid_605986
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605987: Call_PostListGroups_605972; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_605987.validator(path, query, header, formData, body)
  let scheme = call_605987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605987.url(scheme.get, call_605987.host, call_605987.base,
                         call_605987.route, valid.getOrDefault("path"))
  result = hook(call_605987, url, valid)

proc call*(call_605988: Call_PostListGroups_605972; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListGroups"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605989 = newJObject()
  var formData_605990 = newJObject()
  add(formData_605990, "PathPrefix", newJString(PathPrefix))
  add(formData_605990, "Marker", newJString(Marker))
  add(query_605989, "Action", newJString(Action))
  add(formData_605990, "MaxItems", newJInt(MaxItems))
  add(query_605989, "Version", newJString(Version))
  result = call_605988.call(nil, query_605989, nil, formData_605990, nil)

var postListGroups* = Call_PostListGroups_605972(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_605973,
    base: "/", url: url_PostListGroups_605974, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_605954 = ref object of OpenApiRestCall_602433
proc url_GetListGroups_605956(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroups_605955(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605957 = query.getOrDefault("PathPrefix")
  valid_605957 = validateParameter(valid_605957, JString, required = false,
                                 default = nil)
  if valid_605957 != nil:
    section.add "PathPrefix", valid_605957
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605958 = query.getOrDefault("Action")
  valid_605958 = validateParameter(valid_605958, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_605958 != nil:
    section.add "Action", valid_605958
  var valid_605959 = query.getOrDefault("Marker")
  valid_605959 = validateParameter(valid_605959, JString, required = false,
                                 default = nil)
  if valid_605959 != nil:
    section.add "Marker", valid_605959
  var valid_605960 = query.getOrDefault("MaxItems")
  valid_605960 = validateParameter(valid_605960, JInt, required = false, default = nil)
  if valid_605960 != nil:
    section.add "MaxItems", valid_605960
  var valid_605961 = query.getOrDefault("Version")
  valid_605961 = validateParameter(valid_605961, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605961 != nil:
    section.add "Version", valid_605961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605962 = header.getOrDefault("X-Amz-Date")
  valid_605962 = validateParameter(valid_605962, JString, required = false,
                                 default = nil)
  if valid_605962 != nil:
    section.add "X-Amz-Date", valid_605962
  var valid_605963 = header.getOrDefault("X-Amz-Security-Token")
  valid_605963 = validateParameter(valid_605963, JString, required = false,
                                 default = nil)
  if valid_605963 != nil:
    section.add "X-Amz-Security-Token", valid_605963
  var valid_605964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605964 = validateParameter(valid_605964, JString, required = false,
                                 default = nil)
  if valid_605964 != nil:
    section.add "X-Amz-Content-Sha256", valid_605964
  var valid_605965 = header.getOrDefault("X-Amz-Algorithm")
  valid_605965 = validateParameter(valid_605965, JString, required = false,
                                 default = nil)
  if valid_605965 != nil:
    section.add "X-Amz-Algorithm", valid_605965
  var valid_605966 = header.getOrDefault("X-Amz-Signature")
  valid_605966 = validateParameter(valid_605966, JString, required = false,
                                 default = nil)
  if valid_605966 != nil:
    section.add "X-Amz-Signature", valid_605966
  var valid_605967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605967 = validateParameter(valid_605967, JString, required = false,
                                 default = nil)
  if valid_605967 != nil:
    section.add "X-Amz-SignedHeaders", valid_605967
  var valid_605968 = header.getOrDefault("X-Amz-Credential")
  valid_605968 = validateParameter(valid_605968, JString, required = false,
                                 default = nil)
  if valid_605968 != nil:
    section.add "X-Amz-Credential", valid_605968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605969: Call_GetListGroups_605954; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_605969.validator(path, query, header, formData, body)
  let scheme = call_605969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605969.url(scheme.get, call_605969.host, call_605969.base,
                         call_605969.route, valid.getOrDefault("path"))
  result = hook(call_605969, url, valid)

proc call*(call_605970: Call_GetListGroups_605954; PathPrefix: string = "";
          Action: string = "ListGroups"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605971 = newJObject()
  add(query_605971, "PathPrefix", newJString(PathPrefix))
  add(query_605971, "Action", newJString(Action))
  add(query_605971, "Marker", newJString(Marker))
  add(query_605971, "MaxItems", newJInt(MaxItems))
  add(query_605971, "Version", newJString(Version))
  result = call_605970.call(nil, query_605971, nil, nil, nil)

var getListGroups* = Call_GetListGroups_605954(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_605955,
    base: "/", url: url_GetListGroups_605956, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_606009 = ref object of OpenApiRestCall_602433
proc url_PostListGroupsForUser_606011(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupsForUser_606010(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606012 = query.getOrDefault("Action")
  valid_606012 = validateParameter(valid_606012, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_606012 != nil:
    section.add "Action", valid_606012
  var valid_606013 = query.getOrDefault("Version")
  valid_606013 = validateParameter(valid_606013, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606013 != nil:
    section.add "Version", valid_606013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606014 = header.getOrDefault("X-Amz-Date")
  valid_606014 = validateParameter(valid_606014, JString, required = false,
                                 default = nil)
  if valid_606014 != nil:
    section.add "X-Amz-Date", valid_606014
  var valid_606015 = header.getOrDefault("X-Amz-Security-Token")
  valid_606015 = validateParameter(valid_606015, JString, required = false,
                                 default = nil)
  if valid_606015 != nil:
    section.add "X-Amz-Security-Token", valid_606015
  var valid_606016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606016 = validateParameter(valid_606016, JString, required = false,
                                 default = nil)
  if valid_606016 != nil:
    section.add "X-Amz-Content-Sha256", valid_606016
  var valid_606017 = header.getOrDefault("X-Amz-Algorithm")
  valid_606017 = validateParameter(valid_606017, JString, required = false,
                                 default = nil)
  if valid_606017 != nil:
    section.add "X-Amz-Algorithm", valid_606017
  var valid_606018 = header.getOrDefault("X-Amz-Signature")
  valid_606018 = validateParameter(valid_606018, JString, required = false,
                                 default = nil)
  if valid_606018 != nil:
    section.add "X-Amz-Signature", valid_606018
  var valid_606019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606019 = validateParameter(valid_606019, JString, required = false,
                                 default = nil)
  if valid_606019 != nil:
    section.add "X-Amz-SignedHeaders", valid_606019
  var valid_606020 = header.getOrDefault("X-Amz-Credential")
  valid_606020 = validateParameter(valid_606020, JString, required = false,
                                 default = nil)
  if valid_606020 != nil:
    section.add "X-Amz-Credential", valid_606020
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_606021 = formData.getOrDefault("UserName")
  valid_606021 = validateParameter(valid_606021, JString, required = true,
                                 default = nil)
  if valid_606021 != nil:
    section.add "UserName", valid_606021
  var valid_606022 = formData.getOrDefault("Marker")
  valid_606022 = validateParameter(valid_606022, JString, required = false,
                                 default = nil)
  if valid_606022 != nil:
    section.add "Marker", valid_606022
  var valid_606023 = formData.getOrDefault("MaxItems")
  valid_606023 = validateParameter(valid_606023, JInt, required = false, default = nil)
  if valid_606023 != nil:
    section.add "MaxItems", valid_606023
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606024: Call_PostListGroupsForUser_606009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606024.validator(path, query, header, formData, body)
  let scheme = call_606024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606024.url(scheme.get, call_606024.host, call_606024.base,
                         call_606024.route, valid.getOrDefault("path"))
  result = hook(call_606024, url, valid)

proc call*(call_606025: Call_PostListGroupsForUser_606009; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606026 = newJObject()
  var formData_606027 = newJObject()
  add(formData_606027, "UserName", newJString(UserName))
  add(formData_606027, "Marker", newJString(Marker))
  add(query_606026, "Action", newJString(Action))
  add(formData_606027, "MaxItems", newJInt(MaxItems))
  add(query_606026, "Version", newJString(Version))
  result = call_606025.call(nil, query_606026, nil, formData_606027, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_606009(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_606010, base: "/",
    url: url_PostListGroupsForUser_606011, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_605991 = ref object of OpenApiRestCall_602433
proc url_GetListGroupsForUser_605993(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupsForUser_605992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605994 = query.getOrDefault("UserName")
  valid_605994 = validateParameter(valid_605994, JString, required = true,
                                 default = nil)
  if valid_605994 != nil:
    section.add "UserName", valid_605994
  var valid_605995 = query.getOrDefault("Action")
  valid_605995 = validateParameter(valid_605995, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_605995 != nil:
    section.add "Action", valid_605995
  var valid_605996 = query.getOrDefault("Marker")
  valid_605996 = validateParameter(valid_605996, JString, required = false,
                                 default = nil)
  if valid_605996 != nil:
    section.add "Marker", valid_605996
  var valid_605997 = query.getOrDefault("MaxItems")
  valid_605997 = validateParameter(valid_605997, JInt, required = false, default = nil)
  if valid_605997 != nil:
    section.add "MaxItems", valid_605997
  var valid_605998 = query.getOrDefault("Version")
  valid_605998 = validateParameter(valid_605998, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605998 != nil:
    section.add "Version", valid_605998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605999 = header.getOrDefault("X-Amz-Date")
  valid_605999 = validateParameter(valid_605999, JString, required = false,
                                 default = nil)
  if valid_605999 != nil:
    section.add "X-Amz-Date", valid_605999
  var valid_606000 = header.getOrDefault("X-Amz-Security-Token")
  valid_606000 = validateParameter(valid_606000, JString, required = false,
                                 default = nil)
  if valid_606000 != nil:
    section.add "X-Amz-Security-Token", valid_606000
  var valid_606001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606001 = validateParameter(valid_606001, JString, required = false,
                                 default = nil)
  if valid_606001 != nil:
    section.add "X-Amz-Content-Sha256", valid_606001
  var valid_606002 = header.getOrDefault("X-Amz-Algorithm")
  valid_606002 = validateParameter(valid_606002, JString, required = false,
                                 default = nil)
  if valid_606002 != nil:
    section.add "X-Amz-Algorithm", valid_606002
  var valid_606003 = header.getOrDefault("X-Amz-Signature")
  valid_606003 = validateParameter(valid_606003, JString, required = false,
                                 default = nil)
  if valid_606003 != nil:
    section.add "X-Amz-Signature", valid_606003
  var valid_606004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606004 = validateParameter(valid_606004, JString, required = false,
                                 default = nil)
  if valid_606004 != nil:
    section.add "X-Amz-SignedHeaders", valid_606004
  var valid_606005 = header.getOrDefault("X-Amz-Credential")
  valid_606005 = validateParameter(valid_606005, JString, required = false,
                                 default = nil)
  if valid_606005 != nil:
    section.add "X-Amz-Credential", valid_606005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606006: Call_GetListGroupsForUser_605991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606006.validator(path, query, header, formData, body)
  let scheme = call_606006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606006.url(scheme.get, call_606006.host, call_606006.base,
                         call_606006.route, valid.getOrDefault("path"))
  result = hook(call_606006, url, valid)

proc call*(call_606007: Call_GetListGroupsForUser_605991; UserName: string;
          Action: string = "ListGroupsForUser"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606008 = newJObject()
  add(query_606008, "UserName", newJString(UserName))
  add(query_606008, "Action", newJString(Action))
  add(query_606008, "Marker", newJString(Marker))
  add(query_606008, "MaxItems", newJInt(MaxItems))
  add(query_606008, "Version", newJString(Version))
  result = call_606007.call(nil, query_606008, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_605991(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_605992, base: "/",
    url: url_GetListGroupsForUser_605993, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_606046 = ref object of OpenApiRestCall_602433
proc url_PostListInstanceProfiles_606048(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfiles_606047(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606049 = query.getOrDefault("Action")
  valid_606049 = validateParameter(valid_606049, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_606049 != nil:
    section.add "Action", valid_606049
  var valid_606050 = query.getOrDefault("Version")
  valid_606050 = validateParameter(valid_606050, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606050 != nil:
    section.add "Version", valid_606050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606051 = header.getOrDefault("X-Amz-Date")
  valid_606051 = validateParameter(valid_606051, JString, required = false,
                                 default = nil)
  if valid_606051 != nil:
    section.add "X-Amz-Date", valid_606051
  var valid_606052 = header.getOrDefault("X-Amz-Security-Token")
  valid_606052 = validateParameter(valid_606052, JString, required = false,
                                 default = nil)
  if valid_606052 != nil:
    section.add "X-Amz-Security-Token", valid_606052
  var valid_606053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606053 = validateParameter(valid_606053, JString, required = false,
                                 default = nil)
  if valid_606053 != nil:
    section.add "X-Amz-Content-Sha256", valid_606053
  var valid_606054 = header.getOrDefault("X-Amz-Algorithm")
  valid_606054 = validateParameter(valid_606054, JString, required = false,
                                 default = nil)
  if valid_606054 != nil:
    section.add "X-Amz-Algorithm", valid_606054
  var valid_606055 = header.getOrDefault("X-Amz-Signature")
  valid_606055 = validateParameter(valid_606055, JString, required = false,
                                 default = nil)
  if valid_606055 != nil:
    section.add "X-Amz-Signature", valid_606055
  var valid_606056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606056 = validateParameter(valid_606056, JString, required = false,
                                 default = nil)
  if valid_606056 != nil:
    section.add "X-Amz-SignedHeaders", valid_606056
  var valid_606057 = header.getOrDefault("X-Amz-Credential")
  valid_606057 = validateParameter(valid_606057, JString, required = false,
                                 default = nil)
  if valid_606057 != nil:
    section.add "X-Amz-Credential", valid_606057
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606058 = formData.getOrDefault("PathPrefix")
  valid_606058 = validateParameter(valid_606058, JString, required = false,
                                 default = nil)
  if valid_606058 != nil:
    section.add "PathPrefix", valid_606058
  var valid_606059 = formData.getOrDefault("Marker")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "Marker", valid_606059
  var valid_606060 = formData.getOrDefault("MaxItems")
  valid_606060 = validateParameter(valid_606060, JInt, required = false, default = nil)
  if valid_606060 != nil:
    section.add "MaxItems", valid_606060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606061: Call_PostListInstanceProfiles_606046; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606061.validator(path, query, header, formData, body)
  let scheme = call_606061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606061.url(scheme.get, call_606061.host, call_606061.base,
                         call_606061.route, valid.getOrDefault("path"))
  result = hook(call_606061, url, valid)

proc call*(call_606062: Call_PostListInstanceProfiles_606046;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListInstanceProfiles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606063 = newJObject()
  var formData_606064 = newJObject()
  add(formData_606064, "PathPrefix", newJString(PathPrefix))
  add(formData_606064, "Marker", newJString(Marker))
  add(query_606063, "Action", newJString(Action))
  add(formData_606064, "MaxItems", newJInt(MaxItems))
  add(query_606063, "Version", newJString(Version))
  result = call_606062.call(nil, query_606063, nil, formData_606064, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_606046(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_606047, base: "/",
    url: url_PostListInstanceProfiles_606048, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_606028 = ref object of OpenApiRestCall_602433
proc url_GetListInstanceProfiles_606030(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfiles_606029(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606031 = query.getOrDefault("PathPrefix")
  valid_606031 = validateParameter(valid_606031, JString, required = false,
                                 default = nil)
  if valid_606031 != nil:
    section.add "PathPrefix", valid_606031
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606032 = query.getOrDefault("Action")
  valid_606032 = validateParameter(valid_606032, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_606032 != nil:
    section.add "Action", valid_606032
  var valid_606033 = query.getOrDefault("Marker")
  valid_606033 = validateParameter(valid_606033, JString, required = false,
                                 default = nil)
  if valid_606033 != nil:
    section.add "Marker", valid_606033
  var valid_606034 = query.getOrDefault("MaxItems")
  valid_606034 = validateParameter(valid_606034, JInt, required = false, default = nil)
  if valid_606034 != nil:
    section.add "MaxItems", valid_606034
  var valid_606035 = query.getOrDefault("Version")
  valid_606035 = validateParameter(valid_606035, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606035 != nil:
    section.add "Version", valid_606035
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606036 = header.getOrDefault("X-Amz-Date")
  valid_606036 = validateParameter(valid_606036, JString, required = false,
                                 default = nil)
  if valid_606036 != nil:
    section.add "X-Amz-Date", valid_606036
  var valid_606037 = header.getOrDefault("X-Amz-Security-Token")
  valid_606037 = validateParameter(valid_606037, JString, required = false,
                                 default = nil)
  if valid_606037 != nil:
    section.add "X-Amz-Security-Token", valid_606037
  var valid_606038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606038 = validateParameter(valid_606038, JString, required = false,
                                 default = nil)
  if valid_606038 != nil:
    section.add "X-Amz-Content-Sha256", valid_606038
  var valid_606039 = header.getOrDefault("X-Amz-Algorithm")
  valid_606039 = validateParameter(valid_606039, JString, required = false,
                                 default = nil)
  if valid_606039 != nil:
    section.add "X-Amz-Algorithm", valid_606039
  var valid_606040 = header.getOrDefault("X-Amz-Signature")
  valid_606040 = validateParameter(valid_606040, JString, required = false,
                                 default = nil)
  if valid_606040 != nil:
    section.add "X-Amz-Signature", valid_606040
  var valid_606041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606041 = validateParameter(valid_606041, JString, required = false,
                                 default = nil)
  if valid_606041 != nil:
    section.add "X-Amz-SignedHeaders", valid_606041
  var valid_606042 = header.getOrDefault("X-Amz-Credential")
  valid_606042 = validateParameter(valid_606042, JString, required = false,
                                 default = nil)
  if valid_606042 != nil:
    section.add "X-Amz-Credential", valid_606042
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606043: Call_GetListInstanceProfiles_606028; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606043.validator(path, query, header, formData, body)
  let scheme = call_606043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606043.url(scheme.get, call_606043.host, call_606043.base,
                         call_606043.route, valid.getOrDefault("path"))
  result = hook(call_606043, url, valid)

proc call*(call_606044: Call_GetListInstanceProfiles_606028;
          PathPrefix: string = ""; Action: string = "ListInstanceProfiles";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606045 = newJObject()
  add(query_606045, "PathPrefix", newJString(PathPrefix))
  add(query_606045, "Action", newJString(Action))
  add(query_606045, "Marker", newJString(Marker))
  add(query_606045, "MaxItems", newJInt(MaxItems))
  add(query_606045, "Version", newJString(Version))
  result = call_606044.call(nil, query_606045, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_606028(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_606029, base: "/",
    url: url_GetListInstanceProfiles_606030, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_606083 = ref object of OpenApiRestCall_602433
proc url_PostListInstanceProfilesForRole_606085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfilesForRole_606084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606086 = query.getOrDefault("Action")
  valid_606086 = validateParameter(valid_606086, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_606086 != nil:
    section.add "Action", valid_606086
  var valid_606087 = query.getOrDefault("Version")
  valid_606087 = validateParameter(valid_606087, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606087 != nil:
    section.add "Version", valid_606087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606088 = header.getOrDefault("X-Amz-Date")
  valid_606088 = validateParameter(valid_606088, JString, required = false,
                                 default = nil)
  if valid_606088 != nil:
    section.add "X-Amz-Date", valid_606088
  var valid_606089 = header.getOrDefault("X-Amz-Security-Token")
  valid_606089 = validateParameter(valid_606089, JString, required = false,
                                 default = nil)
  if valid_606089 != nil:
    section.add "X-Amz-Security-Token", valid_606089
  var valid_606090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606090 = validateParameter(valid_606090, JString, required = false,
                                 default = nil)
  if valid_606090 != nil:
    section.add "X-Amz-Content-Sha256", valid_606090
  var valid_606091 = header.getOrDefault("X-Amz-Algorithm")
  valid_606091 = validateParameter(valid_606091, JString, required = false,
                                 default = nil)
  if valid_606091 != nil:
    section.add "X-Amz-Algorithm", valid_606091
  var valid_606092 = header.getOrDefault("X-Amz-Signature")
  valid_606092 = validateParameter(valid_606092, JString, required = false,
                                 default = nil)
  if valid_606092 != nil:
    section.add "X-Amz-Signature", valid_606092
  var valid_606093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606093 = validateParameter(valid_606093, JString, required = false,
                                 default = nil)
  if valid_606093 != nil:
    section.add "X-Amz-SignedHeaders", valid_606093
  var valid_606094 = header.getOrDefault("X-Amz-Credential")
  valid_606094 = validateParameter(valid_606094, JString, required = false,
                                 default = nil)
  if valid_606094 != nil:
    section.add "X-Amz-Credential", valid_606094
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606095 = formData.getOrDefault("RoleName")
  valid_606095 = validateParameter(valid_606095, JString, required = true,
                                 default = nil)
  if valid_606095 != nil:
    section.add "RoleName", valid_606095
  var valid_606096 = formData.getOrDefault("Marker")
  valid_606096 = validateParameter(valid_606096, JString, required = false,
                                 default = nil)
  if valid_606096 != nil:
    section.add "Marker", valid_606096
  var valid_606097 = formData.getOrDefault("MaxItems")
  valid_606097 = validateParameter(valid_606097, JInt, required = false, default = nil)
  if valid_606097 != nil:
    section.add "MaxItems", valid_606097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606098: Call_PostListInstanceProfilesForRole_606083;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606098.validator(path, query, header, formData, body)
  let scheme = call_606098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606098.url(scheme.get, call_606098.host, call_606098.base,
                         call_606098.route, valid.getOrDefault("path"))
  result = hook(call_606098, url, valid)

proc call*(call_606099: Call_PostListInstanceProfilesForRole_606083;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606100 = newJObject()
  var formData_606101 = newJObject()
  add(formData_606101, "RoleName", newJString(RoleName))
  add(formData_606101, "Marker", newJString(Marker))
  add(query_606100, "Action", newJString(Action))
  add(formData_606101, "MaxItems", newJInt(MaxItems))
  add(query_606100, "Version", newJString(Version))
  result = call_606099.call(nil, query_606100, nil, formData_606101, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_606083(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_606084, base: "/",
    url: url_PostListInstanceProfilesForRole_606085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_606065 = ref object of OpenApiRestCall_602433
proc url_GetListInstanceProfilesForRole_606067(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfilesForRole_606066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606068 = query.getOrDefault("Action")
  valid_606068 = validateParameter(valid_606068, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_606068 != nil:
    section.add "Action", valid_606068
  var valid_606069 = query.getOrDefault("Marker")
  valid_606069 = validateParameter(valid_606069, JString, required = false,
                                 default = nil)
  if valid_606069 != nil:
    section.add "Marker", valid_606069
  var valid_606070 = query.getOrDefault("MaxItems")
  valid_606070 = validateParameter(valid_606070, JInt, required = false, default = nil)
  if valid_606070 != nil:
    section.add "MaxItems", valid_606070
  var valid_606071 = query.getOrDefault("RoleName")
  valid_606071 = validateParameter(valid_606071, JString, required = true,
                                 default = nil)
  if valid_606071 != nil:
    section.add "RoleName", valid_606071
  var valid_606072 = query.getOrDefault("Version")
  valid_606072 = validateParameter(valid_606072, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606072 != nil:
    section.add "Version", valid_606072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606073 = header.getOrDefault("X-Amz-Date")
  valid_606073 = validateParameter(valid_606073, JString, required = false,
                                 default = nil)
  if valid_606073 != nil:
    section.add "X-Amz-Date", valid_606073
  var valid_606074 = header.getOrDefault("X-Amz-Security-Token")
  valid_606074 = validateParameter(valid_606074, JString, required = false,
                                 default = nil)
  if valid_606074 != nil:
    section.add "X-Amz-Security-Token", valid_606074
  var valid_606075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606075 = validateParameter(valid_606075, JString, required = false,
                                 default = nil)
  if valid_606075 != nil:
    section.add "X-Amz-Content-Sha256", valid_606075
  var valid_606076 = header.getOrDefault("X-Amz-Algorithm")
  valid_606076 = validateParameter(valid_606076, JString, required = false,
                                 default = nil)
  if valid_606076 != nil:
    section.add "X-Amz-Algorithm", valid_606076
  var valid_606077 = header.getOrDefault("X-Amz-Signature")
  valid_606077 = validateParameter(valid_606077, JString, required = false,
                                 default = nil)
  if valid_606077 != nil:
    section.add "X-Amz-Signature", valid_606077
  var valid_606078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606078 = validateParameter(valid_606078, JString, required = false,
                                 default = nil)
  if valid_606078 != nil:
    section.add "X-Amz-SignedHeaders", valid_606078
  var valid_606079 = header.getOrDefault("X-Amz-Credential")
  valid_606079 = validateParameter(valid_606079, JString, required = false,
                                 default = nil)
  if valid_606079 != nil:
    section.add "X-Amz-Credential", valid_606079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606080: Call_GetListInstanceProfilesForRole_606065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606080.validator(path, query, header, formData, body)
  let scheme = call_606080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606080.url(scheme.get, call_606080.host, call_606080.base,
                         call_606080.route, valid.getOrDefault("path"))
  result = hook(call_606080, url, valid)

proc call*(call_606081: Call_GetListInstanceProfilesForRole_606065;
          RoleName: string; Action: string = "ListInstanceProfilesForRole";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606082 = newJObject()
  add(query_606082, "Action", newJString(Action))
  add(query_606082, "Marker", newJString(Marker))
  add(query_606082, "MaxItems", newJInt(MaxItems))
  add(query_606082, "RoleName", newJString(RoleName))
  add(query_606082, "Version", newJString(Version))
  result = call_606081.call(nil, query_606082, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_606065(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_606066, base: "/",
    url: url_GetListInstanceProfilesForRole_606067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_606120 = ref object of OpenApiRestCall_602433
proc url_PostListMFADevices_606122(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListMFADevices_606121(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606123 = query.getOrDefault("Action")
  valid_606123 = validateParameter(valid_606123, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_606123 != nil:
    section.add "Action", valid_606123
  var valid_606124 = query.getOrDefault("Version")
  valid_606124 = validateParameter(valid_606124, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606124 != nil:
    section.add "Version", valid_606124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606125 = header.getOrDefault("X-Amz-Date")
  valid_606125 = validateParameter(valid_606125, JString, required = false,
                                 default = nil)
  if valid_606125 != nil:
    section.add "X-Amz-Date", valid_606125
  var valid_606126 = header.getOrDefault("X-Amz-Security-Token")
  valid_606126 = validateParameter(valid_606126, JString, required = false,
                                 default = nil)
  if valid_606126 != nil:
    section.add "X-Amz-Security-Token", valid_606126
  var valid_606127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606127 = validateParameter(valid_606127, JString, required = false,
                                 default = nil)
  if valid_606127 != nil:
    section.add "X-Amz-Content-Sha256", valid_606127
  var valid_606128 = header.getOrDefault("X-Amz-Algorithm")
  valid_606128 = validateParameter(valid_606128, JString, required = false,
                                 default = nil)
  if valid_606128 != nil:
    section.add "X-Amz-Algorithm", valid_606128
  var valid_606129 = header.getOrDefault("X-Amz-Signature")
  valid_606129 = validateParameter(valid_606129, JString, required = false,
                                 default = nil)
  if valid_606129 != nil:
    section.add "X-Amz-Signature", valid_606129
  var valid_606130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606130 = validateParameter(valid_606130, JString, required = false,
                                 default = nil)
  if valid_606130 != nil:
    section.add "X-Amz-SignedHeaders", valid_606130
  var valid_606131 = header.getOrDefault("X-Amz-Credential")
  valid_606131 = validateParameter(valid_606131, JString, required = false,
                                 default = nil)
  if valid_606131 != nil:
    section.add "X-Amz-Credential", valid_606131
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606132 = formData.getOrDefault("UserName")
  valid_606132 = validateParameter(valid_606132, JString, required = false,
                                 default = nil)
  if valid_606132 != nil:
    section.add "UserName", valid_606132
  var valid_606133 = formData.getOrDefault("Marker")
  valid_606133 = validateParameter(valid_606133, JString, required = false,
                                 default = nil)
  if valid_606133 != nil:
    section.add "Marker", valid_606133
  var valid_606134 = formData.getOrDefault("MaxItems")
  valid_606134 = validateParameter(valid_606134, JInt, required = false, default = nil)
  if valid_606134 != nil:
    section.add "MaxItems", valid_606134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606135: Call_PostListMFADevices_606120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606135.validator(path, query, header, formData, body)
  let scheme = call_606135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606135.url(scheme.get, call_606135.host, call_606135.base,
                         call_606135.route, valid.getOrDefault("path"))
  result = hook(call_606135, url, valid)

proc call*(call_606136: Call_PostListMFADevices_606120; UserName: string = "";
          Marker: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606137 = newJObject()
  var formData_606138 = newJObject()
  add(formData_606138, "UserName", newJString(UserName))
  add(formData_606138, "Marker", newJString(Marker))
  add(query_606137, "Action", newJString(Action))
  add(formData_606138, "MaxItems", newJInt(MaxItems))
  add(query_606137, "Version", newJString(Version))
  result = call_606136.call(nil, query_606137, nil, formData_606138, nil)

var postListMFADevices* = Call_PostListMFADevices_606120(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_606121, base: "/",
    url: url_PostListMFADevices_606122, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_606102 = ref object of OpenApiRestCall_602433
proc url_GetListMFADevices_606104(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListMFADevices_606103(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606105 = query.getOrDefault("UserName")
  valid_606105 = validateParameter(valid_606105, JString, required = false,
                                 default = nil)
  if valid_606105 != nil:
    section.add "UserName", valid_606105
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606106 = query.getOrDefault("Action")
  valid_606106 = validateParameter(valid_606106, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_606106 != nil:
    section.add "Action", valid_606106
  var valid_606107 = query.getOrDefault("Marker")
  valid_606107 = validateParameter(valid_606107, JString, required = false,
                                 default = nil)
  if valid_606107 != nil:
    section.add "Marker", valid_606107
  var valid_606108 = query.getOrDefault("MaxItems")
  valid_606108 = validateParameter(valid_606108, JInt, required = false, default = nil)
  if valid_606108 != nil:
    section.add "MaxItems", valid_606108
  var valid_606109 = query.getOrDefault("Version")
  valid_606109 = validateParameter(valid_606109, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606109 != nil:
    section.add "Version", valid_606109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606110 = header.getOrDefault("X-Amz-Date")
  valid_606110 = validateParameter(valid_606110, JString, required = false,
                                 default = nil)
  if valid_606110 != nil:
    section.add "X-Amz-Date", valid_606110
  var valid_606111 = header.getOrDefault("X-Amz-Security-Token")
  valid_606111 = validateParameter(valid_606111, JString, required = false,
                                 default = nil)
  if valid_606111 != nil:
    section.add "X-Amz-Security-Token", valid_606111
  var valid_606112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606112 = validateParameter(valid_606112, JString, required = false,
                                 default = nil)
  if valid_606112 != nil:
    section.add "X-Amz-Content-Sha256", valid_606112
  var valid_606113 = header.getOrDefault("X-Amz-Algorithm")
  valid_606113 = validateParameter(valid_606113, JString, required = false,
                                 default = nil)
  if valid_606113 != nil:
    section.add "X-Amz-Algorithm", valid_606113
  var valid_606114 = header.getOrDefault("X-Amz-Signature")
  valid_606114 = validateParameter(valid_606114, JString, required = false,
                                 default = nil)
  if valid_606114 != nil:
    section.add "X-Amz-Signature", valid_606114
  var valid_606115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606115 = validateParameter(valid_606115, JString, required = false,
                                 default = nil)
  if valid_606115 != nil:
    section.add "X-Amz-SignedHeaders", valid_606115
  var valid_606116 = header.getOrDefault("X-Amz-Credential")
  valid_606116 = validateParameter(valid_606116, JString, required = false,
                                 default = nil)
  if valid_606116 != nil:
    section.add "X-Amz-Credential", valid_606116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606117: Call_GetListMFADevices_606102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606117.validator(path, query, header, formData, body)
  let scheme = call_606117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606117.url(scheme.get, call_606117.host, call_606117.base,
                         call_606117.route, valid.getOrDefault("path"))
  result = hook(call_606117, url, valid)

proc call*(call_606118: Call_GetListMFADevices_606102; UserName: string = "";
          Action: string = "ListMFADevices"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606119 = newJObject()
  add(query_606119, "UserName", newJString(UserName))
  add(query_606119, "Action", newJString(Action))
  add(query_606119, "Marker", newJString(Marker))
  add(query_606119, "MaxItems", newJInt(MaxItems))
  add(query_606119, "Version", newJString(Version))
  result = call_606118.call(nil, query_606119, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_606102(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_606103,
    base: "/", url: url_GetListMFADevices_606104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_606154 = ref object of OpenApiRestCall_602433
proc url_PostListOpenIDConnectProviders_606156(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListOpenIDConnectProviders_606155(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606157 = query.getOrDefault("Action")
  valid_606157 = validateParameter(valid_606157, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_606157 != nil:
    section.add "Action", valid_606157
  var valid_606158 = query.getOrDefault("Version")
  valid_606158 = validateParameter(valid_606158, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606158 != nil:
    section.add "Version", valid_606158
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606159 = header.getOrDefault("X-Amz-Date")
  valid_606159 = validateParameter(valid_606159, JString, required = false,
                                 default = nil)
  if valid_606159 != nil:
    section.add "X-Amz-Date", valid_606159
  var valid_606160 = header.getOrDefault("X-Amz-Security-Token")
  valid_606160 = validateParameter(valid_606160, JString, required = false,
                                 default = nil)
  if valid_606160 != nil:
    section.add "X-Amz-Security-Token", valid_606160
  var valid_606161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606161 = validateParameter(valid_606161, JString, required = false,
                                 default = nil)
  if valid_606161 != nil:
    section.add "X-Amz-Content-Sha256", valid_606161
  var valid_606162 = header.getOrDefault("X-Amz-Algorithm")
  valid_606162 = validateParameter(valid_606162, JString, required = false,
                                 default = nil)
  if valid_606162 != nil:
    section.add "X-Amz-Algorithm", valid_606162
  var valid_606163 = header.getOrDefault("X-Amz-Signature")
  valid_606163 = validateParameter(valid_606163, JString, required = false,
                                 default = nil)
  if valid_606163 != nil:
    section.add "X-Amz-Signature", valid_606163
  var valid_606164 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606164 = validateParameter(valid_606164, JString, required = false,
                                 default = nil)
  if valid_606164 != nil:
    section.add "X-Amz-SignedHeaders", valid_606164
  var valid_606165 = header.getOrDefault("X-Amz-Credential")
  valid_606165 = validateParameter(valid_606165, JString, required = false,
                                 default = nil)
  if valid_606165 != nil:
    section.add "X-Amz-Credential", valid_606165
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606166: Call_PostListOpenIDConnectProviders_606154; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_606166.validator(path, query, header, formData, body)
  let scheme = call_606166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606166.url(scheme.get, call_606166.host, call_606166.base,
                         call_606166.route, valid.getOrDefault("path"))
  result = hook(call_606166, url, valid)

proc call*(call_606167: Call_PostListOpenIDConnectProviders_606154;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606168 = newJObject()
  add(query_606168, "Action", newJString(Action))
  add(query_606168, "Version", newJString(Version))
  result = call_606167.call(nil, query_606168, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_606154(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_606155, base: "/",
    url: url_PostListOpenIDConnectProviders_606156,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_606139 = ref object of OpenApiRestCall_602433
proc url_GetListOpenIDConnectProviders_606141(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListOpenIDConnectProviders_606140(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606142 = query.getOrDefault("Action")
  valid_606142 = validateParameter(valid_606142, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_606142 != nil:
    section.add "Action", valid_606142
  var valid_606143 = query.getOrDefault("Version")
  valid_606143 = validateParameter(valid_606143, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606143 != nil:
    section.add "Version", valid_606143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606144 = header.getOrDefault("X-Amz-Date")
  valid_606144 = validateParameter(valid_606144, JString, required = false,
                                 default = nil)
  if valid_606144 != nil:
    section.add "X-Amz-Date", valid_606144
  var valid_606145 = header.getOrDefault("X-Amz-Security-Token")
  valid_606145 = validateParameter(valid_606145, JString, required = false,
                                 default = nil)
  if valid_606145 != nil:
    section.add "X-Amz-Security-Token", valid_606145
  var valid_606146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606146 = validateParameter(valid_606146, JString, required = false,
                                 default = nil)
  if valid_606146 != nil:
    section.add "X-Amz-Content-Sha256", valid_606146
  var valid_606147 = header.getOrDefault("X-Amz-Algorithm")
  valid_606147 = validateParameter(valid_606147, JString, required = false,
                                 default = nil)
  if valid_606147 != nil:
    section.add "X-Amz-Algorithm", valid_606147
  var valid_606148 = header.getOrDefault("X-Amz-Signature")
  valid_606148 = validateParameter(valid_606148, JString, required = false,
                                 default = nil)
  if valid_606148 != nil:
    section.add "X-Amz-Signature", valid_606148
  var valid_606149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606149 = validateParameter(valid_606149, JString, required = false,
                                 default = nil)
  if valid_606149 != nil:
    section.add "X-Amz-SignedHeaders", valid_606149
  var valid_606150 = header.getOrDefault("X-Amz-Credential")
  valid_606150 = validateParameter(valid_606150, JString, required = false,
                                 default = nil)
  if valid_606150 != nil:
    section.add "X-Amz-Credential", valid_606150
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606151: Call_GetListOpenIDConnectProviders_606139; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_606151.validator(path, query, header, formData, body)
  let scheme = call_606151.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606151.url(scheme.get, call_606151.host, call_606151.base,
                         call_606151.route, valid.getOrDefault("path"))
  result = hook(call_606151, url, valid)

proc call*(call_606152: Call_GetListOpenIDConnectProviders_606139;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606153 = newJObject()
  add(query_606153, "Action", newJString(Action))
  add(query_606153, "Version", newJString(Version))
  result = call_606152.call(nil, query_606153, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_606139(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_606140, base: "/",
    url: url_GetListOpenIDConnectProviders_606141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_606190 = ref object of OpenApiRestCall_602433
proc url_PostListPolicies_606192(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicies_606191(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606193 = query.getOrDefault("Action")
  valid_606193 = validateParameter(valid_606193, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_606193 != nil:
    section.add "Action", valid_606193
  var valid_606194 = query.getOrDefault("Version")
  valid_606194 = validateParameter(valid_606194, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606194 != nil:
    section.add "Version", valid_606194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606195 = header.getOrDefault("X-Amz-Date")
  valid_606195 = validateParameter(valid_606195, JString, required = false,
                                 default = nil)
  if valid_606195 != nil:
    section.add "X-Amz-Date", valid_606195
  var valid_606196 = header.getOrDefault("X-Amz-Security-Token")
  valid_606196 = validateParameter(valid_606196, JString, required = false,
                                 default = nil)
  if valid_606196 != nil:
    section.add "X-Amz-Security-Token", valid_606196
  var valid_606197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606197 = validateParameter(valid_606197, JString, required = false,
                                 default = nil)
  if valid_606197 != nil:
    section.add "X-Amz-Content-Sha256", valid_606197
  var valid_606198 = header.getOrDefault("X-Amz-Algorithm")
  valid_606198 = validateParameter(valid_606198, JString, required = false,
                                 default = nil)
  if valid_606198 != nil:
    section.add "X-Amz-Algorithm", valid_606198
  var valid_606199 = header.getOrDefault("X-Amz-Signature")
  valid_606199 = validateParameter(valid_606199, JString, required = false,
                                 default = nil)
  if valid_606199 != nil:
    section.add "X-Amz-Signature", valid_606199
  var valid_606200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606200 = validateParameter(valid_606200, JString, required = false,
                                 default = nil)
  if valid_606200 != nil:
    section.add "X-Amz-SignedHeaders", valid_606200
  var valid_606201 = header.getOrDefault("X-Amz-Credential")
  valid_606201 = validateParameter(valid_606201, JString, required = false,
                                 default = nil)
  if valid_606201 != nil:
    section.add "X-Amz-Credential", valid_606201
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606202 = formData.getOrDefault("PathPrefix")
  valid_606202 = validateParameter(valid_606202, JString, required = false,
                                 default = nil)
  if valid_606202 != nil:
    section.add "PathPrefix", valid_606202
  var valid_606203 = formData.getOrDefault("Marker")
  valid_606203 = validateParameter(valid_606203, JString, required = false,
                                 default = nil)
  if valid_606203 != nil:
    section.add "Marker", valid_606203
  var valid_606204 = formData.getOrDefault("PolicyUsageFilter")
  valid_606204 = validateParameter(valid_606204, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_606204 != nil:
    section.add "PolicyUsageFilter", valid_606204
  var valid_606205 = formData.getOrDefault("Scope")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = newJString("All"))
  if valid_606205 != nil:
    section.add "Scope", valid_606205
  var valid_606206 = formData.getOrDefault("OnlyAttached")
  valid_606206 = validateParameter(valid_606206, JBool, required = false, default = nil)
  if valid_606206 != nil:
    section.add "OnlyAttached", valid_606206
  var valid_606207 = formData.getOrDefault("MaxItems")
  valid_606207 = validateParameter(valid_606207, JInt, required = false, default = nil)
  if valid_606207 != nil:
    section.add "MaxItems", valid_606207
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606208: Call_PostListPolicies_606190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606208.validator(path, query, header, formData, body)
  let scheme = call_606208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606208.url(scheme.get, call_606208.host, call_606208.base,
                         call_606208.route, valid.getOrDefault("path"))
  result = hook(call_606208, url, valid)

proc call*(call_606209: Call_PostListPolicies_606190; PathPrefix: string = "";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Scope: string = "All";
          OnlyAttached: bool = false; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606210 = newJObject()
  var formData_606211 = newJObject()
  add(formData_606211, "PathPrefix", newJString(PathPrefix))
  add(formData_606211, "Marker", newJString(Marker))
  add(formData_606211, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_606210, "Action", newJString(Action))
  add(formData_606211, "Scope", newJString(Scope))
  add(formData_606211, "OnlyAttached", newJBool(OnlyAttached))
  add(formData_606211, "MaxItems", newJInt(MaxItems))
  add(query_606210, "Version", newJString(Version))
  result = call_606209.call(nil, query_606210, nil, formData_606211, nil)

var postListPolicies* = Call_PostListPolicies_606190(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_606191,
    base: "/", url: url_PostListPolicies_606192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_606169 = ref object of OpenApiRestCall_602433
proc url_GetListPolicies_606171(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicies_606170(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606172 = query.getOrDefault("PathPrefix")
  valid_606172 = validateParameter(valid_606172, JString, required = false,
                                 default = nil)
  if valid_606172 != nil:
    section.add "PathPrefix", valid_606172
  var valid_606173 = query.getOrDefault("PolicyUsageFilter")
  valid_606173 = validateParameter(valid_606173, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_606173 != nil:
    section.add "PolicyUsageFilter", valid_606173
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606174 = query.getOrDefault("Action")
  valid_606174 = validateParameter(valid_606174, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_606174 != nil:
    section.add "Action", valid_606174
  var valid_606175 = query.getOrDefault("Marker")
  valid_606175 = validateParameter(valid_606175, JString, required = false,
                                 default = nil)
  if valid_606175 != nil:
    section.add "Marker", valid_606175
  var valid_606176 = query.getOrDefault("Scope")
  valid_606176 = validateParameter(valid_606176, JString, required = false,
                                 default = newJString("All"))
  if valid_606176 != nil:
    section.add "Scope", valid_606176
  var valid_606177 = query.getOrDefault("MaxItems")
  valid_606177 = validateParameter(valid_606177, JInt, required = false, default = nil)
  if valid_606177 != nil:
    section.add "MaxItems", valid_606177
  var valid_606178 = query.getOrDefault("OnlyAttached")
  valid_606178 = validateParameter(valid_606178, JBool, required = false, default = nil)
  if valid_606178 != nil:
    section.add "OnlyAttached", valid_606178
  var valid_606179 = query.getOrDefault("Version")
  valid_606179 = validateParameter(valid_606179, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606179 != nil:
    section.add "Version", valid_606179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606180 = header.getOrDefault("X-Amz-Date")
  valid_606180 = validateParameter(valid_606180, JString, required = false,
                                 default = nil)
  if valid_606180 != nil:
    section.add "X-Amz-Date", valid_606180
  var valid_606181 = header.getOrDefault("X-Amz-Security-Token")
  valid_606181 = validateParameter(valid_606181, JString, required = false,
                                 default = nil)
  if valid_606181 != nil:
    section.add "X-Amz-Security-Token", valid_606181
  var valid_606182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606182 = validateParameter(valid_606182, JString, required = false,
                                 default = nil)
  if valid_606182 != nil:
    section.add "X-Amz-Content-Sha256", valid_606182
  var valid_606183 = header.getOrDefault("X-Amz-Algorithm")
  valid_606183 = validateParameter(valid_606183, JString, required = false,
                                 default = nil)
  if valid_606183 != nil:
    section.add "X-Amz-Algorithm", valid_606183
  var valid_606184 = header.getOrDefault("X-Amz-Signature")
  valid_606184 = validateParameter(valid_606184, JString, required = false,
                                 default = nil)
  if valid_606184 != nil:
    section.add "X-Amz-Signature", valid_606184
  var valid_606185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606185 = validateParameter(valid_606185, JString, required = false,
                                 default = nil)
  if valid_606185 != nil:
    section.add "X-Amz-SignedHeaders", valid_606185
  var valid_606186 = header.getOrDefault("X-Amz-Credential")
  valid_606186 = validateParameter(valid_606186, JString, required = false,
                                 default = nil)
  if valid_606186 != nil:
    section.add "X-Amz-Credential", valid_606186
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606187: Call_GetListPolicies_606169; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606187.validator(path, query, header, formData, body)
  let scheme = call_606187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606187.url(scheme.get, call_606187.host, call_606187.base,
                         call_606187.route, valid.getOrDefault("path"))
  result = hook(call_606187, url, valid)

proc call*(call_606188: Call_GetListPolicies_606169; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Marker: string = ""; Scope: string = "All";
          MaxItems: int = 0; OnlyAttached: bool = false; Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  var query_606189 = newJObject()
  add(query_606189, "PathPrefix", newJString(PathPrefix))
  add(query_606189, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_606189, "Action", newJString(Action))
  add(query_606189, "Marker", newJString(Marker))
  add(query_606189, "Scope", newJString(Scope))
  add(query_606189, "MaxItems", newJInt(MaxItems))
  add(query_606189, "OnlyAttached", newJBool(OnlyAttached))
  add(query_606189, "Version", newJString(Version))
  result = call_606188.call(nil, query_606189, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_606169(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_606170,
    base: "/", url: url_GetListPolicies_606171, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_606230 = ref object of OpenApiRestCall_602433
proc url_PostListPoliciesGrantingServiceAccess_606232(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPoliciesGrantingServiceAccess_606231(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606233 = query.getOrDefault("Action")
  valid_606233 = validateParameter(valid_606233, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_606233 != nil:
    section.add "Action", valid_606233
  var valid_606234 = query.getOrDefault("Version")
  valid_606234 = validateParameter(valid_606234, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606234 != nil:
    section.add "Version", valid_606234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606235 = header.getOrDefault("X-Amz-Date")
  valid_606235 = validateParameter(valid_606235, JString, required = false,
                                 default = nil)
  if valid_606235 != nil:
    section.add "X-Amz-Date", valid_606235
  var valid_606236 = header.getOrDefault("X-Amz-Security-Token")
  valid_606236 = validateParameter(valid_606236, JString, required = false,
                                 default = nil)
  if valid_606236 != nil:
    section.add "X-Amz-Security-Token", valid_606236
  var valid_606237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606237 = validateParameter(valid_606237, JString, required = false,
                                 default = nil)
  if valid_606237 != nil:
    section.add "X-Amz-Content-Sha256", valid_606237
  var valid_606238 = header.getOrDefault("X-Amz-Algorithm")
  valid_606238 = validateParameter(valid_606238, JString, required = false,
                                 default = nil)
  if valid_606238 != nil:
    section.add "X-Amz-Algorithm", valid_606238
  var valid_606239 = header.getOrDefault("X-Amz-Signature")
  valid_606239 = validateParameter(valid_606239, JString, required = false,
                                 default = nil)
  if valid_606239 != nil:
    section.add "X-Amz-Signature", valid_606239
  var valid_606240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606240 = validateParameter(valid_606240, JString, required = false,
                                 default = nil)
  if valid_606240 != nil:
    section.add "X-Amz-SignedHeaders", valid_606240
  var valid_606241 = header.getOrDefault("X-Amz-Credential")
  valid_606241 = validateParameter(valid_606241, JString, required = false,
                                 default = nil)
  if valid_606241 != nil:
    section.add "X-Amz-Credential", valid_606241
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_606242 = formData.getOrDefault("Arn")
  valid_606242 = validateParameter(valid_606242, JString, required = true,
                                 default = nil)
  if valid_606242 != nil:
    section.add "Arn", valid_606242
  var valid_606243 = formData.getOrDefault("Marker")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "Marker", valid_606243
  var valid_606244 = formData.getOrDefault("ServiceNamespaces")
  valid_606244 = validateParameter(valid_606244, JArray, required = true, default = nil)
  if valid_606244 != nil:
    section.add "ServiceNamespaces", valid_606244
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606245: Call_PostListPoliciesGrantingServiceAccess_606230;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_606245.validator(path, query, header, formData, body)
  let scheme = call_606245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606245.url(scheme.get, call_606245.host, call_606245.base,
                         call_606245.route, valid.getOrDefault("path"))
  result = hook(call_606245, url, valid)

proc call*(call_606246: Call_PostListPoliciesGrantingServiceAccess_606230;
          Arn: string; ServiceNamespaces: JsonNode; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606247 = newJObject()
  var formData_606248 = newJObject()
  add(formData_606248, "Arn", newJString(Arn))
  add(formData_606248, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    formData_606248.add "ServiceNamespaces", ServiceNamespaces
  add(query_606247, "Action", newJString(Action))
  add(query_606247, "Version", newJString(Version))
  result = call_606246.call(nil, query_606247, nil, formData_606248, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_606230(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_606231, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_606232,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_606212 = ref object of OpenApiRestCall_602433
proc url_GetListPoliciesGrantingServiceAccess_606214(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPoliciesGrantingServiceAccess_606213(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_606215 = query.getOrDefault("ServiceNamespaces")
  valid_606215 = validateParameter(valid_606215, JArray, required = true, default = nil)
  if valid_606215 != nil:
    section.add "ServiceNamespaces", valid_606215
  var valid_606216 = query.getOrDefault("Action")
  valid_606216 = validateParameter(valid_606216, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_606216 != nil:
    section.add "Action", valid_606216
  var valid_606217 = query.getOrDefault("Marker")
  valid_606217 = validateParameter(valid_606217, JString, required = false,
                                 default = nil)
  if valid_606217 != nil:
    section.add "Marker", valid_606217
  var valid_606218 = query.getOrDefault("Arn")
  valid_606218 = validateParameter(valid_606218, JString, required = true,
                                 default = nil)
  if valid_606218 != nil:
    section.add "Arn", valid_606218
  var valid_606219 = query.getOrDefault("Version")
  valid_606219 = validateParameter(valid_606219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606219 != nil:
    section.add "Version", valid_606219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606220 = header.getOrDefault("X-Amz-Date")
  valid_606220 = validateParameter(valid_606220, JString, required = false,
                                 default = nil)
  if valid_606220 != nil:
    section.add "X-Amz-Date", valid_606220
  var valid_606221 = header.getOrDefault("X-Amz-Security-Token")
  valid_606221 = validateParameter(valid_606221, JString, required = false,
                                 default = nil)
  if valid_606221 != nil:
    section.add "X-Amz-Security-Token", valid_606221
  var valid_606222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606222 = validateParameter(valid_606222, JString, required = false,
                                 default = nil)
  if valid_606222 != nil:
    section.add "X-Amz-Content-Sha256", valid_606222
  var valid_606223 = header.getOrDefault("X-Amz-Algorithm")
  valid_606223 = validateParameter(valid_606223, JString, required = false,
                                 default = nil)
  if valid_606223 != nil:
    section.add "X-Amz-Algorithm", valid_606223
  var valid_606224 = header.getOrDefault("X-Amz-Signature")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Signature", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-SignedHeaders", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Credential")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Credential", valid_606226
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606227: Call_GetListPoliciesGrantingServiceAccess_606212;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_606227.validator(path, query, header, formData, body)
  let scheme = call_606227.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606227.url(scheme.get, call_606227.host, call_606227.base,
                         call_606227.route, valid.getOrDefault("path"))
  result = hook(call_606227, url, valid)

proc call*(call_606228: Call_GetListPoliciesGrantingServiceAccess_606212;
          ServiceNamespaces: JsonNode; Arn: string;
          Action: string = "ListPoliciesGrantingServiceAccess"; Marker: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_606229 = newJObject()
  if ServiceNamespaces != nil:
    query_606229.add "ServiceNamespaces", ServiceNamespaces
  add(query_606229, "Action", newJString(Action))
  add(query_606229, "Marker", newJString(Marker))
  add(query_606229, "Arn", newJString(Arn))
  add(query_606229, "Version", newJString(Version))
  result = call_606228.call(nil, query_606229, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_606212(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_606213, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_606214,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_606267 = ref object of OpenApiRestCall_602433
proc url_PostListPolicyVersions_606269(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicyVersions_606268(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606270 = query.getOrDefault("Action")
  valid_606270 = validateParameter(valid_606270, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_606270 != nil:
    section.add "Action", valid_606270
  var valid_606271 = query.getOrDefault("Version")
  valid_606271 = validateParameter(valid_606271, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606271 != nil:
    section.add "Version", valid_606271
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606272 = header.getOrDefault("X-Amz-Date")
  valid_606272 = validateParameter(valid_606272, JString, required = false,
                                 default = nil)
  if valid_606272 != nil:
    section.add "X-Amz-Date", valid_606272
  var valid_606273 = header.getOrDefault("X-Amz-Security-Token")
  valid_606273 = validateParameter(valid_606273, JString, required = false,
                                 default = nil)
  if valid_606273 != nil:
    section.add "X-Amz-Security-Token", valid_606273
  var valid_606274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606274 = validateParameter(valid_606274, JString, required = false,
                                 default = nil)
  if valid_606274 != nil:
    section.add "X-Amz-Content-Sha256", valid_606274
  var valid_606275 = header.getOrDefault("X-Amz-Algorithm")
  valid_606275 = validateParameter(valid_606275, JString, required = false,
                                 default = nil)
  if valid_606275 != nil:
    section.add "X-Amz-Algorithm", valid_606275
  var valid_606276 = header.getOrDefault("X-Amz-Signature")
  valid_606276 = validateParameter(valid_606276, JString, required = false,
                                 default = nil)
  if valid_606276 != nil:
    section.add "X-Amz-Signature", valid_606276
  var valid_606277 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606277 = validateParameter(valid_606277, JString, required = false,
                                 default = nil)
  if valid_606277 != nil:
    section.add "X-Amz-SignedHeaders", valid_606277
  var valid_606278 = header.getOrDefault("X-Amz-Credential")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Credential", valid_606278
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_606279 = formData.getOrDefault("PolicyArn")
  valid_606279 = validateParameter(valid_606279, JString, required = true,
                                 default = nil)
  if valid_606279 != nil:
    section.add "PolicyArn", valid_606279
  var valid_606280 = formData.getOrDefault("Marker")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "Marker", valid_606280
  var valid_606281 = formData.getOrDefault("MaxItems")
  valid_606281 = validateParameter(valid_606281, JInt, required = false, default = nil)
  if valid_606281 != nil:
    section.add "MaxItems", valid_606281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606282: Call_PostListPolicyVersions_606267; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606282.validator(path, query, header, formData, body)
  let scheme = call_606282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606282.url(scheme.get, call_606282.host, call_606282.base,
                         call_606282.route, valid.getOrDefault("path"))
  result = hook(call_606282, url, valid)

proc call*(call_606283: Call_PostListPolicyVersions_606267; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606284 = newJObject()
  var formData_606285 = newJObject()
  add(formData_606285, "PolicyArn", newJString(PolicyArn))
  add(formData_606285, "Marker", newJString(Marker))
  add(query_606284, "Action", newJString(Action))
  add(formData_606285, "MaxItems", newJInt(MaxItems))
  add(query_606284, "Version", newJString(Version))
  result = call_606283.call(nil, query_606284, nil, formData_606285, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_606267(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_606268, base: "/",
    url: url_PostListPolicyVersions_606269, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_606249 = ref object of OpenApiRestCall_602433
proc url_GetListPolicyVersions_606251(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicyVersions_606250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_606252 = query.getOrDefault("PolicyArn")
  valid_606252 = validateParameter(valid_606252, JString, required = true,
                                 default = nil)
  if valid_606252 != nil:
    section.add "PolicyArn", valid_606252
  var valid_606253 = query.getOrDefault("Action")
  valid_606253 = validateParameter(valid_606253, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_606253 != nil:
    section.add "Action", valid_606253
  var valid_606254 = query.getOrDefault("Marker")
  valid_606254 = validateParameter(valid_606254, JString, required = false,
                                 default = nil)
  if valid_606254 != nil:
    section.add "Marker", valid_606254
  var valid_606255 = query.getOrDefault("MaxItems")
  valid_606255 = validateParameter(valid_606255, JInt, required = false, default = nil)
  if valid_606255 != nil:
    section.add "MaxItems", valid_606255
  var valid_606256 = query.getOrDefault("Version")
  valid_606256 = validateParameter(valid_606256, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606256 != nil:
    section.add "Version", valid_606256
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606257 = header.getOrDefault("X-Amz-Date")
  valid_606257 = validateParameter(valid_606257, JString, required = false,
                                 default = nil)
  if valid_606257 != nil:
    section.add "X-Amz-Date", valid_606257
  var valid_606258 = header.getOrDefault("X-Amz-Security-Token")
  valid_606258 = validateParameter(valid_606258, JString, required = false,
                                 default = nil)
  if valid_606258 != nil:
    section.add "X-Amz-Security-Token", valid_606258
  var valid_606259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "X-Amz-Content-Sha256", valid_606259
  var valid_606260 = header.getOrDefault("X-Amz-Algorithm")
  valid_606260 = validateParameter(valid_606260, JString, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "X-Amz-Algorithm", valid_606260
  var valid_606261 = header.getOrDefault("X-Amz-Signature")
  valid_606261 = validateParameter(valid_606261, JString, required = false,
                                 default = nil)
  if valid_606261 != nil:
    section.add "X-Amz-Signature", valid_606261
  var valid_606262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-SignedHeaders", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Credential")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Credential", valid_606263
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606264: Call_GetListPolicyVersions_606249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_606264.validator(path, query, header, formData, body)
  let scheme = call_606264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606264.url(scheme.get, call_606264.host, call_606264.base,
                         call_606264.route, valid.getOrDefault("path"))
  result = hook(call_606264, url, valid)

proc call*(call_606265: Call_GetListPolicyVersions_606249; PolicyArn: string;
          Action: string = "ListPolicyVersions"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606266 = newJObject()
  add(query_606266, "PolicyArn", newJString(PolicyArn))
  add(query_606266, "Action", newJString(Action))
  add(query_606266, "Marker", newJString(Marker))
  add(query_606266, "MaxItems", newJInt(MaxItems))
  add(query_606266, "Version", newJString(Version))
  result = call_606265.call(nil, query_606266, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_606249(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_606250, base: "/",
    url: url_GetListPolicyVersions_606251, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_606304 = ref object of OpenApiRestCall_602433
proc url_PostListRolePolicies_606306(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRolePolicies_606305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606307 = query.getOrDefault("Action")
  valid_606307 = validateParameter(valid_606307, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_606307 != nil:
    section.add "Action", valid_606307
  var valid_606308 = query.getOrDefault("Version")
  valid_606308 = validateParameter(valid_606308, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606308 != nil:
    section.add "Version", valid_606308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606309 = header.getOrDefault("X-Amz-Date")
  valid_606309 = validateParameter(valid_606309, JString, required = false,
                                 default = nil)
  if valid_606309 != nil:
    section.add "X-Amz-Date", valid_606309
  var valid_606310 = header.getOrDefault("X-Amz-Security-Token")
  valid_606310 = validateParameter(valid_606310, JString, required = false,
                                 default = nil)
  if valid_606310 != nil:
    section.add "X-Amz-Security-Token", valid_606310
  var valid_606311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606311 = validateParameter(valid_606311, JString, required = false,
                                 default = nil)
  if valid_606311 != nil:
    section.add "X-Amz-Content-Sha256", valid_606311
  var valid_606312 = header.getOrDefault("X-Amz-Algorithm")
  valid_606312 = validateParameter(valid_606312, JString, required = false,
                                 default = nil)
  if valid_606312 != nil:
    section.add "X-Amz-Algorithm", valid_606312
  var valid_606313 = header.getOrDefault("X-Amz-Signature")
  valid_606313 = validateParameter(valid_606313, JString, required = false,
                                 default = nil)
  if valid_606313 != nil:
    section.add "X-Amz-Signature", valid_606313
  var valid_606314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606314 = validateParameter(valid_606314, JString, required = false,
                                 default = nil)
  if valid_606314 != nil:
    section.add "X-Amz-SignedHeaders", valid_606314
  var valid_606315 = header.getOrDefault("X-Amz-Credential")
  valid_606315 = validateParameter(valid_606315, JString, required = false,
                                 default = nil)
  if valid_606315 != nil:
    section.add "X-Amz-Credential", valid_606315
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606316 = formData.getOrDefault("RoleName")
  valid_606316 = validateParameter(valid_606316, JString, required = true,
                                 default = nil)
  if valid_606316 != nil:
    section.add "RoleName", valid_606316
  var valid_606317 = formData.getOrDefault("Marker")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "Marker", valid_606317
  var valid_606318 = formData.getOrDefault("MaxItems")
  valid_606318 = validateParameter(valid_606318, JInt, required = false, default = nil)
  if valid_606318 != nil:
    section.add "MaxItems", valid_606318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606319: Call_PostListRolePolicies_606304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_606319.validator(path, query, header, formData, body)
  let scheme = call_606319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606319.url(scheme.get, call_606319.host, call_606319.base,
                         call_606319.route, valid.getOrDefault("path"))
  result = hook(call_606319, url, valid)

proc call*(call_606320: Call_PostListRolePolicies_606304; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606321 = newJObject()
  var formData_606322 = newJObject()
  add(formData_606322, "RoleName", newJString(RoleName))
  add(formData_606322, "Marker", newJString(Marker))
  add(query_606321, "Action", newJString(Action))
  add(formData_606322, "MaxItems", newJInt(MaxItems))
  add(query_606321, "Version", newJString(Version))
  result = call_606320.call(nil, query_606321, nil, formData_606322, nil)

var postListRolePolicies* = Call_PostListRolePolicies_606304(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_606305, base: "/",
    url: url_PostListRolePolicies_606306, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_606286 = ref object of OpenApiRestCall_602433
proc url_GetListRolePolicies_606288(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRolePolicies_606287(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606289 = query.getOrDefault("Action")
  valid_606289 = validateParameter(valid_606289, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_606289 != nil:
    section.add "Action", valid_606289
  var valid_606290 = query.getOrDefault("Marker")
  valid_606290 = validateParameter(valid_606290, JString, required = false,
                                 default = nil)
  if valid_606290 != nil:
    section.add "Marker", valid_606290
  var valid_606291 = query.getOrDefault("MaxItems")
  valid_606291 = validateParameter(valid_606291, JInt, required = false, default = nil)
  if valid_606291 != nil:
    section.add "MaxItems", valid_606291
  var valid_606292 = query.getOrDefault("RoleName")
  valid_606292 = validateParameter(valid_606292, JString, required = true,
                                 default = nil)
  if valid_606292 != nil:
    section.add "RoleName", valid_606292
  var valid_606293 = query.getOrDefault("Version")
  valid_606293 = validateParameter(valid_606293, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606293 != nil:
    section.add "Version", valid_606293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606294 = header.getOrDefault("X-Amz-Date")
  valid_606294 = validateParameter(valid_606294, JString, required = false,
                                 default = nil)
  if valid_606294 != nil:
    section.add "X-Amz-Date", valid_606294
  var valid_606295 = header.getOrDefault("X-Amz-Security-Token")
  valid_606295 = validateParameter(valid_606295, JString, required = false,
                                 default = nil)
  if valid_606295 != nil:
    section.add "X-Amz-Security-Token", valid_606295
  var valid_606296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606296 = validateParameter(valid_606296, JString, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "X-Amz-Content-Sha256", valid_606296
  var valid_606297 = header.getOrDefault("X-Amz-Algorithm")
  valid_606297 = validateParameter(valid_606297, JString, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "X-Amz-Algorithm", valid_606297
  var valid_606298 = header.getOrDefault("X-Amz-Signature")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "X-Amz-Signature", valid_606298
  var valid_606299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-SignedHeaders", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-Credential")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-Credential", valid_606300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606301: Call_GetListRolePolicies_606286; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_606301.validator(path, query, header, formData, body)
  let scheme = call_606301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606301.url(scheme.get, call_606301.host, call_606301.base,
                         call_606301.route, valid.getOrDefault("path"))
  result = hook(call_606301, url, valid)

proc call*(call_606302: Call_GetListRolePolicies_606286; RoleName: string;
          Action: string = "ListRolePolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606303 = newJObject()
  add(query_606303, "Action", newJString(Action))
  add(query_606303, "Marker", newJString(Marker))
  add(query_606303, "MaxItems", newJInt(MaxItems))
  add(query_606303, "RoleName", newJString(RoleName))
  add(query_606303, "Version", newJString(Version))
  result = call_606302.call(nil, query_606303, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_606286(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_606287, base: "/",
    url: url_GetListRolePolicies_606288, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_606341 = ref object of OpenApiRestCall_602433
proc url_PostListRoleTags_606343(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoleTags_606342(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606344 = query.getOrDefault("Action")
  valid_606344 = validateParameter(valid_606344, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_606344 != nil:
    section.add "Action", valid_606344
  var valid_606345 = query.getOrDefault("Version")
  valid_606345 = validateParameter(valid_606345, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606345 != nil:
    section.add "Version", valid_606345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606346 = header.getOrDefault("X-Amz-Date")
  valid_606346 = validateParameter(valid_606346, JString, required = false,
                                 default = nil)
  if valid_606346 != nil:
    section.add "X-Amz-Date", valid_606346
  var valid_606347 = header.getOrDefault("X-Amz-Security-Token")
  valid_606347 = validateParameter(valid_606347, JString, required = false,
                                 default = nil)
  if valid_606347 != nil:
    section.add "X-Amz-Security-Token", valid_606347
  var valid_606348 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606348 = validateParameter(valid_606348, JString, required = false,
                                 default = nil)
  if valid_606348 != nil:
    section.add "X-Amz-Content-Sha256", valid_606348
  var valid_606349 = header.getOrDefault("X-Amz-Algorithm")
  valid_606349 = validateParameter(valid_606349, JString, required = false,
                                 default = nil)
  if valid_606349 != nil:
    section.add "X-Amz-Algorithm", valid_606349
  var valid_606350 = header.getOrDefault("X-Amz-Signature")
  valid_606350 = validateParameter(valid_606350, JString, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "X-Amz-Signature", valid_606350
  var valid_606351 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "X-Amz-SignedHeaders", valid_606351
  var valid_606352 = header.getOrDefault("X-Amz-Credential")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "X-Amz-Credential", valid_606352
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606353 = formData.getOrDefault("RoleName")
  valid_606353 = validateParameter(valid_606353, JString, required = true,
                                 default = nil)
  if valid_606353 != nil:
    section.add "RoleName", valid_606353
  var valid_606354 = formData.getOrDefault("Marker")
  valid_606354 = validateParameter(valid_606354, JString, required = false,
                                 default = nil)
  if valid_606354 != nil:
    section.add "Marker", valid_606354
  var valid_606355 = formData.getOrDefault("MaxItems")
  valid_606355 = validateParameter(valid_606355, JInt, required = false, default = nil)
  if valid_606355 != nil:
    section.add "MaxItems", valid_606355
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606356: Call_PostListRoleTags_606341; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606356.validator(path, query, header, formData, body)
  let scheme = call_606356.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606356.url(scheme.get, call_606356.host, call_606356.base,
                         call_606356.route, valid.getOrDefault("path"))
  result = hook(call_606356, url, valid)

proc call*(call_606357: Call_PostListRoleTags_606341; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606358 = newJObject()
  var formData_606359 = newJObject()
  add(formData_606359, "RoleName", newJString(RoleName))
  add(formData_606359, "Marker", newJString(Marker))
  add(query_606358, "Action", newJString(Action))
  add(formData_606359, "MaxItems", newJInt(MaxItems))
  add(query_606358, "Version", newJString(Version))
  result = call_606357.call(nil, query_606358, nil, formData_606359, nil)

var postListRoleTags* = Call_PostListRoleTags_606341(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_606342,
    base: "/", url: url_PostListRoleTags_606343,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_606323 = ref object of OpenApiRestCall_602433
proc url_GetListRoleTags_606325(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoleTags_606324(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606326 = query.getOrDefault("Action")
  valid_606326 = validateParameter(valid_606326, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_606326 != nil:
    section.add "Action", valid_606326
  var valid_606327 = query.getOrDefault("Marker")
  valid_606327 = validateParameter(valid_606327, JString, required = false,
                                 default = nil)
  if valid_606327 != nil:
    section.add "Marker", valid_606327
  var valid_606328 = query.getOrDefault("MaxItems")
  valid_606328 = validateParameter(valid_606328, JInt, required = false, default = nil)
  if valid_606328 != nil:
    section.add "MaxItems", valid_606328
  var valid_606329 = query.getOrDefault("RoleName")
  valid_606329 = validateParameter(valid_606329, JString, required = true,
                                 default = nil)
  if valid_606329 != nil:
    section.add "RoleName", valid_606329
  var valid_606330 = query.getOrDefault("Version")
  valid_606330 = validateParameter(valid_606330, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606330 != nil:
    section.add "Version", valid_606330
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606331 = header.getOrDefault("X-Amz-Date")
  valid_606331 = validateParameter(valid_606331, JString, required = false,
                                 default = nil)
  if valid_606331 != nil:
    section.add "X-Amz-Date", valid_606331
  var valid_606332 = header.getOrDefault("X-Amz-Security-Token")
  valid_606332 = validateParameter(valid_606332, JString, required = false,
                                 default = nil)
  if valid_606332 != nil:
    section.add "X-Amz-Security-Token", valid_606332
  var valid_606333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606333 = validateParameter(valid_606333, JString, required = false,
                                 default = nil)
  if valid_606333 != nil:
    section.add "X-Amz-Content-Sha256", valid_606333
  var valid_606334 = header.getOrDefault("X-Amz-Algorithm")
  valid_606334 = validateParameter(valid_606334, JString, required = false,
                                 default = nil)
  if valid_606334 != nil:
    section.add "X-Amz-Algorithm", valid_606334
  var valid_606335 = header.getOrDefault("X-Amz-Signature")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Signature", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-SignedHeaders", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Credential")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Credential", valid_606337
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606338: Call_GetListRoleTags_606323; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606338.validator(path, query, header, formData, body)
  let scheme = call_606338.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606338.url(scheme.get, call_606338.host, call_606338.base,
                         call_606338.route, valid.getOrDefault("path"))
  result = hook(call_606338, url, valid)

proc call*(call_606339: Call_GetListRoleTags_606323; RoleName: string;
          Action: string = "ListRoleTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606340 = newJObject()
  add(query_606340, "Action", newJString(Action))
  add(query_606340, "Marker", newJString(Marker))
  add(query_606340, "MaxItems", newJInt(MaxItems))
  add(query_606340, "RoleName", newJString(RoleName))
  add(query_606340, "Version", newJString(Version))
  result = call_606339.call(nil, query_606340, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_606323(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_606324,
    base: "/", url: url_GetListRoleTags_606325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_606378 = ref object of OpenApiRestCall_602433
proc url_PostListRoles_606380(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoles_606379(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606381 = query.getOrDefault("Action")
  valid_606381 = validateParameter(valid_606381, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_606381 != nil:
    section.add "Action", valid_606381
  var valid_606382 = query.getOrDefault("Version")
  valid_606382 = validateParameter(valid_606382, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606382 != nil:
    section.add "Version", valid_606382
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606383 = header.getOrDefault("X-Amz-Date")
  valid_606383 = validateParameter(valid_606383, JString, required = false,
                                 default = nil)
  if valid_606383 != nil:
    section.add "X-Amz-Date", valid_606383
  var valid_606384 = header.getOrDefault("X-Amz-Security-Token")
  valid_606384 = validateParameter(valid_606384, JString, required = false,
                                 default = nil)
  if valid_606384 != nil:
    section.add "X-Amz-Security-Token", valid_606384
  var valid_606385 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606385 = validateParameter(valid_606385, JString, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "X-Amz-Content-Sha256", valid_606385
  var valid_606386 = header.getOrDefault("X-Amz-Algorithm")
  valid_606386 = validateParameter(valid_606386, JString, required = false,
                                 default = nil)
  if valid_606386 != nil:
    section.add "X-Amz-Algorithm", valid_606386
  var valid_606387 = header.getOrDefault("X-Amz-Signature")
  valid_606387 = validateParameter(valid_606387, JString, required = false,
                                 default = nil)
  if valid_606387 != nil:
    section.add "X-Amz-Signature", valid_606387
  var valid_606388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606388 = validateParameter(valid_606388, JString, required = false,
                                 default = nil)
  if valid_606388 != nil:
    section.add "X-Amz-SignedHeaders", valid_606388
  var valid_606389 = header.getOrDefault("X-Amz-Credential")
  valid_606389 = validateParameter(valid_606389, JString, required = false,
                                 default = nil)
  if valid_606389 != nil:
    section.add "X-Amz-Credential", valid_606389
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606390 = formData.getOrDefault("PathPrefix")
  valid_606390 = validateParameter(valid_606390, JString, required = false,
                                 default = nil)
  if valid_606390 != nil:
    section.add "PathPrefix", valid_606390
  var valid_606391 = formData.getOrDefault("Marker")
  valid_606391 = validateParameter(valid_606391, JString, required = false,
                                 default = nil)
  if valid_606391 != nil:
    section.add "Marker", valid_606391
  var valid_606392 = formData.getOrDefault("MaxItems")
  valid_606392 = validateParameter(valid_606392, JInt, required = false, default = nil)
  if valid_606392 != nil:
    section.add "MaxItems", valid_606392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606393: Call_PostListRoles_606378; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606393.validator(path, query, header, formData, body)
  let scheme = call_606393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606393.url(scheme.get, call_606393.host, call_606393.base,
                         call_606393.route, valid.getOrDefault("path"))
  result = hook(call_606393, url, valid)

proc call*(call_606394: Call_PostListRoles_606378; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListRoles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606395 = newJObject()
  var formData_606396 = newJObject()
  add(formData_606396, "PathPrefix", newJString(PathPrefix))
  add(formData_606396, "Marker", newJString(Marker))
  add(query_606395, "Action", newJString(Action))
  add(formData_606396, "MaxItems", newJInt(MaxItems))
  add(query_606395, "Version", newJString(Version))
  result = call_606394.call(nil, query_606395, nil, formData_606396, nil)

var postListRoles* = Call_PostListRoles_606378(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_606379,
    base: "/", url: url_PostListRoles_606380, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_606360 = ref object of OpenApiRestCall_602433
proc url_GetListRoles_606362(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoles_606361(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606363 = query.getOrDefault("PathPrefix")
  valid_606363 = validateParameter(valid_606363, JString, required = false,
                                 default = nil)
  if valid_606363 != nil:
    section.add "PathPrefix", valid_606363
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606364 = query.getOrDefault("Action")
  valid_606364 = validateParameter(valid_606364, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_606364 != nil:
    section.add "Action", valid_606364
  var valid_606365 = query.getOrDefault("Marker")
  valid_606365 = validateParameter(valid_606365, JString, required = false,
                                 default = nil)
  if valid_606365 != nil:
    section.add "Marker", valid_606365
  var valid_606366 = query.getOrDefault("MaxItems")
  valid_606366 = validateParameter(valid_606366, JInt, required = false, default = nil)
  if valid_606366 != nil:
    section.add "MaxItems", valid_606366
  var valid_606367 = query.getOrDefault("Version")
  valid_606367 = validateParameter(valid_606367, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606367 != nil:
    section.add "Version", valid_606367
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606368 = header.getOrDefault("X-Amz-Date")
  valid_606368 = validateParameter(valid_606368, JString, required = false,
                                 default = nil)
  if valid_606368 != nil:
    section.add "X-Amz-Date", valid_606368
  var valid_606369 = header.getOrDefault("X-Amz-Security-Token")
  valid_606369 = validateParameter(valid_606369, JString, required = false,
                                 default = nil)
  if valid_606369 != nil:
    section.add "X-Amz-Security-Token", valid_606369
  var valid_606370 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606370 = validateParameter(valid_606370, JString, required = false,
                                 default = nil)
  if valid_606370 != nil:
    section.add "X-Amz-Content-Sha256", valid_606370
  var valid_606371 = header.getOrDefault("X-Amz-Algorithm")
  valid_606371 = validateParameter(valid_606371, JString, required = false,
                                 default = nil)
  if valid_606371 != nil:
    section.add "X-Amz-Algorithm", valid_606371
  var valid_606372 = header.getOrDefault("X-Amz-Signature")
  valid_606372 = validateParameter(valid_606372, JString, required = false,
                                 default = nil)
  if valid_606372 != nil:
    section.add "X-Amz-Signature", valid_606372
  var valid_606373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-SignedHeaders", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Credential")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Credential", valid_606374
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606375: Call_GetListRoles_606360; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606375.validator(path, query, header, formData, body)
  let scheme = call_606375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606375.url(scheme.get, call_606375.host, call_606375.base,
                         call_606375.route, valid.getOrDefault("path"))
  result = hook(call_606375, url, valid)

proc call*(call_606376: Call_GetListRoles_606360; PathPrefix: string = "";
          Action: string = "ListRoles"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606377 = newJObject()
  add(query_606377, "PathPrefix", newJString(PathPrefix))
  add(query_606377, "Action", newJString(Action))
  add(query_606377, "Marker", newJString(Marker))
  add(query_606377, "MaxItems", newJInt(MaxItems))
  add(query_606377, "Version", newJString(Version))
  result = call_606376.call(nil, query_606377, nil, nil, nil)

var getListRoles* = Call_GetListRoles_606360(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_606361, base: "/",
    url: url_GetListRoles_606362, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_606412 = ref object of OpenApiRestCall_602433
proc url_PostListSAMLProviders_606414(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSAMLProviders_606413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606415 = query.getOrDefault("Action")
  valid_606415 = validateParameter(valid_606415, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_606415 != nil:
    section.add "Action", valid_606415
  var valid_606416 = query.getOrDefault("Version")
  valid_606416 = validateParameter(valid_606416, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606416 != nil:
    section.add "Version", valid_606416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606417 = header.getOrDefault("X-Amz-Date")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "X-Amz-Date", valid_606417
  var valid_606418 = header.getOrDefault("X-Amz-Security-Token")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "X-Amz-Security-Token", valid_606418
  var valid_606419 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606419 = validateParameter(valid_606419, JString, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "X-Amz-Content-Sha256", valid_606419
  var valid_606420 = header.getOrDefault("X-Amz-Algorithm")
  valid_606420 = validateParameter(valid_606420, JString, required = false,
                                 default = nil)
  if valid_606420 != nil:
    section.add "X-Amz-Algorithm", valid_606420
  var valid_606421 = header.getOrDefault("X-Amz-Signature")
  valid_606421 = validateParameter(valid_606421, JString, required = false,
                                 default = nil)
  if valid_606421 != nil:
    section.add "X-Amz-Signature", valid_606421
  var valid_606422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606422 = validateParameter(valid_606422, JString, required = false,
                                 default = nil)
  if valid_606422 != nil:
    section.add "X-Amz-SignedHeaders", valid_606422
  var valid_606423 = header.getOrDefault("X-Amz-Credential")
  valid_606423 = validateParameter(valid_606423, JString, required = false,
                                 default = nil)
  if valid_606423 != nil:
    section.add "X-Amz-Credential", valid_606423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606424: Call_PostListSAMLProviders_606412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_606424.validator(path, query, header, formData, body)
  let scheme = call_606424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606424.url(scheme.get, call_606424.host, call_606424.base,
                         call_606424.route, valid.getOrDefault("path"))
  result = hook(call_606424, url, valid)

proc call*(call_606425: Call_PostListSAMLProviders_606412;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606426 = newJObject()
  add(query_606426, "Action", newJString(Action))
  add(query_606426, "Version", newJString(Version))
  result = call_606425.call(nil, query_606426, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_606412(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_606413, base: "/",
    url: url_PostListSAMLProviders_606414, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_606397 = ref object of OpenApiRestCall_602433
proc url_GetListSAMLProviders_606399(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSAMLProviders_606398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606400 = query.getOrDefault("Action")
  valid_606400 = validateParameter(valid_606400, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_606400 != nil:
    section.add "Action", valid_606400
  var valid_606401 = query.getOrDefault("Version")
  valid_606401 = validateParameter(valid_606401, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606401 != nil:
    section.add "Version", valid_606401
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606402 = header.getOrDefault("X-Amz-Date")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "X-Amz-Date", valid_606402
  var valid_606403 = header.getOrDefault("X-Amz-Security-Token")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Security-Token", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Content-Sha256", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-Algorithm")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-Algorithm", valid_606405
  var valid_606406 = header.getOrDefault("X-Amz-Signature")
  valid_606406 = validateParameter(valid_606406, JString, required = false,
                                 default = nil)
  if valid_606406 != nil:
    section.add "X-Amz-Signature", valid_606406
  var valid_606407 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606407 = validateParameter(valid_606407, JString, required = false,
                                 default = nil)
  if valid_606407 != nil:
    section.add "X-Amz-SignedHeaders", valid_606407
  var valid_606408 = header.getOrDefault("X-Amz-Credential")
  valid_606408 = validateParameter(valid_606408, JString, required = false,
                                 default = nil)
  if valid_606408 != nil:
    section.add "X-Amz-Credential", valid_606408
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606409: Call_GetListSAMLProviders_606397; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_606409.validator(path, query, header, formData, body)
  let scheme = call_606409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606409.url(scheme.get, call_606409.host, call_606409.base,
                         call_606409.route, valid.getOrDefault("path"))
  result = hook(call_606409, url, valid)

proc call*(call_606410: Call_GetListSAMLProviders_606397;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606411 = newJObject()
  add(query_606411, "Action", newJString(Action))
  add(query_606411, "Version", newJString(Version))
  result = call_606410.call(nil, query_606411, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_606397(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_606398, base: "/",
    url: url_GetListSAMLProviders_606399, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_606445 = ref object of OpenApiRestCall_602433
proc url_PostListSSHPublicKeys_606447(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSSHPublicKeys_606446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606448 = query.getOrDefault("Action")
  valid_606448 = validateParameter(valid_606448, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_606448 != nil:
    section.add "Action", valid_606448
  var valid_606449 = query.getOrDefault("Version")
  valid_606449 = validateParameter(valid_606449, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606449 != nil:
    section.add "Version", valid_606449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606450 = header.getOrDefault("X-Amz-Date")
  valid_606450 = validateParameter(valid_606450, JString, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "X-Amz-Date", valid_606450
  var valid_606451 = header.getOrDefault("X-Amz-Security-Token")
  valid_606451 = validateParameter(valid_606451, JString, required = false,
                                 default = nil)
  if valid_606451 != nil:
    section.add "X-Amz-Security-Token", valid_606451
  var valid_606452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606452 = validateParameter(valid_606452, JString, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "X-Amz-Content-Sha256", valid_606452
  var valid_606453 = header.getOrDefault("X-Amz-Algorithm")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "X-Amz-Algorithm", valid_606453
  var valid_606454 = header.getOrDefault("X-Amz-Signature")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "X-Amz-Signature", valid_606454
  var valid_606455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "X-Amz-SignedHeaders", valid_606455
  var valid_606456 = header.getOrDefault("X-Amz-Credential")
  valid_606456 = validateParameter(valid_606456, JString, required = false,
                                 default = nil)
  if valid_606456 != nil:
    section.add "X-Amz-Credential", valid_606456
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606457 = formData.getOrDefault("UserName")
  valid_606457 = validateParameter(valid_606457, JString, required = false,
                                 default = nil)
  if valid_606457 != nil:
    section.add "UserName", valid_606457
  var valid_606458 = formData.getOrDefault("Marker")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "Marker", valid_606458
  var valid_606459 = formData.getOrDefault("MaxItems")
  valid_606459 = validateParameter(valid_606459, JInt, required = false, default = nil)
  if valid_606459 != nil:
    section.add "MaxItems", valid_606459
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606460: Call_PostListSSHPublicKeys_606445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606460.validator(path, query, header, formData, body)
  let scheme = call_606460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606460.url(scheme.get, call_606460.host, call_606460.base,
                         call_606460.route, valid.getOrDefault("path"))
  result = hook(call_606460, url, valid)

proc call*(call_606461: Call_PostListSSHPublicKeys_606445; UserName: string = "";
          Marker: string = ""; Action: string = "ListSSHPublicKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606462 = newJObject()
  var formData_606463 = newJObject()
  add(formData_606463, "UserName", newJString(UserName))
  add(formData_606463, "Marker", newJString(Marker))
  add(query_606462, "Action", newJString(Action))
  add(formData_606463, "MaxItems", newJInt(MaxItems))
  add(query_606462, "Version", newJString(Version))
  result = call_606461.call(nil, query_606462, nil, formData_606463, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_606445(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_606446, base: "/",
    url: url_PostListSSHPublicKeys_606447, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_606427 = ref object of OpenApiRestCall_602433
proc url_GetListSSHPublicKeys_606429(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSSHPublicKeys_606428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606430 = query.getOrDefault("UserName")
  valid_606430 = validateParameter(valid_606430, JString, required = false,
                                 default = nil)
  if valid_606430 != nil:
    section.add "UserName", valid_606430
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606431 = query.getOrDefault("Action")
  valid_606431 = validateParameter(valid_606431, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_606431 != nil:
    section.add "Action", valid_606431
  var valid_606432 = query.getOrDefault("Marker")
  valid_606432 = validateParameter(valid_606432, JString, required = false,
                                 default = nil)
  if valid_606432 != nil:
    section.add "Marker", valid_606432
  var valid_606433 = query.getOrDefault("MaxItems")
  valid_606433 = validateParameter(valid_606433, JInt, required = false, default = nil)
  if valid_606433 != nil:
    section.add "MaxItems", valid_606433
  var valid_606434 = query.getOrDefault("Version")
  valid_606434 = validateParameter(valid_606434, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606434 != nil:
    section.add "Version", valid_606434
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606435 = header.getOrDefault("X-Amz-Date")
  valid_606435 = validateParameter(valid_606435, JString, required = false,
                                 default = nil)
  if valid_606435 != nil:
    section.add "X-Amz-Date", valid_606435
  var valid_606436 = header.getOrDefault("X-Amz-Security-Token")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-Security-Token", valid_606436
  var valid_606437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "X-Amz-Content-Sha256", valid_606437
  var valid_606438 = header.getOrDefault("X-Amz-Algorithm")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "X-Amz-Algorithm", valid_606438
  var valid_606439 = header.getOrDefault("X-Amz-Signature")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "X-Amz-Signature", valid_606439
  var valid_606440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "X-Amz-SignedHeaders", valid_606440
  var valid_606441 = header.getOrDefault("X-Amz-Credential")
  valid_606441 = validateParameter(valid_606441, JString, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "X-Amz-Credential", valid_606441
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606442: Call_GetListSSHPublicKeys_606427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606442.validator(path, query, header, formData, body)
  let scheme = call_606442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606442.url(scheme.get, call_606442.host, call_606442.base,
                         call_606442.route, valid.getOrDefault("path"))
  result = hook(call_606442, url, valid)

proc call*(call_606443: Call_GetListSSHPublicKeys_606427; UserName: string = "";
          Action: string = "ListSSHPublicKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606444 = newJObject()
  add(query_606444, "UserName", newJString(UserName))
  add(query_606444, "Action", newJString(Action))
  add(query_606444, "Marker", newJString(Marker))
  add(query_606444, "MaxItems", newJInt(MaxItems))
  add(query_606444, "Version", newJString(Version))
  result = call_606443.call(nil, query_606444, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_606427(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_606428, base: "/",
    url: url_GetListSSHPublicKeys_606429, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_606482 = ref object of OpenApiRestCall_602433
proc url_PostListServerCertificates_606484(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServerCertificates_606483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606485 = query.getOrDefault("Action")
  valid_606485 = validateParameter(valid_606485, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_606485 != nil:
    section.add "Action", valid_606485
  var valid_606486 = query.getOrDefault("Version")
  valid_606486 = validateParameter(valid_606486, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606486 != nil:
    section.add "Version", valid_606486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606487 = header.getOrDefault("X-Amz-Date")
  valid_606487 = validateParameter(valid_606487, JString, required = false,
                                 default = nil)
  if valid_606487 != nil:
    section.add "X-Amz-Date", valid_606487
  var valid_606488 = header.getOrDefault("X-Amz-Security-Token")
  valid_606488 = validateParameter(valid_606488, JString, required = false,
                                 default = nil)
  if valid_606488 != nil:
    section.add "X-Amz-Security-Token", valid_606488
  var valid_606489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606489 = validateParameter(valid_606489, JString, required = false,
                                 default = nil)
  if valid_606489 != nil:
    section.add "X-Amz-Content-Sha256", valid_606489
  var valid_606490 = header.getOrDefault("X-Amz-Algorithm")
  valid_606490 = validateParameter(valid_606490, JString, required = false,
                                 default = nil)
  if valid_606490 != nil:
    section.add "X-Amz-Algorithm", valid_606490
  var valid_606491 = header.getOrDefault("X-Amz-Signature")
  valid_606491 = validateParameter(valid_606491, JString, required = false,
                                 default = nil)
  if valid_606491 != nil:
    section.add "X-Amz-Signature", valid_606491
  var valid_606492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606492 = validateParameter(valid_606492, JString, required = false,
                                 default = nil)
  if valid_606492 != nil:
    section.add "X-Amz-SignedHeaders", valid_606492
  var valid_606493 = header.getOrDefault("X-Amz-Credential")
  valid_606493 = validateParameter(valid_606493, JString, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "X-Amz-Credential", valid_606493
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606494 = formData.getOrDefault("PathPrefix")
  valid_606494 = validateParameter(valid_606494, JString, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "PathPrefix", valid_606494
  var valid_606495 = formData.getOrDefault("Marker")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "Marker", valid_606495
  var valid_606496 = formData.getOrDefault("MaxItems")
  valid_606496 = validateParameter(valid_606496, JInt, required = false, default = nil)
  if valid_606496 != nil:
    section.add "MaxItems", valid_606496
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606497: Call_PostListServerCertificates_606482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_606497.validator(path, query, header, formData, body)
  let scheme = call_606497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606497.url(scheme.get, call_606497.host, call_606497.base,
                         call_606497.route, valid.getOrDefault("path"))
  result = hook(call_606497, url, valid)

proc call*(call_606498: Call_PostListServerCertificates_606482;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListServerCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606499 = newJObject()
  var formData_606500 = newJObject()
  add(formData_606500, "PathPrefix", newJString(PathPrefix))
  add(formData_606500, "Marker", newJString(Marker))
  add(query_606499, "Action", newJString(Action))
  add(formData_606500, "MaxItems", newJInt(MaxItems))
  add(query_606499, "Version", newJString(Version))
  result = call_606498.call(nil, query_606499, nil, formData_606500, nil)

var postListServerCertificates* = Call_PostListServerCertificates_606482(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_606483, base: "/",
    url: url_PostListServerCertificates_606484,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_606464 = ref object of OpenApiRestCall_602433
proc url_GetListServerCertificates_606466(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServerCertificates_606465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606467 = query.getOrDefault("PathPrefix")
  valid_606467 = validateParameter(valid_606467, JString, required = false,
                                 default = nil)
  if valid_606467 != nil:
    section.add "PathPrefix", valid_606467
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606468 = query.getOrDefault("Action")
  valid_606468 = validateParameter(valid_606468, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_606468 != nil:
    section.add "Action", valid_606468
  var valid_606469 = query.getOrDefault("Marker")
  valid_606469 = validateParameter(valid_606469, JString, required = false,
                                 default = nil)
  if valid_606469 != nil:
    section.add "Marker", valid_606469
  var valid_606470 = query.getOrDefault("MaxItems")
  valid_606470 = validateParameter(valid_606470, JInt, required = false, default = nil)
  if valid_606470 != nil:
    section.add "MaxItems", valid_606470
  var valid_606471 = query.getOrDefault("Version")
  valid_606471 = validateParameter(valid_606471, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606471 != nil:
    section.add "Version", valid_606471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606472 = header.getOrDefault("X-Amz-Date")
  valid_606472 = validateParameter(valid_606472, JString, required = false,
                                 default = nil)
  if valid_606472 != nil:
    section.add "X-Amz-Date", valid_606472
  var valid_606473 = header.getOrDefault("X-Amz-Security-Token")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-Security-Token", valid_606473
  var valid_606474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "X-Amz-Content-Sha256", valid_606474
  var valid_606475 = header.getOrDefault("X-Amz-Algorithm")
  valid_606475 = validateParameter(valid_606475, JString, required = false,
                                 default = nil)
  if valid_606475 != nil:
    section.add "X-Amz-Algorithm", valid_606475
  var valid_606476 = header.getOrDefault("X-Amz-Signature")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Signature", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-SignedHeaders", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-Credential")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-Credential", valid_606478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606479: Call_GetListServerCertificates_606464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_606479.validator(path, query, header, formData, body)
  let scheme = call_606479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606479.url(scheme.get, call_606479.host, call_606479.base,
                         call_606479.route, valid.getOrDefault("path"))
  result = hook(call_606479, url, valid)

proc call*(call_606480: Call_GetListServerCertificates_606464;
          PathPrefix: string = ""; Action: string = "ListServerCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606481 = newJObject()
  add(query_606481, "PathPrefix", newJString(PathPrefix))
  add(query_606481, "Action", newJString(Action))
  add(query_606481, "Marker", newJString(Marker))
  add(query_606481, "MaxItems", newJInt(MaxItems))
  add(query_606481, "Version", newJString(Version))
  result = call_606480.call(nil, query_606481, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_606464(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_606465, base: "/",
    url: url_GetListServerCertificates_606466,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_606518 = ref object of OpenApiRestCall_602433
proc url_PostListServiceSpecificCredentials_606520(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServiceSpecificCredentials_606519(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606521 = query.getOrDefault("Action")
  valid_606521 = validateParameter(valid_606521, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_606521 != nil:
    section.add "Action", valid_606521
  var valid_606522 = query.getOrDefault("Version")
  valid_606522 = validateParameter(valid_606522, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606522 != nil:
    section.add "Version", valid_606522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606523 = header.getOrDefault("X-Amz-Date")
  valid_606523 = validateParameter(valid_606523, JString, required = false,
                                 default = nil)
  if valid_606523 != nil:
    section.add "X-Amz-Date", valid_606523
  var valid_606524 = header.getOrDefault("X-Amz-Security-Token")
  valid_606524 = validateParameter(valid_606524, JString, required = false,
                                 default = nil)
  if valid_606524 != nil:
    section.add "X-Amz-Security-Token", valid_606524
  var valid_606525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606525 = validateParameter(valid_606525, JString, required = false,
                                 default = nil)
  if valid_606525 != nil:
    section.add "X-Amz-Content-Sha256", valid_606525
  var valid_606526 = header.getOrDefault("X-Amz-Algorithm")
  valid_606526 = validateParameter(valid_606526, JString, required = false,
                                 default = nil)
  if valid_606526 != nil:
    section.add "X-Amz-Algorithm", valid_606526
  var valid_606527 = header.getOrDefault("X-Amz-Signature")
  valid_606527 = validateParameter(valid_606527, JString, required = false,
                                 default = nil)
  if valid_606527 != nil:
    section.add "X-Amz-Signature", valid_606527
  var valid_606528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606528 = validateParameter(valid_606528, JString, required = false,
                                 default = nil)
  if valid_606528 != nil:
    section.add "X-Amz-SignedHeaders", valid_606528
  var valid_606529 = header.getOrDefault("X-Amz-Credential")
  valid_606529 = validateParameter(valid_606529, JString, required = false,
                                 default = nil)
  if valid_606529 != nil:
    section.add "X-Amz-Credential", valid_606529
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  section = newJObject()
  var valid_606530 = formData.getOrDefault("UserName")
  valid_606530 = validateParameter(valid_606530, JString, required = false,
                                 default = nil)
  if valid_606530 != nil:
    section.add "UserName", valid_606530
  var valid_606531 = formData.getOrDefault("ServiceName")
  valid_606531 = validateParameter(valid_606531, JString, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "ServiceName", valid_606531
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606532: Call_PostListServiceSpecificCredentials_606518;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_606532.validator(path, query, header, formData, body)
  let scheme = call_606532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606532.url(scheme.get, call_606532.host, call_606532.base,
                         call_606532.route, valid.getOrDefault("path"))
  result = hook(call_606532, url, valid)

proc call*(call_606533: Call_PostListServiceSpecificCredentials_606518;
          UserName: string = ""; Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"; ServiceName: string = ""): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  var query_606534 = newJObject()
  var formData_606535 = newJObject()
  add(formData_606535, "UserName", newJString(UserName))
  add(query_606534, "Action", newJString(Action))
  add(query_606534, "Version", newJString(Version))
  add(formData_606535, "ServiceName", newJString(ServiceName))
  result = call_606533.call(nil, query_606534, nil, formData_606535, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_606518(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_606519, base: "/",
    url: url_PostListServiceSpecificCredentials_606520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_606501 = ref object of OpenApiRestCall_602433
proc url_GetListServiceSpecificCredentials_606503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServiceSpecificCredentials_606502(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606504 = query.getOrDefault("ServiceName")
  valid_606504 = validateParameter(valid_606504, JString, required = false,
                                 default = nil)
  if valid_606504 != nil:
    section.add "ServiceName", valid_606504
  var valid_606505 = query.getOrDefault("UserName")
  valid_606505 = validateParameter(valid_606505, JString, required = false,
                                 default = nil)
  if valid_606505 != nil:
    section.add "UserName", valid_606505
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606506 = query.getOrDefault("Action")
  valid_606506 = validateParameter(valid_606506, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_606506 != nil:
    section.add "Action", valid_606506
  var valid_606507 = query.getOrDefault("Version")
  valid_606507 = validateParameter(valid_606507, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606507 != nil:
    section.add "Version", valid_606507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606508 = header.getOrDefault("X-Amz-Date")
  valid_606508 = validateParameter(valid_606508, JString, required = false,
                                 default = nil)
  if valid_606508 != nil:
    section.add "X-Amz-Date", valid_606508
  var valid_606509 = header.getOrDefault("X-Amz-Security-Token")
  valid_606509 = validateParameter(valid_606509, JString, required = false,
                                 default = nil)
  if valid_606509 != nil:
    section.add "X-Amz-Security-Token", valid_606509
  var valid_606510 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606510 = validateParameter(valid_606510, JString, required = false,
                                 default = nil)
  if valid_606510 != nil:
    section.add "X-Amz-Content-Sha256", valid_606510
  var valid_606511 = header.getOrDefault("X-Amz-Algorithm")
  valid_606511 = validateParameter(valid_606511, JString, required = false,
                                 default = nil)
  if valid_606511 != nil:
    section.add "X-Amz-Algorithm", valid_606511
  var valid_606512 = header.getOrDefault("X-Amz-Signature")
  valid_606512 = validateParameter(valid_606512, JString, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "X-Amz-Signature", valid_606512
  var valid_606513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606513 = validateParameter(valid_606513, JString, required = false,
                                 default = nil)
  if valid_606513 != nil:
    section.add "X-Amz-SignedHeaders", valid_606513
  var valid_606514 = header.getOrDefault("X-Amz-Credential")
  valid_606514 = validateParameter(valid_606514, JString, required = false,
                                 default = nil)
  if valid_606514 != nil:
    section.add "X-Amz-Credential", valid_606514
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606515: Call_GetListServiceSpecificCredentials_606501;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_606515.validator(path, query, header, formData, body)
  let scheme = call_606515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606515.url(scheme.get, call_606515.host, call_606515.base,
                         call_606515.route, valid.getOrDefault("path"))
  result = hook(call_606515, url, valid)

proc call*(call_606516: Call_GetListServiceSpecificCredentials_606501;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606517 = newJObject()
  add(query_606517, "ServiceName", newJString(ServiceName))
  add(query_606517, "UserName", newJString(UserName))
  add(query_606517, "Action", newJString(Action))
  add(query_606517, "Version", newJString(Version))
  result = call_606516.call(nil, query_606517, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_606501(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_606502, base: "/",
    url: url_GetListServiceSpecificCredentials_606503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_606554 = ref object of OpenApiRestCall_602433
proc url_PostListSigningCertificates_606556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSigningCertificates_606555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606557 = query.getOrDefault("Action")
  valid_606557 = validateParameter(valid_606557, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_606557 != nil:
    section.add "Action", valid_606557
  var valid_606558 = query.getOrDefault("Version")
  valid_606558 = validateParameter(valid_606558, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606558 != nil:
    section.add "Version", valid_606558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606559 = header.getOrDefault("X-Amz-Date")
  valid_606559 = validateParameter(valid_606559, JString, required = false,
                                 default = nil)
  if valid_606559 != nil:
    section.add "X-Amz-Date", valid_606559
  var valid_606560 = header.getOrDefault("X-Amz-Security-Token")
  valid_606560 = validateParameter(valid_606560, JString, required = false,
                                 default = nil)
  if valid_606560 != nil:
    section.add "X-Amz-Security-Token", valid_606560
  var valid_606561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606561 = validateParameter(valid_606561, JString, required = false,
                                 default = nil)
  if valid_606561 != nil:
    section.add "X-Amz-Content-Sha256", valid_606561
  var valid_606562 = header.getOrDefault("X-Amz-Algorithm")
  valid_606562 = validateParameter(valid_606562, JString, required = false,
                                 default = nil)
  if valid_606562 != nil:
    section.add "X-Amz-Algorithm", valid_606562
  var valid_606563 = header.getOrDefault("X-Amz-Signature")
  valid_606563 = validateParameter(valid_606563, JString, required = false,
                                 default = nil)
  if valid_606563 != nil:
    section.add "X-Amz-Signature", valid_606563
  var valid_606564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606564 = validateParameter(valid_606564, JString, required = false,
                                 default = nil)
  if valid_606564 != nil:
    section.add "X-Amz-SignedHeaders", valid_606564
  var valid_606565 = header.getOrDefault("X-Amz-Credential")
  valid_606565 = validateParameter(valid_606565, JString, required = false,
                                 default = nil)
  if valid_606565 != nil:
    section.add "X-Amz-Credential", valid_606565
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606566 = formData.getOrDefault("UserName")
  valid_606566 = validateParameter(valid_606566, JString, required = false,
                                 default = nil)
  if valid_606566 != nil:
    section.add "UserName", valid_606566
  var valid_606567 = formData.getOrDefault("Marker")
  valid_606567 = validateParameter(valid_606567, JString, required = false,
                                 default = nil)
  if valid_606567 != nil:
    section.add "Marker", valid_606567
  var valid_606568 = formData.getOrDefault("MaxItems")
  valid_606568 = validateParameter(valid_606568, JInt, required = false, default = nil)
  if valid_606568 != nil:
    section.add "MaxItems", valid_606568
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606569: Call_PostListSigningCertificates_606554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_606569.validator(path, query, header, formData, body)
  let scheme = call_606569.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606569.url(scheme.get, call_606569.host, call_606569.base,
                         call_606569.route, valid.getOrDefault("path"))
  result = hook(call_606569, url, valid)

proc call*(call_606570: Call_PostListSigningCertificates_606554;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606571 = newJObject()
  var formData_606572 = newJObject()
  add(formData_606572, "UserName", newJString(UserName))
  add(formData_606572, "Marker", newJString(Marker))
  add(query_606571, "Action", newJString(Action))
  add(formData_606572, "MaxItems", newJInt(MaxItems))
  add(query_606571, "Version", newJString(Version))
  result = call_606570.call(nil, query_606571, nil, formData_606572, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_606554(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_606555, base: "/",
    url: url_PostListSigningCertificates_606556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_606536 = ref object of OpenApiRestCall_602433
proc url_GetListSigningCertificates_606538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSigningCertificates_606537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606539 = query.getOrDefault("UserName")
  valid_606539 = validateParameter(valid_606539, JString, required = false,
                                 default = nil)
  if valid_606539 != nil:
    section.add "UserName", valid_606539
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606540 = query.getOrDefault("Action")
  valid_606540 = validateParameter(valid_606540, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_606540 != nil:
    section.add "Action", valid_606540
  var valid_606541 = query.getOrDefault("Marker")
  valid_606541 = validateParameter(valid_606541, JString, required = false,
                                 default = nil)
  if valid_606541 != nil:
    section.add "Marker", valid_606541
  var valid_606542 = query.getOrDefault("MaxItems")
  valid_606542 = validateParameter(valid_606542, JInt, required = false, default = nil)
  if valid_606542 != nil:
    section.add "MaxItems", valid_606542
  var valid_606543 = query.getOrDefault("Version")
  valid_606543 = validateParameter(valid_606543, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606543 != nil:
    section.add "Version", valid_606543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606544 = header.getOrDefault("X-Amz-Date")
  valid_606544 = validateParameter(valid_606544, JString, required = false,
                                 default = nil)
  if valid_606544 != nil:
    section.add "X-Amz-Date", valid_606544
  var valid_606545 = header.getOrDefault("X-Amz-Security-Token")
  valid_606545 = validateParameter(valid_606545, JString, required = false,
                                 default = nil)
  if valid_606545 != nil:
    section.add "X-Amz-Security-Token", valid_606545
  var valid_606546 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606546 = validateParameter(valid_606546, JString, required = false,
                                 default = nil)
  if valid_606546 != nil:
    section.add "X-Amz-Content-Sha256", valid_606546
  var valid_606547 = header.getOrDefault("X-Amz-Algorithm")
  valid_606547 = validateParameter(valid_606547, JString, required = false,
                                 default = nil)
  if valid_606547 != nil:
    section.add "X-Amz-Algorithm", valid_606547
  var valid_606548 = header.getOrDefault("X-Amz-Signature")
  valid_606548 = validateParameter(valid_606548, JString, required = false,
                                 default = nil)
  if valid_606548 != nil:
    section.add "X-Amz-Signature", valid_606548
  var valid_606549 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606549 = validateParameter(valid_606549, JString, required = false,
                                 default = nil)
  if valid_606549 != nil:
    section.add "X-Amz-SignedHeaders", valid_606549
  var valid_606550 = header.getOrDefault("X-Amz-Credential")
  valid_606550 = validateParameter(valid_606550, JString, required = false,
                                 default = nil)
  if valid_606550 != nil:
    section.add "X-Amz-Credential", valid_606550
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606551: Call_GetListSigningCertificates_606536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_606551.validator(path, query, header, formData, body)
  let scheme = call_606551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606551.url(scheme.get, call_606551.host, call_606551.base,
                         call_606551.route, valid.getOrDefault("path"))
  result = hook(call_606551, url, valid)

proc call*(call_606552: Call_GetListSigningCertificates_606536;
          UserName: string = ""; Action: string = "ListSigningCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606553 = newJObject()
  add(query_606553, "UserName", newJString(UserName))
  add(query_606553, "Action", newJString(Action))
  add(query_606553, "Marker", newJString(Marker))
  add(query_606553, "MaxItems", newJInt(MaxItems))
  add(query_606553, "Version", newJString(Version))
  result = call_606552.call(nil, query_606553, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_606536(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_606537, base: "/",
    url: url_GetListSigningCertificates_606538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_606591 = ref object of OpenApiRestCall_602433
proc url_PostListUserPolicies_606593(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserPolicies_606592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606594 = query.getOrDefault("Action")
  valid_606594 = validateParameter(valid_606594, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_606594 != nil:
    section.add "Action", valid_606594
  var valid_606595 = query.getOrDefault("Version")
  valid_606595 = validateParameter(valid_606595, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606595 != nil:
    section.add "Version", valid_606595
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606596 = header.getOrDefault("X-Amz-Date")
  valid_606596 = validateParameter(valid_606596, JString, required = false,
                                 default = nil)
  if valid_606596 != nil:
    section.add "X-Amz-Date", valid_606596
  var valid_606597 = header.getOrDefault("X-Amz-Security-Token")
  valid_606597 = validateParameter(valid_606597, JString, required = false,
                                 default = nil)
  if valid_606597 != nil:
    section.add "X-Amz-Security-Token", valid_606597
  var valid_606598 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606598 = validateParameter(valid_606598, JString, required = false,
                                 default = nil)
  if valid_606598 != nil:
    section.add "X-Amz-Content-Sha256", valid_606598
  var valid_606599 = header.getOrDefault("X-Amz-Algorithm")
  valid_606599 = validateParameter(valid_606599, JString, required = false,
                                 default = nil)
  if valid_606599 != nil:
    section.add "X-Amz-Algorithm", valid_606599
  var valid_606600 = header.getOrDefault("X-Amz-Signature")
  valid_606600 = validateParameter(valid_606600, JString, required = false,
                                 default = nil)
  if valid_606600 != nil:
    section.add "X-Amz-Signature", valid_606600
  var valid_606601 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606601 = validateParameter(valid_606601, JString, required = false,
                                 default = nil)
  if valid_606601 != nil:
    section.add "X-Amz-SignedHeaders", valid_606601
  var valid_606602 = header.getOrDefault("X-Amz-Credential")
  valid_606602 = validateParameter(valid_606602, JString, required = false,
                                 default = nil)
  if valid_606602 != nil:
    section.add "X-Amz-Credential", valid_606602
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_606603 = formData.getOrDefault("UserName")
  valid_606603 = validateParameter(valid_606603, JString, required = true,
                                 default = nil)
  if valid_606603 != nil:
    section.add "UserName", valid_606603
  var valid_606604 = formData.getOrDefault("Marker")
  valid_606604 = validateParameter(valid_606604, JString, required = false,
                                 default = nil)
  if valid_606604 != nil:
    section.add "Marker", valid_606604
  var valid_606605 = formData.getOrDefault("MaxItems")
  valid_606605 = validateParameter(valid_606605, JInt, required = false, default = nil)
  if valid_606605 != nil:
    section.add "MaxItems", valid_606605
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606606: Call_PostListUserPolicies_606591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_606606.validator(path, query, header, formData, body)
  let scheme = call_606606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606606.url(scheme.get, call_606606.host, call_606606.base,
                         call_606606.route, valid.getOrDefault("path"))
  result = hook(call_606606, url, valid)

proc call*(call_606607: Call_PostListUserPolicies_606591; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606608 = newJObject()
  var formData_606609 = newJObject()
  add(formData_606609, "UserName", newJString(UserName))
  add(formData_606609, "Marker", newJString(Marker))
  add(query_606608, "Action", newJString(Action))
  add(formData_606609, "MaxItems", newJInt(MaxItems))
  add(query_606608, "Version", newJString(Version))
  result = call_606607.call(nil, query_606608, nil, formData_606609, nil)

var postListUserPolicies* = Call_PostListUserPolicies_606591(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_606592, base: "/",
    url: url_PostListUserPolicies_606593, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_606573 = ref object of OpenApiRestCall_602433
proc url_GetListUserPolicies_606575(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserPolicies_606574(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606576 = query.getOrDefault("UserName")
  valid_606576 = validateParameter(valid_606576, JString, required = true,
                                 default = nil)
  if valid_606576 != nil:
    section.add "UserName", valid_606576
  var valid_606577 = query.getOrDefault("Action")
  valid_606577 = validateParameter(valid_606577, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_606577 != nil:
    section.add "Action", valid_606577
  var valid_606578 = query.getOrDefault("Marker")
  valid_606578 = validateParameter(valid_606578, JString, required = false,
                                 default = nil)
  if valid_606578 != nil:
    section.add "Marker", valid_606578
  var valid_606579 = query.getOrDefault("MaxItems")
  valid_606579 = validateParameter(valid_606579, JInt, required = false, default = nil)
  if valid_606579 != nil:
    section.add "MaxItems", valid_606579
  var valid_606580 = query.getOrDefault("Version")
  valid_606580 = validateParameter(valid_606580, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606580 != nil:
    section.add "Version", valid_606580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606581 = header.getOrDefault("X-Amz-Date")
  valid_606581 = validateParameter(valid_606581, JString, required = false,
                                 default = nil)
  if valid_606581 != nil:
    section.add "X-Amz-Date", valid_606581
  var valid_606582 = header.getOrDefault("X-Amz-Security-Token")
  valid_606582 = validateParameter(valid_606582, JString, required = false,
                                 default = nil)
  if valid_606582 != nil:
    section.add "X-Amz-Security-Token", valid_606582
  var valid_606583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606583 = validateParameter(valid_606583, JString, required = false,
                                 default = nil)
  if valid_606583 != nil:
    section.add "X-Amz-Content-Sha256", valid_606583
  var valid_606584 = header.getOrDefault("X-Amz-Algorithm")
  valid_606584 = validateParameter(valid_606584, JString, required = false,
                                 default = nil)
  if valid_606584 != nil:
    section.add "X-Amz-Algorithm", valid_606584
  var valid_606585 = header.getOrDefault("X-Amz-Signature")
  valid_606585 = validateParameter(valid_606585, JString, required = false,
                                 default = nil)
  if valid_606585 != nil:
    section.add "X-Amz-Signature", valid_606585
  var valid_606586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606586 = validateParameter(valid_606586, JString, required = false,
                                 default = nil)
  if valid_606586 != nil:
    section.add "X-Amz-SignedHeaders", valid_606586
  var valid_606587 = header.getOrDefault("X-Amz-Credential")
  valid_606587 = validateParameter(valid_606587, JString, required = false,
                                 default = nil)
  if valid_606587 != nil:
    section.add "X-Amz-Credential", valid_606587
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606588: Call_GetListUserPolicies_606573; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_606588.validator(path, query, header, formData, body)
  let scheme = call_606588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606588.url(scheme.get, call_606588.host, call_606588.base,
                         call_606588.route, valid.getOrDefault("path"))
  result = hook(call_606588, url, valid)

proc call*(call_606589: Call_GetListUserPolicies_606573; UserName: string;
          Action: string = "ListUserPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606590 = newJObject()
  add(query_606590, "UserName", newJString(UserName))
  add(query_606590, "Action", newJString(Action))
  add(query_606590, "Marker", newJString(Marker))
  add(query_606590, "MaxItems", newJInt(MaxItems))
  add(query_606590, "Version", newJString(Version))
  result = call_606589.call(nil, query_606590, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_606573(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_606574, base: "/",
    url: url_GetListUserPolicies_606575, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_606628 = ref object of OpenApiRestCall_602433
proc url_PostListUserTags_606630(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserTags_606629(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606631 = query.getOrDefault("Action")
  valid_606631 = validateParameter(valid_606631, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_606631 != nil:
    section.add "Action", valid_606631
  var valid_606632 = query.getOrDefault("Version")
  valid_606632 = validateParameter(valid_606632, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606632 != nil:
    section.add "Version", valid_606632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606633 = header.getOrDefault("X-Amz-Date")
  valid_606633 = validateParameter(valid_606633, JString, required = false,
                                 default = nil)
  if valid_606633 != nil:
    section.add "X-Amz-Date", valid_606633
  var valid_606634 = header.getOrDefault("X-Amz-Security-Token")
  valid_606634 = validateParameter(valid_606634, JString, required = false,
                                 default = nil)
  if valid_606634 != nil:
    section.add "X-Amz-Security-Token", valid_606634
  var valid_606635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606635 = validateParameter(valid_606635, JString, required = false,
                                 default = nil)
  if valid_606635 != nil:
    section.add "X-Amz-Content-Sha256", valid_606635
  var valid_606636 = header.getOrDefault("X-Amz-Algorithm")
  valid_606636 = validateParameter(valid_606636, JString, required = false,
                                 default = nil)
  if valid_606636 != nil:
    section.add "X-Amz-Algorithm", valid_606636
  var valid_606637 = header.getOrDefault("X-Amz-Signature")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "X-Amz-Signature", valid_606637
  var valid_606638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "X-Amz-SignedHeaders", valid_606638
  var valid_606639 = header.getOrDefault("X-Amz-Credential")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "X-Amz-Credential", valid_606639
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_606640 = formData.getOrDefault("UserName")
  valid_606640 = validateParameter(valid_606640, JString, required = true,
                                 default = nil)
  if valid_606640 != nil:
    section.add "UserName", valid_606640
  var valid_606641 = formData.getOrDefault("Marker")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "Marker", valid_606641
  var valid_606642 = formData.getOrDefault("MaxItems")
  valid_606642 = validateParameter(valid_606642, JInt, required = false, default = nil)
  if valid_606642 != nil:
    section.add "MaxItems", valid_606642
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606643: Call_PostListUserTags_606628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606643.validator(path, query, header, formData, body)
  let scheme = call_606643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606643.url(scheme.get, call_606643.host, call_606643.base,
                         call_606643.route, valid.getOrDefault("path"))
  result = hook(call_606643, url, valid)

proc call*(call_606644: Call_PostListUserTags_606628; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606645 = newJObject()
  var formData_606646 = newJObject()
  add(formData_606646, "UserName", newJString(UserName))
  add(formData_606646, "Marker", newJString(Marker))
  add(query_606645, "Action", newJString(Action))
  add(formData_606646, "MaxItems", newJInt(MaxItems))
  add(query_606645, "Version", newJString(Version))
  result = call_606644.call(nil, query_606645, nil, formData_606646, nil)

var postListUserTags* = Call_PostListUserTags_606628(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_606629,
    base: "/", url: url_PostListUserTags_606630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_606610 = ref object of OpenApiRestCall_602433
proc url_GetListUserTags_606612(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserTags_606611(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606613 = query.getOrDefault("UserName")
  valid_606613 = validateParameter(valid_606613, JString, required = true,
                                 default = nil)
  if valid_606613 != nil:
    section.add "UserName", valid_606613
  var valid_606614 = query.getOrDefault("Action")
  valid_606614 = validateParameter(valid_606614, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_606614 != nil:
    section.add "Action", valid_606614
  var valid_606615 = query.getOrDefault("Marker")
  valid_606615 = validateParameter(valid_606615, JString, required = false,
                                 default = nil)
  if valid_606615 != nil:
    section.add "Marker", valid_606615
  var valid_606616 = query.getOrDefault("MaxItems")
  valid_606616 = validateParameter(valid_606616, JInt, required = false, default = nil)
  if valid_606616 != nil:
    section.add "MaxItems", valid_606616
  var valid_606617 = query.getOrDefault("Version")
  valid_606617 = validateParameter(valid_606617, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606617 != nil:
    section.add "Version", valid_606617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606618 = header.getOrDefault("X-Amz-Date")
  valid_606618 = validateParameter(valid_606618, JString, required = false,
                                 default = nil)
  if valid_606618 != nil:
    section.add "X-Amz-Date", valid_606618
  var valid_606619 = header.getOrDefault("X-Amz-Security-Token")
  valid_606619 = validateParameter(valid_606619, JString, required = false,
                                 default = nil)
  if valid_606619 != nil:
    section.add "X-Amz-Security-Token", valid_606619
  var valid_606620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606620 = validateParameter(valid_606620, JString, required = false,
                                 default = nil)
  if valid_606620 != nil:
    section.add "X-Amz-Content-Sha256", valid_606620
  var valid_606621 = header.getOrDefault("X-Amz-Algorithm")
  valid_606621 = validateParameter(valid_606621, JString, required = false,
                                 default = nil)
  if valid_606621 != nil:
    section.add "X-Amz-Algorithm", valid_606621
  var valid_606622 = header.getOrDefault("X-Amz-Signature")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "X-Amz-Signature", valid_606622
  var valid_606623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "X-Amz-SignedHeaders", valid_606623
  var valid_606624 = header.getOrDefault("X-Amz-Credential")
  valid_606624 = validateParameter(valid_606624, JString, required = false,
                                 default = nil)
  if valid_606624 != nil:
    section.add "X-Amz-Credential", valid_606624
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606625: Call_GetListUserTags_606610; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_606625.validator(path, query, header, formData, body)
  let scheme = call_606625.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606625.url(scheme.get, call_606625.host, call_606625.base,
                         call_606625.route, valid.getOrDefault("path"))
  result = hook(call_606625, url, valid)

proc call*(call_606626: Call_GetListUserTags_606610; UserName: string;
          Action: string = "ListUserTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606627 = newJObject()
  add(query_606627, "UserName", newJString(UserName))
  add(query_606627, "Action", newJString(Action))
  add(query_606627, "Marker", newJString(Marker))
  add(query_606627, "MaxItems", newJInt(MaxItems))
  add(query_606627, "Version", newJString(Version))
  result = call_606626.call(nil, query_606627, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_606610(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_606611,
    base: "/", url: url_GetListUserTags_606612, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_606665 = ref object of OpenApiRestCall_602433
proc url_PostListUsers_606667(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUsers_606666(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606668 = query.getOrDefault("Action")
  valid_606668 = validateParameter(valid_606668, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_606668 != nil:
    section.add "Action", valid_606668
  var valid_606669 = query.getOrDefault("Version")
  valid_606669 = validateParameter(valid_606669, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606669 != nil:
    section.add "Version", valid_606669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606670 = header.getOrDefault("X-Amz-Date")
  valid_606670 = validateParameter(valid_606670, JString, required = false,
                                 default = nil)
  if valid_606670 != nil:
    section.add "X-Amz-Date", valid_606670
  var valid_606671 = header.getOrDefault("X-Amz-Security-Token")
  valid_606671 = validateParameter(valid_606671, JString, required = false,
                                 default = nil)
  if valid_606671 != nil:
    section.add "X-Amz-Security-Token", valid_606671
  var valid_606672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606672 = validateParameter(valid_606672, JString, required = false,
                                 default = nil)
  if valid_606672 != nil:
    section.add "X-Amz-Content-Sha256", valid_606672
  var valid_606673 = header.getOrDefault("X-Amz-Algorithm")
  valid_606673 = validateParameter(valid_606673, JString, required = false,
                                 default = nil)
  if valid_606673 != nil:
    section.add "X-Amz-Algorithm", valid_606673
  var valid_606674 = header.getOrDefault("X-Amz-Signature")
  valid_606674 = validateParameter(valid_606674, JString, required = false,
                                 default = nil)
  if valid_606674 != nil:
    section.add "X-Amz-Signature", valid_606674
  var valid_606675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606675 = validateParameter(valid_606675, JString, required = false,
                                 default = nil)
  if valid_606675 != nil:
    section.add "X-Amz-SignedHeaders", valid_606675
  var valid_606676 = header.getOrDefault("X-Amz-Credential")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "X-Amz-Credential", valid_606676
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606677 = formData.getOrDefault("PathPrefix")
  valid_606677 = validateParameter(valid_606677, JString, required = false,
                                 default = nil)
  if valid_606677 != nil:
    section.add "PathPrefix", valid_606677
  var valid_606678 = formData.getOrDefault("Marker")
  valid_606678 = validateParameter(valid_606678, JString, required = false,
                                 default = nil)
  if valid_606678 != nil:
    section.add "Marker", valid_606678
  var valid_606679 = formData.getOrDefault("MaxItems")
  valid_606679 = validateParameter(valid_606679, JInt, required = false, default = nil)
  if valid_606679 != nil:
    section.add "MaxItems", valid_606679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606680: Call_PostListUsers_606665; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606680.validator(path, query, header, formData, body)
  let scheme = call_606680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606680.url(scheme.get, call_606680.host, call_606680.base,
                         call_606680.route, valid.getOrDefault("path"))
  result = hook(call_606680, url, valid)

proc call*(call_606681: Call_PostListUsers_606665; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListUsers"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606682 = newJObject()
  var formData_606683 = newJObject()
  add(formData_606683, "PathPrefix", newJString(PathPrefix))
  add(formData_606683, "Marker", newJString(Marker))
  add(query_606682, "Action", newJString(Action))
  add(formData_606683, "MaxItems", newJInt(MaxItems))
  add(query_606682, "Version", newJString(Version))
  result = call_606681.call(nil, query_606682, nil, formData_606683, nil)

var postListUsers* = Call_PostListUsers_606665(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_606666,
    base: "/", url: url_PostListUsers_606667, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_606647 = ref object of OpenApiRestCall_602433
proc url_GetListUsers_606649(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUsers_606648(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606650 = query.getOrDefault("PathPrefix")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "PathPrefix", valid_606650
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606651 = query.getOrDefault("Action")
  valid_606651 = validateParameter(valid_606651, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_606651 != nil:
    section.add "Action", valid_606651
  var valid_606652 = query.getOrDefault("Marker")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "Marker", valid_606652
  var valid_606653 = query.getOrDefault("MaxItems")
  valid_606653 = validateParameter(valid_606653, JInt, required = false, default = nil)
  if valid_606653 != nil:
    section.add "MaxItems", valid_606653
  var valid_606654 = query.getOrDefault("Version")
  valid_606654 = validateParameter(valid_606654, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606654 != nil:
    section.add "Version", valid_606654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606655 = header.getOrDefault("X-Amz-Date")
  valid_606655 = validateParameter(valid_606655, JString, required = false,
                                 default = nil)
  if valid_606655 != nil:
    section.add "X-Amz-Date", valid_606655
  var valid_606656 = header.getOrDefault("X-Amz-Security-Token")
  valid_606656 = validateParameter(valid_606656, JString, required = false,
                                 default = nil)
  if valid_606656 != nil:
    section.add "X-Amz-Security-Token", valid_606656
  var valid_606657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606657 = validateParameter(valid_606657, JString, required = false,
                                 default = nil)
  if valid_606657 != nil:
    section.add "X-Amz-Content-Sha256", valid_606657
  var valid_606658 = header.getOrDefault("X-Amz-Algorithm")
  valid_606658 = validateParameter(valid_606658, JString, required = false,
                                 default = nil)
  if valid_606658 != nil:
    section.add "X-Amz-Algorithm", valid_606658
  var valid_606659 = header.getOrDefault("X-Amz-Signature")
  valid_606659 = validateParameter(valid_606659, JString, required = false,
                                 default = nil)
  if valid_606659 != nil:
    section.add "X-Amz-Signature", valid_606659
  var valid_606660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606660 = validateParameter(valid_606660, JString, required = false,
                                 default = nil)
  if valid_606660 != nil:
    section.add "X-Amz-SignedHeaders", valid_606660
  var valid_606661 = header.getOrDefault("X-Amz-Credential")
  valid_606661 = validateParameter(valid_606661, JString, required = false,
                                 default = nil)
  if valid_606661 != nil:
    section.add "X-Amz-Credential", valid_606661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606662: Call_GetListUsers_606647; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606662.validator(path, query, header, formData, body)
  let scheme = call_606662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606662.url(scheme.get, call_606662.host, call_606662.base,
                         call_606662.route, valid.getOrDefault("path"))
  result = hook(call_606662, url, valid)

proc call*(call_606663: Call_GetListUsers_606647; PathPrefix: string = "";
          Action: string = "ListUsers"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606664 = newJObject()
  add(query_606664, "PathPrefix", newJString(PathPrefix))
  add(query_606664, "Action", newJString(Action))
  add(query_606664, "Marker", newJString(Marker))
  add(query_606664, "MaxItems", newJInt(MaxItems))
  add(query_606664, "Version", newJString(Version))
  result = call_606663.call(nil, query_606664, nil, nil, nil)

var getListUsers* = Call_GetListUsers_606647(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_606648, base: "/",
    url: url_GetListUsers_606649, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_606702 = ref object of OpenApiRestCall_602433
proc url_PostListVirtualMFADevices_606704(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVirtualMFADevices_606703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606705 = query.getOrDefault("Action")
  valid_606705 = validateParameter(valid_606705, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_606705 != nil:
    section.add "Action", valid_606705
  var valid_606706 = query.getOrDefault("Version")
  valid_606706 = validateParameter(valid_606706, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606706 != nil:
    section.add "Version", valid_606706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606707 = header.getOrDefault("X-Amz-Date")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "X-Amz-Date", valid_606707
  var valid_606708 = header.getOrDefault("X-Amz-Security-Token")
  valid_606708 = validateParameter(valid_606708, JString, required = false,
                                 default = nil)
  if valid_606708 != nil:
    section.add "X-Amz-Security-Token", valid_606708
  var valid_606709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606709 = validateParameter(valid_606709, JString, required = false,
                                 default = nil)
  if valid_606709 != nil:
    section.add "X-Amz-Content-Sha256", valid_606709
  var valid_606710 = header.getOrDefault("X-Amz-Algorithm")
  valid_606710 = validateParameter(valid_606710, JString, required = false,
                                 default = nil)
  if valid_606710 != nil:
    section.add "X-Amz-Algorithm", valid_606710
  var valid_606711 = header.getOrDefault("X-Amz-Signature")
  valid_606711 = validateParameter(valid_606711, JString, required = false,
                                 default = nil)
  if valid_606711 != nil:
    section.add "X-Amz-Signature", valid_606711
  var valid_606712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606712 = validateParameter(valid_606712, JString, required = false,
                                 default = nil)
  if valid_606712 != nil:
    section.add "X-Amz-SignedHeaders", valid_606712
  var valid_606713 = header.getOrDefault("X-Amz-Credential")
  valid_606713 = validateParameter(valid_606713, JString, required = false,
                                 default = nil)
  if valid_606713 != nil:
    section.add "X-Amz-Credential", valid_606713
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_606714 = formData.getOrDefault("Marker")
  valid_606714 = validateParameter(valid_606714, JString, required = false,
                                 default = nil)
  if valid_606714 != nil:
    section.add "Marker", valid_606714
  var valid_606715 = formData.getOrDefault("AssignmentStatus")
  valid_606715 = validateParameter(valid_606715, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_606715 != nil:
    section.add "AssignmentStatus", valid_606715
  var valid_606716 = formData.getOrDefault("MaxItems")
  valid_606716 = validateParameter(valid_606716, JInt, required = false, default = nil)
  if valid_606716 != nil:
    section.add "MaxItems", valid_606716
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606717: Call_PostListVirtualMFADevices_606702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606717.validator(path, query, header, formData, body)
  let scheme = call_606717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606717.url(scheme.get, call_606717.host, call_606717.base,
                         call_606717.route, valid.getOrDefault("path"))
  result = hook(call_606717, url, valid)

proc call*(call_606718: Call_PostListVirtualMFADevices_606702; Marker: string = "";
          Action: string = "ListVirtualMFADevices";
          AssignmentStatus: string = "Assigned"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_606719 = newJObject()
  var formData_606720 = newJObject()
  add(formData_606720, "Marker", newJString(Marker))
  add(query_606719, "Action", newJString(Action))
  add(formData_606720, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_606720, "MaxItems", newJInt(MaxItems))
  add(query_606719, "Version", newJString(Version))
  result = call_606718.call(nil, query_606719, nil, formData_606720, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_606702(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_606703, base: "/",
    url: url_PostListVirtualMFADevices_606704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_606684 = ref object of OpenApiRestCall_602433
proc url_GetListVirtualMFADevices_606686(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVirtualMFADevices_606685(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606687 = query.getOrDefault("Action")
  valid_606687 = validateParameter(valid_606687, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_606687 != nil:
    section.add "Action", valid_606687
  var valid_606688 = query.getOrDefault("Marker")
  valid_606688 = validateParameter(valid_606688, JString, required = false,
                                 default = nil)
  if valid_606688 != nil:
    section.add "Marker", valid_606688
  var valid_606689 = query.getOrDefault("MaxItems")
  valid_606689 = validateParameter(valid_606689, JInt, required = false, default = nil)
  if valid_606689 != nil:
    section.add "MaxItems", valid_606689
  var valid_606690 = query.getOrDefault("Version")
  valid_606690 = validateParameter(valid_606690, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606690 != nil:
    section.add "Version", valid_606690
  var valid_606691 = query.getOrDefault("AssignmentStatus")
  valid_606691 = validateParameter(valid_606691, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_606691 != nil:
    section.add "AssignmentStatus", valid_606691
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606692 = header.getOrDefault("X-Amz-Date")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "X-Amz-Date", valid_606692
  var valid_606693 = header.getOrDefault("X-Amz-Security-Token")
  valid_606693 = validateParameter(valid_606693, JString, required = false,
                                 default = nil)
  if valid_606693 != nil:
    section.add "X-Amz-Security-Token", valid_606693
  var valid_606694 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606694 = validateParameter(valid_606694, JString, required = false,
                                 default = nil)
  if valid_606694 != nil:
    section.add "X-Amz-Content-Sha256", valid_606694
  var valid_606695 = header.getOrDefault("X-Amz-Algorithm")
  valid_606695 = validateParameter(valid_606695, JString, required = false,
                                 default = nil)
  if valid_606695 != nil:
    section.add "X-Amz-Algorithm", valid_606695
  var valid_606696 = header.getOrDefault("X-Amz-Signature")
  valid_606696 = validateParameter(valid_606696, JString, required = false,
                                 default = nil)
  if valid_606696 != nil:
    section.add "X-Amz-Signature", valid_606696
  var valid_606697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606697 = validateParameter(valid_606697, JString, required = false,
                                 default = nil)
  if valid_606697 != nil:
    section.add "X-Amz-SignedHeaders", valid_606697
  var valid_606698 = header.getOrDefault("X-Amz-Credential")
  valid_606698 = validateParameter(valid_606698, JString, required = false,
                                 default = nil)
  if valid_606698 != nil:
    section.add "X-Amz-Credential", valid_606698
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606699: Call_GetListVirtualMFADevices_606684; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_606699.validator(path, query, header, formData, body)
  let scheme = call_606699.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606699.url(scheme.get, call_606699.host, call_606699.base,
                         call_606699.route, valid.getOrDefault("path"))
  result = hook(call_606699, url, valid)

proc call*(call_606700: Call_GetListVirtualMFADevices_606684;
          Action: string = "ListVirtualMFADevices"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08";
          AssignmentStatus: string = "Assigned"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  var query_606701 = newJObject()
  add(query_606701, "Action", newJString(Action))
  add(query_606701, "Marker", newJString(Marker))
  add(query_606701, "MaxItems", newJInt(MaxItems))
  add(query_606701, "Version", newJString(Version))
  add(query_606701, "AssignmentStatus", newJString(AssignmentStatus))
  result = call_606700.call(nil, query_606701, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_606684(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_606685, base: "/",
    url: url_GetListVirtualMFADevices_606686, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_606739 = ref object of OpenApiRestCall_602433
proc url_PostPutGroupPolicy_606741(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutGroupPolicy_606740(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606742 = query.getOrDefault("Action")
  valid_606742 = validateParameter(valid_606742, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_606742 != nil:
    section.add "Action", valid_606742
  var valid_606743 = query.getOrDefault("Version")
  valid_606743 = validateParameter(valid_606743, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606743 != nil:
    section.add "Version", valid_606743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606744 = header.getOrDefault("X-Amz-Date")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Date", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-Security-Token")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-Security-Token", valid_606745
  var valid_606746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606746 = validateParameter(valid_606746, JString, required = false,
                                 default = nil)
  if valid_606746 != nil:
    section.add "X-Amz-Content-Sha256", valid_606746
  var valid_606747 = header.getOrDefault("X-Amz-Algorithm")
  valid_606747 = validateParameter(valid_606747, JString, required = false,
                                 default = nil)
  if valid_606747 != nil:
    section.add "X-Amz-Algorithm", valid_606747
  var valid_606748 = header.getOrDefault("X-Amz-Signature")
  valid_606748 = validateParameter(valid_606748, JString, required = false,
                                 default = nil)
  if valid_606748 != nil:
    section.add "X-Amz-Signature", valid_606748
  var valid_606749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606749 = validateParameter(valid_606749, JString, required = false,
                                 default = nil)
  if valid_606749 != nil:
    section.add "X-Amz-SignedHeaders", valid_606749
  var valid_606750 = header.getOrDefault("X-Amz-Credential")
  valid_606750 = validateParameter(valid_606750, JString, required = false,
                                 default = nil)
  if valid_606750 != nil:
    section.add "X-Amz-Credential", valid_606750
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_606751 = formData.getOrDefault("PolicyName")
  valid_606751 = validateParameter(valid_606751, JString, required = true,
                                 default = nil)
  if valid_606751 != nil:
    section.add "PolicyName", valid_606751
  var valid_606752 = formData.getOrDefault("GroupName")
  valid_606752 = validateParameter(valid_606752, JString, required = true,
                                 default = nil)
  if valid_606752 != nil:
    section.add "GroupName", valid_606752
  var valid_606753 = formData.getOrDefault("PolicyDocument")
  valid_606753 = validateParameter(valid_606753, JString, required = true,
                                 default = nil)
  if valid_606753 != nil:
    section.add "PolicyDocument", valid_606753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606754: Call_PostPutGroupPolicy_606739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606754.validator(path, query, header, formData, body)
  let scheme = call_606754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606754.url(scheme.get, call_606754.host, call_606754.base,
                         call_606754.route, valid.getOrDefault("path"))
  result = hook(call_606754, url, valid)

proc call*(call_606755: Call_PostPutGroupPolicy_606739; PolicyName: string;
          GroupName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606756 = newJObject()
  var formData_606757 = newJObject()
  add(formData_606757, "PolicyName", newJString(PolicyName))
  add(formData_606757, "GroupName", newJString(GroupName))
  add(formData_606757, "PolicyDocument", newJString(PolicyDocument))
  add(query_606756, "Action", newJString(Action))
  add(query_606756, "Version", newJString(Version))
  result = call_606755.call(nil, query_606756, nil, formData_606757, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_606739(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_606740, base: "/",
    url: url_PostPutGroupPolicy_606741, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_606721 = ref object of OpenApiRestCall_602433
proc url_GetPutGroupPolicy_606723(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutGroupPolicy_606722(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606724 = query.getOrDefault("Action")
  valid_606724 = validateParameter(valid_606724, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_606724 != nil:
    section.add "Action", valid_606724
  var valid_606725 = query.getOrDefault("PolicyDocument")
  valid_606725 = validateParameter(valid_606725, JString, required = true,
                                 default = nil)
  if valid_606725 != nil:
    section.add "PolicyDocument", valid_606725
  var valid_606726 = query.getOrDefault("GroupName")
  valid_606726 = validateParameter(valid_606726, JString, required = true,
                                 default = nil)
  if valid_606726 != nil:
    section.add "GroupName", valid_606726
  var valid_606727 = query.getOrDefault("Version")
  valid_606727 = validateParameter(valid_606727, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606727 != nil:
    section.add "Version", valid_606727
  var valid_606728 = query.getOrDefault("PolicyName")
  valid_606728 = validateParameter(valid_606728, JString, required = true,
                                 default = nil)
  if valid_606728 != nil:
    section.add "PolicyName", valid_606728
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606729 = header.getOrDefault("X-Amz-Date")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Date", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-Security-Token")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-Security-Token", valid_606730
  var valid_606731 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606731 = validateParameter(valid_606731, JString, required = false,
                                 default = nil)
  if valid_606731 != nil:
    section.add "X-Amz-Content-Sha256", valid_606731
  var valid_606732 = header.getOrDefault("X-Amz-Algorithm")
  valid_606732 = validateParameter(valid_606732, JString, required = false,
                                 default = nil)
  if valid_606732 != nil:
    section.add "X-Amz-Algorithm", valid_606732
  var valid_606733 = header.getOrDefault("X-Amz-Signature")
  valid_606733 = validateParameter(valid_606733, JString, required = false,
                                 default = nil)
  if valid_606733 != nil:
    section.add "X-Amz-Signature", valid_606733
  var valid_606734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606734 = validateParameter(valid_606734, JString, required = false,
                                 default = nil)
  if valid_606734 != nil:
    section.add "X-Amz-SignedHeaders", valid_606734
  var valid_606735 = header.getOrDefault("X-Amz-Credential")
  valid_606735 = validateParameter(valid_606735, JString, required = false,
                                 default = nil)
  if valid_606735 != nil:
    section.add "X-Amz-Credential", valid_606735
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606736: Call_GetPutGroupPolicy_606721; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606736.validator(path, query, header, formData, body)
  let scheme = call_606736.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606736.url(scheme.get, call_606736.host, call_606736.base,
                         call_606736.route, valid.getOrDefault("path"))
  result = hook(call_606736, url, valid)

proc call*(call_606737: Call_GetPutGroupPolicy_606721; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_606738 = newJObject()
  add(query_606738, "Action", newJString(Action))
  add(query_606738, "PolicyDocument", newJString(PolicyDocument))
  add(query_606738, "GroupName", newJString(GroupName))
  add(query_606738, "Version", newJString(Version))
  add(query_606738, "PolicyName", newJString(PolicyName))
  result = call_606737.call(nil, query_606738, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_606721(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_606722,
    base: "/", url: url_GetPutGroupPolicy_606723,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_606775 = ref object of OpenApiRestCall_602433
proc url_PostPutRolePermissionsBoundary_606777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePermissionsBoundary_606776(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606778 = query.getOrDefault("Action")
  valid_606778 = validateParameter(valid_606778, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_606778 != nil:
    section.add "Action", valid_606778
  var valid_606779 = query.getOrDefault("Version")
  valid_606779 = validateParameter(valid_606779, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606779 != nil:
    section.add "Version", valid_606779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606780 = header.getOrDefault("X-Amz-Date")
  valid_606780 = validateParameter(valid_606780, JString, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "X-Amz-Date", valid_606780
  var valid_606781 = header.getOrDefault("X-Amz-Security-Token")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "X-Amz-Security-Token", valid_606781
  var valid_606782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "X-Amz-Content-Sha256", valid_606782
  var valid_606783 = header.getOrDefault("X-Amz-Algorithm")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "X-Amz-Algorithm", valid_606783
  var valid_606784 = header.getOrDefault("X-Amz-Signature")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-Signature", valid_606784
  var valid_606785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "X-Amz-SignedHeaders", valid_606785
  var valid_606786 = header.getOrDefault("X-Amz-Credential")
  valid_606786 = validateParameter(valid_606786, JString, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "X-Amz-Credential", valid_606786
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606787 = formData.getOrDefault("RoleName")
  valid_606787 = validateParameter(valid_606787, JString, required = true,
                                 default = nil)
  if valid_606787 != nil:
    section.add "RoleName", valid_606787
  var valid_606788 = formData.getOrDefault("PermissionsBoundary")
  valid_606788 = validateParameter(valid_606788, JString, required = true,
                                 default = nil)
  if valid_606788 != nil:
    section.add "PermissionsBoundary", valid_606788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606789: Call_PostPutRolePermissionsBoundary_606775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_606789.validator(path, query, header, formData, body)
  let scheme = call_606789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606789.url(scheme.get, call_606789.host, call_606789.base,
                         call_606789.route, valid.getOrDefault("path"))
  result = hook(call_606789, url, valid)

proc call*(call_606790: Call_PostPutRolePermissionsBoundary_606775;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606791 = newJObject()
  var formData_606792 = newJObject()
  add(formData_606792, "RoleName", newJString(RoleName))
  add(formData_606792, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606791, "Action", newJString(Action))
  add(query_606791, "Version", newJString(Version))
  result = call_606790.call(nil, query_606791, nil, formData_606792, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_606775(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_606776, base: "/",
    url: url_PostPutRolePermissionsBoundary_606777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_606758 = ref object of OpenApiRestCall_602433
proc url_GetPutRolePermissionsBoundary_606760(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePermissionsBoundary_606759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606761 = query.getOrDefault("Action")
  valid_606761 = validateParameter(valid_606761, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_606761 != nil:
    section.add "Action", valid_606761
  var valid_606762 = query.getOrDefault("PermissionsBoundary")
  valid_606762 = validateParameter(valid_606762, JString, required = true,
                                 default = nil)
  if valid_606762 != nil:
    section.add "PermissionsBoundary", valid_606762
  var valid_606763 = query.getOrDefault("RoleName")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = nil)
  if valid_606763 != nil:
    section.add "RoleName", valid_606763
  var valid_606764 = query.getOrDefault("Version")
  valid_606764 = validateParameter(valid_606764, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606764 != nil:
    section.add "Version", valid_606764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606765 = header.getOrDefault("X-Amz-Date")
  valid_606765 = validateParameter(valid_606765, JString, required = false,
                                 default = nil)
  if valid_606765 != nil:
    section.add "X-Amz-Date", valid_606765
  var valid_606766 = header.getOrDefault("X-Amz-Security-Token")
  valid_606766 = validateParameter(valid_606766, JString, required = false,
                                 default = nil)
  if valid_606766 != nil:
    section.add "X-Amz-Security-Token", valid_606766
  var valid_606767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Content-Sha256", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Algorithm")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Algorithm", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-Signature")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Signature", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-SignedHeaders", valid_606770
  var valid_606771 = header.getOrDefault("X-Amz-Credential")
  valid_606771 = validateParameter(valid_606771, JString, required = false,
                                 default = nil)
  if valid_606771 != nil:
    section.add "X-Amz-Credential", valid_606771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606772: Call_GetPutRolePermissionsBoundary_606758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_606772.validator(path, query, header, formData, body)
  let scheme = call_606772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606772.url(scheme.get, call_606772.host, call_606772.base,
                         call_606772.route, valid.getOrDefault("path"))
  result = hook(call_606772, url, valid)

proc call*(call_606773: Call_GetPutRolePermissionsBoundary_606758;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: string (required)
  var query_606774 = newJObject()
  add(query_606774, "Action", newJString(Action))
  add(query_606774, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606774, "RoleName", newJString(RoleName))
  add(query_606774, "Version", newJString(Version))
  result = call_606773.call(nil, query_606774, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_606758(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_606759, base: "/",
    url: url_GetPutRolePermissionsBoundary_606760,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_606811 = ref object of OpenApiRestCall_602433
proc url_PostPutRolePolicy_606813(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePolicy_606812(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606814 = query.getOrDefault("Action")
  valid_606814 = validateParameter(valid_606814, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_606814 != nil:
    section.add "Action", valid_606814
  var valid_606815 = query.getOrDefault("Version")
  valid_606815 = validateParameter(valid_606815, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606815 != nil:
    section.add "Version", valid_606815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606816 = header.getOrDefault("X-Amz-Date")
  valid_606816 = validateParameter(valid_606816, JString, required = false,
                                 default = nil)
  if valid_606816 != nil:
    section.add "X-Amz-Date", valid_606816
  var valid_606817 = header.getOrDefault("X-Amz-Security-Token")
  valid_606817 = validateParameter(valid_606817, JString, required = false,
                                 default = nil)
  if valid_606817 != nil:
    section.add "X-Amz-Security-Token", valid_606817
  var valid_606818 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606818 = validateParameter(valid_606818, JString, required = false,
                                 default = nil)
  if valid_606818 != nil:
    section.add "X-Amz-Content-Sha256", valid_606818
  var valid_606819 = header.getOrDefault("X-Amz-Algorithm")
  valid_606819 = validateParameter(valid_606819, JString, required = false,
                                 default = nil)
  if valid_606819 != nil:
    section.add "X-Amz-Algorithm", valid_606819
  var valid_606820 = header.getOrDefault("X-Amz-Signature")
  valid_606820 = validateParameter(valid_606820, JString, required = false,
                                 default = nil)
  if valid_606820 != nil:
    section.add "X-Amz-Signature", valid_606820
  var valid_606821 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "X-Amz-SignedHeaders", valid_606821
  var valid_606822 = header.getOrDefault("X-Amz-Credential")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-Credential", valid_606822
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_606823 = formData.getOrDefault("PolicyName")
  valid_606823 = validateParameter(valid_606823, JString, required = true,
                                 default = nil)
  if valid_606823 != nil:
    section.add "PolicyName", valid_606823
  var valid_606824 = formData.getOrDefault("RoleName")
  valid_606824 = validateParameter(valid_606824, JString, required = true,
                                 default = nil)
  if valid_606824 != nil:
    section.add "RoleName", valid_606824
  var valid_606825 = formData.getOrDefault("PolicyDocument")
  valid_606825 = validateParameter(valid_606825, JString, required = true,
                                 default = nil)
  if valid_606825 != nil:
    section.add "PolicyDocument", valid_606825
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606826: Call_PostPutRolePolicy_606811; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606826.validator(path, query, header, formData, body)
  let scheme = call_606826.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606826.url(scheme.get, call_606826.host, call_606826.base,
                         call_606826.route, valid.getOrDefault("path"))
  result = hook(call_606826, url, valid)

proc call*(call_606827: Call_PostPutRolePolicy_606811; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606828 = newJObject()
  var formData_606829 = newJObject()
  add(formData_606829, "PolicyName", newJString(PolicyName))
  add(formData_606829, "RoleName", newJString(RoleName))
  add(formData_606829, "PolicyDocument", newJString(PolicyDocument))
  add(query_606828, "Action", newJString(Action))
  add(query_606828, "Version", newJString(Version))
  result = call_606827.call(nil, query_606828, nil, formData_606829, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_606811(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_606812,
    base: "/", url: url_PostPutRolePolicy_606813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_606793 = ref object of OpenApiRestCall_602433
proc url_GetPutRolePolicy_606795(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePolicy_606794(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606796 = query.getOrDefault("Action")
  valid_606796 = validateParameter(valid_606796, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_606796 != nil:
    section.add "Action", valid_606796
  var valid_606797 = query.getOrDefault("PolicyDocument")
  valid_606797 = validateParameter(valid_606797, JString, required = true,
                                 default = nil)
  if valid_606797 != nil:
    section.add "PolicyDocument", valid_606797
  var valid_606798 = query.getOrDefault("RoleName")
  valid_606798 = validateParameter(valid_606798, JString, required = true,
                                 default = nil)
  if valid_606798 != nil:
    section.add "RoleName", valid_606798
  var valid_606799 = query.getOrDefault("Version")
  valid_606799 = validateParameter(valid_606799, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606799 != nil:
    section.add "Version", valid_606799
  var valid_606800 = query.getOrDefault("PolicyName")
  valid_606800 = validateParameter(valid_606800, JString, required = true,
                                 default = nil)
  if valid_606800 != nil:
    section.add "PolicyName", valid_606800
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606801 = header.getOrDefault("X-Amz-Date")
  valid_606801 = validateParameter(valid_606801, JString, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "X-Amz-Date", valid_606801
  var valid_606802 = header.getOrDefault("X-Amz-Security-Token")
  valid_606802 = validateParameter(valid_606802, JString, required = false,
                                 default = nil)
  if valid_606802 != nil:
    section.add "X-Amz-Security-Token", valid_606802
  var valid_606803 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606803 = validateParameter(valid_606803, JString, required = false,
                                 default = nil)
  if valid_606803 != nil:
    section.add "X-Amz-Content-Sha256", valid_606803
  var valid_606804 = header.getOrDefault("X-Amz-Algorithm")
  valid_606804 = validateParameter(valid_606804, JString, required = false,
                                 default = nil)
  if valid_606804 != nil:
    section.add "X-Amz-Algorithm", valid_606804
  var valid_606805 = header.getOrDefault("X-Amz-Signature")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "X-Amz-Signature", valid_606805
  var valid_606806 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "X-Amz-SignedHeaders", valid_606806
  var valid_606807 = header.getOrDefault("X-Amz-Credential")
  valid_606807 = validateParameter(valid_606807, JString, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "X-Amz-Credential", valid_606807
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606808: Call_GetPutRolePolicy_606793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606808.validator(path, query, header, formData, body)
  let scheme = call_606808.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606808.url(scheme.get, call_606808.host, call_606808.base,
                         call_606808.route, valid.getOrDefault("path"))
  result = hook(call_606808, url, valid)

proc call*(call_606809: Call_GetPutRolePolicy_606793; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_606810 = newJObject()
  add(query_606810, "Action", newJString(Action))
  add(query_606810, "PolicyDocument", newJString(PolicyDocument))
  add(query_606810, "RoleName", newJString(RoleName))
  add(query_606810, "Version", newJString(Version))
  add(query_606810, "PolicyName", newJString(PolicyName))
  result = call_606809.call(nil, query_606810, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_606793(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_606794,
    base: "/", url: url_GetPutRolePolicy_606795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_606847 = ref object of OpenApiRestCall_602433
proc url_PostPutUserPermissionsBoundary_606849(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPermissionsBoundary_606848(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606850 = query.getOrDefault("Action")
  valid_606850 = validateParameter(valid_606850, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_606850 != nil:
    section.add "Action", valid_606850
  var valid_606851 = query.getOrDefault("Version")
  valid_606851 = validateParameter(valid_606851, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606851 != nil:
    section.add "Version", valid_606851
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606852 = header.getOrDefault("X-Amz-Date")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-Date", valid_606852
  var valid_606853 = header.getOrDefault("X-Amz-Security-Token")
  valid_606853 = validateParameter(valid_606853, JString, required = false,
                                 default = nil)
  if valid_606853 != nil:
    section.add "X-Amz-Security-Token", valid_606853
  var valid_606854 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606854 = validateParameter(valid_606854, JString, required = false,
                                 default = nil)
  if valid_606854 != nil:
    section.add "X-Amz-Content-Sha256", valid_606854
  var valid_606855 = header.getOrDefault("X-Amz-Algorithm")
  valid_606855 = validateParameter(valid_606855, JString, required = false,
                                 default = nil)
  if valid_606855 != nil:
    section.add "X-Amz-Algorithm", valid_606855
  var valid_606856 = header.getOrDefault("X-Amz-Signature")
  valid_606856 = validateParameter(valid_606856, JString, required = false,
                                 default = nil)
  if valid_606856 != nil:
    section.add "X-Amz-Signature", valid_606856
  var valid_606857 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606857 = validateParameter(valid_606857, JString, required = false,
                                 default = nil)
  if valid_606857 != nil:
    section.add "X-Amz-SignedHeaders", valid_606857
  var valid_606858 = header.getOrDefault("X-Amz-Credential")
  valid_606858 = validateParameter(valid_606858, JString, required = false,
                                 default = nil)
  if valid_606858 != nil:
    section.add "X-Amz-Credential", valid_606858
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_606859 = formData.getOrDefault("UserName")
  valid_606859 = validateParameter(valid_606859, JString, required = true,
                                 default = nil)
  if valid_606859 != nil:
    section.add "UserName", valid_606859
  var valid_606860 = formData.getOrDefault("PermissionsBoundary")
  valid_606860 = validateParameter(valid_606860, JString, required = true,
                                 default = nil)
  if valid_606860 != nil:
    section.add "PermissionsBoundary", valid_606860
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606861: Call_PostPutUserPermissionsBoundary_606847; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_606861.validator(path, query, header, formData, body)
  let scheme = call_606861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606861.url(scheme.get, call_606861.host, call_606861.base,
                         call_606861.route, valid.getOrDefault("path"))
  result = hook(call_606861, url, valid)

proc call*(call_606862: Call_PostPutUserPermissionsBoundary_606847;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606863 = newJObject()
  var formData_606864 = newJObject()
  add(formData_606864, "UserName", newJString(UserName))
  add(formData_606864, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606863, "Action", newJString(Action))
  add(query_606863, "Version", newJString(Version))
  result = call_606862.call(nil, query_606863, nil, formData_606864, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_606847(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_606848, base: "/",
    url: url_PostPutUserPermissionsBoundary_606849,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_606830 = ref object of OpenApiRestCall_602433
proc url_GetPutUserPermissionsBoundary_606832(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPermissionsBoundary_606831(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606833 = query.getOrDefault("UserName")
  valid_606833 = validateParameter(valid_606833, JString, required = true,
                                 default = nil)
  if valid_606833 != nil:
    section.add "UserName", valid_606833
  var valid_606834 = query.getOrDefault("Action")
  valid_606834 = validateParameter(valid_606834, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_606834 != nil:
    section.add "Action", valid_606834
  var valid_606835 = query.getOrDefault("PermissionsBoundary")
  valid_606835 = validateParameter(valid_606835, JString, required = true,
                                 default = nil)
  if valid_606835 != nil:
    section.add "PermissionsBoundary", valid_606835
  var valid_606836 = query.getOrDefault("Version")
  valid_606836 = validateParameter(valid_606836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606836 != nil:
    section.add "Version", valid_606836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606837 = header.getOrDefault("X-Amz-Date")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-Date", valid_606837
  var valid_606838 = header.getOrDefault("X-Amz-Security-Token")
  valid_606838 = validateParameter(valid_606838, JString, required = false,
                                 default = nil)
  if valid_606838 != nil:
    section.add "X-Amz-Security-Token", valid_606838
  var valid_606839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606839 = validateParameter(valid_606839, JString, required = false,
                                 default = nil)
  if valid_606839 != nil:
    section.add "X-Amz-Content-Sha256", valid_606839
  var valid_606840 = header.getOrDefault("X-Amz-Algorithm")
  valid_606840 = validateParameter(valid_606840, JString, required = false,
                                 default = nil)
  if valid_606840 != nil:
    section.add "X-Amz-Algorithm", valid_606840
  var valid_606841 = header.getOrDefault("X-Amz-Signature")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Signature", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-SignedHeaders", valid_606842
  var valid_606843 = header.getOrDefault("X-Amz-Credential")
  valid_606843 = validateParameter(valid_606843, JString, required = false,
                                 default = nil)
  if valid_606843 != nil:
    section.add "X-Amz-Credential", valid_606843
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606844: Call_GetPutUserPermissionsBoundary_606830; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_606844.validator(path, query, header, formData, body)
  let scheme = call_606844.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606844.url(scheme.get, call_606844.host, call_606844.base,
                         call_606844.route, valid.getOrDefault("path"))
  result = hook(call_606844, url, valid)

proc call*(call_606845: Call_GetPutUserPermissionsBoundary_606830;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_606846 = newJObject()
  add(query_606846, "UserName", newJString(UserName))
  add(query_606846, "Action", newJString(Action))
  add(query_606846, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_606846, "Version", newJString(Version))
  result = call_606845.call(nil, query_606846, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_606830(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_606831, base: "/",
    url: url_GetPutUserPermissionsBoundary_606832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_606883 = ref object of OpenApiRestCall_602433
proc url_PostPutUserPolicy_606885(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPolicy_606884(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606886 = query.getOrDefault("Action")
  valid_606886 = validateParameter(valid_606886, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_606886 != nil:
    section.add "Action", valid_606886
  var valid_606887 = query.getOrDefault("Version")
  valid_606887 = validateParameter(valid_606887, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606887 != nil:
    section.add "Version", valid_606887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606888 = header.getOrDefault("X-Amz-Date")
  valid_606888 = validateParameter(valid_606888, JString, required = false,
                                 default = nil)
  if valid_606888 != nil:
    section.add "X-Amz-Date", valid_606888
  var valid_606889 = header.getOrDefault("X-Amz-Security-Token")
  valid_606889 = validateParameter(valid_606889, JString, required = false,
                                 default = nil)
  if valid_606889 != nil:
    section.add "X-Amz-Security-Token", valid_606889
  var valid_606890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606890 = validateParameter(valid_606890, JString, required = false,
                                 default = nil)
  if valid_606890 != nil:
    section.add "X-Amz-Content-Sha256", valid_606890
  var valid_606891 = header.getOrDefault("X-Amz-Algorithm")
  valid_606891 = validateParameter(valid_606891, JString, required = false,
                                 default = nil)
  if valid_606891 != nil:
    section.add "X-Amz-Algorithm", valid_606891
  var valid_606892 = header.getOrDefault("X-Amz-Signature")
  valid_606892 = validateParameter(valid_606892, JString, required = false,
                                 default = nil)
  if valid_606892 != nil:
    section.add "X-Amz-Signature", valid_606892
  var valid_606893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606893 = validateParameter(valid_606893, JString, required = false,
                                 default = nil)
  if valid_606893 != nil:
    section.add "X-Amz-SignedHeaders", valid_606893
  var valid_606894 = header.getOrDefault("X-Amz-Credential")
  valid_606894 = validateParameter(valid_606894, JString, required = false,
                                 default = nil)
  if valid_606894 != nil:
    section.add "X-Amz-Credential", valid_606894
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_606895 = formData.getOrDefault("PolicyName")
  valid_606895 = validateParameter(valid_606895, JString, required = true,
                                 default = nil)
  if valid_606895 != nil:
    section.add "PolicyName", valid_606895
  var valid_606896 = formData.getOrDefault("UserName")
  valid_606896 = validateParameter(valid_606896, JString, required = true,
                                 default = nil)
  if valid_606896 != nil:
    section.add "UserName", valid_606896
  var valid_606897 = formData.getOrDefault("PolicyDocument")
  valid_606897 = validateParameter(valid_606897, JString, required = true,
                                 default = nil)
  if valid_606897 != nil:
    section.add "PolicyDocument", valid_606897
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606898: Call_PostPutUserPolicy_606883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606898.validator(path, query, header, formData, body)
  let scheme = call_606898.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606898.url(scheme.get, call_606898.host, call_606898.base,
                         call_606898.route, valid.getOrDefault("path"))
  result = hook(call_606898, url, valid)

proc call*(call_606899: Call_PostPutUserPolicy_606883; PolicyName: string;
          UserName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606900 = newJObject()
  var formData_606901 = newJObject()
  add(formData_606901, "PolicyName", newJString(PolicyName))
  add(formData_606901, "UserName", newJString(UserName))
  add(formData_606901, "PolicyDocument", newJString(PolicyDocument))
  add(query_606900, "Action", newJString(Action))
  add(query_606900, "Version", newJString(Version))
  result = call_606899.call(nil, query_606900, nil, formData_606901, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_606883(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_606884,
    base: "/", url: url_PostPutUserPolicy_606885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_606865 = ref object of OpenApiRestCall_602433
proc url_GetPutUserPolicy_606867(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPolicy_606866(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606868 = query.getOrDefault("UserName")
  valid_606868 = validateParameter(valid_606868, JString, required = true,
                                 default = nil)
  if valid_606868 != nil:
    section.add "UserName", valid_606868
  var valid_606869 = query.getOrDefault("Action")
  valid_606869 = validateParameter(valid_606869, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_606869 != nil:
    section.add "Action", valid_606869
  var valid_606870 = query.getOrDefault("PolicyDocument")
  valid_606870 = validateParameter(valid_606870, JString, required = true,
                                 default = nil)
  if valid_606870 != nil:
    section.add "PolicyDocument", valid_606870
  var valid_606871 = query.getOrDefault("Version")
  valid_606871 = validateParameter(valid_606871, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606871 != nil:
    section.add "Version", valid_606871
  var valid_606872 = query.getOrDefault("PolicyName")
  valid_606872 = validateParameter(valid_606872, JString, required = true,
                                 default = nil)
  if valid_606872 != nil:
    section.add "PolicyName", valid_606872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606873 = header.getOrDefault("X-Amz-Date")
  valid_606873 = validateParameter(valid_606873, JString, required = false,
                                 default = nil)
  if valid_606873 != nil:
    section.add "X-Amz-Date", valid_606873
  var valid_606874 = header.getOrDefault("X-Amz-Security-Token")
  valid_606874 = validateParameter(valid_606874, JString, required = false,
                                 default = nil)
  if valid_606874 != nil:
    section.add "X-Amz-Security-Token", valid_606874
  var valid_606875 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606875 = validateParameter(valid_606875, JString, required = false,
                                 default = nil)
  if valid_606875 != nil:
    section.add "X-Amz-Content-Sha256", valid_606875
  var valid_606876 = header.getOrDefault("X-Amz-Algorithm")
  valid_606876 = validateParameter(valid_606876, JString, required = false,
                                 default = nil)
  if valid_606876 != nil:
    section.add "X-Amz-Algorithm", valid_606876
  var valid_606877 = header.getOrDefault("X-Amz-Signature")
  valid_606877 = validateParameter(valid_606877, JString, required = false,
                                 default = nil)
  if valid_606877 != nil:
    section.add "X-Amz-Signature", valid_606877
  var valid_606878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606878 = validateParameter(valid_606878, JString, required = false,
                                 default = nil)
  if valid_606878 != nil:
    section.add "X-Amz-SignedHeaders", valid_606878
  var valid_606879 = header.getOrDefault("X-Amz-Credential")
  valid_606879 = validateParameter(valid_606879, JString, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "X-Amz-Credential", valid_606879
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606880: Call_GetPutUserPolicy_606865; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606880.validator(path, query, header, formData, body)
  let scheme = call_606880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606880.url(scheme.get, call_606880.host, call_606880.base,
                         call_606880.route, valid.getOrDefault("path"))
  result = hook(call_606880, url, valid)

proc call*(call_606881: Call_GetPutUserPolicy_606865; UserName: string;
          PolicyDocument: string; PolicyName: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_606882 = newJObject()
  add(query_606882, "UserName", newJString(UserName))
  add(query_606882, "Action", newJString(Action))
  add(query_606882, "PolicyDocument", newJString(PolicyDocument))
  add(query_606882, "Version", newJString(Version))
  add(query_606882, "PolicyName", newJString(PolicyName))
  result = call_606881.call(nil, query_606882, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_606865(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_606866,
    base: "/", url: url_GetPutUserPolicy_606867,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_606919 = ref object of OpenApiRestCall_602433
proc url_PostRemoveClientIDFromOpenIDConnectProvider_606921(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_606920(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606922 = query.getOrDefault("Action")
  valid_606922 = validateParameter(valid_606922, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_606922 != nil:
    section.add "Action", valid_606922
  var valid_606923 = query.getOrDefault("Version")
  valid_606923 = validateParameter(valid_606923, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606923 != nil:
    section.add "Version", valid_606923
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606924 = header.getOrDefault("X-Amz-Date")
  valid_606924 = validateParameter(valid_606924, JString, required = false,
                                 default = nil)
  if valid_606924 != nil:
    section.add "X-Amz-Date", valid_606924
  var valid_606925 = header.getOrDefault("X-Amz-Security-Token")
  valid_606925 = validateParameter(valid_606925, JString, required = false,
                                 default = nil)
  if valid_606925 != nil:
    section.add "X-Amz-Security-Token", valid_606925
  var valid_606926 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606926 = validateParameter(valid_606926, JString, required = false,
                                 default = nil)
  if valid_606926 != nil:
    section.add "X-Amz-Content-Sha256", valid_606926
  var valid_606927 = header.getOrDefault("X-Amz-Algorithm")
  valid_606927 = validateParameter(valid_606927, JString, required = false,
                                 default = nil)
  if valid_606927 != nil:
    section.add "X-Amz-Algorithm", valid_606927
  var valid_606928 = header.getOrDefault("X-Amz-Signature")
  valid_606928 = validateParameter(valid_606928, JString, required = false,
                                 default = nil)
  if valid_606928 != nil:
    section.add "X-Amz-Signature", valid_606928
  var valid_606929 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606929 = validateParameter(valid_606929, JString, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "X-Amz-SignedHeaders", valid_606929
  var valid_606930 = header.getOrDefault("X-Amz-Credential")
  valid_606930 = validateParameter(valid_606930, JString, required = false,
                                 default = nil)
  if valid_606930 != nil:
    section.add "X-Amz-Credential", valid_606930
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_606931 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_606931 = validateParameter(valid_606931, JString, required = true,
                                 default = nil)
  if valid_606931 != nil:
    section.add "OpenIDConnectProviderArn", valid_606931
  var valid_606932 = formData.getOrDefault("ClientID")
  valid_606932 = validateParameter(valid_606932, JString, required = true,
                                 default = nil)
  if valid_606932 != nil:
    section.add "ClientID", valid_606932
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606933: Call_PostRemoveClientIDFromOpenIDConnectProvider_606919;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_606933.validator(path, query, header, formData, body)
  let scheme = call_606933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606933.url(scheme.get, call_606933.host, call_606933.base,
                         call_606933.route, valid.getOrDefault("path"))
  result = hook(call_606933, url, valid)

proc call*(call_606934: Call_PostRemoveClientIDFromOpenIDConnectProvider_606919;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  var query_606935 = newJObject()
  var formData_606936 = newJObject()
  add(formData_606936, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_606935, "Action", newJString(Action))
  add(query_606935, "Version", newJString(Version))
  add(formData_606936, "ClientID", newJString(ClientID))
  result = call_606934.call(nil, query_606935, nil, formData_606936, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_606919(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_606920,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_606921,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_606902 = ref object of OpenApiRestCall_602433
proc url_GetRemoveClientIDFromOpenIDConnectProvider_606904(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_606903(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_606905 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_606905 = validateParameter(valid_606905, JString, required = true,
                                 default = nil)
  if valid_606905 != nil:
    section.add "OpenIDConnectProviderArn", valid_606905
  var valid_606906 = query.getOrDefault("Action")
  valid_606906 = validateParameter(valid_606906, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_606906 != nil:
    section.add "Action", valid_606906
  var valid_606907 = query.getOrDefault("ClientID")
  valid_606907 = validateParameter(valid_606907, JString, required = true,
                                 default = nil)
  if valid_606907 != nil:
    section.add "ClientID", valid_606907
  var valid_606908 = query.getOrDefault("Version")
  valid_606908 = validateParameter(valid_606908, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606908 != nil:
    section.add "Version", valid_606908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606909 = header.getOrDefault("X-Amz-Date")
  valid_606909 = validateParameter(valid_606909, JString, required = false,
                                 default = nil)
  if valid_606909 != nil:
    section.add "X-Amz-Date", valid_606909
  var valid_606910 = header.getOrDefault("X-Amz-Security-Token")
  valid_606910 = validateParameter(valid_606910, JString, required = false,
                                 default = nil)
  if valid_606910 != nil:
    section.add "X-Amz-Security-Token", valid_606910
  var valid_606911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606911 = validateParameter(valid_606911, JString, required = false,
                                 default = nil)
  if valid_606911 != nil:
    section.add "X-Amz-Content-Sha256", valid_606911
  var valid_606912 = header.getOrDefault("X-Amz-Algorithm")
  valid_606912 = validateParameter(valid_606912, JString, required = false,
                                 default = nil)
  if valid_606912 != nil:
    section.add "X-Amz-Algorithm", valid_606912
  var valid_606913 = header.getOrDefault("X-Amz-Signature")
  valid_606913 = validateParameter(valid_606913, JString, required = false,
                                 default = nil)
  if valid_606913 != nil:
    section.add "X-Amz-Signature", valid_606913
  var valid_606914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-SignedHeaders", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-Credential")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Credential", valid_606915
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606916: Call_GetRemoveClientIDFromOpenIDConnectProvider_606902;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_606916.validator(path, query, header, formData, body)
  let scheme = call_606916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606916.url(scheme.get, call_606916.host, call_606916.base,
                         call_606916.route, valid.getOrDefault("path"))
  result = hook(call_606916, url, valid)

proc call*(call_606917: Call_GetRemoveClientIDFromOpenIDConnectProvider_606902;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: string (required)
  var query_606918 = newJObject()
  add(query_606918, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_606918, "Action", newJString(Action))
  add(query_606918, "ClientID", newJString(ClientID))
  add(query_606918, "Version", newJString(Version))
  result = call_606917.call(nil, query_606918, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_606902(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_606903,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_606904,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_606954 = ref object of OpenApiRestCall_602433
proc url_PostRemoveRoleFromInstanceProfile_606956(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromInstanceProfile_606955(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606957 = query.getOrDefault("Action")
  valid_606957 = validateParameter(valid_606957, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_606957 != nil:
    section.add "Action", valid_606957
  var valid_606958 = query.getOrDefault("Version")
  valid_606958 = validateParameter(valid_606958, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606958 != nil:
    section.add "Version", valid_606958
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606959 = header.getOrDefault("X-Amz-Date")
  valid_606959 = validateParameter(valid_606959, JString, required = false,
                                 default = nil)
  if valid_606959 != nil:
    section.add "X-Amz-Date", valid_606959
  var valid_606960 = header.getOrDefault("X-Amz-Security-Token")
  valid_606960 = validateParameter(valid_606960, JString, required = false,
                                 default = nil)
  if valid_606960 != nil:
    section.add "X-Amz-Security-Token", valid_606960
  var valid_606961 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606961 = validateParameter(valid_606961, JString, required = false,
                                 default = nil)
  if valid_606961 != nil:
    section.add "X-Amz-Content-Sha256", valid_606961
  var valid_606962 = header.getOrDefault("X-Amz-Algorithm")
  valid_606962 = validateParameter(valid_606962, JString, required = false,
                                 default = nil)
  if valid_606962 != nil:
    section.add "X-Amz-Algorithm", valid_606962
  var valid_606963 = header.getOrDefault("X-Amz-Signature")
  valid_606963 = validateParameter(valid_606963, JString, required = false,
                                 default = nil)
  if valid_606963 != nil:
    section.add "X-Amz-Signature", valid_606963
  var valid_606964 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606964 = validateParameter(valid_606964, JString, required = false,
                                 default = nil)
  if valid_606964 != nil:
    section.add "X-Amz-SignedHeaders", valid_606964
  var valid_606965 = header.getOrDefault("X-Amz-Credential")
  valid_606965 = validateParameter(valid_606965, JString, required = false,
                                 default = nil)
  if valid_606965 != nil:
    section.add "X-Amz-Credential", valid_606965
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_606966 = formData.getOrDefault("RoleName")
  valid_606966 = validateParameter(valid_606966, JString, required = true,
                                 default = nil)
  if valid_606966 != nil:
    section.add "RoleName", valid_606966
  var valid_606967 = formData.getOrDefault("InstanceProfileName")
  valid_606967 = validateParameter(valid_606967, JString, required = true,
                                 default = nil)
  if valid_606967 != nil:
    section.add "InstanceProfileName", valid_606967
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606968: Call_PostRemoveRoleFromInstanceProfile_606954;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_606968.validator(path, query, header, formData, body)
  let scheme = call_606968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606968.url(scheme.get, call_606968.host, call_606968.base,
                         call_606968.route, valid.getOrDefault("path"))
  result = hook(call_606968, url, valid)

proc call*(call_606969: Call_PostRemoveRoleFromInstanceProfile_606954;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606970 = newJObject()
  var formData_606971 = newJObject()
  add(formData_606971, "RoleName", newJString(RoleName))
  add(query_606970, "Action", newJString(Action))
  add(formData_606971, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606970, "Version", newJString(Version))
  result = call_606969.call(nil, query_606970, nil, formData_606971, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_606954(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_606955, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_606956,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_606937 = ref object of OpenApiRestCall_602433
proc url_GetRemoveRoleFromInstanceProfile_606939(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromInstanceProfile_606938(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_606940 = query.getOrDefault("InstanceProfileName")
  valid_606940 = validateParameter(valid_606940, JString, required = true,
                                 default = nil)
  if valid_606940 != nil:
    section.add "InstanceProfileName", valid_606940
  var valid_606941 = query.getOrDefault("Action")
  valid_606941 = validateParameter(valid_606941, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_606941 != nil:
    section.add "Action", valid_606941
  var valid_606942 = query.getOrDefault("RoleName")
  valid_606942 = validateParameter(valid_606942, JString, required = true,
                                 default = nil)
  if valid_606942 != nil:
    section.add "RoleName", valid_606942
  var valid_606943 = query.getOrDefault("Version")
  valid_606943 = validateParameter(valid_606943, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606943 != nil:
    section.add "Version", valid_606943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606944 = header.getOrDefault("X-Amz-Date")
  valid_606944 = validateParameter(valid_606944, JString, required = false,
                                 default = nil)
  if valid_606944 != nil:
    section.add "X-Amz-Date", valid_606944
  var valid_606945 = header.getOrDefault("X-Amz-Security-Token")
  valid_606945 = validateParameter(valid_606945, JString, required = false,
                                 default = nil)
  if valid_606945 != nil:
    section.add "X-Amz-Security-Token", valid_606945
  var valid_606946 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606946 = validateParameter(valid_606946, JString, required = false,
                                 default = nil)
  if valid_606946 != nil:
    section.add "X-Amz-Content-Sha256", valid_606946
  var valid_606947 = header.getOrDefault("X-Amz-Algorithm")
  valid_606947 = validateParameter(valid_606947, JString, required = false,
                                 default = nil)
  if valid_606947 != nil:
    section.add "X-Amz-Algorithm", valid_606947
  var valid_606948 = header.getOrDefault("X-Amz-Signature")
  valid_606948 = validateParameter(valid_606948, JString, required = false,
                                 default = nil)
  if valid_606948 != nil:
    section.add "X-Amz-Signature", valid_606948
  var valid_606949 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-SignedHeaders", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Credential")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Credential", valid_606950
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606951: Call_GetRemoveRoleFromInstanceProfile_606937;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_606951.validator(path, query, header, formData, body)
  let scheme = call_606951.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606951.url(scheme.get, call_606951.host, call_606951.base,
                         call_606951.route, valid.getOrDefault("path"))
  result = hook(call_606951, url, valid)

proc call*(call_606952: Call_GetRemoveRoleFromInstanceProfile_606937;
          InstanceProfileName: string; RoleName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606953 = newJObject()
  add(query_606953, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_606953, "Action", newJString(Action))
  add(query_606953, "RoleName", newJString(RoleName))
  add(query_606953, "Version", newJString(Version))
  result = call_606952.call(nil, query_606953, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_606937(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_606938, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_606939,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_606989 = ref object of OpenApiRestCall_602433
proc url_PostRemoveUserFromGroup_606991(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveUserFromGroup_606990(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606992 = query.getOrDefault("Action")
  valid_606992 = validateParameter(valid_606992, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_606992 != nil:
    section.add "Action", valid_606992
  var valid_606993 = query.getOrDefault("Version")
  valid_606993 = validateParameter(valid_606993, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606993 != nil:
    section.add "Version", valid_606993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606994 = header.getOrDefault("X-Amz-Date")
  valid_606994 = validateParameter(valid_606994, JString, required = false,
                                 default = nil)
  if valid_606994 != nil:
    section.add "X-Amz-Date", valid_606994
  var valid_606995 = header.getOrDefault("X-Amz-Security-Token")
  valid_606995 = validateParameter(valid_606995, JString, required = false,
                                 default = nil)
  if valid_606995 != nil:
    section.add "X-Amz-Security-Token", valid_606995
  var valid_606996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606996 = validateParameter(valid_606996, JString, required = false,
                                 default = nil)
  if valid_606996 != nil:
    section.add "X-Amz-Content-Sha256", valid_606996
  var valid_606997 = header.getOrDefault("X-Amz-Algorithm")
  valid_606997 = validateParameter(valid_606997, JString, required = false,
                                 default = nil)
  if valid_606997 != nil:
    section.add "X-Amz-Algorithm", valid_606997
  var valid_606998 = header.getOrDefault("X-Amz-Signature")
  valid_606998 = validateParameter(valid_606998, JString, required = false,
                                 default = nil)
  if valid_606998 != nil:
    section.add "X-Amz-Signature", valid_606998
  var valid_606999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606999 = validateParameter(valid_606999, JString, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "X-Amz-SignedHeaders", valid_606999
  var valid_607000 = header.getOrDefault("X-Amz-Credential")
  valid_607000 = validateParameter(valid_607000, JString, required = false,
                                 default = nil)
  if valid_607000 != nil:
    section.add "X-Amz-Credential", valid_607000
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607001 = formData.getOrDefault("UserName")
  valid_607001 = validateParameter(valid_607001, JString, required = true,
                                 default = nil)
  if valid_607001 != nil:
    section.add "UserName", valid_607001
  var valid_607002 = formData.getOrDefault("GroupName")
  valid_607002 = validateParameter(valid_607002, JString, required = true,
                                 default = nil)
  if valid_607002 != nil:
    section.add "GroupName", valid_607002
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607003: Call_PostRemoveUserFromGroup_606989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_607003.validator(path, query, header, formData, body)
  let scheme = call_607003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607003.url(scheme.get, call_607003.host, call_607003.base,
                         call_607003.route, valid.getOrDefault("path"))
  result = hook(call_607003, url, valid)

proc call*(call_607004: Call_PostRemoveUserFromGroup_606989; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607005 = newJObject()
  var formData_607006 = newJObject()
  add(formData_607006, "UserName", newJString(UserName))
  add(formData_607006, "GroupName", newJString(GroupName))
  add(query_607005, "Action", newJString(Action))
  add(query_607005, "Version", newJString(Version))
  result = call_607004.call(nil, query_607005, nil, formData_607006, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_606989(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_606990, base: "/",
    url: url_PostRemoveUserFromGroup_606991, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_606972 = ref object of OpenApiRestCall_602433
proc url_GetRemoveUserFromGroup_606974(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveUserFromGroup_606973(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_606975 = query.getOrDefault("UserName")
  valid_606975 = validateParameter(valid_606975, JString, required = true,
                                 default = nil)
  if valid_606975 != nil:
    section.add "UserName", valid_606975
  var valid_606976 = query.getOrDefault("Action")
  valid_606976 = validateParameter(valid_606976, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_606976 != nil:
    section.add "Action", valid_606976
  var valid_606977 = query.getOrDefault("GroupName")
  valid_606977 = validateParameter(valid_606977, JString, required = true,
                                 default = nil)
  if valid_606977 != nil:
    section.add "GroupName", valid_606977
  var valid_606978 = query.getOrDefault("Version")
  valid_606978 = validateParameter(valid_606978, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606978 != nil:
    section.add "Version", valid_606978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606979 = header.getOrDefault("X-Amz-Date")
  valid_606979 = validateParameter(valid_606979, JString, required = false,
                                 default = nil)
  if valid_606979 != nil:
    section.add "X-Amz-Date", valid_606979
  var valid_606980 = header.getOrDefault("X-Amz-Security-Token")
  valid_606980 = validateParameter(valid_606980, JString, required = false,
                                 default = nil)
  if valid_606980 != nil:
    section.add "X-Amz-Security-Token", valid_606980
  var valid_606981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606981 = validateParameter(valid_606981, JString, required = false,
                                 default = nil)
  if valid_606981 != nil:
    section.add "X-Amz-Content-Sha256", valid_606981
  var valid_606982 = header.getOrDefault("X-Amz-Algorithm")
  valid_606982 = validateParameter(valid_606982, JString, required = false,
                                 default = nil)
  if valid_606982 != nil:
    section.add "X-Amz-Algorithm", valid_606982
  var valid_606983 = header.getOrDefault("X-Amz-Signature")
  valid_606983 = validateParameter(valid_606983, JString, required = false,
                                 default = nil)
  if valid_606983 != nil:
    section.add "X-Amz-Signature", valid_606983
  var valid_606984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606984 = validateParameter(valid_606984, JString, required = false,
                                 default = nil)
  if valid_606984 != nil:
    section.add "X-Amz-SignedHeaders", valid_606984
  var valid_606985 = header.getOrDefault("X-Amz-Credential")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Credential", valid_606985
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606986: Call_GetRemoveUserFromGroup_606972; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_606986.validator(path, query, header, formData, body)
  let scheme = call_606986.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606986.url(scheme.get, call_606986.host, call_606986.base,
                         call_606986.route, valid.getOrDefault("path"))
  result = hook(call_606986, url, valid)

proc call*(call_606987: Call_GetRemoveUserFromGroup_606972; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_606988 = newJObject()
  add(query_606988, "UserName", newJString(UserName))
  add(query_606988, "Action", newJString(Action))
  add(query_606988, "GroupName", newJString(GroupName))
  add(query_606988, "Version", newJString(Version))
  result = call_606987.call(nil, query_606988, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_606972(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_606973, base: "/",
    url: url_GetRemoveUserFromGroup_606974, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_607024 = ref object of OpenApiRestCall_602433
proc url_PostResetServiceSpecificCredential_607026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetServiceSpecificCredential_607025(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607027 = query.getOrDefault("Action")
  valid_607027 = validateParameter(valid_607027, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_607027 != nil:
    section.add "Action", valid_607027
  var valid_607028 = query.getOrDefault("Version")
  valid_607028 = validateParameter(valid_607028, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607028 != nil:
    section.add "Version", valid_607028
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607029 = header.getOrDefault("X-Amz-Date")
  valid_607029 = validateParameter(valid_607029, JString, required = false,
                                 default = nil)
  if valid_607029 != nil:
    section.add "X-Amz-Date", valid_607029
  var valid_607030 = header.getOrDefault("X-Amz-Security-Token")
  valid_607030 = validateParameter(valid_607030, JString, required = false,
                                 default = nil)
  if valid_607030 != nil:
    section.add "X-Amz-Security-Token", valid_607030
  var valid_607031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607031 = validateParameter(valid_607031, JString, required = false,
                                 default = nil)
  if valid_607031 != nil:
    section.add "X-Amz-Content-Sha256", valid_607031
  var valid_607032 = header.getOrDefault("X-Amz-Algorithm")
  valid_607032 = validateParameter(valid_607032, JString, required = false,
                                 default = nil)
  if valid_607032 != nil:
    section.add "X-Amz-Algorithm", valid_607032
  var valid_607033 = header.getOrDefault("X-Amz-Signature")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "X-Amz-Signature", valid_607033
  var valid_607034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-SignedHeaders", valid_607034
  var valid_607035 = header.getOrDefault("X-Amz-Credential")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "X-Amz-Credential", valid_607035
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_607036 = formData.getOrDefault("UserName")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "UserName", valid_607036
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_607037 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_607037 = validateParameter(valid_607037, JString, required = true,
                                 default = nil)
  if valid_607037 != nil:
    section.add "ServiceSpecificCredentialId", valid_607037
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607038: Call_PostResetServiceSpecificCredential_607024;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_607038.validator(path, query, header, formData, body)
  let scheme = call_607038.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607038.url(scheme.get, call_607038.host, call_607038.base,
                         call_607038.route, valid.getOrDefault("path"))
  result = hook(call_607038, url, valid)

proc call*(call_607039: Call_PostResetServiceSpecificCredential_607024;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607040 = newJObject()
  var formData_607041 = newJObject()
  add(formData_607041, "UserName", newJString(UserName))
  add(formData_607041, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_607040, "Action", newJString(Action))
  add(query_607040, "Version", newJString(Version))
  result = call_607039.call(nil, query_607040, nil, formData_607041, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_607024(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_607025, base: "/",
    url: url_PostResetServiceSpecificCredential_607026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_607007 = ref object of OpenApiRestCall_602433
proc url_GetResetServiceSpecificCredential_607009(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetServiceSpecificCredential_607008(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607010 = query.getOrDefault("UserName")
  valid_607010 = validateParameter(valid_607010, JString, required = false,
                                 default = nil)
  if valid_607010 != nil:
    section.add "UserName", valid_607010
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607011 = query.getOrDefault("Action")
  valid_607011 = validateParameter(valid_607011, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_607011 != nil:
    section.add "Action", valid_607011
  var valid_607012 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_607012 = validateParameter(valid_607012, JString, required = true,
                                 default = nil)
  if valid_607012 != nil:
    section.add "ServiceSpecificCredentialId", valid_607012
  var valid_607013 = query.getOrDefault("Version")
  valid_607013 = validateParameter(valid_607013, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607013 != nil:
    section.add "Version", valid_607013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607014 = header.getOrDefault("X-Amz-Date")
  valid_607014 = validateParameter(valid_607014, JString, required = false,
                                 default = nil)
  if valid_607014 != nil:
    section.add "X-Amz-Date", valid_607014
  var valid_607015 = header.getOrDefault("X-Amz-Security-Token")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "X-Amz-Security-Token", valid_607015
  var valid_607016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "X-Amz-Content-Sha256", valid_607016
  var valid_607017 = header.getOrDefault("X-Amz-Algorithm")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Algorithm", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Signature")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Signature", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-SignedHeaders", valid_607019
  var valid_607020 = header.getOrDefault("X-Amz-Credential")
  valid_607020 = validateParameter(valid_607020, JString, required = false,
                                 default = nil)
  if valid_607020 != nil:
    section.add "X-Amz-Credential", valid_607020
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607021: Call_GetResetServiceSpecificCredential_607007;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_607021.validator(path, query, header, formData, body)
  let scheme = call_607021.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607021.url(scheme.get, call_607021.host, call_607021.base,
                         call_607021.route, valid.getOrDefault("path"))
  result = hook(call_607021, url, valid)

proc call*(call_607022: Call_GetResetServiceSpecificCredential_607007;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_607023 = newJObject()
  add(query_607023, "UserName", newJString(UserName))
  add(query_607023, "Action", newJString(Action))
  add(query_607023, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_607023, "Version", newJString(Version))
  result = call_607022.call(nil, query_607023, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_607007(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_607008, base: "/",
    url: url_GetResetServiceSpecificCredential_607009,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_607061 = ref object of OpenApiRestCall_602433
proc url_PostResyncMFADevice_607063(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResyncMFADevice_607062(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607064 = query.getOrDefault("Action")
  valid_607064 = validateParameter(valid_607064, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_607064 != nil:
    section.add "Action", valid_607064
  var valid_607065 = query.getOrDefault("Version")
  valid_607065 = validateParameter(valid_607065, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607065 != nil:
    section.add "Version", valid_607065
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607066 = header.getOrDefault("X-Amz-Date")
  valid_607066 = validateParameter(valid_607066, JString, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "X-Amz-Date", valid_607066
  var valid_607067 = header.getOrDefault("X-Amz-Security-Token")
  valid_607067 = validateParameter(valid_607067, JString, required = false,
                                 default = nil)
  if valid_607067 != nil:
    section.add "X-Amz-Security-Token", valid_607067
  var valid_607068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "X-Amz-Content-Sha256", valid_607068
  var valid_607069 = header.getOrDefault("X-Amz-Algorithm")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "X-Amz-Algorithm", valid_607069
  var valid_607070 = header.getOrDefault("X-Amz-Signature")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Signature", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-SignedHeaders", valid_607071
  var valid_607072 = header.getOrDefault("X-Amz-Credential")
  valid_607072 = validateParameter(valid_607072, JString, required = false,
                                 default = nil)
  if valid_607072 != nil:
    section.add "X-Amz-Credential", valid_607072
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_607073 = formData.getOrDefault("SerialNumber")
  valid_607073 = validateParameter(valid_607073, JString, required = true,
                                 default = nil)
  if valid_607073 != nil:
    section.add "SerialNumber", valid_607073
  var valid_607074 = formData.getOrDefault("UserName")
  valid_607074 = validateParameter(valid_607074, JString, required = true,
                                 default = nil)
  if valid_607074 != nil:
    section.add "UserName", valid_607074
  var valid_607075 = formData.getOrDefault("AuthenticationCode2")
  valid_607075 = validateParameter(valid_607075, JString, required = true,
                                 default = nil)
  if valid_607075 != nil:
    section.add "AuthenticationCode2", valid_607075
  var valid_607076 = formData.getOrDefault("AuthenticationCode1")
  valid_607076 = validateParameter(valid_607076, JString, required = true,
                                 default = nil)
  if valid_607076 != nil:
    section.add "AuthenticationCode1", valid_607076
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607077: Call_PostResyncMFADevice_607061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607077.validator(path, query, header, formData, body)
  let scheme = call_607077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607077.url(scheme.get, call_607077.host, call_607077.base,
                         call_607077.route, valid.getOrDefault("path"))
  result = hook(call_607077, url, valid)

proc call*(call_607078: Call_PostResyncMFADevice_607061; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_607079 = newJObject()
  var formData_607080 = newJObject()
  add(formData_607080, "SerialNumber", newJString(SerialNumber))
  add(formData_607080, "UserName", newJString(UserName))
  add(formData_607080, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_607079, "Action", newJString(Action))
  add(formData_607080, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_607079, "Version", newJString(Version))
  result = call_607078.call(nil, query_607079, nil, formData_607080, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_607061(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_607062, base: "/",
    url: url_PostResyncMFADevice_607063, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_607042 = ref object of OpenApiRestCall_602433
proc url_GetResyncMFADevice_607044(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResyncMFADevice_607043(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_607045 = query.getOrDefault("SerialNumber")
  valid_607045 = validateParameter(valid_607045, JString, required = true,
                                 default = nil)
  if valid_607045 != nil:
    section.add "SerialNumber", valid_607045
  var valid_607046 = query.getOrDefault("AuthenticationCode2")
  valid_607046 = validateParameter(valid_607046, JString, required = true,
                                 default = nil)
  if valid_607046 != nil:
    section.add "AuthenticationCode2", valid_607046
  var valid_607047 = query.getOrDefault("AuthenticationCode1")
  valid_607047 = validateParameter(valid_607047, JString, required = true,
                                 default = nil)
  if valid_607047 != nil:
    section.add "AuthenticationCode1", valid_607047
  var valid_607048 = query.getOrDefault("UserName")
  valid_607048 = validateParameter(valid_607048, JString, required = true,
                                 default = nil)
  if valid_607048 != nil:
    section.add "UserName", valid_607048
  var valid_607049 = query.getOrDefault("Action")
  valid_607049 = validateParameter(valid_607049, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_607049 != nil:
    section.add "Action", valid_607049
  var valid_607050 = query.getOrDefault("Version")
  valid_607050 = validateParameter(valid_607050, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607050 != nil:
    section.add "Version", valid_607050
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607051 = header.getOrDefault("X-Amz-Date")
  valid_607051 = validateParameter(valid_607051, JString, required = false,
                                 default = nil)
  if valid_607051 != nil:
    section.add "X-Amz-Date", valid_607051
  var valid_607052 = header.getOrDefault("X-Amz-Security-Token")
  valid_607052 = validateParameter(valid_607052, JString, required = false,
                                 default = nil)
  if valid_607052 != nil:
    section.add "X-Amz-Security-Token", valid_607052
  var valid_607053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607053 = validateParameter(valid_607053, JString, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "X-Amz-Content-Sha256", valid_607053
  var valid_607054 = header.getOrDefault("X-Amz-Algorithm")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "X-Amz-Algorithm", valid_607054
  var valid_607055 = header.getOrDefault("X-Amz-Signature")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-Signature", valid_607055
  var valid_607056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "X-Amz-SignedHeaders", valid_607056
  var valid_607057 = header.getOrDefault("X-Amz-Credential")
  valid_607057 = validateParameter(valid_607057, JString, required = false,
                                 default = nil)
  if valid_607057 != nil:
    section.add "X-Amz-Credential", valid_607057
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607058: Call_GetResyncMFADevice_607042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607058.validator(path, query, header, formData, body)
  let scheme = call_607058.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607058.url(scheme.get, call_607058.host, call_607058.base,
                         call_607058.route, valid.getOrDefault("path"))
  result = hook(call_607058, url, valid)

proc call*(call_607059: Call_GetResyncMFADevice_607042; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607060 = newJObject()
  add(query_607060, "SerialNumber", newJString(SerialNumber))
  add(query_607060, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_607060, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_607060, "UserName", newJString(UserName))
  add(query_607060, "Action", newJString(Action))
  add(query_607060, "Version", newJString(Version))
  result = call_607059.call(nil, query_607060, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_607042(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_607043,
    base: "/", url: url_GetResyncMFADevice_607044,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_607098 = ref object of OpenApiRestCall_602433
proc url_PostSetDefaultPolicyVersion_607100(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetDefaultPolicyVersion_607099(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607101 = query.getOrDefault("Action")
  valid_607101 = validateParameter(valid_607101, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_607101 != nil:
    section.add "Action", valid_607101
  var valid_607102 = query.getOrDefault("Version")
  valid_607102 = validateParameter(valid_607102, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607102 != nil:
    section.add "Version", valid_607102
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607103 = header.getOrDefault("X-Amz-Date")
  valid_607103 = validateParameter(valid_607103, JString, required = false,
                                 default = nil)
  if valid_607103 != nil:
    section.add "X-Amz-Date", valid_607103
  var valid_607104 = header.getOrDefault("X-Amz-Security-Token")
  valid_607104 = validateParameter(valid_607104, JString, required = false,
                                 default = nil)
  if valid_607104 != nil:
    section.add "X-Amz-Security-Token", valid_607104
  var valid_607105 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607105 = validateParameter(valid_607105, JString, required = false,
                                 default = nil)
  if valid_607105 != nil:
    section.add "X-Amz-Content-Sha256", valid_607105
  var valid_607106 = header.getOrDefault("X-Amz-Algorithm")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "X-Amz-Algorithm", valid_607106
  var valid_607107 = header.getOrDefault("X-Amz-Signature")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "X-Amz-Signature", valid_607107
  var valid_607108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607108 = validateParameter(valid_607108, JString, required = false,
                                 default = nil)
  if valid_607108 != nil:
    section.add "X-Amz-SignedHeaders", valid_607108
  var valid_607109 = header.getOrDefault("X-Amz-Credential")
  valid_607109 = validateParameter(valid_607109, JString, required = false,
                                 default = nil)
  if valid_607109 != nil:
    section.add "X-Amz-Credential", valid_607109
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_607110 = formData.getOrDefault("PolicyArn")
  valid_607110 = validateParameter(valid_607110, JString, required = true,
                                 default = nil)
  if valid_607110 != nil:
    section.add "PolicyArn", valid_607110
  var valid_607111 = formData.getOrDefault("VersionId")
  valid_607111 = validateParameter(valid_607111, JString, required = true,
                                 default = nil)
  if valid_607111 != nil:
    section.add "VersionId", valid_607111
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607112: Call_PostSetDefaultPolicyVersion_607098; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607112.validator(path, query, header, formData, body)
  let scheme = call_607112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607112.url(scheme.get, call_607112.host, call_607112.base,
                         call_607112.route, valid.getOrDefault("path"))
  result = hook(call_607112, url, valid)

proc call*(call_607113: Call_PostSetDefaultPolicyVersion_607098; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_607114 = newJObject()
  var formData_607115 = newJObject()
  add(formData_607115, "PolicyArn", newJString(PolicyArn))
  add(query_607114, "Action", newJString(Action))
  add(query_607114, "Version", newJString(Version))
  add(formData_607115, "VersionId", newJString(VersionId))
  result = call_607113.call(nil, query_607114, nil, formData_607115, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_607098(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_607099, base: "/",
    url: url_PostSetDefaultPolicyVersion_607100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_607081 = ref object of OpenApiRestCall_602433
proc url_GetSetDefaultPolicyVersion_607083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetDefaultPolicyVersion_607082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_607084 = query.getOrDefault("PolicyArn")
  valid_607084 = validateParameter(valid_607084, JString, required = true,
                                 default = nil)
  if valid_607084 != nil:
    section.add "PolicyArn", valid_607084
  var valid_607085 = query.getOrDefault("VersionId")
  valid_607085 = validateParameter(valid_607085, JString, required = true,
                                 default = nil)
  if valid_607085 != nil:
    section.add "VersionId", valid_607085
  var valid_607086 = query.getOrDefault("Action")
  valid_607086 = validateParameter(valid_607086, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_607086 != nil:
    section.add "Action", valid_607086
  var valid_607087 = query.getOrDefault("Version")
  valid_607087 = validateParameter(valid_607087, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607087 != nil:
    section.add "Version", valid_607087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607088 = header.getOrDefault("X-Amz-Date")
  valid_607088 = validateParameter(valid_607088, JString, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "X-Amz-Date", valid_607088
  var valid_607089 = header.getOrDefault("X-Amz-Security-Token")
  valid_607089 = validateParameter(valid_607089, JString, required = false,
                                 default = nil)
  if valid_607089 != nil:
    section.add "X-Amz-Security-Token", valid_607089
  var valid_607090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607090 = validateParameter(valid_607090, JString, required = false,
                                 default = nil)
  if valid_607090 != nil:
    section.add "X-Amz-Content-Sha256", valid_607090
  var valid_607091 = header.getOrDefault("X-Amz-Algorithm")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Algorithm", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-Signature")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-Signature", valid_607092
  var valid_607093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-SignedHeaders", valid_607093
  var valid_607094 = header.getOrDefault("X-Amz-Credential")
  valid_607094 = validateParameter(valid_607094, JString, required = false,
                                 default = nil)
  if valid_607094 != nil:
    section.add "X-Amz-Credential", valid_607094
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607095: Call_GetSetDefaultPolicyVersion_607081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607095.validator(path, query, header, formData, body)
  let scheme = call_607095.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607095.url(scheme.get, call_607095.host, call_607095.base,
                         call_607095.route, valid.getOrDefault("path"))
  result = hook(call_607095, url, valid)

proc call*(call_607096: Call_GetSetDefaultPolicyVersion_607081; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607097 = newJObject()
  add(query_607097, "PolicyArn", newJString(PolicyArn))
  add(query_607097, "VersionId", newJString(VersionId))
  add(query_607097, "Action", newJString(Action))
  add(query_607097, "Version", newJString(Version))
  result = call_607096.call(nil, query_607097, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_607081(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_607082, base: "/",
    url: url_GetSetDefaultPolicyVersion_607083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_607132 = ref object of OpenApiRestCall_602433
proc url_PostSetSecurityTokenServicePreferences_607134(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetSecurityTokenServicePreferences_607133(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607135 = query.getOrDefault("Action")
  valid_607135 = validateParameter(valid_607135, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_607135 != nil:
    section.add "Action", valid_607135
  var valid_607136 = query.getOrDefault("Version")
  valid_607136 = validateParameter(valid_607136, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607136 != nil:
    section.add "Version", valid_607136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607137 = header.getOrDefault("X-Amz-Date")
  valid_607137 = validateParameter(valid_607137, JString, required = false,
                                 default = nil)
  if valid_607137 != nil:
    section.add "X-Amz-Date", valid_607137
  var valid_607138 = header.getOrDefault("X-Amz-Security-Token")
  valid_607138 = validateParameter(valid_607138, JString, required = false,
                                 default = nil)
  if valid_607138 != nil:
    section.add "X-Amz-Security-Token", valid_607138
  var valid_607139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607139 = validateParameter(valid_607139, JString, required = false,
                                 default = nil)
  if valid_607139 != nil:
    section.add "X-Amz-Content-Sha256", valid_607139
  var valid_607140 = header.getOrDefault("X-Amz-Algorithm")
  valid_607140 = validateParameter(valid_607140, JString, required = false,
                                 default = nil)
  if valid_607140 != nil:
    section.add "X-Amz-Algorithm", valid_607140
  var valid_607141 = header.getOrDefault("X-Amz-Signature")
  valid_607141 = validateParameter(valid_607141, JString, required = false,
                                 default = nil)
  if valid_607141 != nil:
    section.add "X-Amz-Signature", valid_607141
  var valid_607142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607142 = validateParameter(valid_607142, JString, required = false,
                                 default = nil)
  if valid_607142 != nil:
    section.add "X-Amz-SignedHeaders", valid_607142
  var valid_607143 = header.getOrDefault("X-Amz-Credential")
  valid_607143 = validateParameter(valid_607143, JString, required = false,
                                 default = nil)
  if valid_607143 != nil:
    section.add "X-Amz-Credential", valid_607143
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_607144 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_607144 = validateParameter(valid_607144, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_607144 != nil:
    section.add "GlobalEndpointTokenVersion", valid_607144
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607145: Call_PostSetSecurityTokenServicePreferences_607132;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_607145.validator(path, query, header, formData, body)
  let scheme = call_607145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607145.url(scheme.get, call_607145.host, call_607145.base,
                         call_607145.route, valid.getOrDefault("path"))
  result = hook(call_607145, url, valid)

proc call*(call_607146: Call_PostSetSecurityTokenServicePreferences_607132;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_607147 = newJObject()
  var formData_607148 = newJObject()
  add(query_607147, "Action", newJString(Action))
  add(formData_607148, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_607147, "Version", newJString(Version))
  result = call_607146.call(nil, query_607147, nil, formData_607148, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_607132(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_607133, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_607134,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_607116 = ref object of OpenApiRestCall_602433
proc url_GetSetSecurityTokenServicePreferences_607118(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetSecurityTokenServicePreferences_607117(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607119 = query.getOrDefault("Action")
  valid_607119 = validateParameter(valid_607119, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_607119 != nil:
    section.add "Action", valid_607119
  var valid_607120 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_607120 = validateParameter(valid_607120, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_607120 != nil:
    section.add "GlobalEndpointTokenVersion", valid_607120
  var valid_607121 = query.getOrDefault("Version")
  valid_607121 = validateParameter(valid_607121, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607121 != nil:
    section.add "Version", valid_607121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607122 = header.getOrDefault("X-Amz-Date")
  valid_607122 = validateParameter(valid_607122, JString, required = false,
                                 default = nil)
  if valid_607122 != nil:
    section.add "X-Amz-Date", valid_607122
  var valid_607123 = header.getOrDefault("X-Amz-Security-Token")
  valid_607123 = validateParameter(valid_607123, JString, required = false,
                                 default = nil)
  if valid_607123 != nil:
    section.add "X-Amz-Security-Token", valid_607123
  var valid_607124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607124 = validateParameter(valid_607124, JString, required = false,
                                 default = nil)
  if valid_607124 != nil:
    section.add "X-Amz-Content-Sha256", valid_607124
  var valid_607125 = header.getOrDefault("X-Amz-Algorithm")
  valid_607125 = validateParameter(valid_607125, JString, required = false,
                                 default = nil)
  if valid_607125 != nil:
    section.add "X-Amz-Algorithm", valid_607125
  var valid_607126 = header.getOrDefault("X-Amz-Signature")
  valid_607126 = validateParameter(valid_607126, JString, required = false,
                                 default = nil)
  if valid_607126 != nil:
    section.add "X-Amz-Signature", valid_607126
  var valid_607127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607127 = validateParameter(valid_607127, JString, required = false,
                                 default = nil)
  if valid_607127 != nil:
    section.add "X-Amz-SignedHeaders", valid_607127
  var valid_607128 = header.getOrDefault("X-Amz-Credential")
  valid_607128 = validateParameter(valid_607128, JString, required = false,
                                 default = nil)
  if valid_607128 != nil:
    section.add "X-Amz-Credential", valid_607128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607129: Call_GetSetSecurityTokenServicePreferences_607116;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_607129.validator(path, query, header, formData, body)
  let scheme = call_607129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607129.url(scheme.get, call_607129.host, call_607129.base,
                         call_607129.route, valid.getOrDefault("path"))
  result = hook(call_607129, url, valid)

proc call*(call_607130: Call_GetSetSecurityTokenServicePreferences_607116;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_607131 = newJObject()
  add(query_607131, "Action", newJString(Action))
  add(query_607131, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_607131, "Version", newJString(Version))
  result = call_607130.call(nil, query_607131, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_607116(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_607117, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_607118,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_607174 = ref object of OpenApiRestCall_602433
proc url_PostSimulateCustomPolicy_607176(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulateCustomPolicy_607175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607177 = query.getOrDefault("Action")
  valid_607177 = validateParameter(valid_607177, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_607177 != nil:
    section.add "Action", valid_607177
  var valid_607178 = query.getOrDefault("Version")
  valid_607178 = validateParameter(valid_607178, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607178 != nil:
    section.add "Version", valid_607178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607179 = header.getOrDefault("X-Amz-Date")
  valid_607179 = validateParameter(valid_607179, JString, required = false,
                                 default = nil)
  if valid_607179 != nil:
    section.add "X-Amz-Date", valid_607179
  var valid_607180 = header.getOrDefault("X-Amz-Security-Token")
  valid_607180 = validateParameter(valid_607180, JString, required = false,
                                 default = nil)
  if valid_607180 != nil:
    section.add "X-Amz-Security-Token", valid_607180
  var valid_607181 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Content-Sha256", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Algorithm")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Algorithm", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Signature")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Signature", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-SignedHeaders", valid_607184
  var valid_607185 = header.getOrDefault("X-Amz-Credential")
  valid_607185 = validateParameter(valid_607185, JString, required = false,
                                 default = nil)
  if valid_607185 != nil:
    section.add "X-Amz-Credential", valid_607185
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_607186 = formData.getOrDefault("ResourceArns")
  valid_607186 = validateParameter(valid_607186, JArray, required = false,
                                 default = nil)
  if valid_607186 != nil:
    section.add "ResourceArns", valid_607186
  var valid_607187 = formData.getOrDefault("ContextEntries")
  valid_607187 = validateParameter(valid_607187, JArray, required = false,
                                 default = nil)
  if valid_607187 != nil:
    section.add "ContextEntries", valid_607187
  var valid_607188 = formData.getOrDefault("CallerArn")
  valid_607188 = validateParameter(valid_607188, JString, required = false,
                                 default = nil)
  if valid_607188 != nil:
    section.add "CallerArn", valid_607188
  var valid_607189 = formData.getOrDefault("ResourceOwner")
  valid_607189 = validateParameter(valid_607189, JString, required = false,
                                 default = nil)
  if valid_607189 != nil:
    section.add "ResourceOwner", valid_607189
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_607190 = formData.getOrDefault("ActionNames")
  valid_607190 = validateParameter(valid_607190, JArray, required = true, default = nil)
  if valid_607190 != nil:
    section.add "ActionNames", valid_607190
  var valid_607191 = formData.getOrDefault("Marker")
  valid_607191 = validateParameter(valid_607191, JString, required = false,
                                 default = nil)
  if valid_607191 != nil:
    section.add "Marker", valid_607191
  var valid_607192 = formData.getOrDefault("PolicyInputList")
  valid_607192 = validateParameter(valid_607192, JArray, required = true, default = nil)
  if valid_607192 != nil:
    section.add "PolicyInputList", valid_607192
  var valid_607193 = formData.getOrDefault("ResourceHandlingOption")
  valid_607193 = validateParameter(valid_607193, JString, required = false,
                                 default = nil)
  if valid_607193 != nil:
    section.add "ResourceHandlingOption", valid_607193
  var valid_607194 = formData.getOrDefault("MaxItems")
  valid_607194 = validateParameter(valid_607194, JInt, required = false, default = nil)
  if valid_607194 != nil:
    section.add "MaxItems", valid_607194
  var valid_607195 = formData.getOrDefault("ResourcePolicy")
  valid_607195 = validateParameter(valid_607195, JString, required = false,
                                 default = nil)
  if valid_607195 != nil:
    section.add "ResourcePolicy", valid_607195
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607196: Call_PostSimulateCustomPolicy_607174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_607196.validator(path, query, header, formData, body)
  let scheme = call_607196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607196.url(scheme.get, call_607196.host, call_607196.base,
                         call_607196.route, valid.getOrDefault("path"))
  result = hook(call_607196, url, valid)

proc call*(call_607197: Call_PostSimulateCustomPolicy_607174;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulateCustomPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_607198 = newJObject()
  var formData_607199 = newJObject()
  if ResourceArns != nil:
    formData_607199.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_607199.add "ContextEntries", ContextEntries
  add(formData_607199, "CallerArn", newJString(CallerArn))
  add(formData_607199, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_607199.add "ActionNames", ActionNames
  add(formData_607199, "Marker", newJString(Marker))
  add(query_607198, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_607199.add "PolicyInputList", PolicyInputList
  add(formData_607199, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_607199, "MaxItems", newJInt(MaxItems))
  add(formData_607199, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_607198, "Version", newJString(Version))
  result = call_607197.call(nil, query_607198, nil, formData_607199, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_607174(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_607175, base: "/",
    url: url_PostSimulateCustomPolicy_607176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_607149 = ref object of OpenApiRestCall_602433
proc url_GetSimulateCustomPolicy_607151(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulateCustomPolicy_607150(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607152 = query.getOrDefault("ContextEntries")
  valid_607152 = validateParameter(valid_607152, JArray, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "ContextEntries", valid_607152
  var valid_607153 = query.getOrDefault("ResourcePolicy")
  valid_607153 = validateParameter(valid_607153, JString, required = false,
                                 default = nil)
  if valid_607153 != nil:
    section.add "ResourcePolicy", valid_607153
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_607154 = query.getOrDefault("ActionNames")
  valid_607154 = validateParameter(valid_607154, JArray, required = true, default = nil)
  if valid_607154 != nil:
    section.add "ActionNames", valid_607154
  var valid_607155 = query.getOrDefault("PolicyInputList")
  valid_607155 = validateParameter(valid_607155, JArray, required = true, default = nil)
  if valid_607155 != nil:
    section.add "PolicyInputList", valid_607155
  var valid_607156 = query.getOrDefault("Action")
  valid_607156 = validateParameter(valid_607156, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_607156 != nil:
    section.add "Action", valid_607156
  var valid_607157 = query.getOrDefault("ResourceArns")
  valid_607157 = validateParameter(valid_607157, JArray, required = false,
                                 default = nil)
  if valid_607157 != nil:
    section.add "ResourceArns", valid_607157
  var valid_607158 = query.getOrDefault("Marker")
  valid_607158 = validateParameter(valid_607158, JString, required = false,
                                 default = nil)
  if valid_607158 != nil:
    section.add "Marker", valid_607158
  var valid_607159 = query.getOrDefault("ResourceOwner")
  valid_607159 = validateParameter(valid_607159, JString, required = false,
                                 default = nil)
  if valid_607159 != nil:
    section.add "ResourceOwner", valid_607159
  var valid_607160 = query.getOrDefault("CallerArn")
  valid_607160 = validateParameter(valid_607160, JString, required = false,
                                 default = nil)
  if valid_607160 != nil:
    section.add "CallerArn", valid_607160
  var valid_607161 = query.getOrDefault("ResourceHandlingOption")
  valid_607161 = validateParameter(valid_607161, JString, required = false,
                                 default = nil)
  if valid_607161 != nil:
    section.add "ResourceHandlingOption", valid_607161
  var valid_607162 = query.getOrDefault("MaxItems")
  valid_607162 = validateParameter(valid_607162, JInt, required = false, default = nil)
  if valid_607162 != nil:
    section.add "MaxItems", valid_607162
  var valid_607163 = query.getOrDefault("Version")
  valid_607163 = validateParameter(valid_607163, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607163 != nil:
    section.add "Version", valid_607163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607164 = header.getOrDefault("X-Amz-Date")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "X-Amz-Date", valid_607164
  var valid_607165 = header.getOrDefault("X-Amz-Security-Token")
  valid_607165 = validateParameter(valid_607165, JString, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "X-Amz-Security-Token", valid_607165
  var valid_607166 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "X-Amz-Content-Sha256", valid_607166
  var valid_607167 = header.getOrDefault("X-Amz-Algorithm")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-Algorithm", valid_607167
  var valid_607168 = header.getOrDefault("X-Amz-Signature")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "X-Amz-Signature", valid_607168
  var valid_607169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-SignedHeaders", valid_607169
  var valid_607170 = header.getOrDefault("X-Amz-Credential")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "X-Amz-Credential", valid_607170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607171: Call_GetSimulateCustomPolicy_607149; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_607171.validator(path, query, header, formData, body)
  let scheme = call_607171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607171.url(scheme.get, call_607171.host, call_607171.base,
                         call_607171.route, valid.getOrDefault("path"))
  result = hook(call_607171, url, valid)

proc call*(call_607172: Call_GetSimulateCustomPolicy_607149; ActionNames: JsonNode;
          PolicyInputList: JsonNode; ContextEntries: JsonNode = nil;
          ResourcePolicy: string = ""; Action: string = "SimulateCustomPolicy";
          ResourceArns: JsonNode = nil; Marker: string = ""; ResourceOwner: string = "";
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_607173 = newJObject()
  if ContextEntries != nil:
    query_607173.add "ContextEntries", ContextEntries
  add(query_607173, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_607173.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_607173.add "PolicyInputList", PolicyInputList
  add(query_607173, "Action", newJString(Action))
  if ResourceArns != nil:
    query_607173.add "ResourceArns", ResourceArns
  add(query_607173, "Marker", newJString(Marker))
  add(query_607173, "ResourceOwner", newJString(ResourceOwner))
  add(query_607173, "CallerArn", newJString(CallerArn))
  add(query_607173, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_607173, "MaxItems", newJInt(MaxItems))
  add(query_607173, "Version", newJString(Version))
  result = call_607172.call(nil, query_607173, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_607149(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_607150, base: "/",
    url: url_GetSimulateCustomPolicy_607151, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_607226 = ref object of OpenApiRestCall_602433
proc url_PostSimulatePrincipalPolicy_607228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulatePrincipalPolicy_607227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607229 = query.getOrDefault("Action")
  valid_607229 = validateParameter(valid_607229, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_607229 != nil:
    section.add "Action", valid_607229
  var valid_607230 = query.getOrDefault("Version")
  valid_607230 = validateParameter(valid_607230, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607230 != nil:
    section.add "Version", valid_607230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607231 = header.getOrDefault("X-Amz-Date")
  valid_607231 = validateParameter(valid_607231, JString, required = false,
                                 default = nil)
  if valid_607231 != nil:
    section.add "X-Amz-Date", valid_607231
  var valid_607232 = header.getOrDefault("X-Amz-Security-Token")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "X-Amz-Security-Token", valid_607232
  var valid_607233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607233 = validateParameter(valid_607233, JString, required = false,
                                 default = nil)
  if valid_607233 != nil:
    section.add "X-Amz-Content-Sha256", valid_607233
  var valid_607234 = header.getOrDefault("X-Amz-Algorithm")
  valid_607234 = validateParameter(valid_607234, JString, required = false,
                                 default = nil)
  if valid_607234 != nil:
    section.add "X-Amz-Algorithm", valid_607234
  var valid_607235 = header.getOrDefault("X-Amz-Signature")
  valid_607235 = validateParameter(valid_607235, JString, required = false,
                                 default = nil)
  if valid_607235 != nil:
    section.add "X-Amz-Signature", valid_607235
  var valid_607236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607236 = validateParameter(valid_607236, JString, required = false,
                                 default = nil)
  if valid_607236 != nil:
    section.add "X-Amz-SignedHeaders", valid_607236
  var valid_607237 = header.getOrDefault("X-Amz-Credential")
  valid_607237 = validateParameter(valid_607237, JString, required = false,
                                 default = nil)
  if valid_607237 != nil:
    section.add "X-Amz-Credential", valid_607237
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_607238 = formData.getOrDefault("ResourceArns")
  valid_607238 = validateParameter(valid_607238, JArray, required = false,
                                 default = nil)
  if valid_607238 != nil:
    section.add "ResourceArns", valid_607238
  var valid_607239 = formData.getOrDefault("ContextEntries")
  valid_607239 = validateParameter(valid_607239, JArray, required = false,
                                 default = nil)
  if valid_607239 != nil:
    section.add "ContextEntries", valid_607239
  var valid_607240 = formData.getOrDefault("CallerArn")
  valid_607240 = validateParameter(valid_607240, JString, required = false,
                                 default = nil)
  if valid_607240 != nil:
    section.add "CallerArn", valid_607240
  var valid_607241 = formData.getOrDefault("ResourceOwner")
  valid_607241 = validateParameter(valid_607241, JString, required = false,
                                 default = nil)
  if valid_607241 != nil:
    section.add "ResourceOwner", valid_607241
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_607242 = formData.getOrDefault("ActionNames")
  valid_607242 = validateParameter(valid_607242, JArray, required = true, default = nil)
  if valid_607242 != nil:
    section.add "ActionNames", valid_607242
  var valid_607243 = formData.getOrDefault("Marker")
  valid_607243 = validateParameter(valid_607243, JString, required = false,
                                 default = nil)
  if valid_607243 != nil:
    section.add "Marker", valid_607243
  var valid_607244 = formData.getOrDefault("PolicyInputList")
  valid_607244 = validateParameter(valid_607244, JArray, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "PolicyInputList", valid_607244
  var valid_607245 = formData.getOrDefault("ResourceHandlingOption")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "ResourceHandlingOption", valid_607245
  var valid_607246 = formData.getOrDefault("PolicySourceArn")
  valid_607246 = validateParameter(valid_607246, JString, required = true,
                                 default = nil)
  if valid_607246 != nil:
    section.add "PolicySourceArn", valid_607246
  var valid_607247 = formData.getOrDefault("MaxItems")
  valid_607247 = validateParameter(valid_607247, JInt, required = false, default = nil)
  if valid_607247 != nil:
    section.add "MaxItems", valid_607247
  var valid_607248 = formData.getOrDefault("ResourcePolicy")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "ResourcePolicy", valid_607248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607249: Call_PostSimulatePrincipalPolicy_607226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_607249.validator(path, query, header, formData, body)
  let scheme = call_607249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607249.url(scheme.get, call_607249.host, call_607249.base,
                         call_607249.route, valid.getOrDefault("path"))
  result = hook(call_607249, url, valid)

proc call*(call_607250: Call_PostSimulatePrincipalPolicy_607226;
          ActionNames: JsonNode; PolicySourceArn: string;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy";
          PolicyInputList: JsonNode = nil; ResourceHandlingOption: string = "";
          MaxItems: int = 0; ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_607251 = newJObject()
  var formData_607252 = newJObject()
  if ResourceArns != nil:
    formData_607252.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_607252.add "ContextEntries", ContextEntries
  add(formData_607252, "CallerArn", newJString(CallerArn))
  add(formData_607252, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_607252.add "ActionNames", ActionNames
  add(formData_607252, "Marker", newJString(Marker))
  add(query_607251, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_607252.add "PolicyInputList", PolicyInputList
  add(formData_607252, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_607252, "PolicySourceArn", newJString(PolicySourceArn))
  add(formData_607252, "MaxItems", newJInt(MaxItems))
  add(formData_607252, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_607251, "Version", newJString(Version))
  result = call_607250.call(nil, query_607251, nil, formData_607252, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_607226(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_607227, base: "/",
    url: url_PostSimulatePrincipalPolicy_607228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_607200 = ref object of OpenApiRestCall_602433
proc url_GetSimulatePrincipalPolicy_607202(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulatePrincipalPolicy_607201(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607203 = query.getOrDefault("ContextEntries")
  valid_607203 = validateParameter(valid_607203, JArray, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "ContextEntries", valid_607203
  var valid_607204 = query.getOrDefault("ResourcePolicy")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "ResourcePolicy", valid_607204
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_607205 = query.getOrDefault("ActionNames")
  valid_607205 = validateParameter(valid_607205, JArray, required = true, default = nil)
  if valid_607205 != nil:
    section.add "ActionNames", valid_607205
  var valid_607206 = query.getOrDefault("PolicyInputList")
  valid_607206 = validateParameter(valid_607206, JArray, required = false,
                                 default = nil)
  if valid_607206 != nil:
    section.add "PolicyInputList", valid_607206
  var valid_607207 = query.getOrDefault("PolicySourceArn")
  valid_607207 = validateParameter(valid_607207, JString, required = true,
                                 default = nil)
  if valid_607207 != nil:
    section.add "PolicySourceArn", valid_607207
  var valid_607208 = query.getOrDefault("Action")
  valid_607208 = validateParameter(valid_607208, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_607208 != nil:
    section.add "Action", valid_607208
  var valid_607209 = query.getOrDefault("ResourceArns")
  valid_607209 = validateParameter(valid_607209, JArray, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "ResourceArns", valid_607209
  var valid_607210 = query.getOrDefault("Marker")
  valid_607210 = validateParameter(valid_607210, JString, required = false,
                                 default = nil)
  if valid_607210 != nil:
    section.add "Marker", valid_607210
  var valid_607211 = query.getOrDefault("ResourceOwner")
  valid_607211 = validateParameter(valid_607211, JString, required = false,
                                 default = nil)
  if valid_607211 != nil:
    section.add "ResourceOwner", valid_607211
  var valid_607212 = query.getOrDefault("CallerArn")
  valid_607212 = validateParameter(valid_607212, JString, required = false,
                                 default = nil)
  if valid_607212 != nil:
    section.add "CallerArn", valid_607212
  var valid_607213 = query.getOrDefault("ResourceHandlingOption")
  valid_607213 = validateParameter(valid_607213, JString, required = false,
                                 default = nil)
  if valid_607213 != nil:
    section.add "ResourceHandlingOption", valid_607213
  var valid_607214 = query.getOrDefault("MaxItems")
  valid_607214 = validateParameter(valid_607214, JInt, required = false, default = nil)
  if valid_607214 != nil:
    section.add "MaxItems", valid_607214
  var valid_607215 = query.getOrDefault("Version")
  valid_607215 = validateParameter(valid_607215, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607215 != nil:
    section.add "Version", valid_607215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607216 = header.getOrDefault("X-Amz-Date")
  valid_607216 = validateParameter(valid_607216, JString, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "X-Amz-Date", valid_607216
  var valid_607217 = header.getOrDefault("X-Amz-Security-Token")
  valid_607217 = validateParameter(valid_607217, JString, required = false,
                                 default = nil)
  if valid_607217 != nil:
    section.add "X-Amz-Security-Token", valid_607217
  var valid_607218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Content-Sha256", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-Algorithm")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-Algorithm", valid_607219
  var valid_607220 = header.getOrDefault("X-Amz-Signature")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "X-Amz-Signature", valid_607220
  var valid_607221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607221 = validateParameter(valid_607221, JString, required = false,
                                 default = nil)
  if valid_607221 != nil:
    section.add "X-Amz-SignedHeaders", valid_607221
  var valid_607222 = header.getOrDefault("X-Amz-Credential")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "X-Amz-Credential", valid_607222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607223: Call_GetSimulatePrincipalPolicy_607200; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_607223.validator(path, query, header, formData, body)
  let scheme = call_607223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607223.url(scheme.get, call_607223.host, call_607223.base,
                         call_607223.route, valid.getOrDefault("path"))
  result = hook(call_607223, url, valid)

proc call*(call_607224: Call_GetSimulatePrincipalPolicy_607200;
          ActionNames: JsonNode; PolicySourceArn: string;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_607225 = newJObject()
  if ContextEntries != nil:
    query_607225.add "ContextEntries", ContextEntries
  add(query_607225, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_607225.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_607225.add "PolicyInputList", PolicyInputList
  add(query_607225, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_607225, "Action", newJString(Action))
  if ResourceArns != nil:
    query_607225.add "ResourceArns", ResourceArns
  add(query_607225, "Marker", newJString(Marker))
  add(query_607225, "ResourceOwner", newJString(ResourceOwner))
  add(query_607225, "CallerArn", newJString(CallerArn))
  add(query_607225, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_607225, "MaxItems", newJInt(MaxItems))
  add(query_607225, "Version", newJString(Version))
  result = call_607224.call(nil, query_607225, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_607200(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_607201, base: "/",
    url: url_GetSimulatePrincipalPolicy_607202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_607270 = ref object of OpenApiRestCall_602433
proc url_PostTagRole_607272(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagRole_607271(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607273 = query.getOrDefault("Action")
  valid_607273 = validateParameter(valid_607273, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_607273 != nil:
    section.add "Action", valid_607273
  var valid_607274 = query.getOrDefault("Version")
  valid_607274 = validateParameter(valid_607274, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607274 != nil:
    section.add "Version", valid_607274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607275 = header.getOrDefault("X-Amz-Date")
  valid_607275 = validateParameter(valid_607275, JString, required = false,
                                 default = nil)
  if valid_607275 != nil:
    section.add "X-Amz-Date", valid_607275
  var valid_607276 = header.getOrDefault("X-Amz-Security-Token")
  valid_607276 = validateParameter(valid_607276, JString, required = false,
                                 default = nil)
  if valid_607276 != nil:
    section.add "X-Amz-Security-Token", valid_607276
  var valid_607277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607277 = validateParameter(valid_607277, JString, required = false,
                                 default = nil)
  if valid_607277 != nil:
    section.add "X-Amz-Content-Sha256", valid_607277
  var valid_607278 = header.getOrDefault("X-Amz-Algorithm")
  valid_607278 = validateParameter(valid_607278, JString, required = false,
                                 default = nil)
  if valid_607278 != nil:
    section.add "X-Amz-Algorithm", valid_607278
  var valid_607279 = header.getOrDefault("X-Amz-Signature")
  valid_607279 = validateParameter(valid_607279, JString, required = false,
                                 default = nil)
  if valid_607279 != nil:
    section.add "X-Amz-Signature", valid_607279
  var valid_607280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "X-Amz-SignedHeaders", valid_607280
  var valid_607281 = header.getOrDefault("X-Amz-Credential")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "X-Amz-Credential", valid_607281
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607282 = formData.getOrDefault("RoleName")
  valid_607282 = validateParameter(valid_607282, JString, required = true,
                                 default = nil)
  if valid_607282 != nil:
    section.add "RoleName", valid_607282
  var valid_607283 = formData.getOrDefault("Tags")
  valid_607283 = validateParameter(valid_607283, JArray, required = true, default = nil)
  if valid_607283 != nil:
    section.add "Tags", valid_607283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607284: Call_PostTagRole_607270; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607284.validator(path, query, header, formData, body)
  let scheme = call_607284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607284.url(scheme.get, call_607284.host, call_607284.base,
                         call_607284.route, valid.getOrDefault("path"))
  result = hook(call_607284, url, valid)

proc call*(call_607285: Call_PostTagRole_607270; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607286 = newJObject()
  var formData_607287 = newJObject()
  add(formData_607287, "RoleName", newJString(RoleName))
  if Tags != nil:
    formData_607287.add "Tags", Tags
  add(query_607286, "Action", newJString(Action))
  add(query_607286, "Version", newJString(Version))
  result = call_607285.call(nil, query_607286, nil, formData_607287, nil)

var postTagRole* = Call_PostTagRole_607270(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_607271,
                                        base: "/", url: url_PostTagRole_607272,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_607253 = ref object of OpenApiRestCall_602433
proc url_GetTagRole_607255(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagRole_607254(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_607256 = query.getOrDefault("Tags")
  valid_607256 = validateParameter(valid_607256, JArray, required = true, default = nil)
  if valid_607256 != nil:
    section.add "Tags", valid_607256
  var valid_607257 = query.getOrDefault("Action")
  valid_607257 = validateParameter(valid_607257, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_607257 != nil:
    section.add "Action", valid_607257
  var valid_607258 = query.getOrDefault("RoleName")
  valid_607258 = validateParameter(valid_607258, JString, required = true,
                                 default = nil)
  if valid_607258 != nil:
    section.add "RoleName", valid_607258
  var valid_607259 = query.getOrDefault("Version")
  valid_607259 = validateParameter(valid_607259, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607259 != nil:
    section.add "Version", valid_607259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607260 = header.getOrDefault("X-Amz-Date")
  valid_607260 = validateParameter(valid_607260, JString, required = false,
                                 default = nil)
  if valid_607260 != nil:
    section.add "X-Amz-Date", valid_607260
  var valid_607261 = header.getOrDefault("X-Amz-Security-Token")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Security-Token", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Content-Sha256", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Algorithm")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Algorithm", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Signature")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Signature", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-SignedHeaders", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-Credential")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-Credential", valid_607266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607267: Call_GetTagRole_607253; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607267.validator(path, query, header, formData, body)
  let scheme = call_607267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607267.url(scheme.get, call_607267.host, call_607267.base,
                         call_607267.route, valid.getOrDefault("path"))
  result = hook(call_607267, url, valid)

proc call*(call_607268: Call_GetTagRole_607253; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_607269 = newJObject()
  if Tags != nil:
    query_607269.add "Tags", Tags
  add(query_607269, "Action", newJString(Action))
  add(query_607269, "RoleName", newJString(RoleName))
  add(query_607269, "Version", newJString(Version))
  result = call_607268.call(nil, query_607269, nil, nil, nil)

var getTagRole* = Call_GetTagRole_607253(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_607254,
                                      base: "/", url: url_GetTagRole_607255,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_607305 = ref object of OpenApiRestCall_602433
proc url_PostTagUser_607307(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagUser_607306(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607308 = query.getOrDefault("Action")
  valid_607308 = validateParameter(valid_607308, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_607308 != nil:
    section.add "Action", valid_607308
  var valid_607309 = query.getOrDefault("Version")
  valid_607309 = validateParameter(valid_607309, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607309 != nil:
    section.add "Version", valid_607309
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607310 = header.getOrDefault("X-Amz-Date")
  valid_607310 = validateParameter(valid_607310, JString, required = false,
                                 default = nil)
  if valid_607310 != nil:
    section.add "X-Amz-Date", valid_607310
  var valid_607311 = header.getOrDefault("X-Amz-Security-Token")
  valid_607311 = validateParameter(valid_607311, JString, required = false,
                                 default = nil)
  if valid_607311 != nil:
    section.add "X-Amz-Security-Token", valid_607311
  var valid_607312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607312 = validateParameter(valid_607312, JString, required = false,
                                 default = nil)
  if valid_607312 != nil:
    section.add "X-Amz-Content-Sha256", valid_607312
  var valid_607313 = header.getOrDefault("X-Amz-Algorithm")
  valid_607313 = validateParameter(valid_607313, JString, required = false,
                                 default = nil)
  if valid_607313 != nil:
    section.add "X-Amz-Algorithm", valid_607313
  var valid_607314 = header.getOrDefault("X-Amz-Signature")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "X-Amz-Signature", valid_607314
  var valid_607315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607315 = validateParameter(valid_607315, JString, required = false,
                                 default = nil)
  if valid_607315 != nil:
    section.add "X-Amz-SignedHeaders", valid_607315
  var valid_607316 = header.getOrDefault("X-Amz-Credential")
  valid_607316 = validateParameter(valid_607316, JString, required = false,
                                 default = nil)
  if valid_607316 != nil:
    section.add "X-Amz-Credential", valid_607316
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607317 = formData.getOrDefault("UserName")
  valid_607317 = validateParameter(valid_607317, JString, required = true,
                                 default = nil)
  if valid_607317 != nil:
    section.add "UserName", valid_607317
  var valid_607318 = formData.getOrDefault("Tags")
  valid_607318 = validateParameter(valid_607318, JArray, required = true, default = nil)
  if valid_607318 != nil:
    section.add "Tags", valid_607318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607319: Call_PostTagUser_607305; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607319.validator(path, query, header, formData, body)
  let scheme = call_607319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607319.url(scheme.get, call_607319.host, call_607319.base,
                         call_607319.route, valid.getOrDefault("path"))
  result = hook(call_607319, url, valid)

proc call*(call_607320: Call_PostTagUser_607305; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607321 = newJObject()
  var formData_607322 = newJObject()
  add(formData_607322, "UserName", newJString(UserName))
  if Tags != nil:
    formData_607322.add "Tags", Tags
  add(query_607321, "Action", newJString(Action))
  add(query_607321, "Version", newJString(Version))
  result = call_607320.call(nil, query_607321, nil, formData_607322, nil)

var postTagUser* = Call_PostTagUser_607305(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_607306,
                                        base: "/", url: url_PostTagUser_607307,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_607288 = ref object of OpenApiRestCall_602433
proc url_GetTagUser_607290(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagUser_607289(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_607291 = query.getOrDefault("Tags")
  valid_607291 = validateParameter(valid_607291, JArray, required = true, default = nil)
  if valid_607291 != nil:
    section.add "Tags", valid_607291
  var valid_607292 = query.getOrDefault("UserName")
  valid_607292 = validateParameter(valid_607292, JString, required = true,
                                 default = nil)
  if valid_607292 != nil:
    section.add "UserName", valid_607292
  var valid_607293 = query.getOrDefault("Action")
  valid_607293 = validateParameter(valid_607293, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_607293 != nil:
    section.add "Action", valid_607293
  var valid_607294 = query.getOrDefault("Version")
  valid_607294 = validateParameter(valid_607294, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607294 != nil:
    section.add "Version", valid_607294
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607295 = header.getOrDefault("X-Amz-Date")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Date", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-Security-Token")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-Security-Token", valid_607296
  var valid_607297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607297 = validateParameter(valid_607297, JString, required = false,
                                 default = nil)
  if valid_607297 != nil:
    section.add "X-Amz-Content-Sha256", valid_607297
  var valid_607298 = header.getOrDefault("X-Amz-Algorithm")
  valid_607298 = validateParameter(valid_607298, JString, required = false,
                                 default = nil)
  if valid_607298 != nil:
    section.add "X-Amz-Algorithm", valid_607298
  var valid_607299 = header.getOrDefault("X-Amz-Signature")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Signature", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-SignedHeaders", valid_607300
  var valid_607301 = header.getOrDefault("X-Amz-Credential")
  valid_607301 = validateParameter(valid_607301, JString, required = false,
                                 default = nil)
  if valid_607301 != nil:
    section.add "X-Amz-Credential", valid_607301
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607302: Call_GetTagUser_607288; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607302.validator(path, query, header, formData, body)
  let scheme = call_607302.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607302.url(scheme.get, call_607302.host, call_607302.base,
                         call_607302.route, valid.getOrDefault("path"))
  result = hook(call_607302, url, valid)

proc call*(call_607303: Call_GetTagUser_607288; Tags: JsonNode; UserName: string;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607304 = newJObject()
  if Tags != nil:
    query_607304.add "Tags", Tags
  add(query_607304, "UserName", newJString(UserName))
  add(query_607304, "Action", newJString(Action))
  add(query_607304, "Version", newJString(Version))
  result = call_607303.call(nil, query_607304, nil, nil, nil)

var getTagUser* = Call_GetTagUser_607288(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_607289,
                                      base: "/", url: url_GetTagUser_607290,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_607340 = ref object of OpenApiRestCall_602433
proc url_PostUntagRole_607342(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagRole_607341(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607343 = query.getOrDefault("Action")
  valid_607343 = validateParameter(valid_607343, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_607343 != nil:
    section.add "Action", valid_607343
  var valid_607344 = query.getOrDefault("Version")
  valid_607344 = validateParameter(valid_607344, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607344 != nil:
    section.add "Version", valid_607344
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607345 = header.getOrDefault("X-Amz-Date")
  valid_607345 = validateParameter(valid_607345, JString, required = false,
                                 default = nil)
  if valid_607345 != nil:
    section.add "X-Amz-Date", valid_607345
  var valid_607346 = header.getOrDefault("X-Amz-Security-Token")
  valid_607346 = validateParameter(valid_607346, JString, required = false,
                                 default = nil)
  if valid_607346 != nil:
    section.add "X-Amz-Security-Token", valid_607346
  var valid_607347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607347 = validateParameter(valid_607347, JString, required = false,
                                 default = nil)
  if valid_607347 != nil:
    section.add "X-Amz-Content-Sha256", valid_607347
  var valid_607348 = header.getOrDefault("X-Amz-Algorithm")
  valid_607348 = validateParameter(valid_607348, JString, required = false,
                                 default = nil)
  if valid_607348 != nil:
    section.add "X-Amz-Algorithm", valid_607348
  var valid_607349 = header.getOrDefault("X-Amz-Signature")
  valid_607349 = validateParameter(valid_607349, JString, required = false,
                                 default = nil)
  if valid_607349 != nil:
    section.add "X-Amz-Signature", valid_607349
  var valid_607350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607350 = validateParameter(valid_607350, JString, required = false,
                                 default = nil)
  if valid_607350 != nil:
    section.add "X-Amz-SignedHeaders", valid_607350
  var valid_607351 = header.getOrDefault("X-Amz-Credential")
  valid_607351 = validateParameter(valid_607351, JString, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "X-Amz-Credential", valid_607351
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607352 = formData.getOrDefault("RoleName")
  valid_607352 = validateParameter(valid_607352, JString, required = true,
                                 default = nil)
  if valid_607352 != nil:
    section.add "RoleName", valid_607352
  var valid_607353 = formData.getOrDefault("TagKeys")
  valid_607353 = validateParameter(valid_607353, JArray, required = true, default = nil)
  if valid_607353 != nil:
    section.add "TagKeys", valid_607353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607354: Call_PostUntagRole_607340; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607354.validator(path, query, header, formData, body)
  let scheme = call_607354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607354.url(scheme.get, call_607354.host, call_607354.base,
                         call_607354.route, valid.getOrDefault("path"))
  result = hook(call_607354, url, valid)

proc call*(call_607355: Call_PostUntagRole_607340; RoleName: string;
          TagKeys: JsonNode; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   Version: string (required)
  var query_607356 = newJObject()
  var formData_607357 = newJObject()
  add(formData_607357, "RoleName", newJString(RoleName))
  add(query_607356, "Action", newJString(Action))
  if TagKeys != nil:
    formData_607357.add "TagKeys", TagKeys
  add(query_607356, "Version", newJString(Version))
  result = call_607355.call(nil, query_607356, nil, formData_607357, nil)

var postUntagRole* = Call_PostUntagRole_607340(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_607341,
    base: "/", url: url_PostUntagRole_607342, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_607323 = ref object of OpenApiRestCall_602433
proc url_GetUntagRole_607325(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagRole_607324(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607326 = query.getOrDefault("Action")
  valid_607326 = validateParameter(valid_607326, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_607326 != nil:
    section.add "Action", valid_607326
  var valid_607327 = query.getOrDefault("TagKeys")
  valid_607327 = validateParameter(valid_607327, JArray, required = true, default = nil)
  if valid_607327 != nil:
    section.add "TagKeys", valid_607327
  var valid_607328 = query.getOrDefault("RoleName")
  valid_607328 = validateParameter(valid_607328, JString, required = true,
                                 default = nil)
  if valid_607328 != nil:
    section.add "RoleName", valid_607328
  var valid_607329 = query.getOrDefault("Version")
  valid_607329 = validateParameter(valid_607329, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607329 != nil:
    section.add "Version", valid_607329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607330 = header.getOrDefault("X-Amz-Date")
  valid_607330 = validateParameter(valid_607330, JString, required = false,
                                 default = nil)
  if valid_607330 != nil:
    section.add "X-Amz-Date", valid_607330
  var valid_607331 = header.getOrDefault("X-Amz-Security-Token")
  valid_607331 = validateParameter(valid_607331, JString, required = false,
                                 default = nil)
  if valid_607331 != nil:
    section.add "X-Amz-Security-Token", valid_607331
  var valid_607332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607332 = validateParameter(valid_607332, JString, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "X-Amz-Content-Sha256", valid_607332
  var valid_607333 = header.getOrDefault("X-Amz-Algorithm")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "X-Amz-Algorithm", valid_607333
  var valid_607334 = header.getOrDefault("X-Amz-Signature")
  valid_607334 = validateParameter(valid_607334, JString, required = false,
                                 default = nil)
  if valid_607334 != nil:
    section.add "X-Amz-Signature", valid_607334
  var valid_607335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607335 = validateParameter(valid_607335, JString, required = false,
                                 default = nil)
  if valid_607335 != nil:
    section.add "X-Amz-SignedHeaders", valid_607335
  var valid_607336 = header.getOrDefault("X-Amz-Credential")
  valid_607336 = validateParameter(valid_607336, JString, required = false,
                                 default = nil)
  if valid_607336 != nil:
    section.add "X-Amz-Credential", valid_607336
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607337: Call_GetUntagRole_607323; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607337.validator(path, query, header, formData, body)
  let scheme = call_607337.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607337.url(scheme.get, call_607337.host, call_607337.base,
                         call_607337.route, valid.getOrDefault("path"))
  result = hook(call_607337, url, valid)

proc call*(call_607338: Call_GetUntagRole_607323; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_607339 = newJObject()
  add(query_607339, "Action", newJString(Action))
  if TagKeys != nil:
    query_607339.add "TagKeys", TagKeys
  add(query_607339, "RoleName", newJString(RoleName))
  add(query_607339, "Version", newJString(Version))
  result = call_607338.call(nil, query_607339, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_607323(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_607324, base: "/",
    url: url_GetUntagRole_607325, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_607375 = ref object of OpenApiRestCall_602433
proc url_PostUntagUser_607377(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagUser_607376(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607378 = query.getOrDefault("Action")
  valid_607378 = validateParameter(valid_607378, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_607378 != nil:
    section.add "Action", valid_607378
  var valid_607379 = query.getOrDefault("Version")
  valid_607379 = validateParameter(valid_607379, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607379 != nil:
    section.add "Version", valid_607379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607380 = header.getOrDefault("X-Amz-Date")
  valid_607380 = validateParameter(valid_607380, JString, required = false,
                                 default = nil)
  if valid_607380 != nil:
    section.add "X-Amz-Date", valid_607380
  var valid_607381 = header.getOrDefault("X-Amz-Security-Token")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "X-Amz-Security-Token", valid_607381
  var valid_607382 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607382 = validateParameter(valid_607382, JString, required = false,
                                 default = nil)
  if valid_607382 != nil:
    section.add "X-Amz-Content-Sha256", valid_607382
  var valid_607383 = header.getOrDefault("X-Amz-Algorithm")
  valid_607383 = validateParameter(valid_607383, JString, required = false,
                                 default = nil)
  if valid_607383 != nil:
    section.add "X-Amz-Algorithm", valid_607383
  var valid_607384 = header.getOrDefault("X-Amz-Signature")
  valid_607384 = validateParameter(valid_607384, JString, required = false,
                                 default = nil)
  if valid_607384 != nil:
    section.add "X-Amz-Signature", valid_607384
  var valid_607385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607385 = validateParameter(valid_607385, JString, required = false,
                                 default = nil)
  if valid_607385 != nil:
    section.add "X-Amz-SignedHeaders", valid_607385
  var valid_607386 = header.getOrDefault("X-Amz-Credential")
  valid_607386 = validateParameter(valid_607386, JString, required = false,
                                 default = nil)
  if valid_607386 != nil:
    section.add "X-Amz-Credential", valid_607386
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607387 = formData.getOrDefault("UserName")
  valid_607387 = validateParameter(valid_607387, JString, required = true,
                                 default = nil)
  if valid_607387 != nil:
    section.add "UserName", valid_607387
  var valid_607388 = formData.getOrDefault("TagKeys")
  valid_607388 = validateParameter(valid_607388, JArray, required = true, default = nil)
  if valid_607388 != nil:
    section.add "TagKeys", valid_607388
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607389: Call_PostUntagUser_607375; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607389.validator(path, query, header, formData, body)
  let scheme = call_607389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607389.url(scheme.get, call_607389.host, call_607389.base,
                         call_607389.route, valid.getOrDefault("path"))
  result = hook(call_607389, url, valid)

proc call*(call_607390: Call_PostUntagUser_607375; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_607391 = newJObject()
  var formData_607392 = newJObject()
  add(formData_607392, "UserName", newJString(UserName))
  add(query_607391, "Action", newJString(Action))
  if TagKeys != nil:
    formData_607392.add "TagKeys", TagKeys
  add(query_607391, "Version", newJString(Version))
  result = call_607390.call(nil, query_607391, nil, formData_607392, nil)

var postUntagUser* = Call_PostUntagUser_607375(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_607376,
    base: "/", url: url_PostUntagUser_607377, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_607358 = ref object of OpenApiRestCall_602433
proc url_GetUntagUser_607360(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagUser_607359(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607361 = query.getOrDefault("UserName")
  valid_607361 = validateParameter(valid_607361, JString, required = true,
                                 default = nil)
  if valid_607361 != nil:
    section.add "UserName", valid_607361
  var valid_607362 = query.getOrDefault("Action")
  valid_607362 = validateParameter(valid_607362, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_607362 != nil:
    section.add "Action", valid_607362
  var valid_607363 = query.getOrDefault("TagKeys")
  valid_607363 = validateParameter(valid_607363, JArray, required = true, default = nil)
  if valid_607363 != nil:
    section.add "TagKeys", valid_607363
  var valid_607364 = query.getOrDefault("Version")
  valid_607364 = validateParameter(valid_607364, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607364 != nil:
    section.add "Version", valid_607364
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607365 = header.getOrDefault("X-Amz-Date")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "X-Amz-Date", valid_607365
  var valid_607366 = header.getOrDefault("X-Amz-Security-Token")
  valid_607366 = validateParameter(valid_607366, JString, required = false,
                                 default = nil)
  if valid_607366 != nil:
    section.add "X-Amz-Security-Token", valid_607366
  var valid_607367 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607367 = validateParameter(valid_607367, JString, required = false,
                                 default = nil)
  if valid_607367 != nil:
    section.add "X-Amz-Content-Sha256", valid_607367
  var valid_607368 = header.getOrDefault("X-Amz-Algorithm")
  valid_607368 = validateParameter(valid_607368, JString, required = false,
                                 default = nil)
  if valid_607368 != nil:
    section.add "X-Amz-Algorithm", valid_607368
  var valid_607369 = header.getOrDefault("X-Amz-Signature")
  valid_607369 = validateParameter(valid_607369, JString, required = false,
                                 default = nil)
  if valid_607369 != nil:
    section.add "X-Amz-Signature", valid_607369
  var valid_607370 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607370 = validateParameter(valid_607370, JString, required = false,
                                 default = nil)
  if valid_607370 != nil:
    section.add "X-Amz-SignedHeaders", valid_607370
  var valid_607371 = header.getOrDefault("X-Amz-Credential")
  valid_607371 = validateParameter(valid_607371, JString, required = false,
                                 default = nil)
  if valid_607371 != nil:
    section.add "X-Amz-Credential", valid_607371
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607372: Call_GetUntagUser_607358; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_607372.validator(path, query, header, formData, body)
  let scheme = call_607372.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607372.url(scheme.get, call_607372.host, call_607372.base,
                         call_607372.route, valid.getOrDefault("path"))
  result = hook(call_607372, url, valid)

proc call*(call_607373: Call_GetUntagUser_607358; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_607374 = newJObject()
  add(query_607374, "UserName", newJString(UserName))
  add(query_607374, "Action", newJString(Action))
  if TagKeys != nil:
    query_607374.add "TagKeys", TagKeys
  add(query_607374, "Version", newJString(Version))
  result = call_607373.call(nil, query_607374, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_607358(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_607359, base: "/",
    url: url_GetUntagUser_607360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_607411 = ref object of OpenApiRestCall_602433
proc url_PostUpdateAccessKey_607413(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccessKey_607412(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607414 = query.getOrDefault("Action")
  valid_607414 = validateParameter(valid_607414, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_607414 != nil:
    section.add "Action", valid_607414
  var valid_607415 = query.getOrDefault("Version")
  valid_607415 = validateParameter(valid_607415, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607415 != nil:
    section.add "Version", valid_607415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607416 = header.getOrDefault("X-Amz-Date")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "X-Amz-Date", valid_607416
  var valid_607417 = header.getOrDefault("X-Amz-Security-Token")
  valid_607417 = validateParameter(valid_607417, JString, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "X-Amz-Security-Token", valid_607417
  var valid_607418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607418 = validateParameter(valid_607418, JString, required = false,
                                 default = nil)
  if valid_607418 != nil:
    section.add "X-Amz-Content-Sha256", valid_607418
  var valid_607419 = header.getOrDefault("X-Amz-Algorithm")
  valid_607419 = validateParameter(valid_607419, JString, required = false,
                                 default = nil)
  if valid_607419 != nil:
    section.add "X-Amz-Algorithm", valid_607419
  var valid_607420 = header.getOrDefault("X-Amz-Signature")
  valid_607420 = validateParameter(valid_607420, JString, required = false,
                                 default = nil)
  if valid_607420 != nil:
    section.add "X-Amz-Signature", valid_607420
  var valid_607421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607421 = validateParameter(valid_607421, JString, required = false,
                                 default = nil)
  if valid_607421 != nil:
    section.add "X-Amz-SignedHeaders", valid_607421
  var valid_607422 = header.getOrDefault("X-Amz-Credential")
  valid_607422 = validateParameter(valid_607422, JString, required = false,
                                 default = nil)
  if valid_607422 != nil:
    section.add "X-Amz-Credential", valid_607422
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  var valid_607423 = formData.getOrDefault("UserName")
  valid_607423 = validateParameter(valid_607423, JString, required = false,
                                 default = nil)
  if valid_607423 != nil:
    section.add "UserName", valid_607423
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_607424 = formData.getOrDefault("AccessKeyId")
  valid_607424 = validateParameter(valid_607424, JString, required = true,
                                 default = nil)
  if valid_607424 != nil:
    section.add "AccessKeyId", valid_607424
  var valid_607425 = formData.getOrDefault("Status")
  valid_607425 = validateParameter(valid_607425, JString, required = true,
                                 default = newJString("Active"))
  if valid_607425 != nil:
    section.add "Status", valid_607425
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607426: Call_PostUpdateAccessKey_607411; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607426.validator(path, query, header, formData, body)
  let scheme = call_607426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607426.url(scheme.get, call_607426.host, call_607426.base,
                         call_607426.route, valid.getOrDefault("path"))
  result = hook(call_607426, url, valid)

proc call*(call_607427: Call_PostUpdateAccessKey_607411; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607428 = newJObject()
  var formData_607429 = newJObject()
  add(formData_607429, "UserName", newJString(UserName))
  add(formData_607429, "AccessKeyId", newJString(AccessKeyId))
  add(formData_607429, "Status", newJString(Status))
  add(query_607428, "Action", newJString(Action))
  add(query_607428, "Version", newJString(Version))
  result = call_607427.call(nil, query_607428, nil, formData_607429, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_607411(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_607412, base: "/",
    url: url_PostUpdateAccessKey_607413, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_607393 = ref object of OpenApiRestCall_602433
proc url_GetUpdateAccessKey_607395(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccessKey_607394(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_607396 = query.getOrDefault("Status")
  valid_607396 = validateParameter(valid_607396, JString, required = true,
                                 default = newJString("Active"))
  if valid_607396 != nil:
    section.add "Status", valid_607396
  var valid_607397 = query.getOrDefault("AccessKeyId")
  valid_607397 = validateParameter(valid_607397, JString, required = true,
                                 default = nil)
  if valid_607397 != nil:
    section.add "AccessKeyId", valid_607397
  var valid_607398 = query.getOrDefault("UserName")
  valid_607398 = validateParameter(valid_607398, JString, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "UserName", valid_607398
  var valid_607399 = query.getOrDefault("Action")
  valid_607399 = validateParameter(valid_607399, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_607399 != nil:
    section.add "Action", valid_607399
  var valid_607400 = query.getOrDefault("Version")
  valid_607400 = validateParameter(valid_607400, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607400 != nil:
    section.add "Version", valid_607400
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607401 = header.getOrDefault("X-Amz-Date")
  valid_607401 = validateParameter(valid_607401, JString, required = false,
                                 default = nil)
  if valid_607401 != nil:
    section.add "X-Amz-Date", valid_607401
  var valid_607402 = header.getOrDefault("X-Amz-Security-Token")
  valid_607402 = validateParameter(valid_607402, JString, required = false,
                                 default = nil)
  if valid_607402 != nil:
    section.add "X-Amz-Security-Token", valid_607402
  var valid_607403 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607403 = validateParameter(valid_607403, JString, required = false,
                                 default = nil)
  if valid_607403 != nil:
    section.add "X-Amz-Content-Sha256", valid_607403
  var valid_607404 = header.getOrDefault("X-Amz-Algorithm")
  valid_607404 = validateParameter(valid_607404, JString, required = false,
                                 default = nil)
  if valid_607404 != nil:
    section.add "X-Amz-Algorithm", valid_607404
  var valid_607405 = header.getOrDefault("X-Amz-Signature")
  valid_607405 = validateParameter(valid_607405, JString, required = false,
                                 default = nil)
  if valid_607405 != nil:
    section.add "X-Amz-Signature", valid_607405
  var valid_607406 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607406 = validateParameter(valid_607406, JString, required = false,
                                 default = nil)
  if valid_607406 != nil:
    section.add "X-Amz-SignedHeaders", valid_607406
  var valid_607407 = header.getOrDefault("X-Amz-Credential")
  valid_607407 = validateParameter(valid_607407, JString, required = false,
                                 default = nil)
  if valid_607407 != nil:
    section.add "X-Amz-Credential", valid_607407
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607408: Call_GetUpdateAccessKey_607393; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607408.validator(path, query, header, formData, body)
  let scheme = call_607408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607408.url(scheme.get, call_607408.host, call_607408.base,
                         call_607408.route, valid.getOrDefault("path"))
  result = hook(call_607408, url, valid)

proc call*(call_607409: Call_GetUpdateAccessKey_607393; AccessKeyId: string;
          Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607410 = newJObject()
  add(query_607410, "Status", newJString(Status))
  add(query_607410, "AccessKeyId", newJString(AccessKeyId))
  add(query_607410, "UserName", newJString(UserName))
  add(query_607410, "Action", newJString(Action))
  add(query_607410, "Version", newJString(Version))
  result = call_607409.call(nil, query_607410, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_607393(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_607394,
    base: "/", url: url_GetUpdateAccessKey_607395,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_607454 = ref object of OpenApiRestCall_602433
proc url_PostUpdateAccountPasswordPolicy_607456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountPasswordPolicy_607455(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607457 = query.getOrDefault("Action")
  valid_607457 = validateParameter(valid_607457, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_607457 != nil:
    section.add "Action", valid_607457
  var valid_607458 = query.getOrDefault("Version")
  valid_607458 = validateParameter(valid_607458, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607458 != nil:
    section.add "Version", valid_607458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607459 = header.getOrDefault("X-Amz-Date")
  valid_607459 = validateParameter(valid_607459, JString, required = false,
                                 default = nil)
  if valid_607459 != nil:
    section.add "X-Amz-Date", valid_607459
  var valid_607460 = header.getOrDefault("X-Amz-Security-Token")
  valid_607460 = validateParameter(valid_607460, JString, required = false,
                                 default = nil)
  if valid_607460 != nil:
    section.add "X-Amz-Security-Token", valid_607460
  var valid_607461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607461 = validateParameter(valid_607461, JString, required = false,
                                 default = nil)
  if valid_607461 != nil:
    section.add "X-Amz-Content-Sha256", valid_607461
  var valid_607462 = header.getOrDefault("X-Amz-Algorithm")
  valid_607462 = validateParameter(valid_607462, JString, required = false,
                                 default = nil)
  if valid_607462 != nil:
    section.add "X-Amz-Algorithm", valid_607462
  var valid_607463 = header.getOrDefault("X-Amz-Signature")
  valid_607463 = validateParameter(valid_607463, JString, required = false,
                                 default = nil)
  if valid_607463 != nil:
    section.add "X-Amz-Signature", valid_607463
  var valid_607464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607464 = validateParameter(valid_607464, JString, required = false,
                                 default = nil)
  if valid_607464 != nil:
    section.add "X-Amz-SignedHeaders", valid_607464
  var valid_607465 = header.getOrDefault("X-Amz-Credential")
  valid_607465 = validateParameter(valid_607465, JString, required = false,
                                 default = nil)
  if valid_607465 != nil:
    section.add "X-Amz-Credential", valid_607465
  result.add "header", section
  ## parameters in `formData` object:
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  section = newJObject()
  var valid_607466 = formData.getOrDefault("RequireNumbers")
  valid_607466 = validateParameter(valid_607466, JBool, required = false, default = nil)
  if valid_607466 != nil:
    section.add "RequireNumbers", valid_607466
  var valid_607467 = formData.getOrDefault("RequireSymbols")
  valid_607467 = validateParameter(valid_607467, JBool, required = false, default = nil)
  if valid_607467 != nil:
    section.add "RequireSymbols", valid_607467
  var valid_607468 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_607468 = validateParameter(valid_607468, JBool, required = false, default = nil)
  if valid_607468 != nil:
    section.add "RequireUppercaseCharacters", valid_607468
  var valid_607469 = formData.getOrDefault("MinimumPasswordLength")
  valid_607469 = validateParameter(valid_607469, JInt, required = false, default = nil)
  if valid_607469 != nil:
    section.add "MinimumPasswordLength", valid_607469
  var valid_607470 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_607470 = validateParameter(valid_607470, JBool, required = false, default = nil)
  if valid_607470 != nil:
    section.add "RequireLowercaseCharacters", valid_607470
  var valid_607471 = formData.getOrDefault("PasswordReusePrevention")
  valid_607471 = validateParameter(valid_607471, JInt, required = false, default = nil)
  if valid_607471 != nil:
    section.add "PasswordReusePrevention", valid_607471
  var valid_607472 = formData.getOrDefault("HardExpiry")
  valid_607472 = validateParameter(valid_607472, JBool, required = false, default = nil)
  if valid_607472 != nil:
    section.add "HardExpiry", valid_607472
  var valid_607473 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_607473 = validateParameter(valid_607473, JBool, required = false, default = nil)
  if valid_607473 != nil:
    section.add "AllowUsersToChangePassword", valid_607473
  var valid_607474 = formData.getOrDefault("MaxPasswordAge")
  valid_607474 = validateParameter(valid_607474, JInt, required = false, default = nil)
  if valid_607474 != nil:
    section.add "MaxPasswordAge", valid_607474
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607475: Call_PostUpdateAccountPasswordPolicy_607454;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607475.validator(path, query, header, formData, body)
  let scheme = call_607475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607475.url(scheme.get, call_607475.host, call_607475.base,
                         call_607475.route, valid.getOrDefault("path"))
  result = hook(call_607475, url, valid)

proc call*(call_607476: Call_PostUpdateAccountPasswordPolicy_607454;
          RequireNumbers: bool = false; RequireSymbols: bool = false;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireLowercaseCharacters: bool = false;
          PasswordReusePrevention: int = 0;
          Action: string = "UpdateAccountPasswordPolicy"; HardExpiry: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Action: string (required)
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  var query_607477 = newJObject()
  var formData_607478 = newJObject()
  add(formData_607478, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_607478, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_607478, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_607478, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(formData_607478, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_607478, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_607477, "Action", newJString(Action))
  add(formData_607478, "HardExpiry", newJBool(HardExpiry))
  add(formData_607478, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_607478, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_607477, "Version", newJString(Version))
  result = call_607476.call(nil, query_607477, nil, formData_607478, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_607454(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_607455, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_607456,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_607430 = ref object of OpenApiRestCall_602433
proc url_GetUpdateAccountPasswordPolicy_607432(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountPasswordPolicy_607431(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: JString (required)
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_607433 = query.getOrDefault("RequireLowercaseCharacters")
  valid_607433 = validateParameter(valid_607433, JBool, required = false, default = nil)
  if valid_607433 != nil:
    section.add "RequireLowercaseCharacters", valid_607433
  var valid_607434 = query.getOrDefault("RequireSymbols")
  valid_607434 = validateParameter(valid_607434, JBool, required = false, default = nil)
  if valid_607434 != nil:
    section.add "RequireSymbols", valid_607434
  var valid_607435 = query.getOrDefault("RequireNumbers")
  valid_607435 = validateParameter(valid_607435, JBool, required = false, default = nil)
  if valid_607435 != nil:
    section.add "RequireNumbers", valid_607435
  var valid_607436 = query.getOrDefault("HardExpiry")
  valid_607436 = validateParameter(valid_607436, JBool, required = false, default = nil)
  if valid_607436 != nil:
    section.add "HardExpiry", valid_607436
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607437 = query.getOrDefault("Action")
  valid_607437 = validateParameter(valid_607437, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_607437 != nil:
    section.add "Action", valid_607437
  var valid_607438 = query.getOrDefault("PasswordReusePrevention")
  valid_607438 = validateParameter(valid_607438, JInt, required = false, default = nil)
  if valid_607438 != nil:
    section.add "PasswordReusePrevention", valid_607438
  var valid_607439 = query.getOrDefault("RequireUppercaseCharacters")
  valid_607439 = validateParameter(valid_607439, JBool, required = false, default = nil)
  if valid_607439 != nil:
    section.add "RequireUppercaseCharacters", valid_607439
  var valid_607440 = query.getOrDefault("AllowUsersToChangePassword")
  valid_607440 = validateParameter(valid_607440, JBool, required = false, default = nil)
  if valid_607440 != nil:
    section.add "AllowUsersToChangePassword", valid_607440
  var valid_607441 = query.getOrDefault("MaxPasswordAge")
  valid_607441 = validateParameter(valid_607441, JInt, required = false, default = nil)
  if valid_607441 != nil:
    section.add "MaxPasswordAge", valid_607441
  var valid_607442 = query.getOrDefault("Version")
  valid_607442 = validateParameter(valid_607442, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607442 != nil:
    section.add "Version", valid_607442
  var valid_607443 = query.getOrDefault("MinimumPasswordLength")
  valid_607443 = validateParameter(valid_607443, JInt, required = false, default = nil)
  if valid_607443 != nil:
    section.add "MinimumPasswordLength", valid_607443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607444 = header.getOrDefault("X-Amz-Date")
  valid_607444 = validateParameter(valid_607444, JString, required = false,
                                 default = nil)
  if valid_607444 != nil:
    section.add "X-Amz-Date", valid_607444
  var valid_607445 = header.getOrDefault("X-Amz-Security-Token")
  valid_607445 = validateParameter(valid_607445, JString, required = false,
                                 default = nil)
  if valid_607445 != nil:
    section.add "X-Amz-Security-Token", valid_607445
  var valid_607446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607446 = validateParameter(valid_607446, JString, required = false,
                                 default = nil)
  if valid_607446 != nil:
    section.add "X-Amz-Content-Sha256", valid_607446
  var valid_607447 = header.getOrDefault("X-Amz-Algorithm")
  valid_607447 = validateParameter(valid_607447, JString, required = false,
                                 default = nil)
  if valid_607447 != nil:
    section.add "X-Amz-Algorithm", valid_607447
  var valid_607448 = header.getOrDefault("X-Amz-Signature")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "X-Amz-Signature", valid_607448
  var valid_607449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "X-Amz-SignedHeaders", valid_607449
  var valid_607450 = header.getOrDefault("X-Amz-Credential")
  valid_607450 = validateParameter(valid_607450, JString, required = false,
                                 default = nil)
  if valid_607450 != nil:
    section.add "X-Amz-Credential", valid_607450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607451: Call_GetUpdateAccountPasswordPolicy_607430; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607451.validator(path, query, header, formData, body)
  let scheme = call_607451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607451.url(scheme.get, call_607451.host, call_607451.base,
                         call_607451.route, valid.getOrDefault("path"))
  result = hook(call_607451, url, valid)

proc call*(call_607452: Call_GetUpdateAccountPasswordPolicy_607430;
          RequireLowercaseCharacters: bool = false; RequireSymbols: bool = false;
          RequireNumbers: bool = false; HardExpiry: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireUppercaseCharacters: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"; MinimumPasswordLength: int = 0): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_607453 = newJObject()
  add(query_607453, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_607453, "RequireSymbols", newJBool(RequireSymbols))
  add(query_607453, "RequireNumbers", newJBool(RequireNumbers))
  add(query_607453, "HardExpiry", newJBool(HardExpiry))
  add(query_607453, "Action", newJString(Action))
  add(query_607453, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_607453, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_607453, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_607453, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_607453, "Version", newJString(Version))
  add(query_607453, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_607452.call(nil, query_607453, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_607430(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_607431, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_607432,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_607496 = ref object of OpenApiRestCall_602433
proc url_PostUpdateAssumeRolePolicy_607498(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAssumeRolePolicy_607497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607499 = query.getOrDefault("Action")
  valid_607499 = validateParameter(valid_607499, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_607499 != nil:
    section.add "Action", valid_607499
  var valid_607500 = query.getOrDefault("Version")
  valid_607500 = validateParameter(valid_607500, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607500 != nil:
    section.add "Version", valid_607500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607501 = header.getOrDefault("X-Amz-Date")
  valid_607501 = validateParameter(valid_607501, JString, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "X-Amz-Date", valid_607501
  var valid_607502 = header.getOrDefault("X-Amz-Security-Token")
  valid_607502 = validateParameter(valid_607502, JString, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "X-Amz-Security-Token", valid_607502
  var valid_607503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607503 = validateParameter(valid_607503, JString, required = false,
                                 default = nil)
  if valid_607503 != nil:
    section.add "X-Amz-Content-Sha256", valid_607503
  var valid_607504 = header.getOrDefault("X-Amz-Algorithm")
  valid_607504 = validateParameter(valid_607504, JString, required = false,
                                 default = nil)
  if valid_607504 != nil:
    section.add "X-Amz-Algorithm", valid_607504
  var valid_607505 = header.getOrDefault("X-Amz-Signature")
  valid_607505 = validateParameter(valid_607505, JString, required = false,
                                 default = nil)
  if valid_607505 != nil:
    section.add "X-Amz-Signature", valid_607505
  var valid_607506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607506 = validateParameter(valid_607506, JString, required = false,
                                 default = nil)
  if valid_607506 != nil:
    section.add "X-Amz-SignedHeaders", valid_607506
  var valid_607507 = header.getOrDefault("X-Amz-Credential")
  valid_607507 = validateParameter(valid_607507, JString, required = false,
                                 default = nil)
  if valid_607507 != nil:
    section.add "X-Amz-Credential", valid_607507
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607508 = formData.getOrDefault("RoleName")
  valid_607508 = validateParameter(valid_607508, JString, required = true,
                                 default = nil)
  if valid_607508 != nil:
    section.add "RoleName", valid_607508
  var valid_607509 = formData.getOrDefault("PolicyDocument")
  valid_607509 = validateParameter(valid_607509, JString, required = true,
                                 default = nil)
  if valid_607509 != nil:
    section.add "PolicyDocument", valid_607509
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607510: Call_PostUpdateAssumeRolePolicy_607496; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_607510.validator(path, query, header, formData, body)
  let scheme = call_607510.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607510.url(scheme.get, call_607510.host, call_607510.base,
                         call_607510.route, valid.getOrDefault("path"))
  result = hook(call_607510, url, valid)

proc call*(call_607511: Call_PostUpdateAssumeRolePolicy_607496; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607512 = newJObject()
  var formData_607513 = newJObject()
  add(formData_607513, "RoleName", newJString(RoleName))
  add(formData_607513, "PolicyDocument", newJString(PolicyDocument))
  add(query_607512, "Action", newJString(Action))
  add(query_607512, "Version", newJString(Version))
  result = call_607511.call(nil, query_607512, nil, formData_607513, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_607496(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_607497, base: "/",
    url: url_PostUpdateAssumeRolePolicy_607498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_607479 = ref object of OpenApiRestCall_602433
proc url_GetUpdateAssumeRolePolicy_607481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAssumeRolePolicy_607480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607482 = query.getOrDefault("Action")
  valid_607482 = validateParameter(valid_607482, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_607482 != nil:
    section.add "Action", valid_607482
  var valid_607483 = query.getOrDefault("PolicyDocument")
  valid_607483 = validateParameter(valid_607483, JString, required = true,
                                 default = nil)
  if valid_607483 != nil:
    section.add "PolicyDocument", valid_607483
  var valid_607484 = query.getOrDefault("RoleName")
  valid_607484 = validateParameter(valid_607484, JString, required = true,
                                 default = nil)
  if valid_607484 != nil:
    section.add "RoleName", valid_607484
  var valid_607485 = query.getOrDefault("Version")
  valid_607485 = validateParameter(valid_607485, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607485 != nil:
    section.add "Version", valid_607485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607486 = header.getOrDefault("X-Amz-Date")
  valid_607486 = validateParameter(valid_607486, JString, required = false,
                                 default = nil)
  if valid_607486 != nil:
    section.add "X-Amz-Date", valid_607486
  var valid_607487 = header.getOrDefault("X-Amz-Security-Token")
  valid_607487 = validateParameter(valid_607487, JString, required = false,
                                 default = nil)
  if valid_607487 != nil:
    section.add "X-Amz-Security-Token", valid_607487
  var valid_607488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607488 = validateParameter(valid_607488, JString, required = false,
                                 default = nil)
  if valid_607488 != nil:
    section.add "X-Amz-Content-Sha256", valid_607488
  var valid_607489 = header.getOrDefault("X-Amz-Algorithm")
  valid_607489 = validateParameter(valid_607489, JString, required = false,
                                 default = nil)
  if valid_607489 != nil:
    section.add "X-Amz-Algorithm", valid_607489
  var valid_607490 = header.getOrDefault("X-Amz-Signature")
  valid_607490 = validateParameter(valid_607490, JString, required = false,
                                 default = nil)
  if valid_607490 != nil:
    section.add "X-Amz-Signature", valid_607490
  var valid_607491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607491 = validateParameter(valid_607491, JString, required = false,
                                 default = nil)
  if valid_607491 != nil:
    section.add "X-Amz-SignedHeaders", valid_607491
  var valid_607492 = header.getOrDefault("X-Amz-Credential")
  valid_607492 = validateParameter(valid_607492, JString, required = false,
                                 default = nil)
  if valid_607492 != nil:
    section.add "X-Amz-Credential", valid_607492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607493: Call_GetUpdateAssumeRolePolicy_607479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_607493.validator(path, query, header, formData, body)
  let scheme = call_607493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607493.url(scheme.get, call_607493.host, call_607493.base,
                         call_607493.route, valid.getOrDefault("path"))
  result = hook(call_607493, url, valid)

proc call*(call_607494: Call_GetUpdateAssumeRolePolicy_607479;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_607495 = newJObject()
  add(query_607495, "Action", newJString(Action))
  add(query_607495, "PolicyDocument", newJString(PolicyDocument))
  add(query_607495, "RoleName", newJString(RoleName))
  add(query_607495, "Version", newJString(Version))
  result = call_607494.call(nil, query_607495, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_607479(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_607480, base: "/",
    url: url_GetUpdateAssumeRolePolicy_607481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_607532 = ref object of OpenApiRestCall_602433
proc url_PostUpdateGroup_607534(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateGroup_607533(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607535 = query.getOrDefault("Action")
  valid_607535 = validateParameter(valid_607535, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_607535 != nil:
    section.add "Action", valid_607535
  var valid_607536 = query.getOrDefault("Version")
  valid_607536 = validateParameter(valid_607536, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607536 != nil:
    section.add "Version", valid_607536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607537 = header.getOrDefault("X-Amz-Date")
  valid_607537 = validateParameter(valid_607537, JString, required = false,
                                 default = nil)
  if valid_607537 != nil:
    section.add "X-Amz-Date", valid_607537
  var valid_607538 = header.getOrDefault("X-Amz-Security-Token")
  valid_607538 = validateParameter(valid_607538, JString, required = false,
                                 default = nil)
  if valid_607538 != nil:
    section.add "X-Amz-Security-Token", valid_607538
  var valid_607539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607539 = validateParameter(valid_607539, JString, required = false,
                                 default = nil)
  if valid_607539 != nil:
    section.add "X-Amz-Content-Sha256", valid_607539
  var valid_607540 = header.getOrDefault("X-Amz-Algorithm")
  valid_607540 = validateParameter(valid_607540, JString, required = false,
                                 default = nil)
  if valid_607540 != nil:
    section.add "X-Amz-Algorithm", valid_607540
  var valid_607541 = header.getOrDefault("X-Amz-Signature")
  valid_607541 = validateParameter(valid_607541, JString, required = false,
                                 default = nil)
  if valid_607541 != nil:
    section.add "X-Amz-Signature", valid_607541
  var valid_607542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607542 = validateParameter(valid_607542, JString, required = false,
                                 default = nil)
  if valid_607542 != nil:
    section.add "X-Amz-SignedHeaders", valid_607542
  var valid_607543 = header.getOrDefault("X-Amz-Credential")
  valid_607543 = validateParameter(valid_607543, JString, required = false,
                                 default = nil)
  if valid_607543 != nil:
    section.add "X-Amz-Credential", valid_607543
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_607544 = formData.getOrDefault("NewGroupName")
  valid_607544 = validateParameter(valid_607544, JString, required = false,
                                 default = nil)
  if valid_607544 != nil:
    section.add "NewGroupName", valid_607544
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_607545 = formData.getOrDefault("GroupName")
  valid_607545 = validateParameter(valid_607545, JString, required = true,
                                 default = nil)
  if valid_607545 != nil:
    section.add "GroupName", valid_607545
  var valid_607546 = formData.getOrDefault("NewPath")
  valid_607546 = validateParameter(valid_607546, JString, required = false,
                                 default = nil)
  if valid_607546 != nil:
    section.add "NewPath", valid_607546
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607547: Call_PostUpdateGroup_607532; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_607547.validator(path, query, header, formData, body)
  let scheme = call_607547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607547.url(scheme.get, call_607547.host, call_607547.base,
                         call_607547.route, valid.getOrDefault("path"))
  result = hook(call_607547, url, valid)

proc call*(call_607548: Call_PostUpdateGroup_607532; GroupName: string;
          NewGroupName: string = ""; Action: string = "UpdateGroup";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_607549 = newJObject()
  var formData_607550 = newJObject()
  add(formData_607550, "NewGroupName", newJString(NewGroupName))
  add(formData_607550, "GroupName", newJString(GroupName))
  add(query_607549, "Action", newJString(Action))
  add(query_607549, "Version", newJString(Version))
  add(formData_607550, "NewPath", newJString(NewPath))
  result = call_607548.call(nil, query_607549, nil, formData_607550, nil)

var postUpdateGroup* = Call_PostUpdateGroup_607532(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_607533,
    base: "/", url: url_PostUpdateGroup_607534, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_607514 = ref object of OpenApiRestCall_602433
proc url_GetUpdateGroup_607516(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateGroup_607515(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607517 = query.getOrDefault("Action")
  valid_607517 = validateParameter(valid_607517, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_607517 != nil:
    section.add "Action", valid_607517
  var valid_607518 = query.getOrDefault("GroupName")
  valid_607518 = validateParameter(valid_607518, JString, required = true,
                                 default = nil)
  if valid_607518 != nil:
    section.add "GroupName", valid_607518
  var valid_607519 = query.getOrDefault("NewGroupName")
  valid_607519 = validateParameter(valid_607519, JString, required = false,
                                 default = nil)
  if valid_607519 != nil:
    section.add "NewGroupName", valid_607519
  var valid_607520 = query.getOrDefault("NewPath")
  valid_607520 = validateParameter(valid_607520, JString, required = false,
                                 default = nil)
  if valid_607520 != nil:
    section.add "NewPath", valid_607520
  var valid_607521 = query.getOrDefault("Version")
  valid_607521 = validateParameter(valid_607521, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607521 != nil:
    section.add "Version", valid_607521
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607522 = header.getOrDefault("X-Amz-Date")
  valid_607522 = validateParameter(valid_607522, JString, required = false,
                                 default = nil)
  if valid_607522 != nil:
    section.add "X-Amz-Date", valid_607522
  var valid_607523 = header.getOrDefault("X-Amz-Security-Token")
  valid_607523 = validateParameter(valid_607523, JString, required = false,
                                 default = nil)
  if valid_607523 != nil:
    section.add "X-Amz-Security-Token", valid_607523
  var valid_607524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607524 = validateParameter(valid_607524, JString, required = false,
                                 default = nil)
  if valid_607524 != nil:
    section.add "X-Amz-Content-Sha256", valid_607524
  var valid_607525 = header.getOrDefault("X-Amz-Algorithm")
  valid_607525 = validateParameter(valid_607525, JString, required = false,
                                 default = nil)
  if valid_607525 != nil:
    section.add "X-Amz-Algorithm", valid_607525
  var valid_607526 = header.getOrDefault("X-Amz-Signature")
  valid_607526 = validateParameter(valid_607526, JString, required = false,
                                 default = nil)
  if valid_607526 != nil:
    section.add "X-Amz-Signature", valid_607526
  var valid_607527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607527 = validateParameter(valid_607527, JString, required = false,
                                 default = nil)
  if valid_607527 != nil:
    section.add "X-Amz-SignedHeaders", valid_607527
  var valid_607528 = header.getOrDefault("X-Amz-Credential")
  valid_607528 = validateParameter(valid_607528, JString, required = false,
                                 default = nil)
  if valid_607528 != nil:
    section.add "X-Amz-Credential", valid_607528
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607529: Call_GetUpdateGroup_607514; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_607529.validator(path, query, header, formData, body)
  let scheme = call_607529.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607529.url(scheme.get, call_607529.host, call_607529.base,
                         call_607529.route, valid.getOrDefault("path"))
  result = hook(call_607529, url, valid)

proc call*(call_607530: Call_GetUpdateGroup_607514; GroupName: string;
          Action: string = "UpdateGroup"; NewGroupName: string = "";
          NewPath: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_607531 = newJObject()
  add(query_607531, "Action", newJString(Action))
  add(query_607531, "GroupName", newJString(GroupName))
  add(query_607531, "NewGroupName", newJString(NewGroupName))
  add(query_607531, "NewPath", newJString(NewPath))
  add(query_607531, "Version", newJString(Version))
  result = call_607530.call(nil, query_607531, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_607514(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_607515,
    base: "/", url: url_GetUpdateGroup_607516, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_607569 = ref object of OpenApiRestCall_602433
proc url_PostUpdateLoginProfile_607571(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateLoginProfile_607570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607572 = query.getOrDefault("Action")
  valid_607572 = validateParameter(valid_607572, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_607572 != nil:
    section.add "Action", valid_607572
  var valid_607573 = query.getOrDefault("Version")
  valid_607573 = validateParameter(valid_607573, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607573 != nil:
    section.add "Version", valid_607573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607574 = header.getOrDefault("X-Amz-Date")
  valid_607574 = validateParameter(valid_607574, JString, required = false,
                                 default = nil)
  if valid_607574 != nil:
    section.add "X-Amz-Date", valid_607574
  var valid_607575 = header.getOrDefault("X-Amz-Security-Token")
  valid_607575 = validateParameter(valid_607575, JString, required = false,
                                 default = nil)
  if valid_607575 != nil:
    section.add "X-Amz-Security-Token", valid_607575
  var valid_607576 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607576 = validateParameter(valid_607576, JString, required = false,
                                 default = nil)
  if valid_607576 != nil:
    section.add "X-Amz-Content-Sha256", valid_607576
  var valid_607577 = header.getOrDefault("X-Amz-Algorithm")
  valid_607577 = validateParameter(valid_607577, JString, required = false,
                                 default = nil)
  if valid_607577 != nil:
    section.add "X-Amz-Algorithm", valid_607577
  var valid_607578 = header.getOrDefault("X-Amz-Signature")
  valid_607578 = validateParameter(valid_607578, JString, required = false,
                                 default = nil)
  if valid_607578 != nil:
    section.add "X-Amz-Signature", valid_607578
  var valid_607579 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607579 = validateParameter(valid_607579, JString, required = false,
                                 default = nil)
  if valid_607579 != nil:
    section.add "X-Amz-SignedHeaders", valid_607579
  var valid_607580 = header.getOrDefault("X-Amz-Credential")
  valid_607580 = validateParameter(valid_607580, JString, required = false,
                                 default = nil)
  if valid_607580 != nil:
    section.add "X-Amz-Credential", valid_607580
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607581 = formData.getOrDefault("UserName")
  valid_607581 = validateParameter(valid_607581, JString, required = true,
                                 default = nil)
  if valid_607581 != nil:
    section.add "UserName", valid_607581
  var valid_607582 = formData.getOrDefault("Password")
  valid_607582 = validateParameter(valid_607582, JString, required = false,
                                 default = nil)
  if valid_607582 != nil:
    section.add "Password", valid_607582
  var valid_607583 = formData.getOrDefault("PasswordResetRequired")
  valid_607583 = validateParameter(valid_607583, JBool, required = false, default = nil)
  if valid_607583 != nil:
    section.add "PasswordResetRequired", valid_607583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607584: Call_PostUpdateLoginProfile_607569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607584.validator(path, query, header, formData, body)
  let scheme = call_607584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607584.url(scheme.get, call_607584.host, call_607584.base,
                         call_607584.route, valid.getOrDefault("path"))
  result = hook(call_607584, url, valid)

proc call*(call_607585: Call_PostUpdateLoginProfile_607569; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607586 = newJObject()
  var formData_607587 = newJObject()
  add(formData_607587, "UserName", newJString(UserName))
  add(formData_607587, "Password", newJString(Password))
  add(formData_607587, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_607586, "Action", newJString(Action))
  add(query_607586, "Version", newJString(Version))
  result = call_607585.call(nil, query_607586, nil, formData_607587, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_607569(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_607570, base: "/",
    url: url_PostUpdateLoginProfile_607571, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_607551 = ref object of OpenApiRestCall_602433
proc url_GetUpdateLoginProfile_607553(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateLoginProfile_607552(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607554 = query.getOrDefault("UserName")
  valid_607554 = validateParameter(valid_607554, JString, required = true,
                                 default = nil)
  if valid_607554 != nil:
    section.add "UserName", valid_607554
  var valid_607555 = query.getOrDefault("PasswordResetRequired")
  valid_607555 = validateParameter(valid_607555, JBool, required = false, default = nil)
  if valid_607555 != nil:
    section.add "PasswordResetRequired", valid_607555
  var valid_607556 = query.getOrDefault("Action")
  valid_607556 = validateParameter(valid_607556, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_607556 != nil:
    section.add "Action", valid_607556
  var valid_607557 = query.getOrDefault("Password")
  valid_607557 = validateParameter(valid_607557, JString, required = false,
                                 default = nil)
  if valid_607557 != nil:
    section.add "Password", valid_607557
  var valid_607558 = query.getOrDefault("Version")
  valid_607558 = validateParameter(valid_607558, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607558 != nil:
    section.add "Version", valid_607558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607559 = header.getOrDefault("X-Amz-Date")
  valid_607559 = validateParameter(valid_607559, JString, required = false,
                                 default = nil)
  if valid_607559 != nil:
    section.add "X-Amz-Date", valid_607559
  var valid_607560 = header.getOrDefault("X-Amz-Security-Token")
  valid_607560 = validateParameter(valid_607560, JString, required = false,
                                 default = nil)
  if valid_607560 != nil:
    section.add "X-Amz-Security-Token", valid_607560
  var valid_607561 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607561 = validateParameter(valid_607561, JString, required = false,
                                 default = nil)
  if valid_607561 != nil:
    section.add "X-Amz-Content-Sha256", valid_607561
  var valid_607562 = header.getOrDefault("X-Amz-Algorithm")
  valid_607562 = validateParameter(valid_607562, JString, required = false,
                                 default = nil)
  if valid_607562 != nil:
    section.add "X-Amz-Algorithm", valid_607562
  var valid_607563 = header.getOrDefault("X-Amz-Signature")
  valid_607563 = validateParameter(valid_607563, JString, required = false,
                                 default = nil)
  if valid_607563 != nil:
    section.add "X-Amz-Signature", valid_607563
  var valid_607564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607564 = validateParameter(valid_607564, JString, required = false,
                                 default = nil)
  if valid_607564 != nil:
    section.add "X-Amz-SignedHeaders", valid_607564
  var valid_607565 = header.getOrDefault("X-Amz-Credential")
  valid_607565 = validateParameter(valid_607565, JString, required = false,
                                 default = nil)
  if valid_607565 != nil:
    section.add "X-Amz-Credential", valid_607565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607566: Call_GetUpdateLoginProfile_607551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_607566.validator(path, query, header, formData, body)
  let scheme = call_607566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607566.url(scheme.get, call_607566.host, call_607566.base,
                         call_607566.route, valid.getOrDefault("path"))
  result = hook(call_607566, url, valid)

proc call*(call_607567: Call_GetUpdateLoginProfile_607551; UserName: string;
          PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Password: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: string (required)
  var query_607568 = newJObject()
  add(query_607568, "UserName", newJString(UserName))
  add(query_607568, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_607568, "Action", newJString(Action))
  add(query_607568, "Password", newJString(Password))
  add(query_607568, "Version", newJString(Version))
  result = call_607567.call(nil, query_607568, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_607551(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_607552, base: "/",
    url: url_GetUpdateLoginProfile_607553, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_607605 = ref object of OpenApiRestCall_602433
proc url_PostUpdateOpenIDConnectProviderThumbprint_607607(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_607606(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607608 = query.getOrDefault("Action")
  valid_607608 = validateParameter(valid_607608, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_607608 != nil:
    section.add "Action", valid_607608
  var valid_607609 = query.getOrDefault("Version")
  valid_607609 = validateParameter(valid_607609, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607609 != nil:
    section.add "Version", valid_607609
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607610 = header.getOrDefault("X-Amz-Date")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-Date", valid_607610
  var valid_607611 = header.getOrDefault("X-Amz-Security-Token")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "X-Amz-Security-Token", valid_607611
  var valid_607612 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607612 = validateParameter(valid_607612, JString, required = false,
                                 default = nil)
  if valid_607612 != nil:
    section.add "X-Amz-Content-Sha256", valid_607612
  var valid_607613 = header.getOrDefault("X-Amz-Algorithm")
  valid_607613 = validateParameter(valid_607613, JString, required = false,
                                 default = nil)
  if valid_607613 != nil:
    section.add "X-Amz-Algorithm", valid_607613
  var valid_607614 = header.getOrDefault("X-Amz-Signature")
  valid_607614 = validateParameter(valid_607614, JString, required = false,
                                 default = nil)
  if valid_607614 != nil:
    section.add "X-Amz-Signature", valid_607614
  var valid_607615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607615 = validateParameter(valid_607615, JString, required = false,
                                 default = nil)
  if valid_607615 != nil:
    section.add "X-Amz-SignedHeaders", valid_607615
  var valid_607616 = header.getOrDefault("X-Amz-Credential")
  valid_607616 = validateParameter(valid_607616, JString, required = false,
                                 default = nil)
  if valid_607616 != nil:
    section.add "X-Amz-Credential", valid_607616
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_607617 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_607617 = validateParameter(valid_607617, JString, required = true,
                                 default = nil)
  if valid_607617 != nil:
    section.add "OpenIDConnectProviderArn", valid_607617
  var valid_607618 = formData.getOrDefault("ThumbprintList")
  valid_607618 = validateParameter(valid_607618, JArray, required = true, default = nil)
  if valid_607618 != nil:
    section.add "ThumbprintList", valid_607618
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607619: Call_PostUpdateOpenIDConnectProviderThumbprint_607605;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_607619.validator(path, query, header, formData, body)
  let scheme = call_607619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607619.url(scheme.get, call_607619.host, call_607619.base,
                         call_607619.route, valid.getOrDefault("path"))
  result = hook(call_607619, url, valid)

proc call*(call_607620: Call_PostUpdateOpenIDConnectProviderThumbprint_607605;
          OpenIDConnectProviderArn: string; ThumbprintList: JsonNode;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607621 = newJObject()
  var formData_607622 = newJObject()
  add(formData_607622, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  if ThumbprintList != nil:
    formData_607622.add "ThumbprintList", ThumbprintList
  add(query_607621, "Action", newJString(Action))
  add(query_607621, "Version", newJString(Version))
  result = call_607620.call(nil, query_607621, nil, formData_607622, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_607605(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_607606,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_607607,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_607588 = ref object of OpenApiRestCall_602433
proc url_GetUpdateOpenIDConnectProviderThumbprint_607590(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_607589(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_607591 = query.getOrDefault("ThumbprintList")
  valid_607591 = validateParameter(valid_607591, JArray, required = true, default = nil)
  if valid_607591 != nil:
    section.add "ThumbprintList", valid_607591
  var valid_607592 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_607592 = validateParameter(valid_607592, JString, required = true,
                                 default = nil)
  if valid_607592 != nil:
    section.add "OpenIDConnectProviderArn", valid_607592
  var valid_607593 = query.getOrDefault("Action")
  valid_607593 = validateParameter(valid_607593, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_607593 != nil:
    section.add "Action", valid_607593
  var valid_607594 = query.getOrDefault("Version")
  valid_607594 = validateParameter(valid_607594, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607594 != nil:
    section.add "Version", valid_607594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607595 = header.getOrDefault("X-Amz-Date")
  valid_607595 = validateParameter(valid_607595, JString, required = false,
                                 default = nil)
  if valid_607595 != nil:
    section.add "X-Amz-Date", valid_607595
  var valid_607596 = header.getOrDefault("X-Amz-Security-Token")
  valid_607596 = validateParameter(valid_607596, JString, required = false,
                                 default = nil)
  if valid_607596 != nil:
    section.add "X-Amz-Security-Token", valid_607596
  var valid_607597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607597 = validateParameter(valid_607597, JString, required = false,
                                 default = nil)
  if valid_607597 != nil:
    section.add "X-Amz-Content-Sha256", valid_607597
  var valid_607598 = header.getOrDefault("X-Amz-Algorithm")
  valid_607598 = validateParameter(valid_607598, JString, required = false,
                                 default = nil)
  if valid_607598 != nil:
    section.add "X-Amz-Algorithm", valid_607598
  var valid_607599 = header.getOrDefault("X-Amz-Signature")
  valid_607599 = validateParameter(valid_607599, JString, required = false,
                                 default = nil)
  if valid_607599 != nil:
    section.add "X-Amz-Signature", valid_607599
  var valid_607600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607600 = validateParameter(valid_607600, JString, required = false,
                                 default = nil)
  if valid_607600 != nil:
    section.add "X-Amz-SignedHeaders", valid_607600
  var valid_607601 = header.getOrDefault("X-Amz-Credential")
  valid_607601 = validateParameter(valid_607601, JString, required = false,
                                 default = nil)
  if valid_607601 != nil:
    section.add "X-Amz-Credential", valid_607601
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607602: Call_GetUpdateOpenIDConnectProviderThumbprint_607588;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_607602.validator(path, query, header, formData, body)
  let scheme = call_607602.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607602.url(scheme.get, call_607602.host, call_607602.base,
                         call_607602.route, valid.getOrDefault("path"))
  result = hook(call_607602, url, valid)

proc call*(call_607603: Call_GetUpdateOpenIDConnectProviderThumbprint_607588;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607604 = newJObject()
  if ThumbprintList != nil:
    query_607604.add "ThumbprintList", ThumbprintList
  add(query_607604, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_607604, "Action", newJString(Action))
  add(query_607604, "Version", newJString(Version))
  result = call_607603.call(nil, query_607604, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_607588(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_607589,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_607590,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_607641 = ref object of OpenApiRestCall_602433
proc url_PostUpdateRole_607643(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRole_607642(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607644 = query.getOrDefault("Action")
  valid_607644 = validateParameter(valid_607644, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_607644 != nil:
    section.add "Action", valid_607644
  var valid_607645 = query.getOrDefault("Version")
  valid_607645 = validateParameter(valid_607645, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607645 != nil:
    section.add "Version", valid_607645
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607646 = header.getOrDefault("X-Amz-Date")
  valid_607646 = validateParameter(valid_607646, JString, required = false,
                                 default = nil)
  if valid_607646 != nil:
    section.add "X-Amz-Date", valid_607646
  var valid_607647 = header.getOrDefault("X-Amz-Security-Token")
  valid_607647 = validateParameter(valid_607647, JString, required = false,
                                 default = nil)
  if valid_607647 != nil:
    section.add "X-Amz-Security-Token", valid_607647
  var valid_607648 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607648 = validateParameter(valid_607648, JString, required = false,
                                 default = nil)
  if valid_607648 != nil:
    section.add "X-Amz-Content-Sha256", valid_607648
  var valid_607649 = header.getOrDefault("X-Amz-Algorithm")
  valid_607649 = validateParameter(valid_607649, JString, required = false,
                                 default = nil)
  if valid_607649 != nil:
    section.add "X-Amz-Algorithm", valid_607649
  var valid_607650 = header.getOrDefault("X-Amz-Signature")
  valid_607650 = validateParameter(valid_607650, JString, required = false,
                                 default = nil)
  if valid_607650 != nil:
    section.add "X-Amz-Signature", valid_607650
  var valid_607651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607651 = validateParameter(valid_607651, JString, required = false,
                                 default = nil)
  if valid_607651 != nil:
    section.add "X-Amz-SignedHeaders", valid_607651
  var valid_607652 = header.getOrDefault("X-Amz-Credential")
  valid_607652 = validateParameter(valid_607652, JString, required = false,
                                 default = nil)
  if valid_607652 != nil:
    section.add "X-Amz-Credential", valid_607652
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607653 = formData.getOrDefault("RoleName")
  valid_607653 = validateParameter(valid_607653, JString, required = true,
                                 default = nil)
  if valid_607653 != nil:
    section.add "RoleName", valid_607653
  var valid_607654 = formData.getOrDefault("MaxSessionDuration")
  valid_607654 = validateParameter(valid_607654, JInt, required = false, default = nil)
  if valid_607654 != nil:
    section.add "MaxSessionDuration", valid_607654
  var valid_607655 = formData.getOrDefault("Description")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "Description", valid_607655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607656: Call_PostUpdateRole_607641; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_607656.validator(path, query, header, formData, body)
  let scheme = call_607656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607656.url(scheme.get, call_607656.host, call_607656.base,
                         call_607656.route, valid.getOrDefault("path"))
  result = hook(call_607656, url, valid)

proc call*(call_607657: Call_PostUpdateRole_607641; RoleName: string;
          Action: string = "UpdateRole"; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  var query_607658 = newJObject()
  var formData_607659 = newJObject()
  add(formData_607659, "RoleName", newJString(RoleName))
  add(query_607658, "Action", newJString(Action))
  add(formData_607659, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_607658, "Version", newJString(Version))
  add(formData_607659, "Description", newJString(Description))
  result = call_607657.call(nil, query_607658, nil, formData_607659, nil)

var postUpdateRole* = Call_PostUpdateRole_607641(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_607642,
    base: "/", url: url_PostUpdateRole_607643, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_607623 = ref object of OpenApiRestCall_602433
proc url_GetUpdateRole_607625(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRole_607624(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  var valid_607626 = query.getOrDefault("Description")
  valid_607626 = validateParameter(valid_607626, JString, required = false,
                                 default = nil)
  if valid_607626 != nil:
    section.add "Description", valid_607626
  var valid_607627 = query.getOrDefault("MaxSessionDuration")
  valid_607627 = validateParameter(valid_607627, JInt, required = false, default = nil)
  if valid_607627 != nil:
    section.add "MaxSessionDuration", valid_607627
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607628 = query.getOrDefault("Action")
  valid_607628 = validateParameter(valid_607628, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_607628 != nil:
    section.add "Action", valid_607628
  var valid_607629 = query.getOrDefault("RoleName")
  valid_607629 = validateParameter(valid_607629, JString, required = true,
                                 default = nil)
  if valid_607629 != nil:
    section.add "RoleName", valid_607629
  var valid_607630 = query.getOrDefault("Version")
  valid_607630 = validateParameter(valid_607630, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607630 != nil:
    section.add "Version", valid_607630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607631 = header.getOrDefault("X-Amz-Date")
  valid_607631 = validateParameter(valid_607631, JString, required = false,
                                 default = nil)
  if valid_607631 != nil:
    section.add "X-Amz-Date", valid_607631
  var valid_607632 = header.getOrDefault("X-Amz-Security-Token")
  valid_607632 = validateParameter(valid_607632, JString, required = false,
                                 default = nil)
  if valid_607632 != nil:
    section.add "X-Amz-Security-Token", valid_607632
  var valid_607633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607633 = validateParameter(valid_607633, JString, required = false,
                                 default = nil)
  if valid_607633 != nil:
    section.add "X-Amz-Content-Sha256", valid_607633
  var valid_607634 = header.getOrDefault("X-Amz-Algorithm")
  valid_607634 = validateParameter(valid_607634, JString, required = false,
                                 default = nil)
  if valid_607634 != nil:
    section.add "X-Amz-Algorithm", valid_607634
  var valid_607635 = header.getOrDefault("X-Amz-Signature")
  valid_607635 = validateParameter(valid_607635, JString, required = false,
                                 default = nil)
  if valid_607635 != nil:
    section.add "X-Amz-Signature", valid_607635
  var valid_607636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607636 = validateParameter(valid_607636, JString, required = false,
                                 default = nil)
  if valid_607636 != nil:
    section.add "X-Amz-SignedHeaders", valid_607636
  var valid_607637 = header.getOrDefault("X-Amz-Credential")
  valid_607637 = validateParameter(valid_607637, JString, required = false,
                                 default = nil)
  if valid_607637 != nil:
    section.add "X-Amz-Credential", valid_607637
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607638: Call_GetUpdateRole_607623; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_607638.validator(path, query, header, formData, body)
  let scheme = call_607638.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607638.url(scheme.get, call_607638.host, call_607638.base,
                         call_607638.route, valid.getOrDefault("path"))
  result = hook(call_607638, url, valid)

proc call*(call_607639: Call_GetUpdateRole_607623; RoleName: string;
          Description: string = ""; MaxSessionDuration: int = 0;
          Action: string = "UpdateRole"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_607640 = newJObject()
  add(query_607640, "Description", newJString(Description))
  add(query_607640, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_607640, "Action", newJString(Action))
  add(query_607640, "RoleName", newJString(RoleName))
  add(query_607640, "Version", newJString(Version))
  result = call_607639.call(nil, query_607640, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_607623(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_607624,
    base: "/", url: url_GetUpdateRole_607625, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_607677 = ref object of OpenApiRestCall_602433
proc url_PostUpdateRoleDescription_607679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRoleDescription_607678(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607680 = query.getOrDefault("Action")
  valid_607680 = validateParameter(valid_607680, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_607680 != nil:
    section.add "Action", valid_607680
  var valid_607681 = query.getOrDefault("Version")
  valid_607681 = validateParameter(valid_607681, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607681 != nil:
    section.add "Version", valid_607681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607682 = header.getOrDefault("X-Amz-Date")
  valid_607682 = validateParameter(valid_607682, JString, required = false,
                                 default = nil)
  if valid_607682 != nil:
    section.add "X-Amz-Date", valid_607682
  var valid_607683 = header.getOrDefault("X-Amz-Security-Token")
  valid_607683 = validateParameter(valid_607683, JString, required = false,
                                 default = nil)
  if valid_607683 != nil:
    section.add "X-Amz-Security-Token", valid_607683
  var valid_607684 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607684 = validateParameter(valid_607684, JString, required = false,
                                 default = nil)
  if valid_607684 != nil:
    section.add "X-Amz-Content-Sha256", valid_607684
  var valid_607685 = header.getOrDefault("X-Amz-Algorithm")
  valid_607685 = validateParameter(valid_607685, JString, required = false,
                                 default = nil)
  if valid_607685 != nil:
    section.add "X-Amz-Algorithm", valid_607685
  var valid_607686 = header.getOrDefault("X-Amz-Signature")
  valid_607686 = validateParameter(valid_607686, JString, required = false,
                                 default = nil)
  if valid_607686 != nil:
    section.add "X-Amz-Signature", valid_607686
  var valid_607687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607687 = validateParameter(valid_607687, JString, required = false,
                                 default = nil)
  if valid_607687 != nil:
    section.add "X-Amz-SignedHeaders", valid_607687
  var valid_607688 = header.getOrDefault("X-Amz-Credential")
  valid_607688 = validateParameter(valid_607688, JString, required = false,
                                 default = nil)
  if valid_607688 != nil:
    section.add "X-Amz-Credential", valid_607688
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_607689 = formData.getOrDefault("RoleName")
  valid_607689 = validateParameter(valid_607689, JString, required = true,
                                 default = nil)
  if valid_607689 != nil:
    section.add "RoleName", valid_607689
  var valid_607690 = formData.getOrDefault("Description")
  valid_607690 = validateParameter(valid_607690, JString, required = true,
                                 default = nil)
  if valid_607690 != nil:
    section.add "Description", valid_607690
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607691: Call_PostUpdateRoleDescription_607677; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_607691.validator(path, query, header, formData, body)
  let scheme = call_607691.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607691.url(scheme.get, call_607691.host, call_607691.base,
                         call_607691.route, valid.getOrDefault("path"))
  result = hook(call_607691, url, valid)

proc call*(call_607692: Call_PostUpdateRoleDescription_607677; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  var query_607693 = newJObject()
  var formData_607694 = newJObject()
  add(formData_607694, "RoleName", newJString(RoleName))
  add(query_607693, "Action", newJString(Action))
  add(query_607693, "Version", newJString(Version))
  add(formData_607694, "Description", newJString(Description))
  result = call_607692.call(nil, query_607693, nil, formData_607694, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_607677(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_607678, base: "/",
    url: url_PostUpdateRoleDescription_607679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_607660 = ref object of OpenApiRestCall_602433
proc url_GetUpdateRoleDescription_607662(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRoleDescription_607661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_607663 = query.getOrDefault("Description")
  valid_607663 = validateParameter(valid_607663, JString, required = true,
                                 default = nil)
  if valid_607663 != nil:
    section.add "Description", valid_607663
  var valid_607664 = query.getOrDefault("Action")
  valid_607664 = validateParameter(valid_607664, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_607664 != nil:
    section.add "Action", valid_607664
  var valid_607665 = query.getOrDefault("RoleName")
  valid_607665 = validateParameter(valid_607665, JString, required = true,
                                 default = nil)
  if valid_607665 != nil:
    section.add "RoleName", valid_607665
  var valid_607666 = query.getOrDefault("Version")
  valid_607666 = validateParameter(valid_607666, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607666 != nil:
    section.add "Version", valid_607666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607667 = header.getOrDefault("X-Amz-Date")
  valid_607667 = validateParameter(valid_607667, JString, required = false,
                                 default = nil)
  if valid_607667 != nil:
    section.add "X-Amz-Date", valid_607667
  var valid_607668 = header.getOrDefault("X-Amz-Security-Token")
  valid_607668 = validateParameter(valid_607668, JString, required = false,
                                 default = nil)
  if valid_607668 != nil:
    section.add "X-Amz-Security-Token", valid_607668
  var valid_607669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-Content-Sha256", valid_607669
  var valid_607670 = header.getOrDefault("X-Amz-Algorithm")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "X-Amz-Algorithm", valid_607670
  var valid_607671 = header.getOrDefault("X-Amz-Signature")
  valid_607671 = validateParameter(valid_607671, JString, required = false,
                                 default = nil)
  if valid_607671 != nil:
    section.add "X-Amz-Signature", valid_607671
  var valid_607672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "X-Amz-SignedHeaders", valid_607672
  var valid_607673 = header.getOrDefault("X-Amz-Credential")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = nil)
  if valid_607673 != nil:
    section.add "X-Amz-Credential", valid_607673
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607674: Call_GetUpdateRoleDescription_607660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_607674.validator(path, query, header, formData, body)
  let scheme = call_607674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607674.url(scheme.get, call_607674.host, call_607674.base,
                         call_607674.route, valid.getOrDefault("path"))
  result = hook(call_607674, url, valid)

proc call*(call_607675: Call_GetUpdateRoleDescription_607660; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_607676 = newJObject()
  add(query_607676, "Description", newJString(Description))
  add(query_607676, "Action", newJString(Action))
  add(query_607676, "RoleName", newJString(RoleName))
  add(query_607676, "Version", newJString(Version))
  result = call_607675.call(nil, query_607676, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_607660(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_607661, base: "/",
    url: url_GetUpdateRoleDescription_607662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_607712 = ref object of OpenApiRestCall_602433
proc url_PostUpdateSAMLProvider_607714(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSAMLProvider_607713(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607715 = query.getOrDefault("Action")
  valid_607715 = validateParameter(valid_607715, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_607715 != nil:
    section.add "Action", valid_607715
  var valid_607716 = query.getOrDefault("Version")
  valid_607716 = validateParameter(valid_607716, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607716 != nil:
    section.add "Version", valid_607716
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607717 = header.getOrDefault("X-Amz-Date")
  valid_607717 = validateParameter(valid_607717, JString, required = false,
                                 default = nil)
  if valid_607717 != nil:
    section.add "X-Amz-Date", valid_607717
  var valid_607718 = header.getOrDefault("X-Amz-Security-Token")
  valid_607718 = validateParameter(valid_607718, JString, required = false,
                                 default = nil)
  if valid_607718 != nil:
    section.add "X-Amz-Security-Token", valid_607718
  var valid_607719 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607719 = validateParameter(valid_607719, JString, required = false,
                                 default = nil)
  if valid_607719 != nil:
    section.add "X-Amz-Content-Sha256", valid_607719
  var valid_607720 = header.getOrDefault("X-Amz-Algorithm")
  valid_607720 = validateParameter(valid_607720, JString, required = false,
                                 default = nil)
  if valid_607720 != nil:
    section.add "X-Amz-Algorithm", valid_607720
  var valid_607721 = header.getOrDefault("X-Amz-Signature")
  valid_607721 = validateParameter(valid_607721, JString, required = false,
                                 default = nil)
  if valid_607721 != nil:
    section.add "X-Amz-Signature", valid_607721
  var valid_607722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607722 = validateParameter(valid_607722, JString, required = false,
                                 default = nil)
  if valid_607722 != nil:
    section.add "X-Amz-SignedHeaders", valid_607722
  var valid_607723 = header.getOrDefault("X-Amz-Credential")
  valid_607723 = validateParameter(valid_607723, JString, required = false,
                                 default = nil)
  if valid_607723 != nil:
    section.add "X-Amz-Credential", valid_607723
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_607724 = formData.getOrDefault("SAMLProviderArn")
  valid_607724 = validateParameter(valid_607724, JString, required = true,
                                 default = nil)
  if valid_607724 != nil:
    section.add "SAMLProviderArn", valid_607724
  var valid_607725 = formData.getOrDefault("SAMLMetadataDocument")
  valid_607725 = validateParameter(valid_607725, JString, required = true,
                                 default = nil)
  if valid_607725 != nil:
    section.add "SAMLMetadataDocument", valid_607725
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607726: Call_PostUpdateSAMLProvider_607712; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_607726.validator(path, query, header, formData, body)
  let scheme = call_607726.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607726.url(scheme.get, call_607726.host, call_607726.base,
                         call_607726.route, valid.getOrDefault("path"))
  result = hook(call_607726, url, valid)

proc call*(call_607727: Call_PostUpdateSAMLProvider_607712;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Version: string (required)
  var query_607728 = newJObject()
  var formData_607729 = newJObject()
  add(formData_607729, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_607728, "Action", newJString(Action))
  add(formData_607729, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_607728, "Version", newJString(Version))
  result = call_607727.call(nil, query_607728, nil, formData_607729, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_607712(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_607713, base: "/",
    url: url_PostUpdateSAMLProvider_607714, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_607695 = ref object of OpenApiRestCall_602433
proc url_GetUpdateSAMLProvider_607697(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSAMLProvider_607696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_607698 = query.getOrDefault("SAMLMetadataDocument")
  valid_607698 = validateParameter(valid_607698, JString, required = true,
                                 default = nil)
  if valid_607698 != nil:
    section.add "SAMLMetadataDocument", valid_607698
  var valid_607699 = query.getOrDefault("Action")
  valid_607699 = validateParameter(valid_607699, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_607699 != nil:
    section.add "Action", valid_607699
  var valid_607700 = query.getOrDefault("SAMLProviderArn")
  valid_607700 = validateParameter(valid_607700, JString, required = true,
                                 default = nil)
  if valid_607700 != nil:
    section.add "SAMLProviderArn", valid_607700
  var valid_607701 = query.getOrDefault("Version")
  valid_607701 = validateParameter(valid_607701, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607701 != nil:
    section.add "Version", valid_607701
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607702 = header.getOrDefault("X-Amz-Date")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "X-Amz-Date", valid_607702
  var valid_607703 = header.getOrDefault("X-Amz-Security-Token")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "X-Amz-Security-Token", valid_607703
  var valid_607704 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607704 = validateParameter(valid_607704, JString, required = false,
                                 default = nil)
  if valid_607704 != nil:
    section.add "X-Amz-Content-Sha256", valid_607704
  var valid_607705 = header.getOrDefault("X-Amz-Algorithm")
  valid_607705 = validateParameter(valid_607705, JString, required = false,
                                 default = nil)
  if valid_607705 != nil:
    section.add "X-Amz-Algorithm", valid_607705
  var valid_607706 = header.getOrDefault("X-Amz-Signature")
  valid_607706 = validateParameter(valid_607706, JString, required = false,
                                 default = nil)
  if valid_607706 != nil:
    section.add "X-Amz-Signature", valid_607706
  var valid_607707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607707 = validateParameter(valid_607707, JString, required = false,
                                 default = nil)
  if valid_607707 != nil:
    section.add "X-Amz-SignedHeaders", valid_607707
  var valid_607708 = header.getOrDefault("X-Amz-Credential")
  valid_607708 = validateParameter(valid_607708, JString, required = false,
                                 default = nil)
  if valid_607708 != nil:
    section.add "X-Amz-Credential", valid_607708
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607709: Call_GetUpdateSAMLProvider_607695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_607709.validator(path, query, header, formData, body)
  let scheme = call_607709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607709.url(scheme.get, call_607709.host, call_607709.base,
                         call_607709.route, valid.getOrDefault("path"))
  result = hook(call_607709, url, valid)

proc call*(call_607710: Call_GetUpdateSAMLProvider_607695;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_607711 = newJObject()
  add(query_607711, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_607711, "Action", newJString(Action))
  add(query_607711, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_607711, "Version", newJString(Version))
  result = call_607710.call(nil, query_607711, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_607695(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_607696, base: "/",
    url: url_GetUpdateSAMLProvider_607697, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_607748 = ref object of OpenApiRestCall_602433
proc url_PostUpdateSSHPublicKey_607750(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSSHPublicKey_607749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607751 = query.getOrDefault("Action")
  valid_607751 = validateParameter(valid_607751, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_607751 != nil:
    section.add "Action", valid_607751
  var valid_607752 = query.getOrDefault("Version")
  valid_607752 = validateParameter(valid_607752, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607752 != nil:
    section.add "Version", valid_607752
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607753 = header.getOrDefault("X-Amz-Date")
  valid_607753 = validateParameter(valid_607753, JString, required = false,
                                 default = nil)
  if valid_607753 != nil:
    section.add "X-Amz-Date", valid_607753
  var valid_607754 = header.getOrDefault("X-Amz-Security-Token")
  valid_607754 = validateParameter(valid_607754, JString, required = false,
                                 default = nil)
  if valid_607754 != nil:
    section.add "X-Amz-Security-Token", valid_607754
  var valid_607755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607755 = validateParameter(valid_607755, JString, required = false,
                                 default = nil)
  if valid_607755 != nil:
    section.add "X-Amz-Content-Sha256", valid_607755
  var valid_607756 = header.getOrDefault("X-Amz-Algorithm")
  valid_607756 = validateParameter(valid_607756, JString, required = false,
                                 default = nil)
  if valid_607756 != nil:
    section.add "X-Amz-Algorithm", valid_607756
  var valid_607757 = header.getOrDefault("X-Amz-Signature")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "X-Amz-Signature", valid_607757
  var valid_607758 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607758 = validateParameter(valid_607758, JString, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "X-Amz-SignedHeaders", valid_607758
  var valid_607759 = header.getOrDefault("X-Amz-Credential")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Credential", valid_607759
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607760 = formData.getOrDefault("UserName")
  valid_607760 = validateParameter(valid_607760, JString, required = true,
                                 default = nil)
  if valid_607760 != nil:
    section.add "UserName", valid_607760
  var valid_607761 = formData.getOrDefault("SSHPublicKeyId")
  valid_607761 = validateParameter(valid_607761, JString, required = true,
                                 default = nil)
  if valid_607761 != nil:
    section.add "SSHPublicKeyId", valid_607761
  var valid_607762 = formData.getOrDefault("Status")
  valid_607762 = validateParameter(valid_607762, JString, required = true,
                                 default = newJString("Active"))
  if valid_607762 != nil:
    section.add "Status", valid_607762
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607763: Call_PostUpdateSSHPublicKey_607748; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607763.validator(path, query, header, formData, body)
  let scheme = call_607763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607763.url(scheme.get, call_607763.host, call_607763.base,
                         call_607763.route, valid.getOrDefault("path"))
  result = hook(call_607763, url, valid)

proc call*(call_607764: Call_PostUpdateSSHPublicKey_607748; UserName: string;
          SSHPublicKeyId: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607765 = newJObject()
  var formData_607766 = newJObject()
  add(formData_607766, "UserName", newJString(UserName))
  add(formData_607766, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_607766, "Status", newJString(Status))
  add(query_607765, "Action", newJString(Action))
  add(query_607765, "Version", newJString(Version))
  result = call_607764.call(nil, query_607765, nil, formData_607766, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_607748(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_607749, base: "/",
    url: url_PostUpdateSSHPublicKey_607750, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_607730 = ref object of OpenApiRestCall_602433
proc url_GetUpdateSSHPublicKey_607732(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSSHPublicKey_607731(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_607733 = query.getOrDefault("Status")
  valid_607733 = validateParameter(valid_607733, JString, required = true,
                                 default = newJString("Active"))
  if valid_607733 != nil:
    section.add "Status", valid_607733
  var valid_607734 = query.getOrDefault("SSHPublicKeyId")
  valid_607734 = validateParameter(valid_607734, JString, required = true,
                                 default = nil)
  if valid_607734 != nil:
    section.add "SSHPublicKeyId", valid_607734
  var valid_607735 = query.getOrDefault("UserName")
  valid_607735 = validateParameter(valid_607735, JString, required = true,
                                 default = nil)
  if valid_607735 != nil:
    section.add "UserName", valid_607735
  var valid_607736 = query.getOrDefault("Action")
  valid_607736 = validateParameter(valid_607736, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_607736 != nil:
    section.add "Action", valid_607736
  var valid_607737 = query.getOrDefault("Version")
  valid_607737 = validateParameter(valid_607737, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607737 != nil:
    section.add "Version", valid_607737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607738 = header.getOrDefault("X-Amz-Date")
  valid_607738 = validateParameter(valid_607738, JString, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "X-Amz-Date", valid_607738
  var valid_607739 = header.getOrDefault("X-Amz-Security-Token")
  valid_607739 = validateParameter(valid_607739, JString, required = false,
                                 default = nil)
  if valid_607739 != nil:
    section.add "X-Amz-Security-Token", valid_607739
  var valid_607740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607740 = validateParameter(valid_607740, JString, required = false,
                                 default = nil)
  if valid_607740 != nil:
    section.add "X-Amz-Content-Sha256", valid_607740
  var valid_607741 = header.getOrDefault("X-Amz-Algorithm")
  valid_607741 = validateParameter(valid_607741, JString, required = false,
                                 default = nil)
  if valid_607741 != nil:
    section.add "X-Amz-Algorithm", valid_607741
  var valid_607742 = header.getOrDefault("X-Amz-Signature")
  valid_607742 = validateParameter(valid_607742, JString, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "X-Amz-Signature", valid_607742
  var valid_607743 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607743 = validateParameter(valid_607743, JString, required = false,
                                 default = nil)
  if valid_607743 != nil:
    section.add "X-Amz-SignedHeaders", valid_607743
  var valid_607744 = header.getOrDefault("X-Amz-Credential")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Credential", valid_607744
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607745: Call_GetUpdateSSHPublicKey_607730; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607745.validator(path, query, header, formData, body)
  let scheme = call_607745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607745.url(scheme.get, call_607745.host, call_607745.base,
                         call_607745.route, valid.getOrDefault("path"))
  result = hook(call_607745, url, valid)

proc call*(call_607746: Call_GetUpdateSSHPublicKey_607730; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607747 = newJObject()
  add(query_607747, "Status", newJString(Status))
  add(query_607747, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_607747, "UserName", newJString(UserName))
  add(query_607747, "Action", newJString(Action))
  add(query_607747, "Version", newJString(Version))
  result = call_607746.call(nil, query_607747, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_607730(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_607731, base: "/",
    url: url_GetUpdateSSHPublicKey_607732, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_607785 = ref object of OpenApiRestCall_602433
proc url_PostUpdateServerCertificate_607787(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServerCertificate_607786(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607788 = query.getOrDefault("Action")
  valid_607788 = validateParameter(valid_607788, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_607788 != nil:
    section.add "Action", valid_607788
  var valid_607789 = query.getOrDefault("Version")
  valid_607789 = validateParameter(valid_607789, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607789 != nil:
    section.add "Version", valid_607789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607790 = header.getOrDefault("X-Amz-Date")
  valid_607790 = validateParameter(valid_607790, JString, required = false,
                                 default = nil)
  if valid_607790 != nil:
    section.add "X-Amz-Date", valid_607790
  var valid_607791 = header.getOrDefault("X-Amz-Security-Token")
  valid_607791 = validateParameter(valid_607791, JString, required = false,
                                 default = nil)
  if valid_607791 != nil:
    section.add "X-Amz-Security-Token", valid_607791
  var valid_607792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607792 = validateParameter(valid_607792, JString, required = false,
                                 default = nil)
  if valid_607792 != nil:
    section.add "X-Amz-Content-Sha256", valid_607792
  var valid_607793 = header.getOrDefault("X-Amz-Algorithm")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Algorithm", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-Signature")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-Signature", valid_607794
  var valid_607795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-SignedHeaders", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-Credential")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-Credential", valid_607796
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_607797 = formData.getOrDefault("ServerCertificateName")
  valid_607797 = validateParameter(valid_607797, JString, required = true,
                                 default = nil)
  if valid_607797 != nil:
    section.add "ServerCertificateName", valid_607797
  var valid_607798 = formData.getOrDefault("NewServerCertificateName")
  valid_607798 = validateParameter(valid_607798, JString, required = false,
                                 default = nil)
  if valid_607798 != nil:
    section.add "NewServerCertificateName", valid_607798
  var valid_607799 = formData.getOrDefault("NewPath")
  valid_607799 = validateParameter(valid_607799, JString, required = false,
                                 default = nil)
  if valid_607799 != nil:
    section.add "NewPath", valid_607799
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607800: Call_PostUpdateServerCertificate_607785; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_607800.validator(path, query, header, formData, body)
  let scheme = call_607800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607800.url(scheme.get, call_607800.host, call_607800.base,
                         call_607800.route, valid.getOrDefault("path"))
  result = hook(call_607800, url, valid)

proc call*(call_607801: Call_PostUpdateServerCertificate_607785;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; Version: string = "2010-05-08";
          NewPath: string = ""): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_607802 = newJObject()
  var formData_607803 = newJObject()
  add(formData_607803, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607802, "Action", newJString(Action))
  add(formData_607803, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_607802, "Version", newJString(Version))
  add(formData_607803, "NewPath", newJString(NewPath))
  result = call_607801.call(nil, query_607802, nil, formData_607803, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_607785(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_607786, base: "/",
    url: url_PostUpdateServerCertificate_607787,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_607767 = ref object of OpenApiRestCall_602433
proc url_GetUpdateServerCertificate_607769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServerCertificate_607768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_607770 = query.getOrDefault("ServerCertificateName")
  valid_607770 = validateParameter(valid_607770, JString, required = true,
                                 default = nil)
  if valid_607770 != nil:
    section.add "ServerCertificateName", valid_607770
  var valid_607771 = query.getOrDefault("Action")
  valid_607771 = validateParameter(valid_607771, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_607771 != nil:
    section.add "Action", valid_607771
  var valid_607772 = query.getOrDefault("NewServerCertificateName")
  valid_607772 = validateParameter(valid_607772, JString, required = false,
                                 default = nil)
  if valid_607772 != nil:
    section.add "NewServerCertificateName", valid_607772
  var valid_607773 = query.getOrDefault("NewPath")
  valid_607773 = validateParameter(valid_607773, JString, required = false,
                                 default = nil)
  if valid_607773 != nil:
    section.add "NewPath", valid_607773
  var valid_607774 = query.getOrDefault("Version")
  valid_607774 = validateParameter(valid_607774, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607774 != nil:
    section.add "Version", valid_607774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607775 = header.getOrDefault("X-Amz-Date")
  valid_607775 = validateParameter(valid_607775, JString, required = false,
                                 default = nil)
  if valid_607775 != nil:
    section.add "X-Amz-Date", valid_607775
  var valid_607776 = header.getOrDefault("X-Amz-Security-Token")
  valid_607776 = validateParameter(valid_607776, JString, required = false,
                                 default = nil)
  if valid_607776 != nil:
    section.add "X-Amz-Security-Token", valid_607776
  var valid_607777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "X-Amz-Content-Sha256", valid_607777
  var valid_607778 = header.getOrDefault("X-Amz-Algorithm")
  valid_607778 = validateParameter(valid_607778, JString, required = false,
                                 default = nil)
  if valid_607778 != nil:
    section.add "X-Amz-Algorithm", valid_607778
  var valid_607779 = header.getOrDefault("X-Amz-Signature")
  valid_607779 = validateParameter(valid_607779, JString, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "X-Amz-Signature", valid_607779
  var valid_607780 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607780 = validateParameter(valid_607780, JString, required = false,
                                 default = nil)
  if valid_607780 != nil:
    section.add "X-Amz-SignedHeaders", valid_607780
  var valid_607781 = header.getOrDefault("X-Amz-Credential")
  valid_607781 = validateParameter(valid_607781, JString, required = false,
                                 default = nil)
  if valid_607781 != nil:
    section.add "X-Amz-Credential", valid_607781
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607782: Call_GetUpdateServerCertificate_607767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_607782.validator(path, query, header, formData, body)
  let scheme = call_607782.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607782.url(scheme.get, call_607782.host, call_607782.base,
                         call_607782.route, valid.getOrDefault("path"))
  result = hook(call_607782, url, valid)

proc call*(call_607783: Call_GetUpdateServerCertificate_607767;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_607784 = newJObject()
  add(query_607784, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607784, "Action", newJString(Action))
  add(query_607784, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_607784, "NewPath", newJString(NewPath))
  add(query_607784, "Version", newJString(Version))
  result = call_607783.call(nil, query_607784, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_607767(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_607768, base: "/",
    url: url_GetUpdateServerCertificate_607769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_607822 = ref object of OpenApiRestCall_602433
proc url_PostUpdateServiceSpecificCredential_607824(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServiceSpecificCredential_607823(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607825 = query.getOrDefault("Action")
  valid_607825 = validateParameter(valid_607825, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_607825 != nil:
    section.add "Action", valid_607825
  var valid_607826 = query.getOrDefault("Version")
  valid_607826 = validateParameter(valid_607826, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607826 != nil:
    section.add "Version", valid_607826
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607827 = header.getOrDefault("X-Amz-Date")
  valid_607827 = validateParameter(valid_607827, JString, required = false,
                                 default = nil)
  if valid_607827 != nil:
    section.add "X-Amz-Date", valid_607827
  var valid_607828 = header.getOrDefault("X-Amz-Security-Token")
  valid_607828 = validateParameter(valid_607828, JString, required = false,
                                 default = nil)
  if valid_607828 != nil:
    section.add "X-Amz-Security-Token", valid_607828
  var valid_607829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607829 = validateParameter(valid_607829, JString, required = false,
                                 default = nil)
  if valid_607829 != nil:
    section.add "X-Amz-Content-Sha256", valid_607829
  var valid_607830 = header.getOrDefault("X-Amz-Algorithm")
  valid_607830 = validateParameter(valid_607830, JString, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "X-Amz-Algorithm", valid_607830
  var valid_607831 = header.getOrDefault("X-Amz-Signature")
  valid_607831 = validateParameter(valid_607831, JString, required = false,
                                 default = nil)
  if valid_607831 != nil:
    section.add "X-Amz-Signature", valid_607831
  var valid_607832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607832 = validateParameter(valid_607832, JString, required = false,
                                 default = nil)
  if valid_607832 != nil:
    section.add "X-Amz-SignedHeaders", valid_607832
  var valid_607833 = header.getOrDefault("X-Amz-Credential")
  valid_607833 = validateParameter(valid_607833, JString, required = false,
                                 default = nil)
  if valid_607833 != nil:
    section.add "X-Amz-Credential", valid_607833
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  var valid_607834 = formData.getOrDefault("UserName")
  valid_607834 = validateParameter(valid_607834, JString, required = false,
                                 default = nil)
  if valid_607834 != nil:
    section.add "UserName", valid_607834
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_607835 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_607835 = validateParameter(valid_607835, JString, required = true,
                                 default = nil)
  if valid_607835 != nil:
    section.add "ServiceSpecificCredentialId", valid_607835
  var valid_607836 = formData.getOrDefault("Status")
  valid_607836 = validateParameter(valid_607836, JString, required = true,
                                 default = newJString("Active"))
  if valid_607836 != nil:
    section.add "Status", valid_607836
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607837: Call_PostUpdateServiceSpecificCredential_607822;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_607837.validator(path, query, header, formData, body)
  let scheme = call_607837.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607837.url(scheme.get, call_607837.host, call_607837.base,
                         call_607837.route, valid.getOrDefault("path"))
  result = hook(call_607837, url, valid)

proc call*(call_607838: Call_PostUpdateServiceSpecificCredential_607822;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607839 = newJObject()
  var formData_607840 = newJObject()
  add(formData_607840, "UserName", newJString(UserName))
  add(formData_607840, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_607840, "Status", newJString(Status))
  add(query_607839, "Action", newJString(Action))
  add(query_607839, "Version", newJString(Version))
  result = call_607838.call(nil, query_607839, nil, formData_607840, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_607822(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_607823, base: "/",
    url: url_PostUpdateServiceSpecificCredential_607824,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_607804 = ref object of OpenApiRestCall_602433
proc url_GetUpdateServiceSpecificCredential_607806(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServiceSpecificCredential_607805(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_607807 = query.getOrDefault("Status")
  valid_607807 = validateParameter(valid_607807, JString, required = true,
                                 default = newJString("Active"))
  if valid_607807 != nil:
    section.add "Status", valid_607807
  var valid_607808 = query.getOrDefault("UserName")
  valid_607808 = validateParameter(valid_607808, JString, required = false,
                                 default = nil)
  if valid_607808 != nil:
    section.add "UserName", valid_607808
  var valid_607809 = query.getOrDefault("Action")
  valid_607809 = validateParameter(valid_607809, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_607809 != nil:
    section.add "Action", valid_607809
  var valid_607810 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_607810 = validateParameter(valid_607810, JString, required = true,
                                 default = nil)
  if valid_607810 != nil:
    section.add "ServiceSpecificCredentialId", valid_607810
  var valid_607811 = query.getOrDefault("Version")
  valid_607811 = validateParameter(valid_607811, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607811 != nil:
    section.add "Version", valid_607811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607812 = header.getOrDefault("X-Amz-Date")
  valid_607812 = validateParameter(valid_607812, JString, required = false,
                                 default = nil)
  if valid_607812 != nil:
    section.add "X-Amz-Date", valid_607812
  var valid_607813 = header.getOrDefault("X-Amz-Security-Token")
  valid_607813 = validateParameter(valid_607813, JString, required = false,
                                 default = nil)
  if valid_607813 != nil:
    section.add "X-Amz-Security-Token", valid_607813
  var valid_607814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "X-Amz-Content-Sha256", valid_607814
  var valid_607815 = header.getOrDefault("X-Amz-Algorithm")
  valid_607815 = validateParameter(valid_607815, JString, required = false,
                                 default = nil)
  if valid_607815 != nil:
    section.add "X-Amz-Algorithm", valid_607815
  var valid_607816 = header.getOrDefault("X-Amz-Signature")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "X-Amz-Signature", valid_607816
  var valid_607817 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607817 = validateParameter(valid_607817, JString, required = false,
                                 default = nil)
  if valid_607817 != nil:
    section.add "X-Amz-SignedHeaders", valid_607817
  var valid_607818 = header.getOrDefault("X-Amz-Credential")
  valid_607818 = validateParameter(valid_607818, JString, required = false,
                                 default = nil)
  if valid_607818 != nil:
    section.add "X-Amz-Credential", valid_607818
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607819: Call_GetUpdateServiceSpecificCredential_607804;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_607819.validator(path, query, header, formData, body)
  let scheme = call_607819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607819.url(scheme.get, call_607819.host, call_607819.base,
                         call_607819.route, valid.getOrDefault("path"))
  result = hook(call_607819, url, valid)

proc call*(call_607820: Call_GetUpdateServiceSpecificCredential_607804;
          ServiceSpecificCredentialId: string; Status: string = "Active";
          UserName: string = ""; Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_607821 = newJObject()
  add(query_607821, "Status", newJString(Status))
  add(query_607821, "UserName", newJString(UserName))
  add(query_607821, "Action", newJString(Action))
  add(query_607821, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_607821, "Version", newJString(Version))
  result = call_607820.call(nil, query_607821, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_607804(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_607805, base: "/",
    url: url_GetUpdateServiceSpecificCredential_607806,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_607859 = ref object of OpenApiRestCall_602433
proc url_PostUpdateSigningCertificate_607861(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSigningCertificate_607860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607862 = query.getOrDefault("Action")
  valid_607862 = validateParameter(valid_607862, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_607862 != nil:
    section.add "Action", valid_607862
  var valid_607863 = query.getOrDefault("Version")
  valid_607863 = validateParameter(valid_607863, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607863 != nil:
    section.add "Version", valid_607863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607864 = header.getOrDefault("X-Amz-Date")
  valid_607864 = validateParameter(valid_607864, JString, required = false,
                                 default = nil)
  if valid_607864 != nil:
    section.add "X-Amz-Date", valid_607864
  var valid_607865 = header.getOrDefault("X-Amz-Security-Token")
  valid_607865 = validateParameter(valid_607865, JString, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "X-Amz-Security-Token", valid_607865
  var valid_607866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607866 = validateParameter(valid_607866, JString, required = false,
                                 default = nil)
  if valid_607866 != nil:
    section.add "X-Amz-Content-Sha256", valid_607866
  var valid_607867 = header.getOrDefault("X-Amz-Algorithm")
  valid_607867 = validateParameter(valid_607867, JString, required = false,
                                 default = nil)
  if valid_607867 != nil:
    section.add "X-Amz-Algorithm", valid_607867
  var valid_607868 = header.getOrDefault("X-Amz-Signature")
  valid_607868 = validateParameter(valid_607868, JString, required = false,
                                 default = nil)
  if valid_607868 != nil:
    section.add "X-Amz-Signature", valid_607868
  var valid_607869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607869 = validateParameter(valid_607869, JString, required = false,
                                 default = nil)
  if valid_607869 != nil:
    section.add "X-Amz-SignedHeaders", valid_607869
  var valid_607870 = header.getOrDefault("X-Amz-Credential")
  valid_607870 = validateParameter(valid_607870, JString, required = false,
                                 default = nil)
  if valid_607870 != nil:
    section.add "X-Amz-Credential", valid_607870
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_607871 = formData.getOrDefault("UserName")
  valid_607871 = validateParameter(valid_607871, JString, required = false,
                                 default = nil)
  if valid_607871 != nil:
    section.add "UserName", valid_607871
  assert formData != nil,
        "formData argument is necessary due to required `Status` field"
  var valid_607872 = formData.getOrDefault("Status")
  valid_607872 = validateParameter(valid_607872, JString, required = true,
                                 default = newJString("Active"))
  if valid_607872 != nil:
    section.add "Status", valid_607872
  var valid_607873 = formData.getOrDefault("CertificateId")
  valid_607873 = validateParameter(valid_607873, JString, required = true,
                                 default = nil)
  if valid_607873 != nil:
    section.add "CertificateId", valid_607873
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607874: Call_PostUpdateSigningCertificate_607859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_607874.validator(path, query, header, formData, body)
  let scheme = call_607874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607874.url(scheme.get, call_607874.host, call_607874.base,
                         call_607874.route, valid.getOrDefault("path"))
  result = hook(call_607874, url, valid)

proc call*(call_607875: Call_PostUpdateSigningCertificate_607859;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607876 = newJObject()
  var formData_607877 = newJObject()
  add(formData_607877, "UserName", newJString(UserName))
  add(formData_607877, "Status", newJString(Status))
  add(formData_607877, "CertificateId", newJString(CertificateId))
  add(query_607876, "Action", newJString(Action))
  add(query_607876, "Version", newJString(Version))
  result = call_607875.call(nil, query_607876, nil, formData_607877, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_607859(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_607860, base: "/",
    url: url_PostUpdateSigningCertificate_607861,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_607841 = ref object of OpenApiRestCall_602433
proc url_GetUpdateSigningCertificate_607843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSigningCertificate_607842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_607844 = query.getOrDefault("Status")
  valid_607844 = validateParameter(valid_607844, JString, required = true,
                                 default = newJString("Active"))
  if valid_607844 != nil:
    section.add "Status", valid_607844
  var valid_607845 = query.getOrDefault("CertificateId")
  valid_607845 = validateParameter(valid_607845, JString, required = true,
                                 default = nil)
  if valid_607845 != nil:
    section.add "CertificateId", valid_607845
  var valid_607846 = query.getOrDefault("UserName")
  valid_607846 = validateParameter(valid_607846, JString, required = false,
                                 default = nil)
  if valid_607846 != nil:
    section.add "UserName", valid_607846
  var valid_607847 = query.getOrDefault("Action")
  valid_607847 = validateParameter(valid_607847, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_607847 != nil:
    section.add "Action", valid_607847
  var valid_607848 = query.getOrDefault("Version")
  valid_607848 = validateParameter(valid_607848, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607848 != nil:
    section.add "Version", valid_607848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607849 = header.getOrDefault("X-Amz-Date")
  valid_607849 = validateParameter(valid_607849, JString, required = false,
                                 default = nil)
  if valid_607849 != nil:
    section.add "X-Amz-Date", valid_607849
  var valid_607850 = header.getOrDefault("X-Amz-Security-Token")
  valid_607850 = validateParameter(valid_607850, JString, required = false,
                                 default = nil)
  if valid_607850 != nil:
    section.add "X-Amz-Security-Token", valid_607850
  var valid_607851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "X-Amz-Content-Sha256", valid_607851
  var valid_607852 = header.getOrDefault("X-Amz-Algorithm")
  valid_607852 = validateParameter(valid_607852, JString, required = false,
                                 default = nil)
  if valid_607852 != nil:
    section.add "X-Amz-Algorithm", valid_607852
  var valid_607853 = header.getOrDefault("X-Amz-Signature")
  valid_607853 = validateParameter(valid_607853, JString, required = false,
                                 default = nil)
  if valid_607853 != nil:
    section.add "X-Amz-Signature", valid_607853
  var valid_607854 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607854 = validateParameter(valid_607854, JString, required = false,
                                 default = nil)
  if valid_607854 != nil:
    section.add "X-Amz-SignedHeaders", valid_607854
  var valid_607855 = header.getOrDefault("X-Amz-Credential")
  valid_607855 = validateParameter(valid_607855, JString, required = false,
                                 default = nil)
  if valid_607855 != nil:
    section.add "X-Amz-Credential", valid_607855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607856: Call_GetUpdateSigningCertificate_607841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_607856.validator(path, query, header, formData, body)
  let scheme = call_607856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607856.url(scheme.get, call_607856.host, call_607856.base,
                         call_607856.route, valid.getOrDefault("path"))
  result = hook(call_607856, url, valid)

proc call*(call_607857: Call_GetUpdateSigningCertificate_607841;
          CertificateId: string; Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607858 = newJObject()
  add(query_607858, "Status", newJString(Status))
  add(query_607858, "CertificateId", newJString(CertificateId))
  add(query_607858, "UserName", newJString(UserName))
  add(query_607858, "Action", newJString(Action))
  add(query_607858, "Version", newJString(Version))
  result = call_607857.call(nil, query_607858, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_607841(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_607842, base: "/",
    url: url_GetUpdateSigningCertificate_607843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_607896 = ref object of OpenApiRestCall_602433
proc url_PostUpdateUser_607898(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateUser_607897(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607899 = query.getOrDefault("Action")
  valid_607899 = validateParameter(valid_607899, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_607899 != nil:
    section.add "Action", valid_607899
  var valid_607900 = query.getOrDefault("Version")
  valid_607900 = validateParameter(valid_607900, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607900 != nil:
    section.add "Version", valid_607900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607901 = header.getOrDefault("X-Amz-Date")
  valid_607901 = validateParameter(valid_607901, JString, required = false,
                                 default = nil)
  if valid_607901 != nil:
    section.add "X-Amz-Date", valid_607901
  var valid_607902 = header.getOrDefault("X-Amz-Security-Token")
  valid_607902 = validateParameter(valid_607902, JString, required = false,
                                 default = nil)
  if valid_607902 != nil:
    section.add "X-Amz-Security-Token", valid_607902
  var valid_607903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607903 = validateParameter(valid_607903, JString, required = false,
                                 default = nil)
  if valid_607903 != nil:
    section.add "X-Amz-Content-Sha256", valid_607903
  var valid_607904 = header.getOrDefault("X-Amz-Algorithm")
  valid_607904 = validateParameter(valid_607904, JString, required = false,
                                 default = nil)
  if valid_607904 != nil:
    section.add "X-Amz-Algorithm", valid_607904
  var valid_607905 = header.getOrDefault("X-Amz-Signature")
  valid_607905 = validateParameter(valid_607905, JString, required = false,
                                 default = nil)
  if valid_607905 != nil:
    section.add "X-Amz-Signature", valid_607905
  var valid_607906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607906 = validateParameter(valid_607906, JString, required = false,
                                 default = nil)
  if valid_607906 != nil:
    section.add "X-Amz-SignedHeaders", valid_607906
  var valid_607907 = header.getOrDefault("X-Amz-Credential")
  valid_607907 = validateParameter(valid_607907, JString, required = false,
                                 default = nil)
  if valid_607907 != nil:
    section.add "X-Amz-Credential", valid_607907
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607908 = formData.getOrDefault("UserName")
  valid_607908 = validateParameter(valid_607908, JString, required = true,
                                 default = nil)
  if valid_607908 != nil:
    section.add "UserName", valid_607908
  var valid_607909 = formData.getOrDefault("NewUserName")
  valid_607909 = validateParameter(valid_607909, JString, required = false,
                                 default = nil)
  if valid_607909 != nil:
    section.add "NewUserName", valid_607909
  var valid_607910 = formData.getOrDefault("NewPath")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "NewPath", valid_607910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607911: Call_PostUpdateUser_607896; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_607911.validator(path, query, header, formData, body)
  let scheme = call_607911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607911.url(scheme.get, call_607911.host, call_607911.base,
                         call_607911.route, valid.getOrDefault("path"))
  result = hook(call_607911, url, valid)

proc call*(call_607912: Call_PostUpdateUser_607896; UserName: string;
          NewUserName: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_607913 = newJObject()
  var formData_607914 = newJObject()
  add(formData_607914, "UserName", newJString(UserName))
  add(formData_607914, "NewUserName", newJString(NewUserName))
  add(query_607913, "Action", newJString(Action))
  add(query_607913, "Version", newJString(Version))
  add(formData_607914, "NewPath", newJString(NewPath))
  result = call_607912.call(nil, query_607913, nil, formData_607914, nil)

var postUpdateUser* = Call_PostUpdateUser_607896(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_607897,
    base: "/", url: url_PostUpdateUser_607898, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_607878 = ref object of OpenApiRestCall_602433
proc url_GetUpdateUser_607880(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateUser_607879(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_607881 = query.getOrDefault("UserName")
  valid_607881 = validateParameter(valid_607881, JString, required = true,
                                 default = nil)
  if valid_607881 != nil:
    section.add "UserName", valid_607881
  var valid_607882 = query.getOrDefault("Action")
  valid_607882 = validateParameter(valid_607882, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_607882 != nil:
    section.add "Action", valid_607882
  var valid_607883 = query.getOrDefault("NewUserName")
  valid_607883 = validateParameter(valid_607883, JString, required = false,
                                 default = nil)
  if valid_607883 != nil:
    section.add "NewUserName", valid_607883
  var valid_607884 = query.getOrDefault("NewPath")
  valid_607884 = validateParameter(valid_607884, JString, required = false,
                                 default = nil)
  if valid_607884 != nil:
    section.add "NewPath", valid_607884
  var valid_607885 = query.getOrDefault("Version")
  valid_607885 = validateParameter(valid_607885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607885 != nil:
    section.add "Version", valid_607885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607886 = header.getOrDefault("X-Amz-Date")
  valid_607886 = validateParameter(valid_607886, JString, required = false,
                                 default = nil)
  if valid_607886 != nil:
    section.add "X-Amz-Date", valid_607886
  var valid_607887 = header.getOrDefault("X-Amz-Security-Token")
  valid_607887 = validateParameter(valid_607887, JString, required = false,
                                 default = nil)
  if valid_607887 != nil:
    section.add "X-Amz-Security-Token", valid_607887
  var valid_607888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607888 = validateParameter(valid_607888, JString, required = false,
                                 default = nil)
  if valid_607888 != nil:
    section.add "X-Amz-Content-Sha256", valid_607888
  var valid_607889 = header.getOrDefault("X-Amz-Algorithm")
  valid_607889 = validateParameter(valid_607889, JString, required = false,
                                 default = nil)
  if valid_607889 != nil:
    section.add "X-Amz-Algorithm", valid_607889
  var valid_607890 = header.getOrDefault("X-Amz-Signature")
  valid_607890 = validateParameter(valid_607890, JString, required = false,
                                 default = nil)
  if valid_607890 != nil:
    section.add "X-Amz-Signature", valid_607890
  var valid_607891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607891 = validateParameter(valid_607891, JString, required = false,
                                 default = nil)
  if valid_607891 != nil:
    section.add "X-Amz-SignedHeaders", valid_607891
  var valid_607892 = header.getOrDefault("X-Amz-Credential")
  valid_607892 = validateParameter(valid_607892, JString, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "X-Amz-Credential", valid_607892
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607893: Call_GetUpdateUser_607878; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_607893.validator(path, query, header, formData, body)
  let scheme = call_607893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607893.url(scheme.get, call_607893.host, call_607893.base,
                         call_607893.route, valid.getOrDefault("path"))
  result = hook(call_607893, url, valid)

proc call*(call_607894: Call_GetUpdateUser_607878; UserName: string;
          Action: string = "UpdateUser"; NewUserName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_607895 = newJObject()
  add(query_607895, "UserName", newJString(UserName))
  add(query_607895, "Action", newJString(Action))
  add(query_607895, "NewUserName", newJString(NewUserName))
  add(query_607895, "NewPath", newJString(NewPath))
  add(query_607895, "Version", newJString(Version))
  result = call_607894.call(nil, query_607895, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_607878(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_607879,
    base: "/", url: url_GetUpdateUser_607880, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_607932 = ref object of OpenApiRestCall_602433
proc url_PostUploadSSHPublicKey_607934(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSSHPublicKey_607933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607935 = query.getOrDefault("Action")
  valid_607935 = validateParameter(valid_607935, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_607935 != nil:
    section.add "Action", valid_607935
  var valid_607936 = query.getOrDefault("Version")
  valid_607936 = validateParameter(valid_607936, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607936 != nil:
    section.add "Version", valid_607936
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607937 = header.getOrDefault("X-Amz-Date")
  valid_607937 = validateParameter(valid_607937, JString, required = false,
                                 default = nil)
  if valid_607937 != nil:
    section.add "X-Amz-Date", valid_607937
  var valid_607938 = header.getOrDefault("X-Amz-Security-Token")
  valid_607938 = validateParameter(valid_607938, JString, required = false,
                                 default = nil)
  if valid_607938 != nil:
    section.add "X-Amz-Security-Token", valid_607938
  var valid_607939 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607939 = validateParameter(valid_607939, JString, required = false,
                                 default = nil)
  if valid_607939 != nil:
    section.add "X-Amz-Content-Sha256", valid_607939
  var valid_607940 = header.getOrDefault("X-Amz-Algorithm")
  valid_607940 = validateParameter(valid_607940, JString, required = false,
                                 default = nil)
  if valid_607940 != nil:
    section.add "X-Amz-Algorithm", valid_607940
  var valid_607941 = header.getOrDefault("X-Amz-Signature")
  valid_607941 = validateParameter(valid_607941, JString, required = false,
                                 default = nil)
  if valid_607941 != nil:
    section.add "X-Amz-Signature", valid_607941
  var valid_607942 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607942 = validateParameter(valid_607942, JString, required = false,
                                 default = nil)
  if valid_607942 != nil:
    section.add "X-Amz-SignedHeaders", valid_607942
  var valid_607943 = header.getOrDefault("X-Amz-Credential")
  valid_607943 = validateParameter(valid_607943, JString, required = false,
                                 default = nil)
  if valid_607943 != nil:
    section.add "X-Amz-Credential", valid_607943
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_607944 = formData.getOrDefault("UserName")
  valid_607944 = validateParameter(valid_607944, JString, required = true,
                                 default = nil)
  if valid_607944 != nil:
    section.add "UserName", valid_607944
  var valid_607945 = formData.getOrDefault("SSHPublicKeyBody")
  valid_607945 = validateParameter(valid_607945, JString, required = true,
                                 default = nil)
  if valid_607945 != nil:
    section.add "SSHPublicKeyBody", valid_607945
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607946: Call_PostUploadSSHPublicKey_607932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607946.validator(path, query, header, formData, body)
  let scheme = call_607946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607946.url(scheme.get, call_607946.host, call_607946.base,
                         call_607946.route, valid.getOrDefault("path"))
  result = hook(call_607946, url, valid)

proc call*(call_607947: Call_PostUploadSSHPublicKey_607932; UserName: string;
          SSHPublicKeyBody: string; Action: string = "UploadSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607948 = newJObject()
  var formData_607949 = newJObject()
  add(formData_607949, "UserName", newJString(UserName))
  add(formData_607949, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_607948, "Action", newJString(Action))
  add(query_607948, "Version", newJString(Version))
  result = call_607947.call(nil, query_607948, nil, formData_607949, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_607932(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_607933, base: "/",
    url: url_PostUploadSSHPublicKey_607934, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_607915 = ref object of OpenApiRestCall_602433
proc url_GetUploadSSHPublicKey_607917(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSSHPublicKey_607916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_607918 = query.getOrDefault("SSHPublicKeyBody")
  valid_607918 = validateParameter(valid_607918, JString, required = true,
                                 default = nil)
  if valid_607918 != nil:
    section.add "SSHPublicKeyBody", valid_607918
  var valid_607919 = query.getOrDefault("UserName")
  valid_607919 = validateParameter(valid_607919, JString, required = true,
                                 default = nil)
  if valid_607919 != nil:
    section.add "UserName", valid_607919
  var valid_607920 = query.getOrDefault("Action")
  valid_607920 = validateParameter(valid_607920, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_607920 != nil:
    section.add "Action", valid_607920
  var valid_607921 = query.getOrDefault("Version")
  valid_607921 = validateParameter(valid_607921, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607921 != nil:
    section.add "Version", valid_607921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607922 = header.getOrDefault("X-Amz-Date")
  valid_607922 = validateParameter(valid_607922, JString, required = false,
                                 default = nil)
  if valid_607922 != nil:
    section.add "X-Amz-Date", valid_607922
  var valid_607923 = header.getOrDefault("X-Amz-Security-Token")
  valid_607923 = validateParameter(valid_607923, JString, required = false,
                                 default = nil)
  if valid_607923 != nil:
    section.add "X-Amz-Security-Token", valid_607923
  var valid_607924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607924 = validateParameter(valid_607924, JString, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "X-Amz-Content-Sha256", valid_607924
  var valid_607925 = header.getOrDefault("X-Amz-Algorithm")
  valid_607925 = validateParameter(valid_607925, JString, required = false,
                                 default = nil)
  if valid_607925 != nil:
    section.add "X-Amz-Algorithm", valid_607925
  var valid_607926 = header.getOrDefault("X-Amz-Signature")
  valid_607926 = validateParameter(valid_607926, JString, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "X-Amz-Signature", valid_607926
  var valid_607927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "X-Amz-SignedHeaders", valid_607927
  var valid_607928 = header.getOrDefault("X-Amz-Credential")
  valid_607928 = validateParameter(valid_607928, JString, required = false,
                                 default = nil)
  if valid_607928 != nil:
    section.add "X-Amz-Credential", valid_607928
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607929: Call_GetUploadSSHPublicKey_607915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_607929.validator(path, query, header, formData, body)
  let scheme = call_607929.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607929.url(scheme.get, call_607929.host, call_607929.base,
                         call_607929.route, valid.getOrDefault("path"))
  result = hook(call_607929, url, valid)

proc call*(call_607930: Call_GetUploadSSHPublicKey_607915;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607931 = newJObject()
  add(query_607931, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_607931, "UserName", newJString(UserName))
  add(query_607931, "Action", newJString(Action))
  add(query_607931, "Version", newJString(Version))
  result = call_607930.call(nil, query_607931, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_607915(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_607916, base: "/",
    url: url_GetUploadSSHPublicKey_607917, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_607970 = ref object of OpenApiRestCall_602433
proc url_PostUploadServerCertificate_607972(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadServerCertificate_607971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607973 = query.getOrDefault("Action")
  valid_607973 = validateParameter(valid_607973, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_607973 != nil:
    section.add "Action", valid_607973
  var valid_607974 = query.getOrDefault("Version")
  valid_607974 = validateParameter(valid_607974, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607974 != nil:
    section.add "Version", valid_607974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607975 = header.getOrDefault("X-Amz-Date")
  valid_607975 = validateParameter(valid_607975, JString, required = false,
                                 default = nil)
  if valid_607975 != nil:
    section.add "X-Amz-Date", valid_607975
  var valid_607976 = header.getOrDefault("X-Amz-Security-Token")
  valid_607976 = validateParameter(valid_607976, JString, required = false,
                                 default = nil)
  if valid_607976 != nil:
    section.add "X-Amz-Security-Token", valid_607976
  var valid_607977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607977 = validateParameter(valid_607977, JString, required = false,
                                 default = nil)
  if valid_607977 != nil:
    section.add "X-Amz-Content-Sha256", valid_607977
  var valid_607978 = header.getOrDefault("X-Amz-Algorithm")
  valid_607978 = validateParameter(valid_607978, JString, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "X-Amz-Algorithm", valid_607978
  var valid_607979 = header.getOrDefault("X-Amz-Signature")
  valid_607979 = validateParameter(valid_607979, JString, required = false,
                                 default = nil)
  if valid_607979 != nil:
    section.add "X-Amz-Signature", valid_607979
  var valid_607980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607980 = validateParameter(valid_607980, JString, required = false,
                                 default = nil)
  if valid_607980 != nil:
    section.add "X-Amz-SignedHeaders", valid_607980
  var valid_607981 = header.getOrDefault("X-Amz-Credential")
  valid_607981 = validateParameter(valid_607981, JString, required = false,
                                 default = nil)
  if valid_607981 != nil:
    section.add "X-Amz-Credential", valid_607981
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_607982 = formData.getOrDefault("CertificateBody")
  valid_607982 = validateParameter(valid_607982, JString, required = true,
                                 default = nil)
  if valid_607982 != nil:
    section.add "CertificateBody", valid_607982
  var valid_607983 = formData.getOrDefault("ServerCertificateName")
  valid_607983 = validateParameter(valid_607983, JString, required = true,
                                 default = nil)
  if valid_607983 != nil:
    section.add "ServerCertificateName", valid_607983
  var valid_607984 = formData.getOrDefault("PrivateKey")
  valid_607984 = validateParameter(valid_607984, JString, required = true,
                                 default = nil)
  if valid_607984 != nil:
    section.add "PrivateKey", valid_607984
  var valid_607985 = formData.getOrDefault("CertificateChain")
  valid_607985 = validateParameter(valid_607985, JString, required = false,
                                 default = nil)
  if valid_607985 != nil:
    section.add "CertificateChain", valid_607985
  var valid_607986 = formData.getOrDefault("Path")
  valid_607986 = validateParameter(valid_607986, JString, required = false,
                                 default = nil)
  if valid_607986 != nil:
    section.add "Path", valid_607986
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607987: Call_PostUploadServerCertificate_607970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_607987.validator(path, query, header, formData, body)
  let scheme = call_607987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607987.url(scheme.get, call_607987.host, call_607987.base,
                         call_607987.route, valid.getOrDefault("path"))
  result = hook(call_607987, url, valid)

proc call*(call_607988: Call_PostUploadServerCertificate_607970;
          CertificateBody: string; ServerCertificateName: string;
          PrivateKey: string; Action: string = "UploadServerCertificate";
          CertificateChain: string = ""; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  var query_607989 = newJObject()
  var formData_607990 = newJObject()
  add(formData_607990, "CertificateBody", newJString(CertificateBody))
  add(formData_607990, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607989, "Action", newJString(Action))
  add(formData_607990, "PrivateKey", newJString(PrivateKey))
  add(formData_607990, "CertificateChain", newJString(CertificateChain))
  add(query_607989, "Version", newJString(Version))
  add(formData_607990, "Path", newJString(Path))
  result = call_607988.call(nil, query_607989, nil, formData_607990, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_607970(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_607971, base: "/",
    url: url_PostUploadServerCertificate_607972,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_607950 = ref object of OpenApiRestCall_602433
proc url_GetUploadServerCertificate_607952(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadServerCertificate_607951(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_607953 = query.getOrDefault("ServerCertificateName")
  valid_607953 = validateParameter(valid_607953, JString, required = true,
                                 default = nil)
  if valid_607953 != nil:
    section.add "ServerCertificateName", valid_607953
  var valid_607954 = query.getOrDefault("CertificateBody")
  valid_607954 = validateParameter(valid_607954, JString, required = true,
                                 default = nil)
  if valid_607954 != nil:
    section.add "CertificateBody", valid_607954
  var valid_607955 = query.getOrDefault("CertificateChain")
  valid_607955 = validateParameter(valid_607955, JString, required = false,
                                 default = nil)
  if valid_607955 != nil:
    section.add "CertificateChain", valid_607955
  var valid_607956 = query.getOrDefault("Action")
  valid_607956 = validateParameter(valid_607956, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_607956 != nil:
    section.add "Action", valid_607956
  var valid_607957 = query.getOrDefault("Path")
  valid_607957 = validateParameter(valid_607957, JString, required = false,
                                 default = nil)
  if valid_607957 != nil:
    section.add "Path", valid_607957
  var valid_607958 = query.getOrDefault("PrivateKey")
  valid_607958 = validateParameter(valid_607958, JString, required = true,
                                 default = nil)
  if valid_607958 != nil:
    section.add "PrivateKey", valid_607958
  var valid_607959 = query.getOrDefault("Version")
  valid_607959 = validateParameter(valid_607959, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607959 != nil:
    section.add "Version", valid_607959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607960 = header.getOrDefault("X-Amz-Date")
  valid_607960 = validateParameter(valid_607960, JString, required = false,
                                 default = nil)
  if valid_607960 != nil:
    section.add "X-Amz-Date", valid_607960
  var valid_607961 = header.getOrDefault("X-Amz-Security-Token")
  valid_607961 = validateParameter(valid_607961, JString, required = false,
                                 default = nil)
  if valid_607961 != nil:
    section.add "X-Amz-Security-Token", valid_607961
  var valid_607962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607962 = validateParameter(valid_607962, JString, required = false,
                                 default = nil)
  if valid_607962 != nil:
    section.add "X-Amz-Content-Sha256", valid_607962
  var valid_607963 = header.getOrDefault("X-Amz-Algorithm")
  valid_607963 = validateParameter(valid_607963, JString, required = false,
                                 default = nil)
  if valid_607963 != nil:
    section.add "X-Amz-Algorithm", valid_607963
  var valid_607964 = header.getOrDefault("X-Amz-Signature")
  valid_607964 = validateParameter(valid_607964, JString, required = false,
                                 default = nil)
  if valid_607964 != nil:
    section.add "X-Amz-Signature", valid_607964
  var valid_607965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607965 = validateParameter(valid_607965, JString, required = false,
                                 default = nil)
  if valid_607965 != nil:
    section.add "X-Amz-SignedHeaders", valid_607965
  var valid_607966 = header.getOrDefault("X-Amz-Credential")
  valid_607966 = validateParameter(valid_607966, JString, required = false,
                                 default = nil)
  if valid_607966 != nil:
    section.add "X-Amz-Credential", valid_607966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607967: Call_GetUploadServerCertificate_607950; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_607967.validator(path, query, header, formData, body)
  let scheme = call_607967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607967.url(scheme.get, call_607967.host, call_607967.base,
                         call_607967.route, valid.getOrDefault("path"))
  result = hook(call_607967, url, valid)

proc call*(call_607968: Call_GetUploadServerCertificate_607950;
          ServerCertificateName: string; CertificateBody: string;
          PrivateKey: string; CertificateChain: string = "";
          Action: string = "UploadServerCertificate"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_607969 = newJObject()
  add(query_607969, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_607969, "CertificateBody", newJString(CertificateBody))
  add(query_607969, "CertificateChain", newJString(CertificateChain))
  add(query_607969, "Action", newJString(Action))
  add(query_607969, "Path", newJString(Path))
  add(query_607969, "PrivateKey", newJString(PrivateKey))
  add(query_607969, "Version", newJString(Version))
  result = call_607968.call(nil, query_607969, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_607950(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_607951, base: "/",
    url: url_GetUploadServerCertificate_607952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_608008 = ref object of OpenApiRestCall_602433
proc url_PostUploadSigningCertificate_608010(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSigningCertificate_608009(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608011 = query.getOrDefault("Action")
  valid_608011 = validateParameter(valid_608011, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_608011 != nil:
    section.add "Action", valid_608011
  var valid_608012 = query.getOrDefault("Version")
  valid_608012 = validateParameter(valid_608012, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_608012 != nil:
    section.add "Version", valid_608012
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_608013 = header.getOrDefault("X-Amz-Date")
  valid_608013 = validateParameter(valid_608013, JString, required = false,
                                 default = nil)
  if valid_608013 != nil:
    section.add "X-Amz-Date", valid_608013
  var valid_608014 = header.getOrDefault("X-Amz-Security-Token")
  valid_608014 = validateParameter(valid_608014, JString, required = false,
                                 default = nil)
  if valid_608014 != nil:
    section.add "X-Amz-Security-Token", valid_608014
  var valid_608015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608015 = validateParameter(valid_608015, JString, required = false,
                                 default = nil)
  if valid_608015 != nil:
    section.add "X-Amz-Content-Sha256", valid_608015
  var valid_608016 = header.getOrDefault("X-Amz-Algorithm")
  valid_608016 = validateParameter(valid_608016, JString, required = false,
                                 default = nil)
  if valid_608016 != nil:
    section.add "X-Amz-Algorithm", valid_608016
  var valid_608017 = header.getOrDefault("X-Amz-Signature")
  valid_608017 = validateParameter(valid_608017, JString, required = false,
                                 default = nil)
  if valid_608017 != nil:
    section.add "X-Amz-Signature", valid_608017
  var valid_608018 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608018 = validateParameter(valid_608018, JString, required = false,
                                 default = nil)
  if valid_608018 != nil:
    section.add "X-Amz-SignedHeaders", valid_608018
  var valid_608019 = header.getOrDefault("X-Amz-Credential")
  valid_608019 = validateParameter(valid_608019, JString, required = false,
                                 default = nil)
  if valid_608019 != nil:
    section.add "X-Amz-Credential", valid_608019
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_608020 = formData.getOrDefault("CertificateBody")
  valid_608020 = validateParameter(valid_608020, JString, required = true,
                                 default = nil)
  if valid_608020 != nil:
    section.add "CertificateBody", valid_608020
  var valid_608021 = formData.getOrDefault("UserName")
  valid_608021 = validateParameter(valid_608021, JString, required = false,
                                 default = nil)
  if valid_608021 != nil:
    section.add "UserName", valid_608021
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608022: Call_PostUploadSigningCertificate_608008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_608022.validator(path, query, header, formData, body)
  let scheme = call_608022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608022.url(scheme.get, call_608022.host, call_608022.base,
                         call_608022.route, valid.getOrDefault("path"))
  result = hook(call_608022, url, valid)

proc call*(call_608023: Call_PostUploadSigningCertificate_608008;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608024 = newJObject()
  var formData_608025 = newJObject()
  add(formData_608025, "CertificateBody", newJString(CertificateBody))
  add(formData_608025, "UserName", newJString(UserName))
  add(query_608024, "Action", newJString(Action))
  add(query_608024, "Version", newJString(Version))
  result = call_608023.call(nil, query_608024, nil, formData_608025, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_608008(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_608009, base: "/",
    url: url_PostUploadSigningCertificate_608010,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_607991 = ref object of OpenApiRestCall_602433
proc url_GetUploadSigningCertificate_607993(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSigningCertificate_607992(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_607994 = query.getOrDefault("CertificateBody")
  valid_607994 = validateParameter(valid_607994, JString, required = true,
                                 default = nil)
  if valid_607994 != nil:
    section.add "CertificateBody", valid_607994
  var valid_607995 = query.getOrDefault("UserName")
  valid_607995 = validateParameter(valid_607995, JString, required = false,
                                 default = nil)
  if valid_607995 != nil:
    section.add "UserName", valid_607995
  var valid_607996 = query.getOrDefault("Action")
  valid_607996 = validateParameter(valid_607996, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_607996 != nil:
    section.add "Action", valid_607996
  var valid_607997 = query.getOrDefault("Version")
  valid_607997 = validateParameter(valid_607997, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_607997 != nil:
    section.add "Version", valid_607997
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_607998 = header.getOrDefault("X-Amz-Date")
  valid_607998 = validateParameter(valid_607998, JString, required = false,
                                 default = nil)
  if valid_607998 != nil:
    section.add "X-Amz-Date", valid_607998
  var valid_607999 = header.getOrDefault("X-Amz-Security-Token")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Security-Token", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-Content-Sha256", valid_608000
  var valid_608001 = header.getOrDefault("X-Amz-Algorithm")
  valid_608001 = validateParameter(valid_608001, JString, required = false,
                                 default = nil)
  if valid_608001 != nil:
    section.add "X-Amz-Algorithm", valid_608001
  var valid_608002 = header.getOrDefault("X-Amz-Signature")
  valid_608002 = validateParameter(valid_608002, JString, required = false,
                                 default = nil)
  if valid_608002 != nil:
    section.add "X-Amz-Signature", valid_608002
  var valid_608003 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608003 = validateParameter(valid_608003, JString, required = false,
                                 default = nil)
  if valid_608003 != nil:
    section.add "X-Amz-SignedHeaders", valid_608003
  var valid_608004 = header.getOrDefault("X-Amz-Credential")
  valid_608004 = validateParameter(valid_608004, JString, required = false,
                                 default = nil)
  if valid_608004 != nil:
    section.add "X-Amz-Credential", valid_608004
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608005: Call_GetUploadSigningCertificate_607991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_608005.validator(path, query, header, formData, body)
  let scheme = call_608005.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608005.url(scheme.get, call_608005.host, call_608005.base,
                         call_608005.route, valid.getOrDefault("path"))
  result = hook(call_608005, url, valid)

proc call*(call_608006: Call_GetUploadSigningCertificate_607991;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608007 = newJObject()
  add(query_608007, "CertificateBody", newJString(CertificateBody))
  add(query_608007, "UserName", newJString(UserName))
  add(query_608007, "Action", newJString(Action))
  add(query_608007, "Version", newJString(Version))
  result = call_608006.call(nil, query_608007, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_607991(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_607992, base: "/",
    url: url_GetUploadSigningCertificate_607993,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
