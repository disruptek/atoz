
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: AWS Identity and Access Management
## version: 2010-05-08
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/iam/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_600426 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_600426](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_600426): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
                           "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable, Scheme.Https: {
      "cn-northwest-1": "iam.cn-northwest-1.amazonaws.com.cn",
      "cn-north-1": "iam.cn-north-1.amazonaws.com.cn"}.toTable}.toTable
const
  awsServiceName = "iam"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddClientIDToOpenIDConnectProvider_601040 = ref object of OpenApiRestCall_600426
proc url_PostAddClientIDToOpenIDConnectProvider_601042(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddClientIDToOpenIDConnectProvider_601041(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601043 = query.getOrDefault("Action")
  valid_601043 = validateParameter(valid_601043, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_601043 != nil:
    section.add "Action", valid_601043
  var valid_601044 = query.getOrDefault("Version")
  valid_601044 = validateParameter(valid_601044, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601044 != nil:
    section.add "Version", valid_601044
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601045 = header.getOrDefault("X-Amz-Date")
  valid_601045 = validateParameter(valid_601045, JString, required = false,
                                 default = nil)
  if valid_601045 != nil:
    section.add "X-Amz-Date", valid_601045
  var valid_601046 = header.getOrDefault("X-Amz-Security-Token")
  valid_601046 = validateParameter(valid_601046, JString, required = false,
                                 default = nil)
  if valid_601046 != nil:
    section.add "X-Amz-Security-Token", valid_601046
  var valid_601047 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601047 = validateParameter(valid_601047, JString, required = false,
                                 default = nil)
  if valid_601047 != nil:
    section.add "X-Amz-Content-Sha256", valid_601047
  var valid_601048 = header.getOrDefault("X-Amz-Algorithm")
  valid_601048 = validateParameter(valid_601048, JString, required = false,
                                 default = nil)
  if valid_601048 != nil:
    section.add "X-Amz-Algorithm", valid_601048
  var valid_601049 = header.getOrDefault("X-Amz-Signature")
  valid_601049 = validateParameter(valid_601049, JString, required = false,
                                 default = nil)
  if valid_601049 != nil:
    section.add "X-Amz-Signature", valid_601049
  var valid_601050 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601050 = validateParameter(valid_601050, JString, required = false,
                                 default = nil)
  if valid_601050 != nil:
    section.add "X-Amz-SignedHeaders", valid_601050
  var valid_601051 = header.getOrDefault("X-Amz-Credential")
  valid_601051 = validateParameter(valid_601051, JString, required = false,
                                 default = nil)
  if valid_601051 != nil:
    section.add "X-Amz-Credential", valid_601051
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_601052 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_601052 = validateParameter(valid_601052, JString, required = true,
                                 default = nil)
  if valid_601052 != nil:
    section.add "OpenIDConnectProviderArn", valid_601052
  var valid_601053 = formData.getOrDefault("ClientID")
  valid_601053 = validateParameter(valid_601053, JString, required = true,
                                 default = nil)
  if valid_601053 != nil:
    section.add "ClientID", valid_601053
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601054: Call_PostAddClientIDToOpenIDConnectProvider_601040;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_601054.validator(path, query, header, formData, body)
  let scheme = call_601054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601054.url(scheme.get, call_601054.host, call_601054.base,
                         call_601054.route, valid.getOrDefault("path"))
  result = hook(call_601054, url, valid)

proc call*(call_601055: Call_PostAddClientIDToOpenIDConnectProvider_601040;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  var query_601056 = newJObject()
  var formData_601057 = newJObject()
  add(formData_601057, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_601056, "Action", newJString(Action))
  add(query_601056, "Version", newJString(Version))
  add(formData_601057, "ClientID", newJString(ClientID))
  result = call_601055.call(nil, query_601056, nil, formData_601057, nil)

var postAddClientIDToOpenIDConnectProvider* = Call_PostAddClientIDToOpenIDConnectProvider_601040(
    name: "postAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_PostAddClientIDToOpenIDConnectProvider_601041, base: "/",
    url: url_PostAddClientIDToOpenIDConnectProvider_601042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddClientIDToOpenIDConnectProvider_600768 = ref object of OpenApiRestCall_600426
proc url_GetAddClientIDToOpenIDConnectProvider_600770(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddClientIDToOpenIDConnectProvider_600769(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_600882 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_600882 = validateParameter(valid_600882, JString, required = true,
                                 default = nil)
  if valid_600882 != nil:
    section.add "OpenIDConnectProviderArn", valid_600882
  var valid_600896 = query.getOrDefault("Action")
  valid_600896 = validateParameter(valid_600896, JString, required = true, default = newJString(
      "AddClientIDToOpenIDConnectProvider"))
  if valid_600896 != nil:
    section.add "Action", valid_600896
  var valid_600897 = query.getOrDefault("ClientID")
  valid_600897 = validateParameter(valid_600897, JString, required = true,
                                 default = nil)
  if valid_600897 != nil:
    section.add "ClientID", valid_600897
  var valid_600898 = query.getOrDefault("Version")
  valid_600898 = validateParameter(valid_600898, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_600898 != nil:
    section.add "Version", valid_600898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_600899 = header.getOrDefault("X-Amz-Date")
  valid_600899 = validateParameter(valid_600899, JString, required = false,
                                 default = nil)
  if valid_600899 != nil:
    section.add "X-Amz-Date", valid_600899
  var valid_600900 = header.getOrDefault("X-Amz-Security-Token")
  valid_600900 = validateParameter(valid_600900, JString, required = false,
                                 default = nil)
  if valid_600900 != nil:
    section.add "X-Amz-Security-Token", valid_600900
  var valid_600901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_600901 = validateParameter(valid_600901, JString, required = false,
                                 default = nil)
  if valid_600901 != nil:
    section.add "X-Amz-Content-Sha256", valid_600901
  var valid_600902 = header.getOrDefault("X-Amz-Algorithm")
  valid_600902 = validateParameter(valid_600902, JString, required = false,
                                 default = nil)
  if valid_600902 != nil:
    section.add "X-Amz-Algorithm", valid_600902
  var valid_600903 = header.getOrDefault("X-Amz-Signature")
  valid_600903 = validateParameter(valid_600903, JString, required = false,
                                 default = nil)
  if valid_600903 != nil:
    section.add "X-Amz-Signature", valid_600903
  var valid_600904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_600904 = validateParameter(valid_600904, JString, required = false,
                                 default = nil)
  if valid_600904 != nil:
    section.add "X-Amz-SignedHeaders", valid_600904
  var valid_600905 = header.getOrDefault("X-Amz-Credential")
  valid_600905 = validateParameter(valid_600905, JString, required = false,
                                 default = nil)
  if valid_600905 != nil:
    section.add "X-Amz-Credential", valid_600905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_600928: Call_GetAddClientIDToOpenIDConnectProvider_600768;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ## 
  let valid = call_600928.validator(path, query, header, formData, body)
  let scheme = call_600928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_600928.url(scheme.get, call_600928.host, call_600928.base,
                         call_600928.route, valid.getOrDefault("path"))
  result = hook(call_600928, url, valid)

proc call*(call_600999: Call_GetAddClientIDToOpenIDConnectProvider_600768;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "AddClientIDToOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getAddClientIDToOpenIDConnectProvider
  ## <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
  ##   Version: string (required)
  var query_601000 = newJObject()
  add(query_601000, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_601000, "Action", newJString(Action))
  add(query_601000, "ClientID", newJString(ClientID))
  add(query_601000, "Version", newJString(Version))
  result = call_600999.call(nil, query_601000, nil, nil, nil)

var getAddClientIDToOpenIDConnectProvider* = Call_GetAddClientIDToOpenIDConnectProvider_600768(
    name: "getAddClientIDToOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=AddClientIDToOpenIDConnectProvider",
    validator: validate_GetAddClientIDToOpenIDConnectProvider_600769, base: "/",
    url: url_GetAddClientIDToOpenIDConnectProvider_600770,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToInstanceProfile_601075 = ref object of OpenApiRestCall_600426
proc url_PostAddRoleToInstanceProfile_601077(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddRoleToInstanceProfile_601076(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601078 = query.getOrDefault("Action")
  valid_601078 = validateParameter(valid_601078, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_601078 != nil:
    section.add "Action", valid_601078
  var valid_601079 = query.getOrDefault("Version")
  valid_601079 = validateParameter(valid_601079, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601079 != nil:
    section.add "Version", valid_601079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601080 = header.getOrDefault("X-Amz-Date")
  valid_601080 = validateParameter(valid_601080, JString, required = false,
                                 default = nil)
  if valid_601080 != nil:
    section.add "X-Amz-Date", valid_601080
  var valid_601081 = header.getOrDefault("X-Amz-Security-Token")
  valid_601081 = validateParameter(valid_601081, JString, required = false,
                                 default = nil)
  if valid_601081 != nil:
    section.add "X-Amz-Security-Token", valid_601081
  var valid_601082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601082 = validateParameter(valid_601082, JString, required = false,
                                 default = nil)
  if valid_601082 != nil:
    section.add "X-Amz-Content-Sha256", valid_601082
  var valid_601083 = header.getOrDefault("X-Amz-Algorithm")
  valid_601083 = validateParameter(valid_601083, JString, required = false,
                                 default = nil)
  if valid_601083 != nil:
    section.add "X-Amz-Algorithm", valid_601083
  var valid_601084 = header.getOrDefault("X-Amz-Signature")
  valid_601084 = validateParameter(valid_601084, JString, required = false,
                                 default = nil)
  if valid_601084 != nil:
    section.add "X-Amz-Signature", valid_601084
  var valid_601085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601085 = validateParameter(valid_601085, JString, required = false,
                                 default = nil)
  if valid_601085 != nil:
    section.add "X-Amz-SignedHeaders", valid_601085
  var valid_601086 = header.getOrDefault("X-Amz-Credential")
  valid_601086 = validateParameter(valid_601086, JString, required = false,
                                 default = nil)
  if valid_601086 != nil:
    section.add "X-Amz-Credential", valid_601086
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_601087 = formData.getOrDefault("RoleName")
  valid_601087 = validateParameter(valid_601087, JString, required = true,
                                 default = nil)
  if valid_601087 != nil:
    section.add "RoleName", valid_601087
  var valid_601088 = formData.getOrDefault("InstanceProfileName")
  valid_601088 = validateParameter(valid_601088, JString, required = true,
                                 default = nil)
  if valid_601088 != nil:
    section.add "InstanceProfileName", valid_601088
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601089: Call_PostAddRoleToInstanceProfile_601075; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_601089.validator(path, query, header, formData, body)
  let scheme = call_601089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601089.url(scheme.get, call_601089.host, call_601089.base,
                         call_601089.route, valid.getOrDefault("path"))
  result = hook(call_601089, url, valid)

proc call*(call_601090: Call_PostAddRoleToInstanceProfile_601075; RoleName: string;
          InstanceProfileName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601091 = newJObject()
  var formData_601092 = newJObject()
  add(formData_601092, "RoleName", newJString(RoleName))
  add(query_601091, "Action", newJString(Action))
  add(formData_601092, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_601091, "Version", newJString(Version))
  result = call_601090.call(nil, query_601091, nil, formData_601092, nil)

var postAddRoleToInstanceProfile* = Call_PostAddRoleToInstanceProfile_601075(
    name: "postAddRoleToInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_PostAddRoleToInstanceProfile_601076, base: "/",
    url: url_PostAddRoleToInstanceProfile_601077,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToInstanceProfile_601058 = ref object of OpenApiRestCall_600426
proc url_GetAddRoleToInstanceProfile_601060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddRoleToInstanceProfile_601059(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_601061 = query.getOrDefault("InstanceProfileName")
  valid_601061 = validateParameter(valid_601061, JString, required = true,
                                 default = nil)
  if valid_601061 != nil:
    section.add "InstanceProfileName", valid_601061
  var valid_601062 = query.getOrDefault("Action")
  valid_601062 = validateParameter(valid_601062, JString, required = true, default = newJString(
      "AddRoleToInstanceProfile"))
  if valid_601062 != nil:
    section.add "Action", valid_601062
  var valid_601063 = query.getOrDefault("RoleName")
  valid_601063 = validateParameter(valid_601063, JString, required = true,
                                 default = nil)
  if valid_601063 != nil:
    section.add "RoleName", valid_601063
  var valid_601064 = query.getOrDefault("Version")
  valid_601064 = validateParameter(valid_601064, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601064 != nil:
    section.add "Version", valid_601064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601065 = header.getOrDefault("X-Amz-Date")
  valid_601065 = validateParameter(valid_601065, JString, required = false,
                                 default = nil)
  if valid_601065 != nil:
    section.add "X-Amz-Date", valid_601065
  var valid_601066 = header.getOrDefault("X-Amz-Security-Token")
  valid_601066 = validateParameter(valid_601066, JString, required = false,
                                 default = nil)
  if valid_601066 != nil:
    section.add "X-Amz-Security-Token", valid_601066
  var valid_601067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601067 = validateParameter(valid_601067, JString, required = false,
                                 default = nil)
  if valid_601067 != nil:
    section.add "X-Amz-Content-Sha256", valid_601067
  var valid_601068 = header.getOrDefault("X-Amz-Algorithm")
  valid_601068 = validateParameter(valid_601068, JString, required = false,
                                 default = nil)
  if valid_601068 != nil:
    section.add "X-Amz-Algorithm", valid_601068
  var valid_601069 = header.getOrDefault("X-Amz-Signature")
  valid_601069 = validateParameter(valid_601069, JString, required = false,
                                 default = nil)
  if valid_601069 != nil:
    section.add "X-Amz-Signature", valid_601069
  var valid_601070 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601070 = validateParameter(valid_601070, JString, required = false,
                                 default = nil)
  if valid_601070 != nil:
    section.add "X-Amz-SignedHeaders", valid_601070
  var valid_601071 = header.getOrDefault("X-Amz-Credential")
  valid_601071 = validateParameter(valid_601071, JString, required = false,
                                 default = nil)
  if valid_601071 != nil:
    section.add "X-Amz-Credential", valid_601071
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601072: Call_GetAddRoleToInstanceProfile_601058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_601072.validator(path, query, header, formData, body)
  let scheme = call_601072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601072.url(scheme.get, call_601072.host, call_601072.base,
                         call_601072.route, valid.getOrDefault("path"))
  result = hook(call_601072, url, valid)

proc call*(call_601073: Call_GetAddRoleToInstanceProfile_601058;
          InstanceProfileName: string; RoleName: string;
          Action: string = "AddRoleToInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getAddRoleToInstanceProfile
  ## <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of AWS because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p>For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601074 = newJObject()
  add(query_601074, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_601074, "Action", newJString(Action))
  add(query_601074, "RoleName", newJString(RoleName))
  add(query_601074, "Version", newJString(Version))
  result = call_601073.call(nil, query_601074, nil, nil, nil)

var getAddRoleToInstanceProfile* = Call_GetAddRoleToInstanceProfile_601058(
    name: "getAddRoleToInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AddRoleToInstanceProfile",
    validator: validate_GetAddRoleToInstanceProfile_601059, base: "/",
    url: url_GetAddRoleToInstanceProfile_601060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddUserToGroup_601110 = ref object of OpenApiRestCall_600426
proc url_PostAddUserToGroup_601112(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddUserToGroup_601111(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601113 = query.getOrDefault("Action")
  valid_601113 = validateParameter(valid_601113, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_601113 != nil:
    section.add "Action", valid_601113
  var valid_601114 = query.getOrDefault("Version")
  valid_601114 = validateParameter(valid_601114, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601114 != nil:
    section.add "Version", valid_601114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601115 = header.getOrDefault("X-Amz-Date")
  valid_601115 = validateParameter(valid_601115, JString, required = false,
                                 default = nil)
  if valid_601115 != nil:
    section.add "X-Amz-Date", valid_601115
  var valid_601116 = header.getOrDefault("X-Amz-Security-Token")
  valid_601116 = validateParameter(valid_601116, JString, required = false,
                                 default = nil)
  if valid_601116 != nil:
    section.add "X-Amz-Security-Token", valid_601116
  var valid_601117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601117 = validateParameter(valid_601117, JString, required = false,
                                 default = nil)
  if valid_601117 != nil:
    section.add "X-Amz-Content-Sha256", valid_601117
  var valid_601118 = header.getOrDefault("X-Amz-Algorithm")
  valid_601118 = validateParameter(valid_601118, JString, required = false,
                                 default = nil)
  if valid_601118 != nil:
    section.add "X-Amz-Algorithm", valid_601118
  var valid_601119 = header.getOrDefault("X-Amz-Signature")
  valid_601119 = validateParameter(valid_601119, JString, required = false,
                                 default = nil)
  if valid_601119 != nil:
    section.add "X-Amz-Signature", valid_601119
  var valid_601120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601120 = validateParameter(valid_601120, JString, required = false,
                                 default = nil)
  if valid_601120 != nil:
    section.add "X-Amz-SignedHeaders", valid_601120
  var valid_601121 = header.getOrDefault("X-Amz-Credential")
  valid_601121 = validateParameter(valid_601121, JString, required = false,
                                 default = nil)
  if valid_601121 != nil:
    section.add "X-Amz-Credential", valid_601121
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_601122 = formData.getOrDefault("UserName")
  valid_601122 = validateParameter(valid_601122, JString, required = true,
                                 default = nil)
  if valid_601122 != nil:
    section.add "UserName", valid_601122
  var valid_601123 = formData.getOrDefault("GroupName")
  valid_601123 = validateParameter(valid_601123, JString, required = true,
                                 default = nil)
  if valid_601123 != nil:
    section.add "GroupName", valid_601123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601124: Call_PostAddUserToGroup_601110; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_601124.validator(path, query, header, formData, body)
  let scheme = call_601124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601124.url(scheme.get, call_601124.host, call_601124.base,
                         call_601124.route, valid.getOrDefault("path"))
  result = hook(call_601124, url, valid)

proc call*(call_601125: Call_PostAddUserToGroup_601110; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601126 = newJObject()
  var formData_601127 = newJObject()
  add(formData_601127, "UserName", newJString(UserName))
  add(formData_601127, "GroupName", newJString(GroupName))
  add(query_601126, "Action", newJString(Action))
  add(query_601126, "Version", newJString(Version))
  result = call_601125.call(nil, query_601126, nil, formData_601127, nil)

var postAddUserToGroup* = Call_PostAddUserToGroup_601110(
    name: "postAddUserToGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AddUserToGroup",
    validator: validate_PostAddUserToGroup_601111, base: "/",
    url: url_PostAddUserToGroup_601112, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddUserToGroup_601093 = ref object of OpenApiRestCall_600426
proc url_GetAddUserToGroup_601095(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddUserToGroup_601094(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Adds the specified user to the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_601096 = query.getOrDefault("UserName")
  valid_601096 = validateParameter(valid_601096, JString, required = true,
                                 default = nil)
  if valid_601096 != nil:
    section.add "UserName", valid_601096
  var valid_601097 = query.getOrDefault("Action")
  valid_601097 = validateParameter(valid_601097, JString, required = true,
                                 default = newJString("AddUserToGroup"))
  if valid_601097 != nil:
    section.add "Action", valid_601097
  var valid_601098 = query.getOrDefault("GroupName")
  valid_601098 = validateParameter(valid_601098, JString, required = true,
                                 default = nil)
  if valid_601098 != nil:
    section.add "GroupName", valid_601098
  var valid_601099 = query.getOrDefault("Version")
  valid_601099 = validateParameter(valid_601099, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601099 != nil:
    section.add "Version", valid_601099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601100 = header.getOrDefault("X-Amz-Date")
  valid_601100 = validateParameter(valid_601100, JString, required = false,
                                 default = nil)
  if valid_601100 != nil:
    section.add "X-Amz-Date", valid_601100
  var valid_601101 = header.getOrDefault("X-Amz-Security-Token")
  valid_601101 = validateParameter(valid_601101, JString, required = false,
                                 default = nil)
  if valid_601101 != nil:
    section.add "X-Amz-Security-Token", valid_601101
  var valid_601102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601102 = validateParameter(valid_601102, JString, required = false,
                                 default = nil)
  if valid_601102 != nil:
    section.add "X-Amz-Content-Sha256", valid_601102
  var valid_601103 = header.getOrDefault("X-Amz-Algorithm")
  valid_601103 = validateParameter(valid_601103, JString, required = false,
                                 default = nil)
  if valid_601103 != nil:
    section.add "X-Amz-Algorithm", valid_601103
  var valid_601104 = header.getOrDefault("X-Amz-Signature")
  valid_601104 = validateParameter(valid_601104, JString, required = false,
                                 default = nil)
  if valid_601104 != nil:
    section.add "X-Amz-Signature", valid_601104
  var valid_601105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601105 = validateParameter(valid_601105, JString, required = false,
                                 default = nil)
  if valid_601105 != nil:
    section.add "X-Amz-SignedHeaders", valid_601105
  var valid_601106 = header.getOrDefault("X-Amz-Credential")
  valid_601106 = validateParameter(valid_601106, JString, required = false,
                                 default = nil)
  if valid_601106 != nil:
    section.add "X-Amz-Credential", valid_601106
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601107: Call_GetAddUserToGroup_601093; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds the specified user to the specified group.
  ## 
  let valid = call_601107.validator(path, query, header, formData, body)
  let scheme = call_601107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601107.url(scheme.get, call_601107.host, call_601107.base,
                         call_601107.route, valid.getOrDefault("path"))
  result = hook(call_601107, url, valid)

proc call*(call_601108: Call_GetAddUserToGroup_601093; UserName: string;
          GroupName: string; Action: string = "AddUserToGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getAddUserToGroup
  ## Adds the specified user to the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601109 = newJObject()
  add(query_601109, "UserName", newJString(UserName))
  add(query_601109, "Action", newJString(Action))
  add(query_601109, "GroupName", newJString(GroupName))
  add(query_601109, "Version", newJString(Version))
  result = call_601108.call(nil, query_601109, nil, nil, nil)

var getAddUserToGroup* = Call_GetAddUserToGroup_601093(name: "getAddUserToGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=AddUserToGroup", validator: validate_GetAddUserToGroup_601094,
    base: "/", url: url_GetAddUserToGroup_601095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachGroupPolicy_601145 = ref object of OpenApiRestCall_600426
proc url_PostAttachGroupPolicy_601147(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachGroupPolicy_601146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601148 = query.getOrDefault("Action")
  valid_601148 = validateParameter(valid_601148, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_601148 != nil:
    section.add "Action", valid_601148
  var valid_601149 = query.getOrDefault("Version")
  valid_601149 = validateParameter(valid_601149, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601149 != nil:
    section.add "Version", valid_601149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601150 = header.getOrDefault("X-Amz-Date")
  valid_601150 = validateParameter(valid_601150, JString, required = false,
                                 default = nil)
  if valid_601150 != nil:
    section.add "X-Amz-Date", valid_601150
  var valid_601151 = header.getOrDefault("X-Amz-Security-Token")
  valid_601151 = validateParameter(valid_601151, JString, required = false,
                                 default = nil)
  if valid_601151 != nil:
    section.add "X-Amz-Security-Token", valid_601151
  var valid_601152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601152 = validateParameter(valid_601152, JString, required = false,
                                 default = nil)
  if valid_601152 != nil:
    section.add "X-Amz-Content-Sha256", valid_601152
  var valid_601153 = header.getOrDefault("X-Amz-Algorithm")
  valid_601153 = validateParameter(valid_601153, JString, required = false,
                                 default = nil)
  if valid_601153 != nil:
    section.add "X-Amz-Algorithm", valid_601153
  var valid_601154 = header.getOrDefault("X-Amz-Signature")
  valid_601154 = validateParameter(valid_601154, JString, required = false,
                                 default = nil)
  if valid_601154 != nil:
    section.add "X-Amz-Signature", valid_601154
  var valid_601155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601155 = validateParameter(valid_601155, JString, required = false,
                                 default = nil)
  if valid_601155 != nil:
    section.add "X-Amz-SignedHeaders", valid_601155
  var valid_601156 = header.getOrDefault("X-Amz-Credential")
  valid_601156 = validateParameter(valid_601156, JString, required = false,
                                 default = nil)
  if valid_601156 != nil:
    section.add "X-Amz-Credential", valid_601156
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_601157 = formData.getOrDefault("PolicyArn")
  valid_601157 = validateParameter(valid_601157, JString, required = true,
                                 default = nil)
  if valid_601157 != nil:
    section.add "PolicyArn", valid_601157
  var valid_601158 = formData.getOrDefault("GroupName")
  valid_601158 = validateParameter(valid_601158, JString, required = true,
                                 default = nil)
  if valid_601158 != nil:
    section.add "GroupName", valid_601158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601159: Call_PostAttachGroupPolicy_601145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601159.validator(path, query, header, formData, body)
  let scheme = call_601159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601159.url(scheme.get, call_601159.host, call_601159.base,
                         call_601159.route, valid.getOrDefault("path"))
  result = hook(call_601159, url, valid)

proc call*(call_601160: Call_PostAttachGroupPolicy_601145; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601161 = newJObject()
  var formData_601162 = newJObject()
  add(formData_601162, "PolicyArn", newJString(PolicyArn))
  add(formData_601162, "GroupName", newJString(GroupName))
  add(query_601161, "Action", newJString(Action))
  add(query_601161, "Version", newJString(Version))
  result = call_601160.call(nil, query_601161, nil, formData_601162, nil)

var postAttachGroupPolicy* = Call_PostAttachGroupPolicy_601145(
    name: "postAttachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_PostAttachGroupPolicy_601146, base: "/",
    url: url_PostAttachGroupPolicy_601147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachGroupPolicy_601128 = ref object of OpenApiRestCall_600426
proc url_GetAttachGroupPolicy_601130(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachGroupPolicy_601129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_601131 = query.getOrDefault("PolicyArn")
  valid_601131 = validateParameter(valid_601131, JString, required = true,
                                 default = nil)
  if valid_601131 != nil:
    section.add "PolicyArn", valid_601131
  var valid_601132 = query.getOrDefault("Action")
  valid_601132 = validateParameter(valid_601132, JString, required = true,
                                 default = newJString("AttachGroupPolicy"))
  if valid_601132 != nil:
    section.add "Action", valid_601132
  var valid_601133 = query.getOrDefault("GroupName")
  valid_601133 = validateParameter(valid_601133, JString, required = true,
                                 default = nil)
  if valid_601133 != nil:
    section.add "GroupName", valid_601133
  var valid_601134 = query.getOrDefault("Version")
  valid_601134 = validateParameter(valid_601134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601134 != nil:
    section.add "Version", valid_601134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601135 = header.getOrDefault("X-Amz-Date")
  valid_601135 = validateParameter(valid_601135, JString, required = false,
                                 default = nil)
  if valid_601135 != nil:
    section.add "X-Amz-Date", valid_601135
  var valid_601136 = header.getOrDefault("X-Amz-Security-Token")
  valid_601136 = validateParameter(valid_601136, JString, required = false,
                                 default = nil)
  if valid_601136 != nil:
    section.add "X-Amz-Security-Token", valid_601136
  var valid_601137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601137 = validateParameter(valid_601137, JString, required = false,
                                 default = nil)
  if valid_601137 != nil:
    section.add "X-Amz-Content-Sha256", valid_601137
  var valid_601138 = header.getOrDefault("X-Amz-Algorithm")
  valid_601138 = validateParameter(valid_601138, JString, required = false,
                                 default = nil)
  if valid_601138 != nil:
    section.add "X-Amz-Algorithm", valid_601138
  var valid_601139 = header.getOrDefault("X-Amz-Signature")
  valid_601139 = validateParameter(valid_601139, JString, required = false,
                                 default = nil)
  if valid_601139 != nil:
    section.add "X-Amz-Signature", valid_601139
  var valid_601140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601140 = validateParameter(valid_601140, JString, required = false,
                                 default = nil)
  if valid_601140 != nil:
    section.add "X-Amz-SignedHeaders", valid_601140
  var valid_601141 = header.getOrDefault("X-Amz-Credential")
  valid_601141 = validateParameter(valid_601141, JString, required = false,
                                 default = nil)
  if valid_601141 != nil:
    section.add "X-Amz-Credential", valid_601141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601142: Call_GetAttachGroupPolicy_601128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601142.validator(path, query, header, formData, body)
  let scheme = call_601142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601142.url(scheme.get, call_601142.host, call_601142.base,
                         call_601142.route, valid.getOrDefault("path"))
  result = hook(call_601142, url, valid)

proc call*(call_601143: Call_GetAttachGroupPolicy_601128; PolicyArn: string;
          GroupName: string; Action: string = "AttachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachGroupPolicy
  ## <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601144 = newJObject()
  add(query_601144, "PolicyArn", newJString(PolicyArn))
  add(query_601144, "Action", newJString(Action))
  add(query_601144, "GroupName", newJString(GroupName))
  add(query_601144, "Version", newJString(Version))
  result = call_601143.call(nil, query_601144, nil, nil, nil)

var getAttachGroupPolicy* = Call_GetAttachGroupPolicy_601128(
    name: "getAttachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachGroupPolicy",
    validator: validate_GetAttachGroupPolicy_601129, base: "/",
    url: url_GetAttachGroupPolicy_601130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachRolePolicy_601180 = ref object of OpenApiRestCall_600426
proc url_PostAttachRolePolicy_601182(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachRolePolicy_601181(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601183 = query.getOrDefault("Action")
  valid_601183 = validateParameter(valid_601183, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_601183 != nil:
    section.add "Action", valid_601183
  var valid_601184 = query.getOrDefault("Version")
  valid_601184 = validateParameter(valid_601184, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601184 != nil:
    section.add "Version", valid_601184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601185 = header.getOrDefault("X-Amz-Date")
  valid_601185 = validateParameter(valid_601185, JString, required = false,
                                 default = nil)
  if valid_601185 != nil:
    section.add "X-Amz-Date", valid_601185
  var valid_601186 = header.getOrDefault("X-Amz-Security-Token")
  valid_601186 = validateParameter(valid_601186, JString, required = false,
                                 default = nil)
  if valid_601186 != nil:
    section.add "X-Amz-Security-Token", valid_601186
  var valid_601187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601187 = validateParameter(valid_601187, JString, required = false,
                                 default = nil)
  if valid_601187 != nil:
    section.add "X-Amz-Content-Sha256", valid_601187
  var valid_601188 = header.getOrDefault("X-Amz-Algorithm")
  valid_601188 = validateParameter(valid_601188, JString, required = false,
                                 default = nil)
  if valid_601188 != nil:
    section.add "X-Amz-Algorithm", valid_601188
  var valid_601189 = header.getOrDefault("X-Amz-Signature")
  valid_601189 = validateParameter(valid_601189, JString, required = false,
                                 default = nil)
  if valid_601189 != nil:
    section.add "X-Amz-Signature", valid_601189
  var valid_601190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601190 = validateParameter(valid_601190, JString, required = false,
                                 default = nil)
  if valid_601190 != nil:
    section.add "X-Amz-SignedHeaders", valid_601190
  var valid_601191 = header.getOrDefault("X-Amz-Credential")
  valid_601191 = validateParameter(valid_601191, JString, required = false,
                                 default = nil)
  if valid_601191 != nil:
    section.add "X-Amz-Credential", valid_601191
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_601192 = formData.getOrDefault("RoleName")
  valid_601192 = validateParameter(valid_601192, JString, required = true,
                                 default = nil)
  if valid_601192 != nil:
    section.add "RoleName", valid_601192
  var valid_601193 = formData.getOrDefault("PolicyArn")
  valid_601193 = validateParameter(valid_601193, JString, required = true,
                                 default = nil)
  if valid_601193 != nil:
    section.add "PolicyArn", valid_601193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601194: Call_PostAttachRolePolicy_601180; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601194.validator(path, query, header, formData, body)
  let scheme = call_601194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601194.url(scheme.get, call_601194.host, call_601194.base,
                         call_601194.route, valid.getOrDefault("path"))
  result = hook(call_601194, url, valid)

proc call*(call_601195: Call_PostAttachRolePolicy_601180; RoleName: string;
          PolicyArn: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601196 = newJObject()
  var formData_601197 = newJObject()
  add(formData_601197, "RoleName", newJString(RoleName))
  add(formData_601197, "PolicyArn", newJString(PolicyArn))
  add(query_601196, "Action", newJString(Action))
  add(query_601196, "Version", newJString(Version))
  result = call_601195.call(nil, query_601196, nil, formData_601197, nil)

var postAttachRolePolicy* = Call_PostAttachRolePolicy_601180(
    name: "postAttachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_PostAttachRolePolicy_601181, base: "/",
    url: url_PostAttachRolePolicy_601182, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachRolePolicy_601163 = ref object of OpenApiRestCall_600426
proc url_GetAttachRolePolicy_601165(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachRolePolicy_601164(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_601166 = query.getOrDefault("PolicyArn")
  valid_601166 = validateParameter(valid_601166, JString, required = true,
                                 default = nil)
  if valid_601166 != nil:
    section.add "PolicyArn", valid_601166
  var valid_601167 = query.getOrDefault("Action")
  valid_601167 = validateParameter(valid_601167, JString, required = true,
                                 default = newJString("AttachRolePolicy"))
  if valid_601167 != nil:
    section.add "Action", valid_601167
  var valid_601168 = query.getOrDefault("RoleName")
  valid_601168 = validateParameter(valid_601168, JString, required = true,
                                 default = nil)
  if valid_601168 != nil:
    section.add "RoleName", valid_601168
  var valid_601169 = query.getOrDefault("Version")
  valid_601169 = validateParameter(valid_601169, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601169 != nil:
    section.add "Version", valid_601169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601170 = header.getOrDefault("X-Amz-Date")
  valid_601170 = validateParameter(valid_601170, JString, required = false,
                                 default = nil)
  if valid_601170 != nil:
    section.add "X-Amz-Date", valid_601170
  var valid_601171 = header.getOrDefault("X-Amz-Security-Token")
  valid_601171 = validateParameter(valid_601171, JString, required = false,
                                 default = nil)
  if valid_601171 != nil:
    section.add "X-Amz-Security-Token", valid_601171
  var valid_601172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601172 = validateParameter(valid_601172, JString, required = false,
                                 default = nil)
  if valid_601172 != nil:
    section.add "X-Amz-Content-Sha256", valid_601172
  var valid_601173 = header.getOrDefault("X-Amz-Algorithm")
  valid_601173 = validateParameter(valid_601173, JString, required = false,
                                 default = nil)
  if valid_601173 != nil:
    section.add "X-Amz-Algorithm", valid_601173
  var valid_601174 = header.getOrDefault("X-Amz-Signature")
  valid_601174 = validateParameter(valid_601174, JString, required = false,
                                 default = nil)
  if valid_601174 != nil:
    section.add "X-Amz-Signature", valid_601174
  var valid_601175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601175 = validateParameter(valid_601175, JString, required = false,
                                 default = nil)
  if valid_601175 != nil:
    section.add "X-Amz-SignedHeaders", valid_601175
  var valid_601176 = header.getOrDefault("X-Amz-Credential")
  valid_601176 = validateParameter(valid_601176, JString, required = false,
                                 default = nil)
  if valid_601176 != nil:
    section.add "X-Amz-Credential", valid_601176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601177: Call_GetAttachRolePolicy_601163; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601177.validator(path, query, header, formData, body)
  let scheme = call_601177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601177.url(scheme.get, call_601177.host, call_601177.base,
                         call_601177.route, valid.getOrDefault("path"))
  result = hook(call_601177, url, valid)

proc call*(call_601178: Call_GetAttachRolePolicy_601163; PolicyArn: string;
          RoleName: string; Action: string = "AttachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachRolePolicy
  ## <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601179 = newJObject()
  add(query_601179, "PolicyArn", newJString(PolicyArn))
  add(query_601179, "Action", newJString(Action))
  add(query_601179, "RoleName", newJString(RoleName))
  add(query_601179, "Version", newJString(Version))
  result = call_601178.call(nil, query_601179, nil, nil, nil)

var getAttachRolePolicy* = Call_GetAttachRolePolicy_601163(
    name: "getAttachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachRolePolicy",
    validator: validate_GetAttachRolePolicy_601164, base: "/",
    url: url_GetAttachRolePolicy_601165, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAttachUserPolicy_601215 = ref object of OpenApiRestCall_600426
proc url_PostAttachUserPolicy_601217(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAttachUserPolicy_601216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601218 = query.getOrDefault("Action")
  valid_601218 = validateParameter(valid_601218, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_601218 != nil:
    section.add "Action", valid_601218
  var valid_601219 = query.getOrDefault("Version")
  valid_601219 = validateParameter(valid_601219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601219 != nil:
    section.add "Version", valid_601219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601220 = header.getOrDefault("X-Amz-Date")
  valid_601220 = validateParameter(valid_601220, JString, required = false,
                                 default = nil)
  if valid_601220 != nil:
    section.add "X-Amz-Date", valid_601220
  var valid_601221 = header.getOrDefault("X-Amz-Security-Token")
  valid_601221 = validateParameter(valid_601221, JString, required = false,
                                 default = nil)
  if valid_601221 != nil:
    section.add "X-Amz-Security-Token", valid_601221
  var valid_601222 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601222 = validateParameter(valid_601222, JString, required = false,
                                 default = nil)
  if valid_601222 != nil:
    section.add "X-Amz-Content-Sha256", valid_601222
  var valid_601223 = header.getOrDefault("X-Amz-Algorithm")
  valid_601223 = validateParameter(valid_601223, JString, required = false,
                                 default = nil)
  if valid_601223 != nil:
    section.add "X-Amz-Algorithm", valid_601223
  var valid_601224 = header.getOrDefault("X-Amz-Signature")
  valid_601224 = validateParameter(valid_601224, JString, required = false,
                                 default = nil)
  if valid_601224 != nil:
    section.add "X-Amz-Signature", valid_601224
  var valid_601225 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601225 = validateParameter(valid_601225, JString, required = false,
                                 default = nil)
  if valid_601225 != nil:
    section.add "X-Amz-SignedHeaders", valid_601225
  var valid_601226 = header.getOrDefault("X-Amz-Credential")
  valid_601226 = validateParameter(valid_601226, JString, required = false,
                                 default = nil)
  if valid_601226 != nil:
    section.add "X-Amz-Credential", valid_601226
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_601227 = formData.getOrDefault("UserName")
  valid_601227 = validateParameter(valid_601227, JString, required = true,
                                 default = nil)
  if valid_601227 != nil:
    section.add "UserName", valid_601227
  var valid_601228 = formData.getOrDefault("PolicyArn")
  valid_601228 = validateParameter(valid_601228, JString, required = true,
                                 default = nil)
  if valid_601228 != nil:
    section.add "PolicyArn", valid_601228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601229: Call_PostAttachUserPolicy_601215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601229.validator(path, query, header, formData, body)
  let scheme = call_601229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601229.url(scheme.get, call_601229.host, call_601229.base,
                         call_601229.route, valid.getOrDefault("path"))
  result = hook(call_601229, url, valid)

proc call*(call_601230: Call_PostAttachUserPolicy_601215; UserName: string;
          PolicyArn: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601231 = newJObject()
  var formData_601232 = newJObject()
  add(formData_601232, "UserName", newJString(UserName))
  add(formData_601232, "PolicyArn", newJString(PolicyArn))
  add(query_601231, "Action", newJString(Action))
  add(query_601231, "Version", newJString(Version))
  result = call_601230.call(nil, query_601231, nil, formData_601232, nil)

var postAttachUserPolicy* = Call_PostAttachUserPolicy_601215(
    name: "postAttachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_PostAttachUserPolicy_601216, base: "/",
    url: url_PostAttachUserPolicy_601217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAttachUserPolicy_601198 = ref object of OpenApiRestCall_600426
proc url_GetAttachUserPolicy_601200(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAttachUserPolicy_601199(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_601201 = query.getOrDefault("PolicyArn")
  valid_601201 = validateParameter(valid_601201, JString, required = true,
                                 default = nil)
  if valid_601201 != nil:
    section.add "PolicyArn", valid_601201
  var valid_601202 = query.getOrDefault("UserName")
  valid_601202 = validateParameter(valid_601202, JString, required = true,
                                 default = nil)
  if valid_601202 != nil:
    section.add "UserName", valid_601202
  var valid_601203 = query.getOrDefault("Action")
  valid_601203 = validateParameter(valid_601203, JString, required = true,
                                 default = newJString("AttachUserPolicy"))
  if valid_601203 != nil:
    section.add "Action", valid_601203
  var valid_601204 = query.getOrDefault("Version")
  valid_601204 = validateParameter(valid_601204, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601204 != nil:
    section.add "Version", valid_601204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601205 = header.getOrDefault("X-Amz-Date")
  valid_601205 = validateParameter(valid_601205, JString, required = false,
                                 default = nil)
  if valid_601205 != nil:
    section.add "X-Amz-Date", valid_601205
  var valid_601206 = header.getOrDefault("X-Amz-Security-Token")
  valid_601206 = validateParameter(valid_601206, JString, required = false,
                                 default = nil)
  if valid_601206 != nil:
    section.add "X-Amz-Security-Token", valid_601206
  var valid_601207 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601207 = validateParameter(valid_601207, JString, required = false,
                                 default = nil)
  if valid_601207 != nil:
    section.add "X-Amz-Content-Sha256", valid_601207
  var valid_601208 = header.getOrDefault("X-Amz-Algorithm")
  valid_601208 = validateParameter(valid_601208, JString, required = false,
                                 default = nil)
  if valid_601208 != nil:
    section.add "X-Amz-Algorithm", valid_601208
  var valid_601209 = header.getOrDefault("X-Amz-Signature")
  valid_601209 = validateParameter(valid_601209, JString, required = false,
                                 default = nil)
  if valid_601209 != nil:
    section.add "X-Amz-Signature", valid_601209
  var valid_601210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601210 = validateParameter(valid_601210, JString, required = false,
                                 default = nil)
  if valid_601210 != nil:
    section.add "X-Amz-SignedHeaders", valid_601210
  var valid_601211 = header.getOrDefault("X-Amz-Credential")
  valid_601211 = validateParameter(valid_601211, JString, required = false,
                                 default = nil)
  if valid_601211 != nil:
    section.add "X-Amz-Credential", valid_601211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601212: Call_GetAttachUserPolicy_601198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601212.validator(path, query, header, formData, body)
  let scheme = call_601212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601212.url(scheme.get, call_601212.host, call_601212.base,
                         call_601212.route, valid.getOrDefault("path"))
  result = hook(call_601212, url, valid)

proc call*(call_601213: Call_GetAttachUserPolicy_601198; PolicyArn: string;
          UserName: string; Action: string = "AttachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getAttachUserPolicy
  ## <p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601214 = newJObject()
  add(query_601214, "PolicyArn", newJString(PolicyArn))
  add(query_601214, "UserName", newJString(UserName))
  add(query_601214, "Action", newJString(Action))
  add(query_601214, "Version", newJString(Version))
  result = call_601213.call(nil, query_601214, nil, nil, nil)

var getAttachUserPolicy* = Call_GetAttachUserPolicy_601198(
    name: "getAttachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=AttachUserPolicy",
    validator: validate_GetAttachUserPolicy_601199, base: "/",
    url: url_GetAttachUserPolicy_601200, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostChangePassword_601250 = ref object of OpenApiRestCall_600426
proc url_PostChangePassword_601252(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostChangePassword_601251(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601253 = query.getOrDefault("Action")
  valid_601253 = validateParameter(valid_601253, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_601253 != nil:
    section.add "Action", valid_601253
  var valid_601254 = query.getOrDefault("Version")
  valid_601254 = validateParameter(valid_601254, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601254 != nil:
    section.add "Version", valid_601254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601255 = header.getOrDefault("X-Amz-Date")
  valid_601255 = validateParameter(valid_601255, JString, required = false,
                                 default = nil)
  if valid_601255 != nil:
    section.add "X-Amz-Date", valid_601255
  var valid_601256 = header.getOrDefault("X-Amz-Security-Token")
  valid_601256 = validateParameter(valid_601256, JString, required = false,
                                 default = nil)
  if valid_601256 != nil:
    section.add "X-Amz-Security-Token", valid_601256
  var valid_601257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601257 = validateParameter(valid_601257, JString, required = false,
                                 default = nil)
  if valid_601257 != nil:
    section.add "X-Amz-Content-Sha256", valid_601257
  var valid_601258 = header.getOrDefault("X-Amz-Algorithm")
  valid_601258 = validateParameter(valid_601258, JString, required = false,
                                 default = nil)
  if valid_601258 != nil:
    section.add "X-Amz-Algorithm", valid_601258
  var valid_601259 = header.getOrDefault("X-Amz-Signature")
  valid_601259 = validateParameter(valid_601259, JString, required = false,
                                 default = nil)
  if valid_601259 != nil:
    section.add "X-Amz-Signature", valid_601259
  var valid_601260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601260 = validateParameter(valid_601260, JString, required = false,
                                 default = nil)
  if valid_601260 != nil:
    section.add "X-Amz-SignedHeaders", valid_601260
  var valid_601261 = header.getOrDefault("X-Amz-Credential")
  valid_601261 = validateParameter(valid_601261, JString, required = false,
                                 default = nil)
  if valid_601261 != nil:
    section.add "X-Amz-Credential", valid_601261
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NewPassword` field"
  var valid_601262 = formData.getOrDefault("NewPassword")
  valid_601262 = validateParameter(valid_601262, JString, required = true,
                                 default = nil)
  if valid_601262 != nil:
    section.add "NewPassword", valid_601262
  var valid_601263 = formData.getOrDefault("OldPassword")
  valid_601263 = validateParameter(valid_601263, JString, required = true,
                                 default = nil)
  if valid_601263 != nil:
    section.add "OldPassword", valid_601263
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601264: Call_PostChangePassword_601250; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601264.validator(path, query, header, formData, body)
  let scheme = call_601264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601264.url(scheme.get, call_601264.host, call_601264.base,
                         call_601264.route, valid.getOrDefault("path"))
  result = hook(call_601264, url, valid)

proc call*(call_601265: Call_PostChangePassword_601250; NewPassword: string;
          OldPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## postChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Version: string (required)
  var query_601266 = newJObject()
  var formData_601267 = newJObject()
  add(query_601266, "Action", newJString(Action))
  add(formData_601267, "NewPassword", newJString(NewPassword))
  add(formData_601267, "OldPassword", newJString(OldPassword))
  add(query_601266, "Version", newJString(Version))
  result = call_601265.call(nil, query_601266, nil, formData_601267, nil)

var postChangePassword* = Call_PostChangePassword_601250(
    name: "postChangePassword", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ChangePassword",
    validator: validate_PostChangePassword_601251, base: "/",
    url: url_PostChangePassword_601252, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetChangePassword_601233 = ref object of OpenApiRestCall_600426
proc url_GetChangePassword_601235(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetChangePassword_601234(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OldPassword: JString (required)
  ##              : The IAM user's current password.
  ##   Action: JString (required)
  ##   NewPassword: JString (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OldPassword` field"
  var valid_601236 = query.getOrDefault("OldPassword")
  valid_601236 = validateParameter(valid_601236, JString, required = true,
                                 default = nil)
  if valid_601236 != nil:
    section.add "OldPassword", valid_601236
  var valid_601237 = query.getOrDefault("Action")
  valid_601237 = validateParameter(valid_601237, JString, required = true,
                                 default = newJString("ChangePassword"))
  if valid_601237 != nil:
    section.add "Action", valid_601237
  var valid_601238 = query.getOrDefault("NewPassword")
  valid_601238 = validateParameter(valid_601238, JString, required = true,
                                 default = nil)
  if valid_601238 != nil:
    section.add "NewPassword", valid_601238
  var valid_601239 = query.getOrDefault("Version")
  valid_601239 = validateParameter(valid_601239, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601239 != nil:
    section.add "Version", valid_601239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601240 = header.getOrDefault("X-Amz-Date")
  valid_601240 = validateParameter(valid_601240, JString, required = false,
                                 default = nil)
  if valid_601240 != nil:
    section.add "X-Amz-Date", valid_601240
  var valid_601241 = header.getOrDefault("X-Amz-Security-Token")
  valid_601241 = validateParameter(valid_601241, JString, required = false,
                                 default = nil)
  if valid_601241 != nil:
    section.add "X-Amz-Security-Token", valid_601241
  var valid_601242 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601242 = validateParameter(valid_601242, JString, required = false,
                                 default = nil)
  if valid_601242 != nil:
    section.add "X-Amz-Content-Sha256", valid_601242
  var valid_601243 = header.getOrDefault("X-Amz-Algorithm")
  valid_601243 = validateParameter(valid_601243, JString, required = false,
                                 default = nil)
  if valid_601243 != nil:
    section.add "X-Amz-Algorithm", valid_601243
  var valid_601244 = header.getOrDefault("X-Amz-Signature")
  valid_601244 = validateParameter(valid_601244, JString, required = false,
                                 default = nil)
  if valid_601244 != nil:
    section.add "X-Amz-Signature", valid_601244
  var valid_601245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601245 = validateParameter(valid_601245, JString, required = false,
                                 default = nil)
  if valid_601245 != nil:
    section.add "X-Amz-SignedHeaders", valid_601245
  var valid_601246 = header.getOrDefault("X-Amz-Credential")
  valid_601246 = validateParameter(valid_601246, JString, required = false,
                                 default = nil)
  if valid_601246 != nil:
    section.add "X-Amz-Credential", valid_601246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601247: Call_GetChangePassword_601233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601247.validator(path, query, header, formData, body)
  let scheme = call_601247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601247.url(scheme.get, call_601247.host, call_601247.base,
                         call_601247.route, valid.getOrDefault("path"))
  result = hook(call_601247, url, valid)

proc call*(call_601248: Call_GetChangePassword_601233; OldPassword: string;
          NewPassword: string; Action: string = "ChangePassword";
          Version: string = "2010-05-08"): Recallable =
  ## getChangePassword
  ## <p>Changes the password of the IAM user who is calling this operation. The AWS account root user password is not affected by this operation.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   OldPassword: string (required)
  ##              : The IAM user's current password.
  ##   Action: string (required)
  ##   NewPassword: string (required)
  ##              : <p>The new password. The new password must conform to the AWS account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_601249 = newJObject()
  add(query_601249, "OldPassword", newJString(OldPassword))
  add(query_601249, "Action", newJString(Action))
  add(query_601249, "NewPassword", newJString(NewPassword))
  add(query_601249, "Version", newJString(Version))
  result = call_601248.call(nil, query_601249, nil, nil, nil)

var getChangePassword* = Call_GetChangePassword_601233(name: "getChangePassword",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ChangePassword", validator: validate_GetChangePassword_601234,
    base: "/", url: url_GetChangePassword_601235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccessKey_601284 = ref object of OpenApiRestCall_600426
proc url_PostCreateAccessKey_601286(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccessKey_601285(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601287 = query.getOrDefault("Action")
  valid_601287 = validateParameter(valid_601287, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_601287 != nil:
    section.add "Action", valid_601287
  var valid_601288 = query.getOrDefault("Version")
  valid_601288 = validateParameter(valid_601288, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601288 != nil:
    section.add "Version", valid_601288
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601289 = header.getOrDefault("X-Amz-Date")
  valid_601289 = validateParameter(valid_601289, JString, required = false,
                                 default = nil)
  if valid_601289 != nil:
    section.add "X-Amz-Date", valid_601289
  var valid_601290 = header.getOrDefault("X-Amz-Security-Token")
  valid_601290 = validateParameter(valid_601290, JString, required = false,
                                 default = nil)
  if valid_601290 != nil:
    section.add "X-Amz-Security-Token", valid_601290
  var valid_601291 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601291 = validateParameter(valid_601291, JString, required = false,
                                 default = nil)
  if valid_601291 != nil:
    section.add "X-Amz-Content-Sha256", valid_601291
  var valid_601292 = header.getOrDefault("X-Amz-Algorithm")
  valid_601292 = validateParameter(valid_601292, JString, required = false,
                                 default = nil)
  if valid_601292 != nil:
    section.add "X-Amz-Algorithm", valid_601292
  var valid_601293 = header.getOrDefault("X-Amz-Signature")
  valid_601293 = validateParameter(valid_601293, JString, required = false,
                                 default = nil)
  if valid_601293 != nil:
    section.add "X-Amz-Signature", valid_601293
  var valid_601294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601294 = validateParameter(valid_601294, JString, required = false,
                                 default = nil)
  if valid_601294 != nil:
    section.add "X-Amz-SignedHeaders", valid_601294
  var valid_601295 = header.getOrDefault("X-Amz-Credential")
  valid_601295 = validateParameter(valid_601295, JString, required = false,
                                 default = nil)
  if valid_601295 != nil:
    section.add "X-Amz-Credential", valid_601295
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_601296 = formData.getOrDefault("UserName")
  valid_601296 = validateParameter(valid_601296, JString, required = false,
                                 default = nil)
  if valid_601296 != nil:
    section.add "UserName", valid_601296
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601297: Call_PostCreateAccessKey_601284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_601297.validator(path, query, header, formData, body)
  let scheme = call_601297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601297.url(scheme.get, call_601297.host, call_601297.base,
                         call_601297.route, valid.getOrDefault("path"))
  result = hook(call_601297, url, valid)

proc call*(call_601298: Call_PostCreateAccessKey_601284; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601299 = newJObject()
  var formData_601300 = newJObject()
  add(formData_601300, "UserName", newJString(UserName))
  add(query_601299, "Action", newJString(Action))
  add(query_601299, "Version", newJString(Version))
  result = call_601298.call(nil, query_601299, nil, formData_601300, nil)

var postCreateAccessKey* = Call_PostCreateAccessKey_601284(
    name: "postCreateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccessKey",
    validator: validate_PostCreateAccessKey_601285, base: "/",
    url: url_PostCreateAccessKey_601286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccessKey_601268 = ref object of OpenApiRestCall_600426
proc url_GetCreateAccessKey_601270(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccessKey_601269(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_601271 = query.getOrDefault("UserName")
  valid_601271 = validateParameter(valid_601271, JString, required = false,
                                 default = nil)
  if valid_601271 != nil:
    section.add "UserName", valid_601271
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601272 = query.getOrDefault("Action")
  valid_601272 = validateParameter(valid_601272, JString, required = true,
                                 default = newJString("CreateAccessKey"))
  if valid_601272 != nil:
    section.add "Action", valid_601272
  var valid_601273 = query.getOrDefault("Version")
  valid_601273 = validateParameter(valid_601273, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601273 != nil:
    section.add "Version", valid_601273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601274 = header.getOrDefault("X-Amz-Date")
  valid_601274 = validateParameter(valid_601274, JString, required = false,
                                 default = nil)
  if valid_601274 != nil:
    section.add "X-Amz-Date", valid_601274
  var valid_601275 = header.getOrDefault("X-Amz-Security-Token")
  valid_601275 = validateParameter(valid_601275, JString, required = false,
                                 default = nil)
  if valid_601275 != nil:
    section.add "X-Amz-Security-Token", valid_601275
  var valid_601276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601276 = validateParameter(valid_601276, JString, required = false,
                                 default = nil)
  if valid_601276 != nil:
    section.add "X-Amz-Content-Sha256", valid_601276
  var valid_601277 = header.getOrDefault("X-Amz-Algorithm")
  valid_601277 = validateParameter(valid_601277, JString, required = false,
                                 default = nil)
  if valid_601277 != nil:
    section.add "X-Amz-Algorithm", valid_601277
  var valid_601278 = header.getOrDefault("X-Amz-Signature")
  valid_601278 = validateParameter(valid_601278, JString, required = false,
                                 default = nil)
  if valid_601278 != nil:
    section.add "X-Amz-Signature", valid_601278
  var valid_601279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601279 = validateParameter(valid_601279, JString, required = false,
                                 default = nil)
  if valid_601279 != nil:
    section.add "X-Amz-SignedHeaders", valid_601279
  var valid_601280 = header.getOrDefault("X-Amz-Credential")
  valid_601280 = validateParameter(valid_601280, JString, required = false,
                                 default = nil)
  if valid_601280 != nil:
    section.add "X-Amz-Credential", valid_601280
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601281: Call_GetCreateAccessKey_601268; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ## 
  let valid = call_601281.validator(path, query, header, formData, body)
  let scheme = call_601281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601281.url(scheme.get, call_601281.host, call_601281.base,
                         call_601281.route, valid.getOrDefault("path"))
  result = hook(call_601281, url, valid)

proc call*(call_601282: Call_GetCreateAccessKey_601268; UserName: string = "";
          Action: string = "CreateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccessKey
  ## <p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials. This is true even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
  ##   UserName: string
  ##           : <p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601283 = newJObject()
  add(query_601283, "UserName", newJString(UserName))
  add(query_601283, "Action", newJString(Action))
  add(query_601283, "Version", newJString(Version))
  result = call_601282.call(nil, query_601283, nil, nil, nil)

var getCreateAccessKey* = Call_GetCreateAccessKey_601268(
    name: "getCreateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateAccessKey", validator: validate_GetCreateAccessKey_601269,
    base: "/", url: url_GetCreateAccessKey_601270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateAccountAlias_601317 = ref object of OpenApiRestCall_600426
proc url_PostCreateAccountAlias_601319(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateAccountAlias_601318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601320 = query.getOrDefault("Action")
  valid_601320 = validateParameter(valid_601320, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_601320 != nil:
    section.add "Action", valid_601320
  var valid_601321 = query.getOrDefault("Version")
  valid_601321 = validateParameter(valid_601321, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601321 != nil:
    section.add "Version", valid_601321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601322 = header.getOrDefault("X-Amz-Date")
  valid_601322 = validateParameter(valid_601322, JString, required = false,
                                 default = nil)
  if valid_601322 != nil:
    section.add "X-Amz-Date", valid_601322
  var valid_601323 = header.getOrDefault("X-Amz-Security-Token")
  valid_601323 = validateParameter(valid_601323, JString, required = false,
                                 default = nil)
  if valid_601323 != nil:
    section.add "X-Amz-Security-Token", valid_601323
  var valid_601324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601324 = validateParameter(valid_601324, JString, required = false,
                                 default = nil)
  if valid_601324 != nil:
    section.add "X-Amz-Content-Sha256", valid_601324
  var valid_601325 = header.getOrDefault("X-Amz-Algorithm")
  valid_601325 = validateParameter(valid_601325, JString, required = false,
                                 default = nil)
  if valid_601325 != nil:
    section.add "X-Amz-Algorithm", valid_601325
  var valid_601326 = header.getOrDefault("X-Amz-Signature")
  valid_601326 = validateParameter(valid_601326, JString, required = false,
                                 default = nil)
  if valid_601326 != nil:
    section.add "X-Amz-Signature", valid_601326
  var valid_601327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601327 = validateParameter(valid_601327, JString, required = false,
                                 default = nil)
  if valid_601327 != nil:
    section.add "X-Amz-SignedHeaders", valid_601327
  var valid_601328 = header.getOrDefault("X-Amz-Credential")
  valid_601328 = validateParameter(valid_601328, JString, required = false,
                                 default = nil)
  if valid_601328 != nil:
    section.add "X-Amz-Credential", valid_601328
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_601329 = formData.getOrDefault("AccountAlias")
  valid_601329 = validateParameter(valid_601329, JString, required = true,
                                 default = nil)
  if valid_601329 != nil:
    section.add "AccountAlias", valid_601329
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601330: Call_PostCreateAccountAlias_601317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601330.validator(path, query, header, formData, body)
  let scheme = call_601330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601330.url(scheme.get, call_601330.host, call_601330.base,
                         call_601330.route, valid.getOrDefault("path"))
  result = hook(call_601330, url, valid)

proc call*(call_601331: Call_PostCreateAccountAlias_601317; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601332 = newJObject()
  var formData_601333 = newJObject()
  add(formData_601333, "AccountAlias", newJString(AccountAlias))
  add(query_601332, "Action", newJString(Action))
  add(query_601332, "Version", newJString(Version))
  result = call_601331.call(nil, query_601332, nil, formData_601333, nil)

var postCreateAccountAlias* = Call_PostCreateAccountAlias_601317(
    name: "postCreateAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_PostCreateAccountAlias_601318, base: "/",
    url: url_PostCreateAccountAlias_601319, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateAccountAlias_601301 = ref object of OpenApiRestCall_600426
proc url_GetCreateAccountAlias_601303(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateAccountAlias_601302(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_601304 = query.getOrDefault("AccountAlias")
  valid_601304 = validateParameter(valid_601304, JString, required = true,
                                 default = nil)
  if valid_601304 != nil:
    section.add "AccountAlias", valid_601304
  var valid_601305 = query.getOrDefault("Action")
  valid_601305 = validateParameter(valid_601305, JString, required = true,
                                 default = newJString("CreateAccountAlias"))
  if valid_601305 != nil:
    section.add "Action", valid_601305
  var valid_601306 = query.getOrDefault("Version")
  valid_601306 = validateParameter(valid_601306, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601306 != nil:
    section.add "Version", valid_601306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601307 = header.getOrDefault("X-Amz-Date")
  valid_601307 = validateParameter(valid_601307, JString, required = false,
                                 default = nil)
  if valid_601307 != nil:
    section.add "X-Amz-Date", valid_601307
  var valid_601308 = header.getOrDefault("X-Amz-Security-Token")
  valid_601308 = validateParameter(valid_601308, JString, required = false,
                                 default = nil)
  if valid_601308 != nil:
    section.add "X-Amz-Security-Token", valid_601308
  var valid_601309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601309 = validateParameter(valid_601309, JString, required = false,
                                 default = nil)
  if valid_601309 != nil:
    section.add "X-Amz-Content-Sha256", valid_601309
  var valid_601310 = header.getOrDefault("X-Amz-Algorithm")
  valid_601310 = validateParameter(valid_601310, JString, required = false,
                                 default = nil)
  if valid_601310 != nil:
    section.add "X-Amz-Algorithm", valid_601310
  var valid_601311 = header.getOrDefault("X-Amz-Signature")
  valid_601311 = validateParameter(valid_601311, JString, required = false,
                                 default = nil)
  if valid_601311 != nil:
    section.add "X-Amz-Signature", valid_601311
  var valid_601312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601312 = validateParameter(valid_601312, JString, required = false,
                                 default = nil)
  if valid_601312 != nil:
    section.add "X-Amz-SignedHeaders", valid_601312
  var valid_601313 = header.getOrDefault("X-Amz-Credential")
  valid_601313 = validateParameter(valid_601313, JString, required = false,
                                 default = nil)
  if valid_601313 != nil:
    section.add "X-Amz-Credential", valid_601313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601314: Call_GetCreateAccountAlias_601301; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601314.validator(path, query, header, formData, body)
  let scheme = call_601314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601314.url(scheme.get, call_601314.host, call_601314.base,
                         call_601314.route, valid.getOrDefault("path"))
  result = hook(call_601314, url, valid)

proc call*(call_601315: Call_GetCreateAccountAlias_601301; AccountAlias: string;
          Action: string = "CreateAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getCreateAccountAlias
  ## Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601316 = newJObject()
  add(query_601316, "AccountAlias", newJString(AccountAlias))
  add(query_601316, "Action", newJString(Action))
  add(query_601316, "Version", newJString(Version))
  result = call_601315.call(nil, query_601316, nil, nil, nil)

var getCreateAccountAlias* = Call_GetCreateAccountAlias_601301(
    name: "getCreateAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateAccountAlias",
    validator: validate_GetCreateAccountAlias_601302, base: "/",
    url: url_GetCreateAccountAlias_601303, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGroup_601351 = ref object of OpenApiRestCall_600426
proc url_PostCreateGroup_601353(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateGroup_601352(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601354 = query.getOrDefault("Action")
  valid_601354 = validateParameter(valid_601354, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_601354 != nil:
    section.add "Action", valid_601354
  var valid_601355 = query.getOrDefault("Version")
  valid_601355 = validateParameter(valid_601355, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601355 != nil:
    section.add "Version", valid_601355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601356 = header.getOrDefault("X-Amz-Date")
  valid_601356 = validateParameter(valid_601356, JString, required = false,
                                 default = nil)
  if valid_601356 != nil:
    section.add "X-Amz-Date", valid_601356
  var valid_601357 = header.getOrDefault("X-Amz-Security-Token")
  valid_601357 = validateParameter(valid_601357, JString, required = false,
                                 default = nil)
  if valid_601357 != nil:
    section.add "X-Amz-Security-Token", valid_601357
  var valid_601358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601358 = validateParameter(valid_601358, JString, required = false,
                                 default = nil)
  if valid_601358 != nil:
    section.add "X-Amz-Content-Sha256", valid_601358
  var valid_601359 = header.getOrDefault("X-Amz-Algorithm")
  valid_601359 = validateParameter(valid_601359, JString, required = false,
                                 default = nil)
  if valid_601359 != nil:
    section.add "X-Amz-Algorithm", valid_601359
  var valid_601360 = header.getOrDefault("X-Amz-Signature")
  valid_601360 = validateParameter(valid_601360, JString, required = false,
                                 default = nil)
  if valid_601360 != nil:
    section.add "X-Amz-Signature", valid_601360
  var valid_601361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601361 = validateParameter(valid_601361, JString, required = false,
                                 default = nil)
  if valid_601361 != nil:
    section.add "X-Amz-SignedHeaders", valid_601361
  var valid_601362 = header.getOrDefault("X-Amz-Credential")
  valid_601362 = validateParameter(valid_601362, JString, required = false,
                                 default = nil)
  if valid_601362 != nil:
    section.add "X-Amz-Credential", valid_601362
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_601363 = formData.getOrDefault("GroupName")
  valid_601363 = validateParameter(valid_601363, JString, required = true,
                                 default = nil)
  if valid_601363 != nil:
    section.add "GroupName", valid_601363
  var valid_601364 = formData.getOrDefault("Path")
  valid_601364 = validateParameter(valid_601364, JString, required = false,
                                 default = nil)
  if valid_601364 != nil:
    section.add "Path", valid_601364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601365: Call_PostCreateGroup_601351; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601365.validator(path, query, header, formData, body)
  let scheme = call_601365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601365.url(scheme.get, call_601365.host, call_601365.base,
                         call_601365.route, valid.getOrDefault("path"))
  result = hook(call_601365, url, valid)

proc call*(call_601366: Call_PostCreateGroup_601351; GroupName: string;
          Action: string = "CreateGroup"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601367 = newJObject()
  var formData_601368 = newJObject()
  add(formData_601368, "GroupName", newJString(GroupName))
  add(query_601367, "Action", newJString(Action))
  add(query_601367, "Version", newJString(Version))
  add(formData_601368, "Path", newJString(Path))
  result = call_601366.call(nil, query_601367, nil, formData_601368, nil)

var postCreateGroup* = Call_PostCreateGroup_601351(name: "postCreateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_PostCreateGroup_601352,
    base: "/", url: url_PostCreateGroup_601353, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGroup_601334 = ref object of OpenApiRestCall_600426
proc url_GetCreateGroup_601336(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateGroup_601335(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: JString
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601337 = query.getOrDefault("Action")
  valid_601337 = validateParameter(valid_601337, JString, required = true,
                                 default = newJString("CreateGroup"))
  if valid_601337 != nil:
    section.add "Action", valid_601337
  var valid_601338 = query.getOrDefault("GroupName")
  valid_601338 = validateParameter(valid_601338, JString, required = true,
                                 default = nil)
  if valid_601338 != nil:
    section.add "GroupName", valid_601338
  var valid_601339 = query.getOrDefault("Path")
  valid_601339 = validateParameter(valid_601339, JString, required = false,
                                 default = nil)
  if valid_601339 != nil:
    section.add "Path", valid_601339
  var valid_601340 = query.getOrDefault("Version")
  valid_601340 = validateParameter(valid_601340, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601340 != nil:
    section.add "Version", valid_601340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601341 = header.getOrDefault("X-Amz-Date")
  valid_601341 = validateParameter(valid_601341, JString, required = false,
                                 default = nil)
  if valid_601341 != nil:
    section.add "X-Amz-Date", valid_601341
  var valid_601342 = header.getOrDefault("X-Amz-Security-Token")
  valid_601342 = validateParameter(valid_601342, JString, required = false,
                                 default = nil)
  if valid_601342 != nil:
    section.add "X-Amz-Security-Token", valid_601342
  var valid_601343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601343 = validateParameter(valid_601343, JString, required = false,
                                 default = nil)
  if valid_601343 != nil:
    section.add "X-Amz-Content-Sha256", valid_601343
  var valid_601344 = header.getOrDefault("X-Amz-Algorithm")
  valid_601344 = validateParameter(valid_601344, JString, required = false,
                                 default = nil)
  if valid_601344 != nil:
    section.add "X-Amz-Algorithm", valid_601344
  var valid_601345 = header.getOrDefault("X-Amz-Signature")
  valid_601345 = validateParameter(valid_601345, JString, required = false,
                                 default = nil)
  if valid_601345 != nil:
    section.add "X-Amz-Signature", valid_601345
  var valid_601346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601346 = validateParameter(valid_601346, JString, required = false,
                                 default = nil)
  if valid_601346 != nil:
    section.add "X-Amz-SignedHeaders", valid_601346
  var valid_601347 = header.getOrDefault("X-Amz-Credential")
  valid_601347 = validateParameter(valid_601347, JString, required = false,
                                 default = nil)
  if valid_601347 != nil:
    section.add "X-Amz-Credential", valid_601347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601348: Call_GetCreateGroup_601334; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601348.validator(path, query, header, formData, body)
  let scheme = call_601348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601348.url(scheme.get, call_601348.host, call_601348.base,
                         call_601348.route, valid.getOrDefault("path"))
  result = hook(call_601348, url, valid)

proc call*(call_601349: Call_GetCreateGroup_601334; GroupName: string;
          Action: string = "CreateGroup"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateGroup
  ## <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Path: string
  ##       : <p> The path to the group. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_601350 = newJObject()
  add(query_601350, "Action", newJString(Action))
  add(query_601350, "GroupName", newJString(GroupName))
  add(query_601350, "Path", newJString(Path))
  add(query_601350, "Version", newJString(Version))
  result = call_601349.call(nil, query_601350, nil, nil, nil)

var getCreateGroup* = Call_GetCreateGroup_601334(name: "getCreateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateGroup", validator: validate_GetCreateGroup_601335,
    base: "/", url: url_GetCreateGroup_601336, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateInstanceProfile_601386 = ref object of OpenApiRestCall_600426
proc url_PostCreateInstanceProfile_601388(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateInstanceProfile_601387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601389 = query.getOrDefault("Action")
  valid_601389 = validateParameter(valid_601389, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_601389 != nil:
    section.add "Action", valid_601389
  var valid_601390 = query.getOrDefault("Version")
  valid_601390 = validateParameter(valid_601390, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601390 != nil:
    section.add "Version", valid_601390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601391 = header.getOrDefault("X-Amz-Date")
  valid_601391 = validateParameter(valid_601391, JString, required = false,
                                 default = nil)
  if valid_601391 != nil:
    section.add "X-Amz-Date", valid_601391
  var valid_601392 = header.getOrDefault("X-Amz-Security-Token")
  valid_601392 = validateParameter(valid_601392, JString, required = false,
                                 default = nil)
  if valid_601392 != nil:
    section.add "X-Amz-Security-Token", valid_601392
  var valid_601393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601393 = validateParameter(valid_601393, JString, required = false,
                                 default = nil)
  if valid_601393 != nil:
    section.add "X-Amz-Content-Sha256", valid_601393
  var valid_601394 = header.getOrDefault("X-Amz-Algorithm")
  valid_601394 = validateParameter(valid_601394, JString, required = false,
                                 default = nil)
  if valid_601394 != nil:
    section.add "X-Amz-Algorithm", valid_601394
  var valid_601395 = header.getOrDefault("X-Amz-Signature")
  valid_601395 = validateParameter(valid_601395, JString, required = false,
                                 default = nil)
  if valid_601395 != nil:
    section.add "X-Amz-Signature", valid_601395
  var valid_601396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601396 = validateParameter(valid_601396, JString, required = false,
                                 default = nil)
  if valid_601396 != nil:
    section.add "X-Amz-SignedHeaders", valid_601396
  var valid_601397 = header.getOrDefault("X-Amz-Credential")
  valid_601397 = validateParameter(valid_601397, JString, required = false,
                                 default = nil)
  if valid_601397 != nil:
    section.add "X-Amz-Credential", valid_601397
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_601398 = formData.getOrDefault("InstanceProfileName")
  valid_601398 = validateParameter(valid_601398, JString, required = true,
                                 default = nil)
  if valid_601398 != nil:
    section.add "InstanceProfileName", valid_601398
  var valid_601399 = formData.getOrDefault("Path")
  valid_601399 = validateParameter(valid_601399, JString, required = false,
                                 default = nil)
  if valid_601399 != nil:
    section.add "Path", valid_601399
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601400: Call_PostCreateInstanceProfile_601386; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601400.validator(path, query, header, formData, body)
  let scheme = call_601400.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601400.url(scheme.get, call_601400.host, call_601400.base,
                         call_601400.route, valid.getOrDefault("path"))
  result = hook(call_601400, url, valid)

proc call*(call_601401: Call_PostCreateInstanceProfile_601386;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601402 = newJObject()
  var formData_601403 = newJObject()
  add(query_601402, "Action", newJString(Action))
  add(formData_601403, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_601402, "Version", newJString(Version))
  add(formData_601403, "Path", newJString(Path))
  result = call_601401.call(nil, query_601402, nil, formData_601403, nil)

var postCreateInstanceProfile* = Call_PostCreateInstanceProfile_601386(
    name: "postCreateInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_PostCreateInstanceProfile_601387, base: "/",
    url: url_PostCreateInstanceProfile_601388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateInstanceProfile_601369 = ref object of OpenApiRestCall_600426
proc url_GetCreateInstanceProfile_601371(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateInstanceProfile_601370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_601372 = query.getOrDefault("InstanceProfileName")
  valid_601372 = validateParameter(valid_601372, JString, required = true,
                                 default = nil)
  if valid_601372 != nil:
    section.add "InstanceProfileName", valid_601372
  var valid_601373 = query.getOrDefault("Action")
  valid_601373 = validateParameter(valid_601373, JString, required = true,
                                 default = newJString("CreateInstanceProfile"))
  if valid_601373 != nil:
    section.add "Action", valid_601373
  var valid_601374 = query.getOrDefault("Path")
  valid_601374 = validateParameter(valid_601374, JString, required = false,
                                 default = nil)
  if valid_601374 != nil:
    section.add "Path", valid_601374
  var valid_601375 = query.getOrDefault("Version")
  valid_601375 = validateParameter(valid_601375, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601375 != nil:
    section.add "Version", valid_601375
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601376 = header.getOrDefault("X-Amz-Date")
  valid_601376 = validateParameter(valid_601376, JString, required = false,
                                 default = nil)
  if valid_601376 != nil:
    section.add "X-Amz-Date", valid_601376
  var valid_601377 = header.getOrDefault("X-Amz-Security-Token")
  valid_601377 = validateParameter(valid_601377, JString, required = false,
                                 default = nil)
  if valid_601377 != nil:
    section.add "X-Amz-Security-Token", valid_601377
  var valid_601378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601378 = validateParameter(valid_601378, JString, required = false,
                                 default = nil)
  if valid_601378 != nil:
    section.add "X-Amz-Content-Sha256", valid_601378
  var valid_601379 = header.getOrDefault("X-Amz-Algorithm")
  valid_601379 = validateParameter(valid_601379, JString, required = false,
                                 default = nil)
  if valid_601379 != nil:
    section.add "X-Amz-Algorithm", valid_601379
  var valid_601380 = header.getOrDefault("X-Amz-Signature")
  valid_601380 = validateParameter(valid_601380, JString, required = false,
                                 default = nil)
  if valid_601380 != nil:
    section.add "X-Amz-Signature", valid_601380
  var valid_601381 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601381 = validateParameter(valid_601381, JString, required = false,
                                 default = nil)
  if valid_601381 != nil:
    section.add "X-Amz-SignedHeaders", valid_601381
  var valid_601382 = header.getOrDefault("X-Amz-Credential")
  valid_601382 = validateParameter(valid_601382, JString, required = false,
                                 default = nil)
  if valid_601382 != nil:
    section.add "X-Amz-Credential", valid_601382
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601383: Call_GetCreateInstanceProfile_601369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601383.validator(path, query, header, formData, body)
  let scheme = call_601383.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601383.url(scheme.get, call_601383.host, call_601383.base,
                         call_601383.route, valid.getOrDefault("path"))
  result = hook(call_601383, url, valid)

proc call*(call_601384: Call_GetCreateInstanceProfile_601369;
          InstanceProfileName: string; Action: string = "CreateInstanceProfile";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateInstanceProfile
  ## <p> Creates a new instance profile. For information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the instance profile. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_601385 = newJObject()
  add(query_601385, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_601385, "Action", newJString(Action))
  add(query_601385, "Path", newJString(Path))
  add(query_601385, "Version", newJString(Version))
  result = call_601384.call(nil, query_601385, nil, nil, nil)

var getCreateInstanceProfile* = Call_GetCreateInstanceProfile_601369(
    name: "getCreateInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateInstanceProfile",
    validator: validate_GetCreateInstanceProfile_601370, base: "/",
    url: url_GetCreateInstanceProfile_601371, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateLoginProfile_601422 = ref object of OpenApiRestCall_600426
proc url_PostCreateLoginProfile_601424(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateLoginProfile_601423(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601425 = query.getOrDefault("Action")
  valid_601425 = validateParameter(valid_601425, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_601425 != nil:
    section.add "Action", valid_601425
  var valid_601426 = query.getOrDefault("Version")
  valid_601426 = validateParameter(valid_601426, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601426 != nil:
    section.add "Version", valid_601426
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601427 = header.getOrDefault("X-Amz-Date")
  valid_601427 = validateParameter(valid_601427, JString, required = false,
                                 default = nil)
  if valid_601427 != nil:
    section.add "X-Amz-Date", valid_601427
  var valid_601428 = header.getOrDefault("X-Amz-Security-Token")
  valid_601428 = validateParameter(valid_601428, JString, required = false,
                                 default = nil)
  if valid_601428 != nil:
    section.add "X-Amz-Security-Token", valid_601428
  var valid_601429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601429 = validateParameter(valid_601429, JString, required = false,
                                 default = nil)
  if valid_601429 != nil:
    section.add "X-Amz-Content-Sha256", valid_601429
  var valid_601430 = header.getOrDefault("X-Amz-Algorithm")
  valid_601430 = validateParameter(valid_601430, JString, required = false,
                                 default = nil)
  if valid_601430 != nil:
    section.add "X-Amz-Algorithm", valid_601430
  var valid_601431 = header.getOrDefault("X-Amz-Signature")
  valid_601431 = validateParameter(valid_601431, JString, required = false,
                                 default = nil)
  if valid_601431 != nil:
    section.add "X-Amz-Signature", valid_601431
  var valid_601432 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601432 = validateParameter(valid_601432, JString, required = false,
                                 default = nil)
  if valid_601432 != nil:
    section.add "X-Amz-SignedHeaders", valid_601432
  var valid_601433 = header.getOrDefault("X-Amz-Credential")
  valid_601433 = validateParameter(valid_601433, JString, required = false,
                                 default = nil)
  if valid_601433 != nil:
    section.add "X-Amz-Credential", valid_601433
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_601434 = formData.getOrDefault("UserName")
  valid_601434 = validateParameter(valid_601434, JString, required = true,
                                 default = nil)
  if valid_601434 != nil:
    section.add "UserName", valid_601434
  var valid_601435 = formData.getOrDefault("Password")
  valid_601435 = validateParameter(valid_601435, JString, required = true,
                                 default = nil)
  if valid_601435 != nil:
    section.add "Password", valid_601435
  var valid_601436 = formData.getOrDefault("PasswordResetRequired")
  valid_601436 = validateParameter(valid_601436, JBool, required = false, default = nil)
  if valid_601436 != nil:
    section.add "PasswordResetRequired", valid_601436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601437: Call_PostCreateLoginProfile_601422; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601437.validator(path, query, header, formData, body)
  let scheme = call_601437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601437.url(scheme.get, call_601437.host, call_601437.base,
                         call_601437.route, valid.getOrDefault("path"))
  result = hook(call_601437, url, valid)

proc call*(call_601438: Call_PostCreateLoginProfile_601422; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601439 = newJObject()
  var formData_601440 = newJObject()
  add(formData_601440, "UserName", newJString(UserName))
  add(formData_601440, "Password", newJString(Password))
  add(formData_601440, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_601439, "Action", newJString(Action))
  add(query_601439, "Version", newJString(Version))
  result = call_601438.call(nil, query_601439, nil, formData_601440, nil)

var postCreateLoginProfile* = Call_PostCreateLoginProfile_601422(
    name: "postCreateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_PostCreateLoginProfile_601423, base: "/",
    url: url_PostCreateLoginProfile_601424, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateLoginProfile_601404 = ref object of OpenApiRestCall_600426
proc url_GetCreateLoginProfile_601406(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateLoginProfile_601405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_601407 = query.getOrDefault("UserName")
  valid_601407 = validateParameter(valid_601407, JString, required = true,
                                 default = nil)
  if valid_601407 != nil:
    section.add "UserName", valid_601407
  var valid_601408 = query.getOrDefault("PasswordResetRequired")
  valid_601408 = validateParameter(valid_601408, JBool, required = false, default = nil)
  if valid_601408 != nil:
    section.add "PasswordResetRequired", valid_601408
  var valid_601409 = query.getOrDefault("Action")
  valid_601409 = validateParameter(valid_601409, JString, required = true,
                                 default = newJString("CreateLoginProfile"))
  if valid_601409 != nil:
    section.add "Action", valid_601409
  var valid_601410 = query.getOrDefault("Password")
  valid_601410 = validateParameter(valid_601410, JString, required = true,
                                 default = nil)
  if valid_601410 != nil:
    section.add "Password", valid_601410
  var valid_601411 = query.getOrDefault("Version")
  valid_601411 = validateParameter(valid_601411, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601411 != nil:
    section.add "Version", valid_601411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601412 = header.getOrDefault("X-Amz-Date")
  valid_601412 = validateParameter(valid_601412, JString, required = false,
                                 default = nil)
  if valid_601412 != nil:
    section.add "X-Amz-Date", valid_601412
  var valid_601413 = header.getOrDefault("X-Amz-Security-Token")
  valid_601413 = validateParameter(valid_601413, JString, required = false,
                                 default = nil)
  if valid_601413 != nil:
    section.add "X-Amz-Security-Token", valid_601413
  var valid_601414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601414 = validateParameter(valid_601414, JString, required = false,
                                 default = nil)
  if valid_601414 != nil:
    section.add "X-Amz-Content-Sha256", valid_601414
  var valid_601415 = header.getOrDefault("X-Amz-Algorithm")
  valid_601415 = validateParameter(valid_601415, JString, required = false,
                                 default = nil)
  if valid_601415 != nil:
    section.add "X-Amz-Algorithm", valid_601415
  var valid_601416 = header.getOrDefault("X-Amz-Signature")
  valid_601416 = validateParameter(valid_601416, JString, required = false,
                                 default = nil)
  if valid_601416 != nil:
    section.add "X-Amz-Signature", valid_601416
  var valid_601417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601417 = validateParameter(valid_601417, JString, required = false,
                                 default = nil)
  if valid_601417 != nil:
    section.add "X-Amz-SignedHeaders", valid_601417
  var valid_601418 = header.getOrDefault("X-Amz-Credential")
  valid_601418 = validateParameter(valid_601418, JString, required = false,
                                 default = nil)
  if valid_601418 != nil:
    section.add "X-Amz-Credential", valid_601418
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601419: Call_GetCreateLoginProfile_601404; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601419.validator(path, query, header, formData, body)
  let scheme = call_601419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601419.url(scheme.get, call_601419.host, call_601419.base,
                         call_601419.route, valid.getOrDefault("path"))
  result = hook(call_601419, url, valid)

proc call*(call_601420: Call_GetCreateLoginProfile_601404; UserName: string;
          Password: string; PasswordResetRequired: bool = false;
          Action: string = "CreateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getCreateLoginProfile
  ##  Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Specifies whether the user is required to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string (required)
  ##           : <p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Any of these characters are valid in a password. However, many tools, such as the AWS Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p>
  ##   Version: string (required)
  var query_601421 = newJObject()
  add(query_601421, "UserName", newJString(UserName))
  add(query_601421, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_601421, "Action", newJString(Action))
  add(query_601421, "Password", newJString(Password))
  add(query_601421, "Version", newJString(Version))
  result = call_601420.call(nil, query_601421, nil, nil, nil)

var getCreateLoginProfile* = Call_GetCreateLoginProfile_601404(
    name: "getCreateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateLoginProfile",
    validator: validate_GetCreateLoginProfile_601405, base: "/",
    url: url_GetCreateLoginProfile_601406, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOpenIDConnectProvider_601459 = ref object of OpenApiRestCall_600426
proc url_PostCreateOpenIDConnectProvider_601461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateOpenIDConnectProvider_601460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601462 = query.getOrDefault("Action")
  valid_601462 = validateParameter(valid_601462, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_601462 != nil:
    section.add "Action", valid_601462
  var valid_601463 = query.getOrDefault("Version")
  valid_601463 = validateParameter(valid_601463, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601463 != nil:
    section.add "Version", valid_601463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601464 = header.getOrDefault("X-Amz-Date")
  valid_601464 = validateParameter(valid_601464, JString, required = false,
                                 default = nil)
  if valid_601464 != nil:
    section.add "X-Amz-Date", valid_601464
  var valid_601465 = header.getOrDefault("X-Amz-Security-Token")
  valid_601465 = validateParameter(valid_601465, JString, required = false,
                                 default = nil)
  if valid_601465 != nil:
    section.add "X-Amz-Security-Token", valid_601465
  var valid_601466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601466 = validateParameter(valid_601466, JString, required = false,
                                 default = nil)
  if valid_601466 != nil:
    section.add "X-Amz-Content-Sha256", valid_601466
  var valid_601467 = header.getOrDefault("X-Amz-Algorithm")
  valid_601467 = validateParameter(valid_601467, JString, required = false,
                                 default = nil)
  if valid_601467 != nil:
    section.add "X-Amz-Algorithm", valid_601467
  var valid_601468 = header.getOrDefault("X-Amz-Signature")
  valid_601468 = validateParameter(valid_601468, JString, required = false,
                                 default = nil)
  if valid_601468 != nil:
    section.add "X-Amz-Signature", valid_601468
  var valid_601469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601469 = validateParameter(valid_601469, JString, required = false,
                                 default = nil)
  if valid_601469 != nil:
    section.add "X-Amz-SignedHeaders", valid_601469
  var valid_601470 = header.getOrDefault("X-Amz-Credential")
  valid_601470 = validateParameter(valid_601470, JString, required = false,
                                 default = nil)
  if valid_601470 != nil:
    section.add "X-Amz-Credential", valid_601470
  result.add "header", section
  ## parameters in `formData` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  section = newJObject()
  var valid_601471 = formData.getOrDefault("ClientIDList")
  valid_601471 = validateParameter(valid_601471, JArray, required = false,
                                 default = nil)
  if valid_601471 != nil:
    section.add "ClientIDList", valid_601471
  assert formData != nil,
        "formData argument is necessary due to required `ThumbprintList` field"
  var valid_601472 = formData.getOrDefault("ThumbprintList")
  valid_601472 = validateParameter(valid_601472, JArray, required = true, default = nil)
  if valid_601472 != nil:
    section.add "ThumbprintList", valid_601472
  var valid_601473 = formData.getOrDefault("Url")
  valid_601473 = validateParameter(valid_601473, JString, required = true,
                                 default = nil)
  if valid_601473 != nil:
    section.add "Url", valid_601473
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601474: Call_PostCreateOpenIDConnectProvider_601459;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_601474.validator(path, query, header, formData, body)
  let scheme = call_601474.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601474.url(scheme.get, call_601474.host, call_601474.base,
                         call_601474.route, valid.getOrDefault("path"))
  result = hook(call_601474, url, valid)

proc call*(call_601475: Call_PostCreateOpenIDConnectProvider_601459;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  var query_601476 = newJObject()
  var formData_601477 = newJObject()
  if ClientIDList != nil:
    formData_601477.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    formData_601477.add "ThumbprintList", ThumbprintList
  add(query_601476, "Action", newJString(Action))
  add(query_601476, "Version", newJString(Version))
  add(formData_601477, "Url", newJString(Url))
  result = call_601475.call(nil, query_601476, nil, formData_601477, nil)

var postCreateOpenIDConnectProvider* = Call_PostCreateOpenIDConnectProvider_601459(
    name: "postCreateOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_PostCreateOpenIDConnectProvider_601460, base: "/",
    url: url_PostCreateOpenIDConnectProvider_601461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOpenIDConnectProvider_601441 = ref object of OpenApiRestCall_600426
proc url_GetCreateOpenIDConnectProvider_601443(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateOpenIDConnectProvider_601442(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: JString (required)
  ##   Url: JString (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: JString (required)
  section = newJObject()
  var valid_601444 = query.getOrDefault("ClientIDList")
  valid_601444 = validateParameter(valid_601444, JArray, required = false,
                                 default = nil)
  if valid_601444 != nil:
    section.add "ClientIDList", valid_601444
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_601445 = query.getOrDefault("ThumbprintList")
  valid_601445 = validateParameter(valid_601445, JArray, required = true, default = nil)
  if valid_601445 != nil:
    section.add "ThumbprintList", valid_601445
  var valid_601446 = query.getOrDefault("Action")
  valid_601446 = validateParameter(valid_601446, JString, required = true, default = newJString(
      "CreateOpenIDConnectProvider"))
  if valid_601446 != nil:
    section.add "Action", valid_601446
  var valid_601447 = query.getOrDefault("Url")
  valid_601447 = validateParameter(valid_601447, JString, required = true,
                                 default = nil)
  if valid_601447 != nil:
    section.add "Url", valid_601447
  var valid_601448 = query.getOrDefault("Version")
  valid_601448 = validateParameter(valid_601448, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601448 != nil:
    section.add "Version", valid_601448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601449 = header.getOrDefault("X-Amz-Date")
  valid_601449 = validateParameter(valid_601449, JString, required = false,
                                 default = nil)
  if valid_601449 != nil:
    section.add "X-Amz-Date", valid_601449
  var valid_601450 = header.getOrDefault("X-Amz-Security-Token")
  valid_601450 = validateParameter(valid_601450, JString, required = false,
                                 default = nil)
  if valid_601450 != nil:
    section.add "X-Amz-Security-Token", valid_601450
  var valid_601451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601451 = validateParameter(valid_601451, JString, required = false,
                                 default = nil)
  if valid_601451 != nil:
    section.add "X-Amz-Content-Sha256", valid_601451
  var valid_601452 = header.getOrDefault("X-Amz-Algorithm")
  valid_601452 = validateParameter(valid_601452, JString, required = false,
                                 default = nil)
  if valid_601452 != nil:
    section.add "X-Amz-Algorithm", valid_601452
  var valid_601453 = header.getOrDefault("X-Amz-Signature")
  valid_601453 = validateParameter(valid_601453, JString, required = false,
                                 default = nil)
  if valid_601453 != nil:
    section.add "X-Amz-Signature", valid_601453
  var valid_601454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601454 = validateParameter(valid_601454, JString, required = false,
                                 default = nil)
  if valid_601454 != nil:
    section.add "X-Amz-SignedHeaders", valid_601454
  var valid_601455 = header.getOrDefault("X-Amz-Credential")
  valid_601455 = validateParameter(valid_601455, JString, required = false,
                                 default = nil)
  if valid_601455 != nil:
    section.add "X-Amz-Credential", valid_601455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601456: Call_GetCreateOpenIDConnectProvider_601441; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_601456.validator(path, query, header, formData, body)
  let scheme = call_601456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601456.url(scheme.get, call_601456.host, call_601456.base,
                         call_601456.route, valid.getOrDefault("path"))
  result = hook(call_601456, url, valid)

proc call*(call_601457: Call_GetCreateOpenIDConnectProvider_601441;
          ThumbprintList: JsonNode; Url: string; ClientIDList: JsonNode = nil;
          Action: string = "CreateOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateOpenIDConnectProvider
  ## <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of thumbprints of the server certificate(s) that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP that you want to use to access AWS.</p> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
  ##   ClientIDList: JArray
  ##               : <p>A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.)</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Url: string (required)
  ##      : Contains a URL that specifies the endpoint for an OpenID Connect provider.
  ##   Version: string (required)
  var query_601458 = newJObject()
  if ClientIDList != nil:
    query_601458.add "ClientIDList", ClientIDList
  if ThumbprintList != nil:
    query_601458.add "ThumbprintList", ThumbprintList
  add(query_601458, "Action", newJString(Action))
  add(query_601458, "Url", newJString(Url))
  add(query_601458, "Version", newJString(Version))
  result = call_601457.call(nil, query_601458, nil, nil, nil)

var getCreateOpenIDConnectProvider* = Call_GetCreateOpenIDConnectProvider_601441(
    name: "getCreateOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateOpenIDConnectProvider",
    validator: validate_GetCreateOpenIDConnectProvider_601442, base: "/",
    url: url_GetCreateOpenIDConnectProvider_601443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicy_601497 = ref object of OpenApiRestCall_600426
proc url_PostCreatePolicy_601499(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicy_601498(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601500 = query.getOrDefault("Action")
  valid_601500 = validateParameter(valid_601500, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_601500 != nil:
    section.add "Action", valid_601500
  var valid_601501 = query.getOrDefault("Version")
  valid_601501 = validateParameter(valid_601501, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601501 != nil:
    section.add "Version", valid_601501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601502 = header.getOrDefault("X-Amz-Date")
  valid_601502 = validateParameter(valid_601502, JString, required = false,
                                 default = nil)
  if valid_601502 != nil:
    section.add "X-Amz-Date", valid_601502
  var valid_601503 = header.getOrDefault("X-Amz-Security-Token")
  valid_601503 = validateParameter(valid_601503, JString, required = false,
                                 default = nil)
  if valid_601503 != nil:
    section.add "X-Amz-Security-Token", valid_601503
  var valid_601504 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601504 = validateParameter(valid_601504, JString, required = false,
                                 default = nil)
  if valid_601504 != nil:
    section.add "X-Amz-Content-Sha256", valid_601504
  var valid_601505 = header.getOrDefault("X-Amz-Algorithm")
  valid_601505 = validateParameter(valid_601505, JString, required = false,
                                 default = nil)
  if valid_601505 != nil:
    section.add "X-Amz-Algorithm", valid_601505
  var valid_601506 = header.getOrDefault("X-Amz-Signature")
  valid_601506 = validateParameter(valid_601506, JString, required = false,
                                 default = nil)
  if valid_601506 != nil:
    section.add "X-Amz-Signature", valid_601506
  var valid_601507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601507 = validateParameter(valid_601507, JString, required = false,
                                 default = nil)
  if valid_601507 != nil:
    section.add "X-Amz-SignedHeaders", valid_601507
  var valid_601508 = header.getOrDefault("X-Amz-Credential")
  valid_601508 = validateParameter(valid_601508, JString, required = false,
                                 default = nil)
  if valid_601508 != nil:
    section.add "X-Amz-Credential", valid_601508
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_601509 = formData.getOrDefault("PolicyName")
  valid_601509 = validateParameter(valid_601509, JString, required = true,
                                 default = nil)
  if valid_601509 != nil:
    section.add "PolicyName", valid_601509
  var valid_601510 = formData.getOrDefault("PolicyDocument")
  valid_601510 = validateParameter(valid_601510, JString, required = true,
                                 default = nil)
  if valid_601510 != nil:
    section.add "PolicyDocument", valid_601510
  var valid_601511 = formData.getOrDefault("Description")
  valid_601511 = validateParameter(valid_601511, JString, required = false,
                                 default = nil)
  if valid_601511 != nil:
    section.add "Description", valid_601511
  var valid_601512 = formData.getOrDefault("Path")
  valid_601512 = validateParameter(valid_601512, JString, required = false,
                                 default = nil)
  if valid_601512 != nil:
    section.add "Path", valid_601512
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601513: Call_PostCreatePolicy_601497; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601513.validator(path, query, header, formData, body)
  let scheme = call_601513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601513.url(scheme.get, call_601513.host, call_601513.base,
                         call_601513.route, valid.getOrDefault("path"))
  result = hook(call_601513, url, valid)

proc call*(call_601514: Call_PostCreatePolicy_601497; PolicyName: string;
          PolicyDocument: string; Action: string = "CreatePolicy";
          Version: string = "2010-05-08"; Description: string = ""; Path: string = ""): Recallable =
  ## postCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601515 = newJObject()
  var formData_601516 = newJObject()
  add(formData_601516, "PolicyName", newJString(PolicyName))
  add(formData_601516, "PolicyDocument", newJString(PolicyDocument))
  add(query_601515, "Action", newJString(Action))
  add(query_601515, "Version", newJString(Version))
  add(formData_601516, "Description", newJString(Description))
  add(formData_601516, "Path", newJString(Path))
  result = call_601514.call(nil, query_601515, nil, formData_601516, nil)

var postCreatePolicy* = Call_PostCreatePolicy_601497(name: "postCreatePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_PostCreatePolicy_601498,
    base: "/", url: url_PostCreatePolicy_601499,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicy_601478 = ref object of OpenApiRestCall_600426
proc url_GetCreatePolicy_601480(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicy_601479(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  section = newJObject()
  var valid_601481 = query.getOrDefault("Description")
  valid_601481 = validateParameter(valid_601481, JString, required = false,
                                 default = nil)
  if valid_601481 != nil:
    section.add "Description", valid_601481
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601482 = query.getOrDefault("Action")
  valid_601482 = validateParameter(valid_601482, JString, required = true,
                                 default = newJString("CreatePolicy"))
  if valid_601482 != nil:
    section.add "Action", valid_601482
  var valid_601483 = query.getOrDefault("PolicyDocument")
  valid_601483 = validateParameter(valid_601483, JString, required = true,
                                 default = nil)
  if valid_601483 != nil:
    section.add "PolicyDocument", valid_601483
  var valid_601484 = query.getOrDefault("Path")
  valid_601484 = validateParameter(valid_601484, JString, required = false,
                                 default = nil)
  if valid_601484 != nil:
    section.add "Path", valid_601484
  var valid_601485 = query.getOrDefault("Version")
  valid_601485 = validateParameter(valid_601485, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601485 != nil:
    section.add "Version", valid_601485
  var valid_601486 = query.getOrDefault("PolicyName")
  valid_601486 = validateParameter(valid_601486, JString, required = true,
                                 default = nil)
  if valid_601486 != nil:
    section.add "PolicyName", valid_601486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601487 = header.getOrDefault("X-Amz-Date")
  valid_601487 = validateParameter(valid_601487, JString, required = false,
                                 default = nil)
  if valid_601487 != nil:
    section.add "X-Amz-Date", valid_601487
  var valid_601488 = header.getOrDefault("X-Amz-Security-Token")
  valid_601488 = validateParameter(valid_601488, JString, required = false,
                                 default = nil)
  if valid_601488 != nil:
    section.add "X-Amz-Security-Token", valid_601488
  var valid_601489 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601489 = validateParameter(valid_601489, JString, required = false,
                                 default = nil)
  if valid_601489 != nil:
    section.add "X-Amz-Content-Sha256", valid_601489
  var valid_601490 = header.getOrDefault("X-Amz-Algorithm")
  valid_601490 = validateParameter(valid_601490, JString, required = false,
                                 default = nil)
  if valid_601490 != nil:
    section.add "X-Amz-Algorithm", valid_601490
  var valid_601491 = header.getOrDefault("X-Amz-Signature")
  valid_601491 = validateParameter(valid_601491, JString, required = false,
                                 default = nil)
  if valid_601491 != nil:
    section.add "X-Amz-Signature", valid_601491
  var valid_601492 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601492 = validateParameter(valid_601492, JString, required = false,
                                 default = nil)
  if valid_601492 != nil:
    section.add "X-Amz-SignedHeaders", valid_601492
  var valid_601493 = header.getOrDefault("X-Amz-Credential")
  valid_601493 = validateParameter(valid_601493, JString, required = false,
                                 default = nil)
  if valid_601493 != nil:
    section.add "X-Amz-Credential", valid_601493
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601494: Call_GetCreatePolicy_601478; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601494.validator(path, query, header, formData, body)
  let scheme = call_601494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601494.url(scheme.get, call_601494.host, call_601494.base,
                         call_601494.route, valid.getOrDefault("path"))
  result = hook(call_601494, url, valid)

proc call*(call_601495: Call_GetCreatePolicy_601478; PolicyDocument: string;
          PolicyName: string; Description: string = "";
          Action: string = "CreatePolicy"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicy
  ## <p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: string
  ##              : <p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: string
  ##       : <p>The path for the policy.</p> <p>For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  var query_601496 = newJObject()
  add(query_601496, "Description", newJString(Description))
  add(query_601496, "Action", newJString(Action))
  add(query_601496, "PolicyDocument", newJString(PolicyDocument))
  add(query_601496, "Path", newJString(Path))
  add(query_601496, "Version", newJString(Version))
  add(query_601496, "PolicyName", newJString(PolicyName))
  result = call_601495.call(nil, query_601496, nil, nil, nil)

var getCreatePolicy* = Call_GetCreatePolicy_601478(name: "getCreatePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreatePolicy", validator: validate_GetCreatePolicy_601479,
    base: "/", url: url_GetCreatePolicy_601480, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreatePolicyVersion_601535 = ref object of OpenApiRestCall_600426
proc url_PostCreatePolicyVersion_601537(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreatePolicyVersion_601536(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601538 = query.getOrDefault("Action")
  valid_601538 = validateParameter(valid_601538, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_601538 != nil:
    section.add "Action", valid_601538
  var valid_601539 = query.getOrDefault("Version")
  valid_601539 = validateParameter(valid_601539, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601539 != nil:
    section.add "Version", valid_601539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601540 = header.getOrDefault("X-Amz-Date")
  valid_601540 = validateParameter(valid_601540, JString, required = false,
                                 default = nil)
  if valid_601540 != nil:
    section.add "X-Amz-Date", valid_601540
  var valid_601541 = header.getOrDefault("X-Amz-Security-Token")
  valid_601541 = validateParameter(valid_601541, JString, required = false,
                                 default = nil)
  if valid_601541 != nil:
    section.add "X-Amz-Security-Token", valid_601541
  var valid_601542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601542 = validateParameter(valid_601542, JString, required = false,
                                 default = nil)
  if valid_601542 != nil:
    section.add "X-Amz-Content-Sha256", valid_601542
  var valid_601543 = header.getOrDefault("X-Amz-Algorithm")
  valid_601543 = validateParameter(valid_601543, JString, required = false,
                                 default = nil)
  if valid_601543 != nil:
    section.add "X-Amz-Algorithm", valid_601543
  var valid_601544 = header.getOrDefault("X-Amz-Signature")
  valid_601544 = validateParameter(valid_601544, JString, required = false,
                                 default = nil)
  if valid_601544 != nil:
    section.add "X-Amz-Signature", valid_601544
  var valid_601545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601545 = validateParameter(valid_601545, JString, required = false,
                                 default = nil)
  if valid_601545 != nil:
    section.add "X-Amz-SignedHeaders", valid_601545
  var valid_601546 = header.getOrDefault("X-Amz-Credential")
  valid_601546 = validateParameter(valid_601546, JString, required = false,
                                 default = nil)
  if valid_601546 != nil:
    section.add "X-Amz-Credential", valid_601546
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_601547 = formData.getOrDefault("PolicyArn")
  valid_601547 = validateParameter(valid_601547, JString, required = true,
                                 default = nil)
  if valid_601547 != nil:
    section.add "PolicyArn", valid_601547
  var valid_601548 = formData.getOrDefault("PolicyDocument")
  valid_601548 = validateParameter(valid_601548, JString, required = true,
                                 default = nil)
  if valid_601548 != nil:
    section.add "PolicyDocument", valid_601548
  var valid_601549 = formData.getOrDefault("SetAsDefault")
  valid_601549 = validateParameter(valid_601549, JBool, required = false, default = nil)
  if valid_601549 != nil:
    section.add "SetAsDefault", valid_601549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601550: Call_PostCreatePolicyVersion_601535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601550.validator(path, query, header, formData, body)
  let scheme = call_601550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601550.url(scheme.get, call_601550.host, call_601550.base,
                         call_601550.route, valid.getOrDefault("path"))
  result = hook(call_601550, url, valid)

proc call*(call_601551: Call_PostCreatePolicyVersion_601535; PolicyArn: string;
          PolicyDocument: string; Action: string = "CreatePolicyVersion";
          SetAsDefault: bool = false; Version: string = "2010-05-08"): Recallable =
  ## postCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_601552 = newJObject()
  var formData_601553 = newJObject()
  add(formData_601553, "PolicyArn", newJString(PolicyArn))
  add(formData_601553, "PolicyDocument", newJString(PolicyDocument))
  add(query_601552, "Action", newJString(Action))
  add(formData_601553, "SetAsDefault", newJBool(SetAsDefault))
  add(query_601552, "Version", newJString(Version))
  result = call_601551.call(nil, query_601552, nil, formData_601553, nil)

var postCreatePolicyVersion* = Call_PostCreatePolicyVersion_601535(
    name: "postCreatePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_PostCreatePolicyVersion_601536, base: "/",
    url: url_PostCreatePolicyVersion_601537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreatePolicyVersion_601517 = ref object of OpenApiRestCall_600426
proc url_GetCreatePolicyVersion_601519(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreatePolicyVersion_601518(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: JBool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_601520 = query.getOrDefault("PolicyArn")
  valid_601520 = validateParameter(valid_601520, JString, required = true,
                                 default = nil)
  if valid_601520 != nil:
    section.add "PolicyArn", valid_601520
  var valid_601521 = query.getOrDefault("SetAsDefault")
  valid_601521 = validateParameter(valid_601521, JBool, required = false, default = nil)
  if valid_601521 != nil:
    section.add "SetAsDefault", valid_601521
  var valid_601522 = query.getOrDefault("Action")
  valid_601522 = validateParameter(valid_601522, JString, required = true,
                                 default = newJString("CreatePolicyVersion"))
  if valid_601522 != nil:
    section.add "Action", valid_601522
  var valid_601523 = query.getOrDefault("PolicyDocument")
  valid_601523 = validateParameter(valid_601523, JString, required = true,
                                 default = nil)
  if valid_601523 != nil:
    section.add "PolicyDocument", valid_601523
  var valid_601524 = query.getOrDefault("Version")
  valid_601524 = validateParameter(valid_601524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601524 != nil:
    section.add "Version", valid_601524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601525 = header.getOrDefault("X-Amz-Date")
  valid_601525 = validateParameter(valid_601525, JString, required = false,
                                 default = nil)
  if valid_601525 != nil:
    section.add "X-Amz-Date", valid_601525
  var valid_601526 = header.getOrDefault("X-Amz-Security-Token")
  valid_601526 = validateParameter(valid_601526, JString, required = false,
                                 default = nil)
  if valid_601526 != nil:
    section.add "X-Amz-Security-Token", valid_601526
  var valid_601527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601527 = validateParameter(valid_601527, JString, required = false,
                                 default = nil)
  if valid_601527 != nil:
    section.add "X-Amz-Content-Sha256", valid_601527
  var valid_601528 = header.getOrDefault("X-Amz-Algorithm")
  valid_601528 = validateParameter(valid_601528, JString, required = false,
                                 default = nil)
  if valid_601528 != nil:
    section.add "X-Amz-Algorithm", valid_601528
  var valid_601529 = header.getOrDefault("X-Amz-Signature")
  valid_601529 = validateParameter(valid_601529, JString, required = false,
                                 default = nil)
  if valid_601529 != nil:
    section.add "X-Amz-Signature", valid_601529
  var valid_601530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601530 = validateParameter(valid_601530, JString, required = false,
                                 default = nil)
  if valid_601530 != nil:
    section.add "X-Amz-SignedHeaders", valid_601530
  var valid_601531 = header.getOrDefault("X-Amz-Credential")
  valid_601531 = validateParameter(valid_601531, JString, required = false,
                                 default = nil)
  if valid_601531 != nil:
    section.add "X-Amz-Credential", valid_601531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601532: Call_GetCreatePolicyVersion_601517; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601532.validator(path, query, header, formData, body)
  let scheme = call_601532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601532.url(scheme.get, call_601532.host, call_601532.base,
                         call_601532.route, valid.getOrDefault("path"))
  result = hook(call_601532, url, valid)

proc call*(call_601533: Call_GetCreatePolicyVersion_601517; PolicyArn: string;
          PolicyDocument: string; SetAsDefault: bool = false;
          Action: string = "CreatePolicyVersion"; Version: string = "2010-05-08"): Recallable =
  ## getCreatePolicyVersion
  ## <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SetAsDefault: bool
  ##               : <p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_601534 = newJObject()
  add(query_601534, "PolicyArn", newJString(PolicyArn))
  add(query_601534, "SetAsDefault", newJBool(SetAsDefault))
  add(query_601534, "Action", newJString(Action))
  add(query_601534, "PolicyDocument", newJString(PolicyDocument))
  add(query_601534, "Version", newJString(Version))
  result = call_601533.call(nil, query_601534, nil, nil, nil)

var getCreatePolicyVersion* = Call_GetCreatePolicyVersion_601517(
    name: "getCreatePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreatePolicyVersion",
    validator: validate_GetCreatePolicyVersion_601518, base: "/",
    url: url_GetCreatePolicyVersion_601519, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateRole_601576 = ref object of OpenApiRestCall_600426
proc url_PostCreateRole_601578(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateRole_601577(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601579 = query.getOrDefault("Action")
  valid_601579 = validateParameter(valid_601579, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_601579 != nil:
    section.add "Action", valid_601579
  var valid_601580 = query.getOrDefault("Version")
  valid_601580 = validateParameter(valid_601580, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601580 != nil:
    section.add "Version", valid_601580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601581 = header.getOrDefault("X-Amz-Date")
  valid_601581 = validateParameter(valid_601581, JString, required = false,
                                 default = nil)
  if valid_601581 != nil:
    section.add "X-Amz-Date", valid_601581
  var valid_601582 = header.getOrDefault("X-Amz-Security-Token")
  valid_601582 = validateParameter(valid_601582, JString, required = false,
                                 default = nil)
  if valid_601582 != nil:
    section.add "X-Amz-Security-Token", valid_601582
  var valid_601583 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601583 = validateParameter(valid_601583, JString, required = false,
                                 default = nil)
  if valid_601583 != nil:
    section.add "X-Amz-Content-Sha256", valid_601583
  var valid_601584 = header.getOrDefault("X-Amz-Algorithm")
  valid_601584 = validateParameter(valid_601584, JString, required = false,
                                 default = nil)
  if valid_601584 != nil:
    section.add "X-Amz-Algorithm", valid_601584
  var valid_601585 = header.getOrDefault("X-Amz-Signature")
  valid_601585 = validateParameter(valid_601585, JString, required = false,
                                 default = nil)
  if valid_601585 != nil:
    section.add "X-Amz-Signature", valid_601585
  var valid_601586 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601586 = validateParameter(valid_601586, JString, required = false,
                                 default = nil)
  if valid_601586 != nil:
    section.add "X-Amz-SignedHeaders", valid_601586
  var valid_601587 = header.getOrDefault("X-Amz-Credential")
  valid_601587 = validateParameter(valid_601587, JString, required = false,
                                 default = nil)
  if valid_601587 != nil:
    section.add "X-Amz-Credential", valid_601587
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_601588 = formData.getOrDefault("RoleName")
  valid_601588 = validateParameter(valid_601588, JString, required = true,
                                 default = nil)
  if valid_601588 != nil:
    section.add "RoleName", valid_601588
  var valid_601589 = formData.getOrDefault("PermissionsBoundary")
  valid_601589 = validateParameter(valid_601589, JString, required = false,
                                 default = nil)
  if valid_601589 != nil:
    section.add "PermissionsBoundary", valid_601589
  var valid_601590 = formData.getOrDefault("Tags")
  valid_601590 = validateParameter(valid_601590, JArray, required = false,
                                 default = nil)
  if valid_601590 != nil:
    section.add "Tags", valid_601590
  var valid_601591 = formData.getOrDefault("AssumeRolePolicyDocument")
  valid_601591 = validateParameter(valid_601591, JString, required = true,
                                 default = nil)
  if valid_601591 != nil:
    section.add "AssumeRolePolicyDocument", valid_601591
  var valid_601592 = formData.getOrDefault("MaxSessionDuration")
  valid_601592 = validateParameter(valid_601592, JInt, required = false, default = nil)
  if valid_601592 != nil:
    section.add "MaxSessionDuration", valid_601592
  var valid_601593 = formData.getOrDefault("Description")
  valid_601593 = validateParameter(valid_601593, JString, required = false,
                                 default = nil)
  if valid_601593 != nil:
    section.add "Description", valid_601593
  var valid_601594 = formData.getOrDefault("Path")
  valid_601594 = validateParameter(valid_601594, JString, required = false,
                                 default = nil)
  if valid_601594 != nil:
    section.add "Path", valid_601594
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601595: Call_PostCreateRole_601576; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601595.validator(path, query, header, formData, body)
  let scheme = call_601595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601595.url(scheme.get, call_601595.host, call_601595.base,
                         call_601595.route, valid.getOrDefault("path"))
  result = hook(call_601595, url, valid)

proc call*(call_601596: Call_PostCreateRole_601576; RoleName: string;
          AssumeRolePolicyDocument: string; PermissionsBoundary: string = "";
          Tags: JsonNode = nil; Action: string = "CreateRole";
          MaxSessionDuration: int = 0; Version: string = "2010-05-08";
          Description: string = ""; Path: string = ""): Recallable =
  ## postCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   Action: string (required)
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : A description of the role.
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601597 = newJObject()
  var formData_601598 = newJObject()
  add(formData_601598, "RoleName", newJString(RoleName))
  add(formData_601598, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_601598.add "Tags", Tags
  add(query_601597, "Action", newJString(Action))
  add(formData_601598, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(formData_601598, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_601597, "Version", newJString(Version))
  add(formData_601598, "Description", newJString(Description))
  add(formData_601598, "Path", newJString(Path))
  result = call_601596.call(nil, query_601597, nil, formData_601598, nil)

var postCreateRole* = Call_PostCreateRole_601576(name: "postCreateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_PostCreateRole_601577,
    base: "/", url: url_PostCreateRole_601578, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateRole_601554 = ref object of OpenApiRestCall_600426
proc url_GetCreateRole_601556(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateRole_601555(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AssumeRolePolicyDocument: JString (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: JString
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `AssumeRolePolicyDocument` field"
  var valid_601557 = query.getOrDefault("AssumeRolePolicyDocument")
  valid_601557 = validateParameter(valid_601557, JString, required = true,
                                 default = nil)
  if valid_601557 != nil:
    section.add "AssumeRolePolicyDocument", valid_601557
  var valid_601558 = query.getOrDefault("Description")
  valid_601558 = validateParameter(valid_601558, JString, required = false,
                                 default = nil)
  if valid_601558 != nil:
    section.add "Description", valid_601558
  var valid_601559 = query.getOrDefault("Tags")
  valid_601559 = validateParameter(valid_601559, JArray, required = false,
                                 default = nil)
  if valid_601559 != nil:
    section.add "Tags", valid_601559
  var valid_601560 = query.getOrDefault("MaxSessionDuration")
  valid_601560 = validateParameter(valid_601560, JInt, required = false, default = nil)
  if valid_601560 != nil:
    section.add "MaxSessionDuration", valid_601560
  var valid_601561 = query.getOrDefault("Action")
  valid_601561 = validateParameter(valid_601561, JString, required = true,
                                 default = newJString("CreateRole"))
  if valid_601561 != nil:
    section.add "Action", valid_601561
  var valid_601562 = query.getOrDefault("Path")
  valid_601562 = validateParameter(valid_601562, JString, required = false,
                                 default = nil)
  if valid_601562 != nil:
    section.add "Path", valid_601562
  var valid_601563 = query.getOrDefault("PermissionsBoundary")
  valid_601563 = validateParameter(valid_601563, JString, required = false,
                                 default = nil)
  if valid_601563 != nil:
    section.add "PermissionsBoundary", valid_601563
  var valid_601564 = query.getOrDefault("RoleName")
  valid_601564 = validateParameter(valid_601564, JString, required = true,
                                 default = nil)
  if valid_601564 != nil:
    section.add "RoleName", valid_601564
  var valid_601565 = query.getOrDefault("Version")
  valid_601565 = validateParameter(valid_601565, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601565 != nil:
    section.add "Version", valid_601565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601566 = header.getOrDefault("X-Amz-Date")
  valid_601566 = validateParameter(valid_601566, JString, required = false,
                                 default = nil)
  if valid_601566 != nil:
    section.add "X-Amz-Date", valid_601566
  var valid_601567 = header.getOrDefault("X-Amz-Security-Token")
  valid_601567 = validateParameter(valid_601567, JString, required = false,
                                 default = nil)
  if valid_601567 != nil:
    section.add "X-Amz-Security-Token", valid_601567
  var valid_601568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601568 = validateParameter(valid_601568, JString, required = false,
                                 default = nil)
  if valid_601568 != nil:
    section.add "X-Amz-Content-Sha256", valid_601568
  var valid_601569 = header.getOrDefault("X-Amz-Algorithm")
  valid_601569 = validateParameter(valid_601569, JString, required = false,
                                 default = nil)
  if valid_601569 != nil:
    section.add "X-Amz-Algorithm", valid_601569
  var valid_601570 = header.getOrDefault("X-Amz-Signature")
  valid_601570 = validateParameter(valid_601570, JString, required = false,
                                 default = nil)
  if valid_601570 != nil:
    section.add "X-Amz-Signature", valid_601570
  var valid_601571 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601571 = validateParameter(valid_601571, JString, required = false,
                                 default = nil)
  if valid_601571 != nil:
    section.add "X-Amz-SignedHeaders", valid_601571
  var valid_601572 = header.getOrDefault("X-Amz-Credential")
  valid_601572 = validateParameter(valid_601572, JString, required = false,
                                 default = nil)
  if valid_601572 != nil:
    section.add "X-Amz-Credential", valid_601572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601573: Call_GetCreateRole_601554; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601573.validator(path, query, header, formData, body)
  let scheme = call_601573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601573.url(scheme.get, call_601573.host, call_601573.base,
                         call_601573.route, valid.getOrDefault("path"))
  result = hook(call_601573, url, valid)

proc call*(call_601574: Call_GetCreateRole_601554;
          AssumeRolePolicyDocument: string; RoleName: string;
          Description: string = ""; Tags: JsonNode = nil; MaxSessionDuration: int = 0;
          Action: string = "CreateRole"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateRole
  ## Creates a new role for your AWS account. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.
  ##   AssumeRolePolicyDocument: string (required)
  ##                           : <p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p>
  ##   Description: string
  ##              : A description of the role.
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per role, then the entire request fails and the role is not created.</p> </note>
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path to the role. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Version: string (required)
  var query_601575 = newJObject()
  add(query_601575, "AssumeRolePolicyDocument",
      newJString(AssumeRolePolicyDocument))
  add(query_601575, "Description", newJString(Description))
  if Tags != nil:
    query_601575.add "Tags", Tags
  add(query_601575, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_601575, "Action", newJString(Action))
  add(query_601575, "Path", newJString(Path))
  add(query_601575, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_601575, "RoleName", newJString(RoleName))
  add(query_601575, "Version", newJString(Version))
  result = call_601574.call(nil, query_601575, nil, nil, nil)

var getCreateRole* = Call_GetCreateRole_601554(name: "getCreateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateRole", validator: validate_GetCreateRole_601555,
    base: "/", url: url_GetCreateRole_601556, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSAMLProvider_601616 = ref object of OpenApiRestCall_600426
proc url_PostCreateSAMLProvider_601618(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateSAMLProvider_601617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601619 = query.getOrDefault("Action")
  valid_601619 = validateParameter(valid_601619, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_601619 != nil:
    section.add "Action", valid_601619
  var valid_601620 = query.getOrDefault("Version")
  valid_601620 = validateParameter(valid_601620, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601620 != nil:
    section.add "Version", valid_601620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601621 = header.getOrDefault("X-Amz-Date")
  valid_601621 = validateParameter(valid_601621, JString, required = false,
                                 default = nil)
  if valid_601621 != nil:
    section.add "X-Amz-Date", valid_601621
  var valid_601622 = header.getOrDefault("X-Amz-Security-Token")
  valid_601622 = validateParameter(valid_601622, JString, required = false,
                                 default = nil)
  if valid_601622 != nil:
    section.add "X-Amz-Security-Token", valid_601622
  var valid_601623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601623 = validateParameter(valid_601623, JString, required = false,
                                 default = nil)
  if valid_601623 != nil:
    section.add "X-Amz-Content-Sha256", valid_601623
  var valid_601624 = header.getOrDefault("X-Amz-Algorithm")
  valid_601624 = validateParameter(valid_601624, JString, required = false,
                                 default = nil)
  if valid_601624 != nil:
    section.add "X-Amz-Algorithm", valid_601624
  var valid_601625 = header.getOrDefault("X-Amz-Signature")
  valid_601625 = validateParameter(valid_601625, JString, required = false,
                                 default = nil)
  if valid_601625 != nil:
    section.add "X-Amz-Signature", valid_601625
  var valid_601626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601626 = validateParameter(valid_601626, JString, required = false,
                                 default = nil)
  if valid_601626 != nil:
    section.add "X-Amz-SignedHeaders", valid_601626
  var valid_601627 = header.getOrDefault("X-Amz-Credential")
  valid_601627 = validateParameter(valid_601627, JString, required = false,
                                 default = nil)
  if valid_601627 != nil:
    section.add "X-Amz-Credential", valid_601627
  result.add "header", section
  ## parameters in `formData` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Name` field"
  var valid_601628 = formData.getOrDefault("Name")
  valid_601628 = validateParameter(valid_601628, JString, required = true,
                                 default = nil)
  if valid_601628 != nil:
    section.add "Name", valid_601628
  var valid_601629 = formData.getOrDefault("SAMLMetadataDocument")
  valid_601629 = validateParameter(valid_601629, JString, required = true,
                                 default = nil)
  if valid_601629 != nil:
    section.add "SAMLMetadataDocument", valid_601629
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601630: Call_PostCreateSAMLProvider_601616; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601630.validator(path, query, header, formData, body)
  let scheme = call_601630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601630.url(scheme.get, call_601630.host, call_601630.base,
                         call_601630.route, valid.getOrDefault("path"))
  result = hook(call_601630, url, valid)

proc call*(call_601631: Call_PostCreateSAMLProvider_601616; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Version: string (required)
  var query_601632 = newJObject()
  var formData_601633 = newJObject()
  add(formData_601633, "Name", newJString(Name))
  add(query_601632, "Action", newJString(Action))
  add(formData_601633, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_601632, "Version", newJString(Version))
  result = call_601631.call(nil, query_601632, nil, formData_601633, nil)

var postCreateSAMLProvider* = Call_PostCreateSAMLProvider_601616(
    name: "postCreateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_PostCreateSAMLProvider_601617, base: "/",
    url: url_PostCreateSAMLProvider_601618, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSAMLProvider_601599 = ref object of OpenApiRestCall_600426
proc url_GetCreateSAMLProvider_601601(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateSAMLProvider_601600(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Name: JString (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Name` field"
  var valid_601602 = query.getOrDefault("Name")
  valid_601602 = validateParameter(valid_601602, JString, required = true,
                                 default = nil)
  if valid_601602 != nil:
    section.add "Name", valid_601602
  var valid_601603 = query.getOrDefault("SAMLMetadataDocument")
  valid_601603 = validateParameter(valid_601603, JString, required = true,
                                 default = nil)
  if valid_601603 != nil:
    section.add "SAMLMetadataDocument", valid_601603
  var valid_601604 = query.getOrDefault("Action")
  valid_601604 = validateParameter(valid_601604, JString, required = true,
                                 default = newJString("CreateSAMLProvider"))
  if valid_601604 != nil:
    section.add "Action", valid_601604
  var valid_601605 = query.getOrDefault("Version")
  valid_601605 = validateParameter(valid_601605, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601605 != nil:
    section.add "Version", valid_601605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601606 = header.getOrDefault("X-Amz-Date")
  valid_601606 = validateParameter(valid_601606, JString, required = false,
                                 default = nil)
  if valid_601606 != nil:
    section.add "X-Amz-Date", valid_601606
  var valid_601607 = header.getOrDefault("X-Amz-Security-Token")
  valid_601607 = validateParameter(valid_601607, JString, required = false,
                                 default = nil)
  if valid_601607 != nil:
    section.add "X-Amz-Security-Token", valid_601607
  var valid_601608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601608 = validateParameter(valid_601608, JString, required = false,
                                 default = nil)
  if valid_601608 != nil:
    section.add "X-Amz-Content-Sha256", valid_601608
  var valid_601609 = header.getOrDefault("X-Amz-Algorithm")
  valid_601609 = validateParameter(valid_601609, JString, required = false,
                                 default = nil)
  if valid_601609 != nil:
    section.add "X-Amz-Algorithm", valid_601609
  var valid_601610 = header.getOrDefault("X-Amz-Signature")
  valid_601610 = validateParameter(valid_601610, JString, required = false,
                                 default = nil)
  if valid_601610 != nil:
    section.add "X-Amz-Signature", valid_601610
  var valid_601611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601611 = validateParameter(valid_601611, JString, required = false,
                                 default = nil)
  if valid_601611 != nil:
    section.add "X-Amz-SignedHeaders", valid_601611
  var valid_601612 = header.getOrDefault("X-Amz-Credential")
  valid_601612 = validateParameter(valid_601612, JString, required = false,
                                 default = nil)
  if valid_601612 != nil:
    section.add "X-Amz-Credential", valid_601612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601613: Call_GetCreateSAMLProvider_601599; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601613.validator(path, query, header, formData, body)
  let scheme = call_601613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601613.url(scheme.get, call_601613.host, call_601613.base,
                         call_601613.route, valid.getOrDefault("path"))
  result = hook(call_601613, url, valid)

proc call*(call_601614: Call_GetCreateSAMLProvider_601599; Name: string;
          SAMLMetadataDocument: string; Action: string = "CreateSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateSAMLProvider
  ## <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>
  ##   Name: string (required)
  ##       : <p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SAMLMetadataDocument: string (required)
  ##                       : <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601615 = newJObject()
  add(query_601615, "Name", newJString(Name))
  add(query_601615, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_601615, "Action", newJString(Action))
  add(query_601615, "Version", newJString(Version))
  result = call_601614.call(nil, query_601615, nil, nil, nil)

var getCreateSAMLProvider* = Call_GetCreateSAMLProvider_601599(
    name: "getCreateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateSAMLProvider",
    validator: validate_GetCreateSAMLProvider_601600, base: "/",
    url: url_GetCreateSAMLProvider_601601, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceLinkedRole_601652 = ref object of OpenApiRestCall_600426
proc url_PostCreateServiceLinkedRole_601654(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceLinkedRole_601653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601655 = query.getOrDefault("Action")
  valid_601655 = validateParameter(valid_601655, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_601655 != nil:
    section.add "Action", valid_601655
  var valid_601656 = query.getOrDefault("Version")
  valid_601656 = validateParameter(valid_601656, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601656 != nil:
    section.add "Version", valid_601656
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601657 = header.getOrDefault("X-Amz-Date")
  valid_601657 = validateParameter(valid_601657, JString, required = false,
                                 default = nil)
  if valid_601657 != nil:
    section.add "X-Amz-Date", valid_601657
  var valid_601658 = header.getOrDefault("X-Amz-Security-Token")
  valid_601658 = validateParameter(valid_601658, JString, required = false,
                                 default = nil)
  if valid_601658 != nil:
    section.add "X-Amz-Security-Token", valid_601658
  var valid_601659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601659 = validateParameter(valid_601659, JString, required = false,
                                 default = nil)
  if valid_601659 != nil:
    section.add "X-Amz-Content-Sha256", valid_601659
  var valid_601660 = header.getOrDefault("X-Amz-Algorithm")
  valid_601660 = validateParameter(valid_601660, JString, required = false,
                                 default = nil)
  if valid_601660 != nil:
    section.add "X-Amz-Algorithm", valid_601660
  var valid_601661 = header.getOrDefault("X-Amz-Signature")
  valid_601661 = validateParameter(valid_601661, JString, required = false,
                                 default = nil)
  if valid_601661 != nil:
    section.add "X-Amz-Signature", valid_601661
  var valid_601662 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601662 = validateParameter(valid_601662, JString, required = false,
                                 default = nil)
  if valid_601662 != nil:
    section.add "X-Amz-SignedHeaders", valid_601662
  var valid_601663 = header.getOrDefault("X-Amz-Credential")
  valid_601663 = validateParameter(valid_601663, JString, required = false,
                                 default = nil)
  if valid_601663 != nil:
    section.add "X-Amz-Credential", valid_601663
  result.add "header", section
  ## parameters in `formData` object:
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Description: JString
  ##              : The description of the role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AWSServiceName` field"
  var valid_601664 = formData.getOrDefault("AWSServiceName")
  valid_601664 = validateParameter(valid_601664, JString, required = true,
                                 default = nil)
  if valid_601664 != nil:
    section.add "AWSServiceName", valid_601664
  var valid_601665 = formData.getOrDefault("CustomSuffix")
  valid_601665 = validateParameter(valid_601665, JString, required = false,
                                 default = nil)
  if valid_601665 != nil:
    section.add "CustomSuffix", valid_601665
  var valid_601666 = formData.getOrDefault("Description")
  valid_601666 = validateParameter(valid_601666, JString, required = false,
                                 default = nil)
  if valid_601666 != nil:
    section.add "Description", valid_601666
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601667: Call_PostCreateServiceLinkedRole_601652; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_601667.validator(path, query, header, formData, body)
  let scheme = call_601667.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601667.url(scheme.get, call_601667.host, call_601667.base,
                         call_601667.route, valid.getOrDefault("path"))
  result = hook(call_601667, url, valid)

proc call*(call_601668: Call_PostCreateServiceLinkedRole_601652;
          AWSServiceName: string; CustomSuffix: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string
  ##              : The description of the role.
  var query_601669 = newJObject()
  var formData_601670 = newJObject()
  add(formData_601670, "AWSServiceName", newJString(AWSServiceName))
  add(formData_601670, "CustomSuffix", newJString(CustomSuffix))
  add(query_601669, "Action", newJString(Action))
  add(query_601669, "Version", newJString(Version))
  add(formData_601670, "Description", newJString(Description))
  result = call_601668.call(nil, query_601669, nil, formData_601670, nil)

var postCreateServiceLinkedRole* = Call_PostCreateServiceLinkedRole_601652(
    name: "postCreateServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_PostCreateServiceLinkedRole_601653, base: "/",
    url: url_PostCreateServiceLinkedRole_601654,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceLinkedRole_601634 = ref object of OpenApiRestCall_600426
proc url_GetCreateServiceLinkedRole_601636(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceLinkedRole_601635(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The description of the role.
  ##   AWSServiceName: JString (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CustomSuffix: JString
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  section = newJObject()
  var valid_601637 = query.getOrDefault("Description")
  valid_601637 = validateParameter(valid_601637, JString, required = false,
                                 default = nil)
  if valid_601637 != nil:
    section.add "Description", valid_601637
  assert query != nil,
        "query argument is necessary due to required `AWSServiceName` field"
  var valid_601638 = query.getOrDefault("AWSServiceName")
  valid_601638 = validateParameter(valid_601638, JString, required = true,
                                 default = nil)
  if valid_601638 != nil:
    section.add "AWSServiceName", valid_601638
  var valid_601639 = query.getOrDefault("Action")
  valid_601639 = validateParameter(valid_601639, JString, required = true, default = newJString(
      "CreateServiceLinkedRole"))
  if valid_601639 != nil:
    section.add "Action", valid_601639
  var valid_601640 = query.getOrDefault("Version")
  valid_601640 = validateParameter(valid_601640, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601640 != nil:
    section.add "Version", valid_601640
  var valid_601641 = query.getOrDefault("CustomSuffix")
  valid_601641 = validateParameter(valid_601641, JString, required = false,
                                 default = nil)
  if valid_601641 != nil:
    section.add "CustomSuffix", valid_601641
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601642 = header.getOrDefault("X-Amz-Date")
  valid_601642 = validateParameter(valid_601642, JString, required = false,
                                 default = nil)
  if valid_601642 != nil:
    section.add "X-Amz-Date", valid_601642
  var valid_601643 = header.getOrDefault("X-Amz-Security-Token")
  valid_601643 = validateParameter(valid_601643, JString, required = false,
                                 default = nil)
  if valid_601643 != nil:
    section.add "X-Amz-Security-Token", valid_601643
  var valid_601644 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601644 = validateParameter(valid_601644, JString, required = false,
                                 default = nil)
  if valid_601644 != nil:
    section.add "X-Amz-Content-Sha256", valid_601644
  var valid_601645 = header.getOrDefault("X-Amz-Algorithm")
  valid_601645 = validateParameter(valid_601645, JString, required = false,
                                 default = nil)
  if valid_601645 != nil:
    section.add "X-Amz-Algorithm", valid_601645
  var valid_601646 = header.getOrDefault("X-Amz-Signature")
  valid_601646 = validateParameter(valid_601646, JString, required = false,
                                 default = nil)
  if valid_601646 != nil:
    section.add "X-Amz-Signature", valid_601646
  var valid_601647 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601647 = validateParameter(valid_601647, JString, required = false,
                                 default = nil)
  if valid_601647 != nil:
    section.add "X-Amz-SignedHeaders", valid_601647
  var valid_601648 = header.getOrDefault("X-Amz-Credential")
  valid_601648 = validateParameter(valid_601648, JString, required = false,
                                 default = nil)
  if valid_601648 != nil:
    section.add "X-Amz-Credential", valid_601648
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601649: Call_GetCreateServiceLinkedRole_601634; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ## 
  let valid = call_601649.validator(path, query, header, formData, body)
  let scheme = call_601649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601649.url(scheme.get, call_601649.host, call_601649.base,
                         call_601649.route, valid.getOrDefault("path"))
  result = hook(call_601649, url, valid)

proc call*(call_601650: Call_GetCreateServiceLinkedRole_601634;
          AWSServiceName: string; Description: string = "";
          Action: string = "CreateServiceLinkedRole";
          Version: string = "2010-05-08"; CustomSuffix: string = ""): Recallable =
  ## getCreateServiceLinkedRole
  ## <p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using Service-Linked Roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>
  ##   Description: string
  ##              : The description of the role.
  ##   AWSServiceName: string (required)
  ##                 : <p>The service principal for the AWS service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">AWS Services That Work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomSuffix: string
  ##               : <p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p>
  var query_601651 = newJObject()
  add(query_601651, "Description", newJString(Description))
  add(query_601651, "AWSServiceName", newJString(AWSServiceName))
  add(query_601651, "Action", newJString(Action))
  add(query_601651, "Version", newJString(Version))
  add(query_601651, "CustomSuffix", newJString(CustomSuffix))
  result = call_601650.call(nil, query_601651, nil, nil, nil)

var getCreateServiceLinkedRole* = Call_GetCreateServiceLinkedRole_601634(
    name: "getCreateServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceLinkedRole",
    validator: validate_GetCreateServiceLinkedRole_601635, base: "/",
    url: url_GetCreateServiceLinkedRole_601636,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateServiceSpecificCredential_601688 = ref object of OpenApiRestCall_600426
proc url_PostCreateServiceSpecificCredential_601690(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateServiceSpecificCredential_601689(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601691 = query.getOrDefault("Action")
  valid_601691 = validateParameter(valid_601691, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_601691 != nil:
    section.add "Action", valid_601691
  var valid_601692 = query.getOrDefault("Version")
  valid_601692 = validateParameter(valid_601692, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601692 != nil:
    section.add "Version", valid_601692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601693 = header.getOrDefault("X-Amz-Date")
  valid_601693 = validateParameter(valid_601693, JString, required = false,
                                 default = nil)
  if valid_601693 != nil:
    section.add "X-Amz-Date", valid_601693
  var valid_601694 = header.getOrDefault("X-Amz-Security-Token")
  valid_601694 = validateParameter(valid_601694, JString, required = false,
                                 default = nil)
  if valid_601694 != nil:
    section.add "X-Amz-Security-Token", valid_601694
  var valid_601695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601695 = validateParameter(valid_601695, JString, required = false,
                                 default = nil)
  if valid_601695 != nil:
    section.add "X-Amz-Content-Sha256", valid_601695
  var valid_601696 = header.getOrDefault("X-Amz-Algorithm")
  valid_601696 = validateParameter(valid_601696, JString, required = false,
                                 default = nil)
  if valid_601696 != nil:
    section.add "X-Amz-Algorithm", valid_601696
  var valid_601697 = header.getOrDefault("X-Amz-Signature")
  valid_601697 = validateParameter(valid_601697, JString, required = false,
                                 default = nil)
  if valid_601697 != nil:
    section.add "X-Amz-Signature", valid_601697
  var valid_601698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601698 = validateParameter(valid_601698, JString, required = false,
                                 default = nil)
  if valid_601698 != nil:
    section.add "X-Amz-SignedHeaders", valid_601698
  var valid_601699 = header.getOrDefault("X-Amz-Credential")
  valid_601699 = validateParameter(valid_601699, JString, required = false,
                                 default = nil)
  if valid_601699 != nil:
    section.add "X-Amz-Credential", valid_601699
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_601700 = formData.getOrDefault("UserName")
  valid_601700 = validateParameter(valid_601700, JString, required = true,
                                 default = nil)
  if valid_601700 != nil:
    section.add "UserName", valid_601700
  var valid_601701 = formData.getOrDefault("ServiceName")
  valid_601701 = validateParameter(valid_601701, JString, required = true,
                                 default = nil)
  if valid_601701 != nil:
    section.add "ServiceName", valid_601701
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601702: Call_PostCreateServiceSpecificCredential_601688;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601702.validator(path, query, header, formData, body)
  let scheme = call_601702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601702.url(scheme.get, call_601702.host, call_601702.base,
                         call_601702.route, valid.getOrDefault("path"))
  result = hook(call_601702, url, valid)

proc call*(call_601703: Call_PostCreateServiceSpecificCredential_601688;
          UserName: string; ServiceName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  var query_601704 = newJObject()
  var formData_601705 = newJObject()
  add(formData_601705, "UserName", newJString(UserName))
  add(query_601704, "Action", newJString(Action))
  add(query_601704, "Version", newJString(Version))
  add(formData_601705, "ServiceName", newJString(ServiceName))
  result = call_601703.call(nil, query_601704, nil, formData_601705, nil)

var postCreateServiceSpecificCredential* = Call_PostCreateServiceSpecificCredential_601688(
    name: "postCreateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_PostCreateServiceSpecificCredential_601689, base: "/",
    url: url_PostCreateServiceSpecificCredential_601690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateServiceSpecificCredential_601671 = ref object of OpenApiRestCall_600426
proc url_GetCreateServiceSpecificCredential_601673(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateServiceSpecificCredential_601672(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceName` field"
  var valid_601674 = query.getOrDefault("ServiceName")
  valid_601674 = validateParameter(valid_601674, JString, required = true,
                                 default = nil)
  if valid_601674 != nil:
    section.add "ServiceName", valid_601674
  var valid_601675 = query.getOrDefault("UserName")
  valid_601675 = validateParameter(valid_601675, JString, required = true,
                                 default = nil)
  if valid_601675 != nil:
    section.add "UserName", valid_601675
  var valid_601676 = query.getOrDefault("Action")
  valid_601676 = validateParameter(valid_601676, JString, required = true, default = newJString(
      "CreateServiceSpecificCredential"))
  if valid_601676 != nil:
    section.add "Action", valid_601676
  var valid_601677 = query.getOrDefault("Version")
  valid_601677 = validateParameter(valid_601677, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601677 != nil:
    section.add "Version", valid_601677
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601678 = header.getOrDefault("X-Amz-Date")
  valid_601678 = validateParameter(valid_601678, JString, required = false,
                                 default = nil)
  if valid_601678 != nil:
    section.add "X-Amz-Date", valid_601678
  var valid_601679 = header.getOrDefault("X-Amz-Security-Token")
  valid_601679 = validateParameter(valid_601679, JString, required = false,
                                 default = nil)
  if valid_601679 != nil:
    section.add "X-Amz-Security-Token", valid_601679
  var valid_601680 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601680 = validateParameter(valid_601680, JString, required = false,
                                 default = nil)
  if valid_601680 != nil:
    section.add "X-Amz-Content-Sha256", valid_601680
  var valid_601681 = header.getOrDefault("X-Amz-Algorithm")
  valid_601681 = validateParameter(valid_601681, JString, required = false,
                                 default = nil)
  if valid_601681 != nil:
    section.add "X-Amz-Algorithm", valid_601681
  var valid_601682 = header.getOrDefault("X-Amz-Signature")
  valid_601682 = validateParameter(valid_601682, JString, required = false,
                                 default = nil)
  if valid_601682 != nil:
    section.add "X-Amz-Signature", valid_601682
  var valid_601683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601683 = validateParameter(valid_601683, JString, required = false,
                                 default = nil)
  if valid_601683 != nil:
    section.add "X-Amz-SignedHeaders", valid_601683
  var valid_601684 = header.getOrDefault("X-Amz-Credential")
  valid_601684 = validateParameter(valid_601684, JString, required = false,
                                 default = nil)
  if valid_601684 != nil:
    section.add "X-Amz-Credential", valid_601684
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601685: Call_GetCreateServiceSpecificCredential_601671;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601685.validator(path, query, header, formData, body)
  let scheme = call_601685.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601685.url(scheme.get, call_601685.host, call_601685.base,
                         call_601685.route, valid.getOrDefault("path"))
  result = hook(call_601685, url, valid)

proc call*(call_601686: Call_GetCreateServiceSpecificCredential_601671;
          ServiceName: string; UserName: string;
          Action: string = "CreateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getCreateServiceSpecificCredential
  ## <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>
  ##   ServiceName: string (required)
  ##              : The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601687 = newJObject()
  add(query_601687, "ServiceName", newJString(ServiceName))
  add(query_601687, "UserName", newJString(UserName))
  add(query_601687, "Action", newJString(Action))
  add(query_601687, "Version", newJString(Version))
  result = call_601686.call(nil, query_601687, nil, nil, nil)

var getCreateServiceSpecificCredential* = Call_GetCreateServiceSpecificCredential_601671(
    name: "getCreateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateServiceSpecificCredential",
    validator: validate_GetCreateServiceSpecificCredential_601672, base: "/",
    url: url_GetCreateServiceSpecificCredential_601673,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateUser_601725 = ref object of OpenApiRestCall_600426
proc url_PostCreateUser_601727(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateUser_601726(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601728 = query.getOrDefault("Action")
  valid_601728 = validateParameter(valid_601728, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_601728 != nil:
    section.add "Action", valid_601728
  var valid_601729 = query.getOrDefault("Version")
  valid_601729 = validateParameter(valid_601729, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601729 != nil:
    section.add "Version", valid_601729
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601730 = header.getOrDefault("X-Amz-Date")
  valid_601730 = validateParameter(valid_601730, JString, required = false,
                                 default = nil)
  if valid_601730 != nil:
    section.add "X-Amz-Date", valid_601730
  var valid_601731 = header.getOrDefault("X-Amz-Security-Token")
  valid_601731 = validateParameter(valid_601731, JString, required = false,
                                 default = nil)
  if valid_601731 != nil:
    section.add "X-Amz-Security-Token", valid_601731
  var valid_601732 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601732 = validateParameter(valid_601732, JString, required = false,
                                 default = nil)
  if valid_601732 != nil:
    section.add "X-Amz-Content-Sha256", valid_601732
  var valid_601733 = header.getOrDefault("X-Amz-Algorithm")
  valid_601733 = validateParameter(valid_601733, JString, required = false,
                                 default = nil)
  if valid_601733 != nil:
    section.add "X-Amz-Algorithm", valid_601733
  var valid_601734 = header.getOrDefault("X-Amz-Signature")
  valid_601734 = validateParameter(valid_601734, JString, required = false,
                                 default = nil)
  if valid_601734 != nil:
    section.add "X-Amz-Signature", valid_601734
  var valid_601735 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601735 = validateParameter(valid_601735, JString, required = false,
                                 default = nil)
  if valid_601735 != nil:
    section.add "X-Amz-SignedHeaders", valid_601735
  var valid_601736 = header.getOrDefault("X-Amz-Credential")
  valid_601736 = validateParameter(valid_601736, JString, required = false,
                                 default = nil)
  if valid_601736 != nil:
    section.add "X-Amz-Credential", valid_601736
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_601737 = formData.getOrDefault("UserName")
  valid_601737 = validateParameter(valid_601737, JString, required = true,
                                 default = nil)
  if valid_601737 != nil:
    section.add "UserName", valid_601737
  var valid_601738 = formData.getOrDefault("PermissionsBoundary")
  valid_601738 = validateParameter(valid_601738, JString, required = false,
                                 default = nil)
  if valid_601738 != nil:
    section.add "PermissionsBoundary", valid_601738
  var valid_601739 = formData.getOrDefault("Tags")
  valid_601739 = validateParameter(valid_601739, JArray, required = false,
                                 default = nil)
  if valid_601739 != nil:
    section.add "Tags", valid_601739
  var valid_601740 = formData.getOrDefault("Path")
  valid_601740 = validateParameter(valid_601740, JString, required = false,
                                 default = nil)
  if valid_601740 != nil:
    section.add "Path", valid_601740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601741: Call_PostCreateUser_601725; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601741.validator(path, query, header, formData, body)
  let scheme = call_601741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601741.url(scheme.get, call_601741.host, call_601741.base,
                         call_601741.route, valid.getOrDefault("path"))
  result = hook(call_601741, url, valid)

proc call*(call_601742: Call_PostCreateUser_601725; UserName: string;
          PermissionsBoundary: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateUser"; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601743 = newJObject()
  var formData_601744 = newJObject()
  add(formData_601744, "UserName", newJString(UserName))
  add(formData_601744, "PermissionsBoundary", newJString(PermissionsBoundary))
  if Tags != nil:
    formData_601744.add "Tags", Tags
  add(query_601743, "Action", newJString(Action))
  add(query_601743, "Version", newJString(Version))
  add(formData_601744, "Path", newJString(Path))
  result = call_601742.call(nil, query_601743, nil, formData_601744, nil)

var postCreateUser* = Call_PostCreateUser_601725(name: "postCreateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_PostCreateUser_601726,
    base: "/", url: url_PostCreateUser_601727, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateUser_601706 = ref object of OpenApiRestCall_600426
proc url_GetCreateUser_601708(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateUser_601707(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: JString
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_601709 = query.getOrDefault("Tags")
  valid_601709 = validateParameter(valid_601709, JArray, required = false,
                                 default = nil)
  if valid_601709 != nil:
    section.add "Tags", valid_601709
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_601710 = query.getOrDefault("UserName")
  valid_601710 = validateParameter(valid_601710, JString, required = true,
                                 default = nil)
  if valid_601710 != nil:
    section.add "UserName", valid_601710
  var valid_601711 = query.getOrDefault("Action")
  valid_601711 = validateParameter(valid_601711, JString, required = true,
                                 default = newJString("CreateUser"))
  if valid_601711 != nil:
    section.add "Action", valid_601711
  var valid_601712 = query.getOrDefault("Path")
  valid_601712 = validateParameter(valid_601712, JString, required = false,
                                 default = nil)
  if valid_601712 != nil:
    section.add "Path", valid_601712
  var valid_601713 = query.getOrDefault("PermissionsBoundary")
  valid_601713 = validateParameter(valid_601713, JString, required = false,
                                 default = nil)
  if valid_601713 != nil:
    section.add "PermissionsBoundary", valid_601713
  var valid_601714 = query.getOrDefault("Version")
  valid_601714 = validateParameter(valid_601714, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601714 != nil:
    section.add "Version", valid_601714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601715 = header.getOrDefault("X-Amz-Date")
  valid_601715 = validateParameter(valid_601715, JString, required = false,
                                 default = nil)
  if valid_601715 != nil:
    section.add "X-Amz-Date", valid_601715
  var valid_601716 = header.getOrDefault("X-Amz-Security-Token")
  valid_601716 = validateParameter(valid_601716, JString, required = false,
                                 default = nil)
  if valid_601716 != nil:
    section.add "X-Amz-Security-Token", valid_601716
  var valid_601717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601717 = validateParameter(valid_601717, JString, required = false,
                                 default = nil)
  if valid_601717 != nil:
    section.add "X-Amz-Content-Sha256", valid_601717
  var valid_601718 = header.getOrDefault("X-Amz-Algorithm")
  valid_601718 = validateParameter(valid_601718, JString, required = false,
                                 default = nil)
  if valid_601718 != nil:
    section.add "X-Amz-Algorithm", valid_601718
  var valid_601719 = header.getOrDefault("X-Amz-Signature")
  valid_601719 = validateParameter(valid_601719, JString, required = false,
                                 default = nil)
  if valid_601719 != nil:
    section.add "X-Amz-Signature", valid_601719
  var valid_601720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601720 = validateParameter(valid_601720, JString, required = false,
                                 default = nil)
  if valid_601720 != nil:
    section.add "X-Amz-SignedHeaders", valid_601720
  var valid_601721 = header.getOrDefault("X-Amz-Credential")
  valid_601721 = validateParameter(valid_601721, JString, required = false,
                                 default = nil)
  if valid_601721 != nil:
    section.add "X-Amz-Credential", valid_601721
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601722: Call_GetCreateUser_601706; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601722.validator(path, query, header, formData, body)
  let scheme = call_601722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601722.url(scheme.get, call_601722.host, call_601722.base,
                         call_601722.route, valid.getOrDefault("path"))
  result = hook(call_601722, url, valid)

proc call*(call_601723: Call_GetCreateUser_601706; UserName: string;
          Tags: JsonNode = nil; Action: string = "CreateUser"; Path: string = "";
          PermissionsBoundary: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateUser
  ## <p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray
  ##       : <p>A list of tags that you want to attach to the newly created user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed number of tags per user, then the entire request fails and the user is not created.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the user name. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PermissionsBoundary: string
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_601724 = newJObject()
  if Tags != nil:
    query_601724.add "Tags", Tags
  add(query_601724, "UserName", newJString(UserName))
  add(query_601724, "Action", newJString(Action))
  add(query_601724, "Path", newJString(Path))
  add(query_601724, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_601724, "Version", newJString(Version))
  result = call_601723.call(nil, query_601724, nil, nil, nil)

var getCreateUser* = Call_GetCreateUser_601706(name: "getCreateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=CreateUser", validator: validate_GetCreateUser_601707,
    base: "/", url: url_GetCreateUser_601708, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateVirtualMFADevice_601762 = ref object of OpenApiRestCall_600426
proc url_PostCreateVirtualMFADevice_601764(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateVirtualMFADevice_601763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601765 = query.getOrDefault("Action")
  valid_601765 = validateParameter(valid_601765, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_601765 != nil:
    section.add "Action", valid_601765
  var valid_601766 = query.getOrDefault("Version")
  valid_601766 = validateParameter(valid_601766, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601766 != nil:
    section.add "Version", valid_601766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601767 = header.getOrDefault("X-Amz-Date")
  valid_601767 = validateParameter(valid_601767, JString, required = false,
                                 default = nil)
  if valid_601767 != nil:
    section.add "X-Amz-Date", valid_601767
  var valid_601768 = header.getOrDefault("X-Amz-Security-Token")
  valid_601768 = validateParameter(valid_601768, JString, required = false,
                                 default = nil)
  if valid_601768 != nil:
    section.add "X-Amz-Security-Token", valid_601768
  var valid_601769 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601769 = validateParameter(valid_601769, JString, required = false,
                                 default = nil)
  if valid_601769 != nil:
    section.add "X-Amz-Content-Sha256", valid_601769
  var valid_601770 = header.getOrDefault("X-Amz-Algorithm")
  valid_601770 = validateParameter(valid_601770, JString, required = false,
                                 default = nil)
  if valid_601770 != nil:
    section.add "X-Amz-Algorithm", valid_601770
  var valid_601771 = header.getOrDefault("X-Amz-Signature")
  valid_601771 = validateParameter(valid_601771, JString, required = false,
                                 default = nil)
  if valid_601771 != nil:
    section.add "X-Amz-Signature", valid_601771
  var valid_601772 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601772 = validateParameter(valid_601772, JString, required = false,
                                 default = nil)
  if valid_601772 != nil:
    section.add "X-Amz-SignedHeaders", valid_601772
  var valid_601773 = header.getOrDefault("X-Amz-Credential")
  valid_601773 = validateParameter(valid_601773, JString, required = false,
                                 default = nil)
  if valid_601773 != nil:
    section.add "X-Amz-Credential", valid_601773
  result.add "header", section
  ## parameters in `formData` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_601774 = formData.getOrDefault("VirtualMFADeviceName")
  valid_601774 = validateParameter(valid_601774, JString, required = true,
                                 default = nil)
  if valid_601774 != nil:
    section.add "VirtualMFADeviceName", valid_601774
  var valid_601775 = formData.getOrDefault("Path")
  valid_601775 = validateParameter(valid_601775, JString, required = false,
                                 default = nil)
  if valid_601775 != nil:
    section.add "Path", valid_601775
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601776: Call_PostCreateVirtualMFADevice_601762; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_601776.validator(path, query, header, formData, body)
  let scheme = call_601776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601776.url(scheme.get, call_601776.host, call_601776.base,
                         call_601776.route, valid.getOrDefault("path"))
  result = hook(call_601776, url, valid)

proc call*(call_601777: Call_PostCreateVirtualMFADevice_601762;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Version: string = "2010-05-08"; Path: string = ""): Recallable =
  ## postCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_601778 = newJObject()
  var formData_601779 = newJObject()
  add(formData_601779, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_601778, "Action", newJString(Action))
  add(query_601778, "Version", newJString(Version))
  add(formData_601779, "Path", newJString(Path))
  result = call_601777.call(nil, query_601778, nil, formData_601779, nil)

var postCreateVirtualMFADevice* = Call_PostCreateVirtualMFADevice_601762(
    name: "postCreateVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_PostCreateVirtualMFADevice_601763, base: "/",
    url: url_PostCreateVirtualMFADevice_601764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateVirtualMFADevice_601745 = ref object of OpenApiRestCall_600426
proc url_GetCreateVirtualMFADevice_601747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateVirtualMFADevice_601746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VirtualMFADeviceName: JString (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `VirtualMFADeviceName` field"
  var valid_601748 = query.getOrDefault("VirtualMFADeviceName")
  valid_601748 = validateParameter(valid_601748, JString, required = true,
                                 default = nil)
  if valid_601748 != nil:
    section.add "VirtualMFADeviceName", valid_601748
  var valid_601749 = query.getOrDefault("Action")
  valid_601749 = validateParameter(valid_601749, JString, required = true,
                                 default = newJString("CreateVirtualMFADevice"))
  if valid_601749 != nil:
    section.add "Action", valid_601749
  var valid_601750 = query.getOrDefault("Path")
  valid_601750 = validateParameter(valid_601750, JString, required = false,
                                 default = nil)
  if valid_601750 != nil:
    section.add "Path", valid_601750
  var valid_601751 = query.getOrDefault("Version")
  valid_601751 = validateParameter(valid_601751, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601751 != nil:
    section.add "Version", valid_601751
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601752 = header.getOrDefault("X-Amz-Date")
  valid_601752 = validateParameter(valid_601752, JString, required = false,
                                 default = nil)
  if valid_601752 != nil:
    section.add "X-Amz-Date", valid_601752
  var valid_601753 = header.getOrDefault("X-Amz-Security-Token")
  valid_601753 = validateParameter(valid_601753, JString, required = false,
                                 default = nil)
  if valid_601753 != nil:
    section.add "X-Amz-Security-Token", valid_601753
  var valid_601754 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601754 = validateParameter(valid_601754, JString, required = false,
                                 default = nil)
  if valid_601754 != nil:
    section.add "X-Amz-Content-Sha256", valid_601754
  var valid_601755 = header.getOrDefault("X-Amz-Algorithm")
  valid_601755 = validateParameter(valid_601755, JString, required = false,
                                 default = nil)
  if valid_601755 != nil:
    section.add "X-Amz-Algorithm", valid_601755
  var valid_601756 = header.getOrDefault("X-Amz-Signature")
  valid_601756 = validateParameter(valid_601756, JString, required = false,
                                 default = nil)
  if valid_601756 != nil:
    section.add "X-Amz-Signature", valid_601756
  var valid_601757 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601757 = validateParameter(valid_601757, JString, required = false,
                                 default = nil)
  if valid_601757 != nil:
    section.add "X-Amz-SignedHeaders", valid_601757
  var valid_601758 = header.getOrDefault("X-Amz-Credential")
  valid_601758 = validateParameter(valid_601758, JString, required = false,
                                 default = nil)
  if valid_601758 != nil:
    section.add "X-Amz-Credential", valid_601758
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601759: Call_GetCreateVirtualMFADevice_601745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ## 
  let valid = call_601759.validator(path, query, header, formData, body)
  let scheme = call_601759.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601759.url(scheme.get, call_601759.host, call_601759.base,
                         call_601759.route, valid.getOrDefault("path"))
  result = hook(call_601759, url, valid)

proc call*(call_601760: Call_GetCreateVirtualMFADevice_601745;
          VirtualMFADeviceName: string; Action: string = "CreateVirtualMFADevice";
          Path: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getCreateVirtualMFADevice
  ## <p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
  ##   VirtualMFADeviceName: string (required)
  ##                       : <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p> The path for the virtual MFA device. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_601761 = newJObject()
  add(query_601761, "VirtualMFADeviceName", newJString(VirtualMFADeviceName))
  add(query_601761, "Action", newJString(Action))
  add(query_601761, "Path", newJString(Path))
  add(query_601761, "Version", newJString(Version))
  result = call_601760.call(nil, query_601761, nil, nil, nil)

var getCreateVirtualMFADevice* = Call_GetCreateVirtualMFADevice_601745(
    name: "getCreateVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=CreateVirtualMFADevice",
    validator: validate_GetCreateVirtualMFADevice_601746, base: "/",
    url: url_GetCreateVirtualMFADevice_601747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeactivateMFADevice_601797 = ref object of OpenApiRestCall_600426
proc url_PostDeactivateMFADevice_601799(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeactivateMFADevice_601798(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601800 = query.getOrDefault("Action")
  valid_601800 = validateParameter(valid_601800, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_601800 != nil:
    section.add "Action", valid_601800
  var valid_601801 = query.getOrDefault("Version")
  valid_601801 = validateParameter(valid_601801, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601801 != nil:
    section.add "Version", valid_601801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601802 = header.getOrDefault("X-Amz-Date")
  valid_601802 = validateParameter(valid_601802, JString, required = false,
                                 default = nil)
  if valid_601802 != nil:
    section.add "X-Amz-Date", valid_601802
  var valid_601803 = header.getOrDefault("X-Amz-Security-Token")
  valid_601803 = validateParameter(valid_601803, JString, required = false,
                                 default = nil)
  if valid_601803 != nil:
    section.add "X-Amz-Security-Token", valid_601803
  var valid_601804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601804 = validateParameter(valid_601804, JString, required = false,
                                 default = nil)
  if valid_601804 != nil:
    section.add "X-Amz-Content-Sha256", valid_601804
  var valid_601805 = header.getOrDefault("X-Amz-Algorithm")
  valid_601805 = validateParameter(valid_601805, JString, required = false,
                                 default = nil)
  if valid_601805 != nil:
    section.add "X-Amz-Algorithm", valid_601805
  var valid_601806 = header.getOrDefault("X-Amz-Signature")
  valid_601806 = validateParameter(valid_601806, JString, required = false,
                                 default = nil)
  if valid_601806 != nil:
    section.add "X-Amz-Signature", valid_601806
  var valid_601807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601807 = validateParameter(valid_601807, JString, required = false,
                                 default = nil)
  if valid_601807 != nil:
    section.add "X-Amz-SignedHeaders", valid_601807
  var valid_601808 = header.getOrDefault("X-Amz-Credential")
  valid_601808 = validateParameter(valid_601808, JString, required = false,
                                 default = nil)
  if valid_601808 != nil:
    section.add "X-Amz-Credential", valid_601808
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_601809 = formData.getOrDefault("SerialNumber")
  valid_601809 = validateParameter(valid_601809, JString, required = true,
                                 default = nil)
  if valid_601809 != nil:
    section.add "SerialNumber", valid_601809
  var valid_601810 = formData.getOrDefault("UserName")
  valid_601810 = validateParameter(valid_601810, JString, required = true,
                                 default = nil)
  if valid_601810 != nil:
    section.add "UserName", valid_601810
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601811: Call_PostDeactivateMFADevice_601797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601811.validator(path, query, header, formData, body)
  let scheme = call_601811.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601811.url(scheme.get, call_601811.host, call_601811.base,
                         call_601811.route, valid.getOrDefault("path"))
  result = hook(call_601811, url, valid)

proc call*(call_601812: Call_PostDeactivateMFADevice_601797; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601813 = newJObject()
  var formData_601814 = newJObject()
  add(formData_601814, "SerialNumber", newJString(SerialNumber))
  add(formData_601814, "UserName", newJString(UserName))
  add(query_601813, "Action", newJString(Action))
  add(query_601813, "Version", newJString(Version))
  result = call_601812.call(nil, query_601813, nil, formData_601814, nil)

var postDeactivateMFADevice* = Call_PostDeactivateMFADevice_601797(
    name: "postDeactivateMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_PostDeactivateMFADevice_601798, base: "/",
    url: url_PostDeactivateMFADevice_601799, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeactivateMFADevice_601780 = ref object of OpenApiRestCall_600426
proc url_GetDeactivateMFADevice_601782(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeactivateMFADevice_601781(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_601783 = query.getOrDefault("SerialNumber")
  valid_601783 = validateParameter(valid_601783, JString, required = true,
                                 default = nil)
  if valid_601783 != nil:
    section.add "SerialNumber", valid_601783
  var valid_601784 = query.getOrDefault("UserName")
  valid_601784 = validateParameter(valid_601784, JString, required = true,
                                 default = nil)
  if valid_601784 != nil:
    section.add "UserName", valid_601784
  var valid_601785 = query.getOrDefault("Action")
  valid_601785 = validateParameter(valid_601785, JString, required = true,
                                 default = newJString("DeactivateMFADevice"))
  if valid_601785 != nil:
    section.add "Action", valid_601785
  var valid_601786 = query.getOrDefault("Version")
  valid_601786 = validateParameter(valid_601786, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601786 != nil:
    section.add "Version", valid_601786
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601787 = header.getOrDefault("X-Amz-Date")
  valid_601787 = validateParameter(valid_601787, JString, required = false,
                                 default = nil)
  if valid_601787 != nil:
    section.add "X-Amz-Date", valid_601787
  var valid_601788 = header.getOrDefault("X-Amz-Security-Token")
  valid_601788 = validateParameter(valid_601788, JString, required = false,
                                 default = nil)
  if valid_601788 != nil:
    section.add "X-Amz-Security-Token", valid_601788
  var valid_601789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601789 = validateParameter(valid_601789, JString, required = false,
                                 default = nil)
  if valid_601789 != nil:
    section.add "X-Amz-Content-Sha256", valid_601789
  var valid_601790 = header.getOrDefault("X-Amz-Algorithm")
  valid_601790 = validateParameter(valid_601790, JString, required = false,
                                 default = nil)
  if valid_601790 != nil:
    section.add "X-Amz-Algorithm", valid_601790
  var valid_601791 = header.getOrDefault("X-Amz-Signature")
  valid_601791 = validateParameter(valid_601791, JString, required = false,
                                 default = nil)
  if valid_601791 != nil:
    section.add "X-Amz-Signature", valid_601791
  var valid_601792 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601792 = validateParameter(valid_601792, JString, required = false,
                                 default = nil)
  if valid_601792 != nil:
    section.add "X-Amz-SignedHeaders", valid_601792
  var valid_601793 = header.getOrDefault("X-Amz-Credential")
  valid_601793 = validateParameter(valid_601793, JString, required = false,
                                 default = nil)
  if valid_601793 != nil:
    section.add "X-Amz-Credential", valid_601793
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601794: Call_GetDeactivateMFADevice_601780; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601794.validator(path, query, header, formData, body)
  let scheme = call_601794.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601794.url(scheme.get, call_601794.host, call_601794.base,
                         call_601794.route, valid.getOrDefault("path"))
  result = hook(call_601794, url, valid)

proc call*(call_601795: Call_GetDeactivateMFADevice_601780; SerialNumber: string;
          UserName: string; Action: string = "DeactivateMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeactivateMFADevice
  ## <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a Virtual Multi-factor Authentication (MFA) Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601796 = newJObject()
  add(query_601796, "SerialNumber", newJString(SerialNumber))
  add(query_601796, "UserName", newJString(UserName))
  add(query_601796, "Action", newJString(Action))
  add(query_601796, "Version", newJString(Version))
  result = call_601795.call(nil, query_601796, nil, nil, nil)

var getDeactivateMFADevice* = Call_GetDeactivateMFADevice_601780(
    name: "getDeactivateMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeactivateMFADevice",
    validator: validate_GetDeactivateMFADevice_601781, base: "/",
    url: url_GetDeactivateMFADevice_601782, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccessKey_601832 = ref object of OpenApiRestCall_600426
proc url_PostDeleteAccessKey_601834(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccessKey_601833(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601835 = query.getOrDefault("Action")
  valid_601835 = validateParameter(valid_601835, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_601835 != nil:
    section.add "Action", valid_601835
  var valid_601836 = query.getOrDefault("Version")
  valid_601836 = validateParameter(valid_601836, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601836 != nil:
    section.add "Version", valid_601836
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601837 = header.getOrDefault("X-Amz-Date")
  valid_601837 = validateParameter(valid_601837, JString, required = false,
                                 default = nil)
  if valid_601837 != nil:
    section.add "X-Amz-Date", valid_601837
  var valid_601838 = header.getOrDefault("X-Amz-Security-Token")
  valid_601838 = validateParameter(valid_601838, JString, required = false,
                                 default = nil)
  if valid_601838 != nil:
    section.add "X-Amz-Security-Token", valid_601838
  var valid_601839 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601839 = validateParameter(valid_601839, JString, required = false,
                                 default = nil)
  if valid_601839 != nil:
    section.add "X-Amz-Content-Sha256", valid_601839
  var valid_601840 = header.getOrDefault("X-Amz-Algorithm")
  valid_601840 = validateParameter(valid_601840, JString, required = false,
                                 default = nil)
  if valid_601840 != nil:
    section.add "X-Amz-Algorithm", valid_601840
  var valid_601841 = header.getOrDefault("X-Amz-Signature")
  valid_601841 = validateParameter(valid_601841, JString, required = false,
                                 default = nil)
  if valid_601841 != nil:
    section.add "X-Amz-Signature", valid_601841
  var valid_601842 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601842 = validateParameter(valid_601842, JString, required = false,
                                 default = nil)
  if valid_601842 != nil:
    section.add "X-Amz-SignedHeaders", valid_601842
  var valid_601843 = header.getOrDefault("X-Amz-Credential")
  valid_601843 = validateParameter(valid_601843, JString, required = false,
                                 default = nil)
  if valid_601843 != nil:
    section.add "X-Amz-Credential", valid_601843
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_601844 = formData.getOrDefault("UserName")
  valid_601844 = validateParameter(valid_601844, JString, required = false,
                                 default = nil)
  if valid_601844 != nil:
    section.add "UserName", valid_601844
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_601845 = formData.getOrDefault("AccessKeyId")
  valid_601845 = validateParameter(valid_601845, JString, required = true,
                                 default = nil)
  if valid_601845 != nil:
    section.add "AccessKeyId", valid_601845
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601846: Call_PostDeleteAccessKey_601832; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_601846.validator(path, query, header, formData, body)
  let scheme = call_601846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601846.url(scheme.get, call_601846.host, call_601846.base,
                         call_601846.route, valid.getOrDefault("path"))
  result = hook(call_601846, url, valid)

proc call*(call_601847: Call_PostDeleteAccessKey_601832; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601848 = newJObject()
  var formData_601849 = newJObject()
  add(formData_601849, "UserName", newJString(UserName))
  add(formData_601849, "AccessKeyId", newJString(AccessKeyId))
  add(query_601848, "Action", newJString(Action))
  add(query_601848, "Version", newJString(Version))
  result = call_601847.call(nil, query_601848, nil, formData_601849, nil)

var postDeleteAccessKey* = Call_PostDeleteAccessKey_601832(
    name: "postDeleteAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccessKey",
    validator: validate_PostDeleteAccessKey_601833, base: "/",
    url: url_PostDeleteAccessKey_601834, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccessKey_601815 = ref object of OpenApiRestCall_600426
proc url_GetDeleteAccessKey_601817(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccessKey_601816(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_601818 = query.getOrDefault("AccessKeyId")
  valid_601818 = validateParameter(valid_601818, JString, required = true,
                                 default = nil)
  if valid_601818 != nil:
    section.add "AccessKeyId", valid_601818
  var valid_601819 = query.getOrDefault("UserName")
  valid_601819 = validateParameter(valid_601819, JString, required = false,
                                 default = nil)
  if valid_601819 != nil:
    section.add "UserName", valid_601819
  var valid_601820 = query.getOrDefault("Action")
  valid_601820 = validateParameter(valid_601820, JString, required = true,
                                 default = newJString("DeleteAccessKey"))
  if valid_601820 != nil:
    section.add "Action", valid_601820
  var valid_601821 = query.getOrDefault("Version")
  valid_601821 = validateParameter(valid_601821, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601821 != nil:
    section.add "Version", valid_601821
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601822 = header.getOrDefault("X-Amz-Date")
  valid_601822 = validateParameter(valid_601822, JString, required = false,
                                 default = nil)
  if valid_601822 != nil:
    section.add "X-Amz-Date", valid_601822
  var valid_601823 = header.getOrDefault("X-Amz-Security-Token")
  valid_601823 = validateParameter(valid_601823, JString, required = false,
                                 default = nil)
  if valid_601823 != nil:
    section.add "X-Amz-Security-Token", valid_601823
  var valid_601824 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601824 = validateParameter(valid_601824, JString, required = false,
                                 default = nil)
  if valid_601824 != nil:
    section.add "X-Amz-Content-Sha256", valid_601824
  var valid_601825 = header.getOrDefault("X-Amz-Algorithm")
  valid_601825 = validateParameter(valid_601825, JString, required = false,
                                 default = nil)
  if valid_601825 != nil:
    section.add "X-Amz-Algorithm", valid_601825
  var valid_601826 = header.getOrDefault("X-Amz-Signature")
  valid_601826 = validateParameter(valid_601826, JString, required = false,
                                 default = nil)
  if valid_601826 != nil:
    section.add "X-Amz-Signature", valid_601826
  var valid_601827 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601827 = validateParameter(valid_601827, JString, required = false,
                                 default = nil)
  if valid_601827 != nil:
    section.add "X-Amz-SignedHeaders", valid_601827
  var valid_601828 = header.getOrDefault("X-Amz-Credential")
  valid_601828 = validateParameter(valid_601828, JString, required = false,
                                 default = nil)
  if valid_601828 != nil:
    section.add "X-Amz-Credential", valid_601828
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601829: Call_GetDeleteAccessKey_601815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_601829.validator(path, query, header, formData, body)
  let scheme = call_601829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601829.url(scheme.get, call_601829.host, call_601829.base,
                         call_601829.route, valid.getOrDefault("path"))
  result = hook(call_601829, url, valid)

proc call*(call_601830: Call_GetDeleteAccessKey_601815; AccessKeyId: string;
          UserName: string = ""; Action: string = "DeleteAccessKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccessKey
  ## <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601831 = newJObject()
  add(query_601831, "AccessKeyId", newJString(AccessKeyId))
  add(query_601831, "UserName", newJString(UserName))
  add(query_601831, "Action", newJString(Action))
  add(query_601831, "Version", newJString(Version))
  result = call_601830.call(nil, query_601831, nil, nil, nil)

var getDeleteAccessKey* = Call_GetDeleteAccessKey_601815(
    name: "getDeleteAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteAccessKey", validator: validate_GetDeleteAccessKey_601816,
    base: "/", url: url_GetDeleteAccessKey_601817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountAlias_601866 = ref object of OpenApiRestCall_600426
proc url_PostDeleteAccountAlias_601868(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountAlias_601867(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601869 = query.getOrDefault("Action")
  valid_601869 = validateParameter(valid_601869, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_601869 != nil:
    section.add "Action", valid_601869
  var valid_601870 = query.getOrDefault("Version")
  valid_601870 = validateParameter(valid_601870, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601870 != nil:
    section.add "Version", valid_601870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601871 = header.getOrDefault("X-Amz-Date")
  valid_601871 = validateParameter(valid_601871, JString, required = false,
                                 default = nil)
  if valid_601871 != nil:
    section.add "X-Amz-Date", valid_601871
  var valid_601872 = header.getOrDefault("X-Amz-Security-Token")
  valid_601872 = validateParameter(valid_601872, JString, required = false,
                                 default = nil)
  if valid_601872 != nil:
    section.add "X-Amz-Security-Token", valid_601872
  var valid_601873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601873 = validateParameter(valid_601873, JString, required = false,
                                 default = nil)
  if valid_601873 != nil:
    section.add "X-Amz-Content-Sha256", valid_601873
  var valid_601874 = header.getOrDefault("X-Amz-Algorithm")
  valid_601874 = validateParameter(valid_601874, JString, required = false,
                                 default = nil)
  if valid_601874 != nil:
    section.add "X-Amz-Algorithm", valid_601874
  var valid_601875 = header.getOrDefault("X-Amz-Signature")
  valid_601875 = validateParameter(valid_601875, JString, required = false,
                                 default = nil)
  if valid_601875 != nil:
    section.add "X-Amz-Signature", valid_601875
  var valid_601876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601876 = validateParameter(valid_601876, JString, required = false,
                                 default = nil)
  if valid_601876 != nil:
    section.add "X-Amz-SignedHeaders", valid_601876
  var valid_601877 = header.getOrDefault("X-Amz-Credential")
  valid_601877 = validateParameter(valid_601877, JString, required = false,
                                 default = nil)
  if valid_601877 != nil:
    section.add "X-Amz-Credential", valid_601877
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccountAlias` field"
  var valid_601878 = formData.getOrDefault("AccountAlias")
  valid_601878 = validateParameter(valid_601878, JString, required = true,
                                 default = nil)
  if valid_601878 != nil:
    section.add "AccountAlias", valid_601878
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601879: Call_PostDeleteAccountAlias_601866; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601879.validator(path, query, header, formData, body)
  let scheme = call_601879.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601879.url(scheme.get, call_601879.host, call_601879.base,
                         call_601879.route, valid.getOrDefault("path"))
  result = hook(call_601879, url, valid)

proc call*(call_601880: Call_PostDeleteAccountAlias_601866; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601881 = newJObject()
  var formData_601882 = newJObject()
  add(formData_601882, "AccountAlias", newJString(AccountAlias))
  add(query_601881, "Action", newJString(Action))
  add(query_601881, "Version", newJString(Version))
  result = call_601880.call(nil, query_601881, nil, formData_601882, nil)

var postDeleteAccountAlias* = Call_PostDeleteAccountAlias_601866(
    name: "postDeleteAccountAlias", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_PostDeleteAccountAlias_601867, base: "/",
    url: url_PostDeleteAccountAlias_601868, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountAlias_601850 = ref object of OpenApiRestCall_600426
proc url_GetDeleteAccountAlias_601852(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountAlias_601851(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccountAlias: JString (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccountAlias` field"
  var valid_601853 = query.getOrDefault("AccountAlias")
  valid_601853 = validateParameter(valid_601853, JString, required = true,
                                 default = nil)
  if valid_601853 != nil:
    section.add "AccountAlias", valid_601853
  var valid_601854 = query.getOrDefault("Action")
  valid_601854 = validateParameter(valid_601854, JString, required = true,
                                 default = newJString("DeleteAccountAlias"))
  if valid_601854 != nil:
    section.add "Action", valid_601854
  var valid_601855 = query.getOrDefault("Version")
  valid_601855 = validateParameter(valid_601855, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601855 != nil:
    section.add "Version", valid_601855
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601856 = header.getOrDefault("X-Amz-Date")
  valid_601856 = validateParameter(valid_601856, JString, required = false,
                                 default = nil)
  if valid_601856 != nil:
    section.add "X-Amz-Date", valid_601856
  var valid_601857 = header.getOrDefault("X-Amz-Security-Token")
  valid_601857 = validateParameter(valid_601857, JString, required = false,
                                 default = nil)
  if valid_601857 != nil:
    section.add "X-Amz-Security-Token", valid_601857
  var valid_601858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601858 = validateParameter(valid_601858, JString, required = false,
                                 default = nil)
  if valid_601858 != nil:
    section.add "X-Amz-Content-Sha256", valid_601858
  var valid_601859 = header.getOrDefault("X-Amz-Algorithm")
  valid_601859 = validateParameter(valid_601859, JString, required = false,
                                 default = nil)
  if valid_601859 != nil:
    section.add "X-Amz-Algorithm", valid_601859
  var valid_601860 = header.getOrDefault("X-Amz-Signature")
  valid_601860 = validateParameter(valid_601860, JString, required = false,
                                 default = nil)
  if valid_601860 != nil:
    section.add "X-Amz-Signature", valid_601860
  var valid_601861 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601861 = validateParameter(valid_601861, JString, required = false,
                                 default = nil)
  if valid_601861 != nil:
    section.add "X-Amz-SignedHeaders", valid_601861
  var valid_601862 = header.getOrDefault("X-Amz-Credential")
  valid_601862 = validateParameter(valid_601862, JString, required = false,
                                 default = nil)
  if valid_601862 != nil:
    section.add "X-Amz-Credential", valid_601862
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601863: Call_GetDeleteAccountAlias_601850; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_601863.validator(path, query, header, formData, body)
  let scheme = call_601863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601863.url(scheme.get, call_601863.host, call_601863.base,
                         call_601863.route, valid.getOrDefault("path"))
  result = hook(call_601863, url, valid)

proc call*(call_601864: Call_GetDeleteAccountAlias_601850; AccountAlias: string;
          Action: string = "DeleteAccountAlias"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountAlias
  ##  Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   AccountAlias: string (required)
  ##               : <p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601865 = newJObject()
  add(query_601865, "AccountAlias", newJString(AccountAlias))
  add(query_601865, "Action", newJString(Action))
  add(query_601865, "Version", newJString(Version))
  result = call_601864.call(nil, query_601865, nil, nil, nil)

var getDeleteAccountAlias* = Call_GetDeleteAccountAlias_601850(
    name: "getDeleteAccountAlias", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountAlias",
    validator: validate_GetDeleteAccountAlias_601851, base: "/",
    url: url_GetDeleteAccountAlias_601852, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteAccountPasswordPolicy_601898 = ref object of OpenApiRestCall_600426
proc url_PostDeleteAccountPasswordPolicy_601900(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteAccountPasswordPolicy_601899(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601901 = query.getOrDefault("Action")
  valid_601901 = validateParameter(valid_601901, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_601901 != nil:
    section.add "Action", valid_601901
  var valid_601902 = query.getOrDefault("Version")
  valid_601902 = validateParameter(valid_601902, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601902 != nil:
    section.add "Version", valid_601902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601903 = header.getOrDefault("X-Amz-Date")
  valid_601903 = validateParameter(valid_601903, JString, required = false,
                                 default = nil)
  if valid_601903 != nil:
    section.add "X-Amz-Date", valid_601903
  var valid_601904 = header.getOrDefault("X-Amz-Security-Token")
  valid_601904 = validateParameter(valid_601904, JString, required = false,
                                 default = nil)
  if valid_601904 != nil:
    section.add "X-Amz-Security-Token", valid_601904
  var valid_601905 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601905 = validateParameter(valid_601905, JString, required = false,
                                 default = nil)
  if valid_601905 != nil:
    section.add "X-Amz-Content-Sha256", valid_601905
  var valid_601906 = header.getOrDefault("X-Amz-Algorithm")
  valid_601906 = validateParameter(valid_601906, JString, required = false,
                                 default = nil)
  if valid_601906 != nil:
    section.add "X-Amz-Algorithm", valid_601906
  var valid_601907 = header.getOrDefault("X-Amz-Signature")
  valid_601907 = validateParameter(valid_601907, JString, required = false,
                                 default = nil)
  if valid_601907 != nil:
    section.add "X-Amz-Signature", valid_601907
  var valid_601908 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601908 = validateParameter(valid_601908, JString, required = false,
                                 default = nil)
  if valid_601908 != nil:
    section.add "X-Amz-SignedHeaders", valid_601908
  var valid_601909 = header.getOrDefault("X-Amz-Credential")
  valid_601909 = validateParameter(valid_601909, JString, required = false,
                                 default = nil)
  if valid_601909 != nil:
    section.add "X-Amz-Credential", valid_601909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601910: Call_PostDeleteAccountPasswordPolicy_601898;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_601910.validator(path, query, header, formData, body)
  let scheme = call_601910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601910.url(scheme.get, call_601910.host, call_601910.base,
                         call_601910.route, valid.getOrDefault("path"))
  result = hook(call_601910, url, valid)

proc call*(call_601911: Call_PostDeleteAccountPasswordPolicy_601898;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601912 = newJObject()
  add(query_601912, "Action", newJString(Action))
  add(query_601912, "Version", newJString(Version))
  result = call_601911.call(nil, query_601912, nil, nil, nil)

var postDeleteAccountPasswordPolicy* = Call_PostDeleteAccountPasswordPolicy_601898(
    name: "postDeleteAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_PostDeleteAccountPasswordPolicy_601899, base: "/",
    url: url_PostDeleteAccountPasswordPolicy_601900,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteAccountPasswordPolicy_601883 = ref object of OpenApiRestCall_600426
proc url_GetDeleteAccountPasswordPolicy_601885(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteAccountPasswordPolicy_601884(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601886 = query.getOrDefault("Action")
  valid_601886 = validateParameter(valid_601886, JString, required = true, default = newJString(
      "DeleteAccountPasswordPolicy"))
  if valid_601886 != nil:
    section.add "Action", valid_601886
  var valid_601887 = query.getOrDefault("Version")
  valid_601887 = validateParameter(valid_601887, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601887 != nil:
    section.add "Version", valid_601887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601888 = header.getOrDefault("X-Amz-Date")
  valid_601888 = validateParameter(valid_601888, JString, required = false,
                                 default = nil)
  if valid_601888 != nil:
    section.add "X-Amz-Date", valid_601888
  var valid_601889 = header.getOrDefault("X-Amz-Security-Token")
  valid_601889 = validateParameter(valid_601889, JString, required = false,
                                 default = nil)
  if valid_601889 != nil:
    section.add "X-Amz-Security-Token", valid_601889
  var valid_601890 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601890 = validateParameter(valid_601890, JString, required = false,
                                 default = nil)
  if valid_601890 != nil:
    section.add "X-Amz-Content-Sha256", valid_601890
  var valid_601891 = header.getOrDefault("X-Amz-Algorithm")
  valid_601891 = validateParameter(valid_601891, JString, required = false,
                                 default = nil)
  if valid_601891 != nil:
    section.add "X-Amz-Algorithm", valid_601891
  var valid_601892 = header.getOrDefault("X-Amz-Signature")
  valid_601892 = validateParameter(valid_601892, JString, required = false,
                                 default = nil)
  if valid_601892 != nil:
    section.add "X-Amz-Signature", valid_601892
  var valid_601893 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601893 = validateParameter(valid_601893, JString, required = false,
                                 default = nil)
  if valid_601893 != nil:
    section.add "X-Amz-SignedHeaders", valid_601893
  var valid_601894 = header.getOrDefault("X-Amz-Credential")
  valid_601894 = validateParameter(valid_601894, JString, required = false,
                                 default = nil)
  if valid_601894 != nil:
    section.add "X-Amz-Credential", valid_601894
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601895: Call_GetDeleteAccountPasswordPolicy_601883; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the password policy for the AWS account. There are no parameters.
  ## 
  let valid = call_601895.validator(path, query, header, formData, body)
  let scheme = call_601895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601895.url(scheme.get, call_601895.host, call_601895.base,
                         call_601895.route, valid.getOrDefault("path"))
  result = hook(call_601895, url, valid)

proc call*(call_601896: Call_GetDeleteAccountPasswordPolicy_601883;
          Action: string = "DeleteAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteAccountPasswordPolicy
  ## Deletes the password policy for the AWS account. There are no parameters.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601897 = newJObject()
  add(query_601897, "Action", newJString(Action))
  add(query_601897, "Version", newJString(Version))
  result = call_601896.call(nil, query_601897, nil, nil, nil)

var getDeleteAccountPasswordPolicy* = Call_GetDeleteAccountPasswordPolicy_601883(
    name: "getDeleteAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteAccountPasswordPolicy",
    validator: validate_GetDeleteAccountPasswordPolicy_601884, base: "/",
    url: url_GetDeleteAccountPasswordPolicy_601885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroup_601929 = ref object of OpenApiRestCall_600426
proc url_PostDeleteGroup_601931(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroup_601930(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601932 = query.getOrDefault("Action")
  valid_601932 = validateParameter(valid_601932, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_601932 != nil:
    section.add "Action", valid_601932
  var valid_601933 = query.getOrDefault("Version")
  valid_601933 = validateParameter(valid_601933, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601933 != nil:
    section.add "Version", valid_601933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601934 = header.getOrDefault("X-Amz-Date")
  valid_601934 = validateParameter(valid_601934, JString, required = false,
                                 default = nil)
  if valid_601934 != nil:
    section.add "X-Amz-Date", valid_601934
  var valid_601935 = header.getOrDefault("X-Amz-Security-Token")
  valid_601935 = validateParameter(valid_601935, JString, required = false,
                                 default = nil)
  if valid_601935 != nil:
    section.add "X-Amz-Security-Token", valid_601935
  var valid_601936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601936 = validateParameter(valid_601936, JString, required = false,
                                 default = nil)
  if valid_601936 != nil:
    section.add "X-Amz-Content-Sha256", valid_601936
  var valid_601937 = header.getOrDefault("X-Amz-Algorithm")
  valid_601937 = validateParameter(valid_601937, JString, required = false,
                                 default = nil)
  if valid_601937 != nil:
    section.add "X-Amz-Algorithm", valid_601937
  var valid_601938 = header.getOrDefault("X-Amz-Signature")
  valid_601938 = validateParameter(valid_601938, JString, required = false,
                                 default = nil)
  if valid_601938 != nil:
    section.add "X-Amz-Signature", valid_601938
  var valid_601939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601939 = validateParameter(valid_601939, JString, required = false,
                                 default = nil)
  if valid_601939 != nil:
    section.add "X-Amz-SignedHeaders", valid_601939
  var valid_601940 = header.getOrDefault("X-Amz-Credential")
  valid_601940 = validateParameter(valid_601940, JString, required = false,
                                 default = nil)
  if valid_601940 != nil:
    section.add "X-Amz-Credential", valid_601940
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_601941 = formData.getOrDefault("GroupName")
  valid_601941 = validateParameter(valid_601941, JString, required = true,
                                 default = nil)
  if valid_601941 != nil:
    section.add "GroupName", valid_601941
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601942: Call_PostDeleteGroup_601929; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_601942.validator(path, query, header, formData, body)
  let scheme = call_601942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601942.url(scheme.get, call_601942.host, call_601942.base,
                         call_601942.route, valid.getOrDefault("path"))
  result = hook(call_601942, url, valid)

proc call*(call_601943: Call_PostDeleteGroup_601929; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601944 = newJObject()
  var formData_601945 = newJObject()
  add(formData_601945, "GroupName", newJString(GroupName))
  add(query_601944, "Action", newJString(Action))
  add(query_601944, "Version", newJString(Version))
  result = call_601943.call(nil, query_601944, nil, formData_601945, nil)

var postDeleteGroup* = Call_PostDeleteGroup_601929(name: "postDeleteGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_PostDeleteGroup_601930,
    base: "/", url: url_PostDeleteGroup_601931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroup_601913 = ref object of OpenApiRestCall_600426
proc url_GetDeleteGroup_601915(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroup_601914(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601916 = query.getOrDefault("Action")
  valid_601916 = validateParameter(valid_601916, JString, required = true,
                                 default = newJString("DeleteGroup"))
  if valid_601916 != nil:
    section.add "Action", valid_601916
  var valid_601917 = query.getOrDefault("GroupName")
  valid_601917 = validateParameter(valid_601917, JString, required = true,
                                 default = nil)
  if valid_601917 != nil:
    section.add "GroupName", valid_601917
  var valid_601918 = query.getOrDefault("Version")
  valid_601918 = validateParameter(valid_601918, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601918 != nil:
    section.add "Version", valid_601918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601919 = header.getOrDefault("X-Amz-Date")
  valid_601919 = validateParameter(valid_601919, JString, required = false,
                                 default = nil)
  if valid_601919 != nil:
    section.add "X-Amz-Date", valid_601919
  var valid_601920 = header.getOrDefault("X-Amz-Security-Token")
  valid_601920 = validateParameter(valid_601920, JString, required = false,
                                 default = nil)
  if valid_601920 != nil:
    section.add "X-Amz-Security-Token", valid_601920
  var valid_601921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601921 = validateParameter(valid_601921, JString, required = false,
                                 default = nil)
  if valid_601921 != nil:
    section.add "X-Amz-Content-Sha256", valid_601921
  var valid_601922 = header.getOrDefault("X-Amz-Algorithm")
  valid_601922 = validateParameter(valid_601922, JString, required = false,
                                 default = nil)
  if valid_601922 != nil:
    section.add "X-Amz-Algorithm", valid_601922
  var valid_601923 = header.getOrDefault("X-Amz-Signature")
  valid_601923 = validateParameter(valid_601923, JString, required = false,
                                 default = nil)
  if valid_601923 != nil:
    section.add "X-Amz-Signature", valid_601923
  var valid_601924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601924 = validateParameter(valid_601924, JString, required = false,
                                 default = nil)
  if valid_601924 != nil:
    section.add "X-Amz-SignedHeaders", valid_601924
  var valid_601925 = header.getOrDefault("X-Amz-Credential")
  valid_601925 = validateParameter(valid_601925, JString, required = false,
                                 default = nil)
  if valid_601925 != nil:
    section.add "X-Amz-Credential", valid_601925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601926: Call_GetDeleteGroup_601913; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ## 
  let valid = call_601926.validator(path, query, header, formData, body)
  let scheme = call_601926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601926.url(scheme.get, call_601926.host, call_601926.base,
                         call_601926.route, valid.getOrDefault("path"))
  result = hook(call_601926, url, valid)

proc call*(call_601927: Call_GetDeleteGroup_601913; GroupName: string;
          Action: string = "DeleteGroup"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroup
  ## Deletes the specified IAM group. The group must not contain any users or have any attached policies.
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_601928 = newJObject()
  add(query_601928, "Action", newJString(Action))
  add(query_601928, "GroupName", newJString(GroupName))
  add(query_601928, "Version", newJString(Version))
  result = call_601927.call(nil, query_601928, nil, nil, nil)

var getDeleteGroup* = Call_GetDeleteGroup_601913(name: "getDeleteGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteGroup", validator: validate_GetDeleteGroup_601914,
    base: "/", url: url_GetDeleteGroup_601915, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGroupPolicy_601963 = ref object of OpenApiRestCall_600426
proc url_PostDeleteGroupPolicy_601965(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteGroupPolicy_601964(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601966 = query.getOrDefault("Action")
  valid_601966 = validateParameter(valid_601966, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_601966 != nil:
    section.add "Action", valid_601966
  var valid_601967 = query.getOrDefault("Version")
  valid_601967 = validateParameter(valid_601967, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601967 != nil:
    section.add "Version", valid_601967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601968 = header.getOrDefault("X-Amz-Date")
  valid_601968 = validateParameter(valid_601968, JString, required = false,
                                 default = nil)
  if valid_601968 != nil:
    section.add "X-Amz-Date", valid_601968
  var valid_601969 = header.getOrDefault("X-Amz-Security-Token")
  valid_601969 = validateParameter(valid_601969, JString, required = false,
                                 default = nil)
  if valid_601969 != nil:
    section.add "X-Amz-Security-Token", valid_601969
  var valid_601970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601970 = validateParameter(valid_601970, JString, required = false,
                                 default = nil)
  if valid_601970 != nil:
    section.add "X-Amz-Content-Sha256", valid_601970
  var valid_601971 = header.getOrDefault("X-Amz-Algorithm")
  valid_601971 = validateParameter(valid_601971, JString, required = false,
                                 default = nil)
  if valid_601971 != nil:
    section.add "X-Amz-Algorithm", valid_601971
  var valid_601972 = header.getOrDefault("X-Amz-Signature")
  valid_601972 = validateParameter(valid_601972, JString, required = false,
                                 default = nil)
  if valid_601972 != nil:
    section.add "X-Amz-Signature", valid_601972
  var valid_601973 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601973 = validateParameter(valid_601973, JString, required = false,
                                 default = nil)
  if valid_601973 != nil:
    section.add "X-Amz-SignedHeaders", valid_601973
  var valid_601974 = header.getOrDefault("X-Amz-Credential")
  valid_601974 = validateParameter(valid_601974, JString, required = false,
                                 default = nil)
  if valid_601974 != nil:
    section.add "X-Amz-Credential", valid_601974
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_601975 = formData.getOrDefault("PolicyName")
  valid_601975 = validateParameter(valid_601975, JString, required = true,
                                 default = nil)
  if valid_601975 != nil:
    section.add "PolicyName", valid_601975
  var valid_601976 = formData.getOrDefault("GroupName")
  valid_601976 = validateParameter(valid_601976, JString, required = true,
                                 default = nil)
  if valid_601976 != nil:
    section.add "GroupName", valid_601976
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601977: Call_PostDeleteGroupPolicy_601963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601977.validator(path, query, header, formData, body)
  let scheme = call_601977.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601977.url(scheme.get, call_601977.host, call_601977.base,
                         call_601977.route, valid.getOrDefault("path"))
  result = hook(call_601977, url, valid)

proc call*(call_601978: Call_PostDeleteGroupPolicy_601963; PolicyName: string;
          GroupName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601979 = newJObject()
  var formData_601980 = newJObject()
  add(formData_601980, "PolicyName", newJString(PolicyName))
  add(formData_601980, "GroupName", newJString(GroupName))
  add(query_601979, "Action", newJString(Action))
  add(query_601979, "Version", newJString(Version))
  result = call_601978.call(nil, query_601979, nil, formData_601980, nil)

var postDeleteGroupPolicy* = Call_PostDeleteGroupPolicy_601963(
    name: "postDeleteGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_PostDeleteGroupPolicy_601964, base: "/",
    url: url_PostDeleteGroupPolicy_601965, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGroupPolicy_601946 = ref object of OpenApiRestCall_600426
proc url_GetDeleteGroupPolicy_601948(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteGroupPolicy_601947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_601949 = query.getOrDefault("Action")
  valid_601949 = validateParameter(valid_601949, JString, required = true,
                                 default = newJString("DeleteGroupPolicy"))
  if valid_601949 != nil:
    section.add "Action", valid_601949
  var valid_601950 = query.getOrDefault("GroupName")
  valid_601950 = validateParameter(valid_601950, JString, required = true,
                                 default = nil)
  if valid_601950 != nil:
    section.add "GroupName", valid_601950
  var valid_601951 = query.getOrDefault("Version")
  valid_601951 = validateParameter(valid_601951, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601951 != nil:
    section.add "Version", valid_601951
  var valid_601952 = query.getOrDefault("PolicyName")
  valid_601952 = validateParameter(valid_601952, JString, required = true,
                                 default = nil)
  if valid_601952 != nil:
    section.add "PolicyName", valid_601952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601953 = header.getOrDefault("X-Amz-Date")
  valid_601953 = validateParameter(valid_601953, JString, required = false,
                                 default = nil)
  if valid_601953 != nil:
    section.add "X-Amz-Date", valid_601953
  var valid_601954 = header.getOrDefault("X-Amz-Security-Token")
  valid_601954 = validateParameter(valid_601954, JString, required = false,
                                 default = nil)
  if valid_601954 != nil:
    section.add "X-Amz-Security-Token", valid_601954
  var valid_601955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601955 = validateParameter(valid_601955, JString, required = false,
                                 default = nil)
  if valid_601955 != nil:
    section.add "X-Amz-Content-Sha256", valid_601955
  var valid_601956 = header.getOrDefault("X-Amz-Algorithm")
  valid_601956 = validateParameter(valid_601956, JString, required = false,
                                 default = nil)
  if valid_601956 != nil:
    section.add "X-Amz-Algorithm", valid_601956
  var valid_601957 = header.getOrDefault("X-Amz-Signature")
  valid_601957 = validateParameter(valid_601957, JString, required = false,
                                 default = nil)
  if valid_601957 != nil:
    section.add "X-Amz-Signature", valid_601957
  var valid_601958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601958 = validateParameter(valid_601958, JString, required = false,
                                 default = nil)
  if valid_601958 != nil:
    section.add "X-Amz-SignedHeaders", valid_601958
  var valid_601959 = header.getOrDefault("X-Amz-Credential")
  valid_601959 = validateParameter(valid_601959, JString, required = false,
                                 default = nil)
  if valid_601959 != nil:
    section.add "X-Amz-Credential", valid_601959
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601960: Call_GetDeleteGroupPolicy_601946; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_601960.validator(path, query, header, formData, body)
  let scheme = call_601960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601960.url(scheme.get, call_601960.host, call_601960.base,
                         call_601960.route, valid.getOrDefault("path"))
  result = hook(call_601960, url, valid)

proc call*(call_601961: Call_GetDeleteGroupPolicy_601946; GroupName: string;
          PolicyName: string; Action: string = "DeleteGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteGroupPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_601962 = newJObject()
  add(query_601962, "Action", newJString(Action))
  add(query_601962, "GroupName", newJString(GroupName))
  add(query_601962, "Version", newJString(Version))
  add(query_601962, "PolicyName", newJString(PolicyName))
  result = call_601961.call(nil, query_601962, nil, nil, nil)

var getDeleteGroupPolicy* = Call_GetDeleteGroupPolicy_601946(
    name: "getDeleteGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteGroupPolicy",
    validator: validate_GetDeleteGroupPolicy_601947, base: "/",
    url: url_GetDeleteGroupPolicy_601948, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstanceProfile_601997 = ref object of OpenApiRestCall_600426
proc url_PostDeleteInstanceProfile_601999(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteInstanceProfile_601998(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602000 = query.getOrDefault("Action")
  valid_602000 = validateParameter(valid_602000, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_602000 != nil:
    section.add "Action", valid_602000
  var valid_602001 = query.getOrDefault("Version")
  valid_602001 = validateParameter(valid_602001, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602001 != nil:
    section.add "Version", valid_602001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602002 = header.getOrDefault("X-Amz-Date")
  valid_602002 = validateParameter(valid_602002, JString, required = false,
                                 default = nil)
  if valid_602002 != nil:
    section.add "X-Amz-Date", valid_602002
  var valid_602003 = header.getOrDefault("X-Amz-Security-Token")
  valid_602003 = validateParameter(valid_602003, JString, required = false,
                                 default = nil)
  if valid_602003 != nil:
    section.add "X-Amz-Security-Token", valid_602003
  var valid_602004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602004 = validateParameter(valid_602004, JString, required = false,
                                 default = nil)
  if valid_602004 != nil:
    section.add "X-Amz-Content-Sha256", valid_602004
  var valid_602005 = header.getOrDefault("X-Amz-Algorithm")
  valid_602005 = validateParameter(valid_602005, JString, required = false,
                                 default = nil)
  if valid_602005 != nil:
    section.add "X-Amz-Algorithm", valid_602005
  var valid_602006 = header.getOrDefault("X-Amz-Signature")
  valid_602006 = validateParameter(valid_602006, JString, required = false,
                                 default = nil)
  if valid_602006 != nil:
    section.add "X-Amz-Signature", valid_602006
  var valid_602007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602007 = validateParameter(valid_602007, JString, required = false,
                                 default = nil)
  if valid_602007 != nil:
    section.add "X-Amz-SignedHeaders", valid_602007
  var valid_602008 = header.getOrDefault("X-Amz-Credential")
  valid_602008 = validateParameter(valid_602008, JString, required = false,
                                 default = nil)
  if valid_602008 != nil:
    section.add "X-Amz-Credential", valid_602008
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_602009 = formData.getOrDefault("InstanceProfileName")
  valid_602009 = validateParameter(valid_602009, JString, required = true,
                                 default = nil)
  if valid_602009 != nil:
    section.add "InstanceProfileName", valid_602009
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602010: Call_PostDeleteInstanceProfile_601997; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_602010.validator(path, query, header, formData, body)
  let scheme = call_602010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602010.url(scheme.get, call_602010.host, call_602010.base,
                         call_602010.route, valid.getOrDefault("path"))
  result = hook(call_602010, url, valid)

proc call*(call_602011: Call_PostDeleteInstanceProfile_601997;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_602012 = newJObject()
  var formData_602013 = newJObject()
  add(query_602012, "Action", newJString(Action))
  add(formData_602013, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_602012, "Version", newJString(Version))
  result = call_602011.call(nil, query_602012, nil, formData_602013, nil)

var postDeleteInstanceProfile* = Call_PostDeleteInstanceProfile_601997(
    name: "postDeleteInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_PostDeleteInstanceProfile_601998, base: "/",
    url: url_PostDeleteInstanceProfile_601999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstanceProfile_601981 = ref object of OpenApiRestCall_600426
proc url_GetDeleteInstanceProfile_601983(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteInstanceProfile_601982(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_601984 = query.getOrDefault("InstanceProfileName")
  valid_601984 = validateParameter(valid_601984, JString, required = true,
                                 default = nil)
  if valid_601984 != nil:
    section.add "InstanceProfileName", valid_601984
  var valid_601985 = query.getOrDefault("Action")
  valid_601985 = validateParameter(valid_601985, JString, required = true,
                                 default = newJString("DeleteInstanceProfile"))
  if valid_601985 != nil:
    section.add "Action", valid_601985
  var valid_601986 = query.getOrDefault("Version")
  valid_601986 = validateParameter(valid_601986, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_601986 != nil:
    section.add "Version", valid_601986
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_601987 = header.getOrDefault("X-Amz-Date")
  valid_601987 = validateParameter(valid_601987, JString, required = false,
                                 default = nil)
  if valid_601987 != nil:
    section.add "X-Amz-Date", valid_601987
  var valid_601988 = header.getOrDefault("X-Amz-Security-Token")
  valid_601988 = validateParameter(valid_601988, JString, required = false,
                                 default = nil)
  if valid_601988 != nil:
    section.add "X-Amz-Security-Token", valid_601988
  var valid_601989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_601989 = validateParameter(valid_601989, JString, required = false,
                                 default = nil)
  if valid_601989 != nil:
    section.add "X-Amz-Content-Sha256", valid_601989
  var valid_601990 = header.getOrDefault("X-Amz-Algorithm")
  valid_601990 = validateParameter(valid_601990, JString, required = false,
                                 default = nil)
  if valid_601990 != nil:
    section.add "X-Amz-Algorithm", valid_601990
  var valid_601991 = header.getOrDefault("X-Amz-Signature")
  valid_601991 = validateParameter(valid_601991, JString, required = false,
                                 default = nil)
  if valid_601991 != nil:
    section.add "X-Amz-Signature", valid_601991
  var valid_601992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_601992 = validateParameter(valid_601992, JString, required = false,
                                 default = nil)
  if valid_601992 != nil:
    section.add "X-Amz-SignedHeaders", valid_601992
  var valid_601993 = header.getOrDefault("X-Amz-Credential")
  valid_601993 = validateParameter(valid_601993, JString, required = false,
                                 default = nil)
  if valid_601993 != nil:
    section.add "X-Amz-Credential", valid_601993
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_601994: Call_GetDeleteInstanceProfile_601981; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_601994.validator(path, query, header, formData, body)
  let scheme = call_601994.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_601994.url(scheme.get, call_601994.host, call_601994.base,
                         call_601994.route, valid.getOrDefault("path"))
  result = hook(call_601994, url, valid)

proc call*(call_601995: Call_GetDeleteInstanceProfile_601981;
          InstanceProfileName: string; Action: string = "DeleteInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteInstanceProfile
  ## <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_601996 = newJObject()
  add(query_601996, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_601996, "Action", newJString(Action))
  add(query_601996, "Version", newJString(Version))
  result = call_601995.call(nil, query_601996, nil, nil, nil)

var getDeleteInstanceProfile* = Call_GetDeleteInstanceProfile_601981(
    name: "getDeleteInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteInstanceProfile",
    validator: validate_GetDeleteInstanceProfile_601982, base: "/",
    url: url_GetDeleteInstanceProfile_601983, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteLoginProfile_602030 = ref object of OpenApiRestCall_600426
proc url_PostDeleteLoginProfile_602032(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteLoginProfile_602031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602033 = query.getOrDefault("Action")
  valid_602033 = validateParameter(valid_602033, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_602033 != nil:
    section.add "Action", valid_602033
  var valid_602034 = query.getOrDefault("Version")
  valid_602034 = validateParameter(valid_602034, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602034 != nil:
    section.add "Version", valid_602034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602035 = header.getOrDefault("X-Amz-Date")
  valid_602035 = validateParameter(valid_602035, JString, required = false,
                                 default = nil)
  if valid_602035 != nil:
    section.add "X-Amz-Date", valid_602035
  var valid_602036 = header.getOrDefault("X-Amz-Security-Token")
  valid_602036 = validateParameter(valid_602036, JString, required = false,
                                 default = nil)
  if valid_602036 != nil:
    section.add "X-Amz-Security-Token", valid_602036
  var valid_602037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602037 = validateParameter(valid_602037, JString, required = false,
                                 default = nil)
  if valid_602037 != nil:
    section.add "X-Amz-Content-Sha256", valid_602037
  var valid_602038 = header.getOrDefault("X-Amz-Algorithm")
  valid_602038 = validateParameter(valid_602038, JString, required = false,
                                 default = nil)
  if valid_602038 != nil:
    section.add "X-Amz-Algorithm", valid_602038
  var valid_602039 = header.getOrDefault("X-Amz-Signature")
  valid_602039 = validateParameter(valid_602039, JString, required = false,
                                 default = nil)
  if valid_602039 != nil:
    section.add "X-Amz-Signature", valid_602039
  var valid_602040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602040 = validateParameter(valid_602040, JString, required = false,
                                 default = nil)
  if valid_602040 != nil:
    section.add "X-Amz-SignedHeaders", valid_602040
  var valid_602041 = header.getOrDefault("X-Amz-Credential")
  valid_602041 = validateParameter(valid_602041, JString, required = false,
                                 default = nil)
  if valid_602041 != nil:
    section.add "X-Amz-Credential", valid_602041
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_602042 = formData.getOrDefault("UserName")
  valid_602042 = validateParameter(valid_602042, JString, required = true,
                                 default = nil)
  if valid_602042 != nil:
    section.add "UserName", valid_602042
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602043: Call_PostDeleteLoginProfile_602030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_602043.validator(path, query, header, formData, body)
  let scheme = call_602043.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602043.url(scheme.get, call_602043.host, call_602043.base,
                         call_602043.route, valid.getOrDefault("path"))
  result = hook(call_602043, url, valid)

proc call*(call_602044: Call_PostDeleteLoginProfile_602030; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602045 = newJObject()
  var formData_602046 = newJObject()
  add(formData_602046, "UserName", newJString(UserName))
  add(query_602045, "Action", newJString(Action))
  add(query_602045, "Version", newJString(Version))
  result = call_602044.call(nil, query_602045, nil, formData_602046, nil)

var postDeleteLoginProfile* = Call_PostDeleteLoginProfile_602030(
    name: "postDeleteLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_PostDeleteLoginProfile_602031, base: "/",
    url: url_PostDeleteLoginProfile_602032, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteLoginProfile_602014 = ref object of OpenApiRestCall_600426
proc url_GetDeleteLoginProfile_602016(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteLoginProfile_602015(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_602017 = query.getOrDefault("UserName")
  valid_602017 = validateParameter(valid_602017, JString, required = true,
                                 default = nil)
  if valid_602017 != nil:
    section.add "UserName", valid_602017
  var valid_602018 = query.getOrDefault("Action")
  valid_602018 = validateParameter(valid_602018, JString, required = true,
                                 default = newJString("DeleteLoginProfile"))
  if valid_602018 != nil:
    section.add "Action", valid_602018
  var valid_602019 = query.getOrDefault("Version")
  valid_602019 = validateParameter(valid_602019, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602019 != nil:
    section.add "Version", valid_602019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602020 = header.getOrDefault("X-Amz-Date")
  valid_602020 = validateParameter(valid_602020, JString, required = false,
                                 default = nil)
  if valid_602020 != nil:
    section.add "X-Amz-Date", valid_602020
  var valid_602021 = header.getOrDefault("X-Amz-Security-Token")
  valid_602021 = validateParameter(valid_602021, JString, required = false,
                                 default = nil)
  if valid_602021 != nil:
    section.add "X-Amz-Security-Token", valid_602021
  var valid_602022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602022 = validateParameter(valid_602022, JString, required = false,
                                 default = nil)
  if valid_602022 != nil:
    section.add "X-Amz-Content-Sha256", valid_602022
  var valid_602023 = header.getOrDefault("X-Amz-Algorithm")
  valid_602023 = validateParameter(valid_602023, JString, required = false,
                                 default = nil)
  if valid_602023 != nil:
    section.add "X-Amz-Algorithm", valid_602023
  var valid_602024 = header.getOrDefault("X-Amz-Signature")
  valid_602024 = validateParameter(valid_602024, JString, required = false,
                                 default = nil)
  if valid_602024 != nil:
    section.add "X-Amz-Signature", valid_602024
  var valid_602025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602025 = validateParameter(valid_602025, JString, required = false,
                                 default = nil)
  if valid_602025 != nil:
    section.add "X-Amz-SignedHeaders", valid_602025
  var valid_602026 = header.getOrDefault("X-Amz-Credential")
  valid_602026 = validateParameter(valid_602026, JString, required = false,
                                 default = nil)
  if valid_602026 != nil:
    section.add "X-Amz-Credential", valid_602026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602027: Call_GetDeleteLoginProfile_602014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ## 
  let valid = call_602027.validator(path, query, header, formData, body)
  let scheme = call_602027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602027.url(scheme.get, call_602027.host, call_602027.base,
                         call_602027.route, valid.getOrDefault("path"))
  result = hook(call_602027, url, valid)

proc call*(call_602028: Call_GetDeleteLoginProfile_602014; UserName: string;
          Action: string = "DeleteLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteLoginProfile
  ## <p>Deletes the password for the specified IAM user, which terminates the user's ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user's password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602029 = newJObject()
  add(query_602029, "UserName", newJString(UserName))
  add(query_602029, "Action", newJString(Action))
  add(query_602029, "Version", newJString(Version))
  result = call_602028.call(nil, query_602029, nil, nil, nil)

var getDeleteLoginProfile* = Call_GetDeleteLoginProfile_602014(
    name: "getDeleteLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteLoginProfile",
    validator: validate_GetDeleteLoginProfile_602015, base: "/",
    url: url_GetDeleteLoginProfile_602016, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOpenIDConnectProvider_602063 = ref object of OpenApiRestCall_600426
proc url_PostDeleteOpenIDConnectProvider_602065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteOpenIDConnectProvider_602064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602066 = query.getOrDefault("Action")
  valid_602066 = validateParameter(valid_602066, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_602066 != nil:
    section.add "Action", valid_602066
  var valid_602067 = query.getOrDefault("Version")
  valid_602067 = validateParameter(valid_602067, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602067 != nil:
    section.add "Version", valid_602067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602068 = header.getOrDefault("X-Amz-Date")
  valid_602068 = validateParameter(valid_602068, JString, required = false,
                                 default = nil)
  if valid_602068 != nil:
    section.add "X-Amz-Date", valid_602068
  var valid_602069 = header.getOrDefault("X-Amz-Security-Token")
  valid_602069 = validateParameter(valid_602069, JString, required = false,
                                 default = nil)
  if valid_602069 != nil:
    section.add "X-Amz-Security-Token", valid_602069
  var valid_602070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602070 = validateParameter(valid_602070, JString, required = false,
                                 default = nil)
  if valid_602070 != nil:
    section.add "X-Amz-Content-Sha256", valid_602070
  var valid_602071 = header.getOrDefault("X-Amz-Algorithm")
  valid_602071 = validateParameter(valid_602071, JString, required = false,
                                 default = nil)
  if valid_602071 != nil:
    section.add "X-Amz-Algorithm", valid_602071
  var valid_602072 = header.getOrDefault("X-Amz-Signature")
  valid_602072 = validateParameter(valid_602072, JString, required = false,
                                 default = nil)
  if valid_602072 != nil:
    section.add "X-Amz-Signature", valid_602072
  var valid_602073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602073 = validateParameter(valid_602073, JString, required = false,
                                 default = nil)
  if valid_602073 != nil:
    section.add "X-Amz-SignedHeaders", valid_602073
  var valid_602074 = header.getOrDefault("X-Amz-Credential")
  valid_602074 = validateParameter(valid_602074, JString, required = false,
                                 default = nil)
  if valid_602074 != nil:
    section.add "X-Amz-Credential", valid_602074
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_602075 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_602075 = validateParameter(valid_602075, JString, required = true,
                                 default = nil)
  if valid_602075 != nil:
    section.add "OpenIDConnectProviderArn", valid_602075
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602076: Call_PostDeleteOpenIDConnectProvider_602063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_602076.validator(path, query, header, formData, body)
  let scheme = call_602076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602076.url(scheme.get, call_602076.host, call_602076.base,
                         call_602076.route, valid.getOrDefault("path"))
  result = hook(call_602076, url, valid)

proc call*(call_602077: Call_PostDeleteOpenIDConnectProvider_602063;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602078 = newJObject()
  var formData_602079 = newJObject()
  add(formData_602079, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_602078, "Action", newJString(Action))
  add(query_602078, "Version", newJString(Version))
  result = call_602077.call(nil, query_602078, nil, formData_602079, nil)

var postDeleteOpenIDConnectProvider* = Call_PostDeleteOpenIDConnectProvider_602063(
    name: "postDeleteOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_PostDeleteOpenIDConnectProvider_602064, base: "/",
    url: url_PostDeleteOpenIDConnectProvider_602065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOpenIDConnectProvider_602047 = ref object of OpenApiRestCall_600426
proc url_GetDeleteOpenIDConnectProvider_602049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteOpenIDConnectProvider_602048(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_602050 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_602050 = validateParameter(valid_602050, JString, required = true,
                                 default = nil)
  if valid_602050 != nil:
    section.add "OpenIDConnectProviderArn", valid_602050
  var valid_602051 = query.getOrDefault("Action")
  valid_602051 = validateParameter(valid_602051, JString, required = true, default = newJString(
      "DeleteOpenIDConnectProvider"))
  if valid_602051 != nil:
    section.add "Action", valid_602051
  var valid_602052 = query.getOrDefault("Version")
  valid_602052 = validateParameter(valid_602052, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602052 != nil:
    section.add "Version", valid_602052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602053 = header.getOrDefault("X-Amz-Date")
  valid_602053 = validateParameter(valid_602053, JString, required = false,
                                 default = nil)
  if valid_602053 != nil:
    section.add "X-Amz-Date", valid_602053
  var valid_602054 = header.getOrDefault("X-Amz-Security-Token")
  valid_602054 = validateParameter(valid_602054, JString, required = false,
                                 default = nil)
  if valid_602054 != nil:
    section.add "X-Amz-Security-Token", valid_602054
  var valid_602055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602055 = validateParameter(valid_602055, JString, required = false,
                                 default = nil)
  if valid_602055 != nil:
    section.add "X-Amz-Content-Sha256", valid_602055
  var valid_602056 = header.getOrDefault("X-Amz-Algorithm")
  valid_602056 = validateParameter(valid_602056, JString, required = false,
                                 default = nil)
  if valid_602056 != nil:
    section.add "X-Amz-Algorithm", valid_602056
  var valid_602057 = header.getOrDefault("X-Amz-Signature")
  valid_602057 = validateParameter(valid_602057, JString, required = false,
                                 default = nil)
  if valid_602057 != nil:
    section.add "X-Amz-Signature", valid_602057
  var valid_602058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602058 = validateParameter(valid_602058, JString, required = false,
                                 default = nil)
  if valid_602058 != nil:
    section.add "X-Amz-SignedHeaders", valid_602058
  var valid_602059 = header.getOrDefault("X-Amz-Credential")
  valid_602059 = validateParameter(valid_602059, JString, required = false,
                                 default = nil)
  if valid_602059 != nil:
    section.add "X-Amz-Credential", valid_602059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602060: Call_GetDeleteOpenIDConnectProvider_602047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ## 
  let valid = call_602060.validator(path, query, header, formData, body)
  let scheme = call_602060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602060.url(scheme.get, call_602060.host, call_602060.base,
                         call_602060.route, valid.getOrDefault("path"))
  result = hook(call_602060, url, valid)

proc call*(call_602061: Call_GetDeleteOpenIDConnectProvider_602047;
          OpenIDConnectProviderArn: string;
          Action: string = "DeleteOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteOpenIDConnectProvider
  ## <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602062 = newJObject()
  add(query_602062, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_602062, "Action", newJString(Action))
  add(query_602062, "Version", newJString(Version))
  result = call_602061.call(nil, query_602062, nil, nil, nil)

var getDeleteOpenIDConnectProvider* = Call_GetDeleteOpenIDConnectProvider_602047(
    name: "getDeleteOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteOpenIDConnectProvider",
    validator: validate_GetDeleteOpenIDConnectProvider_602048, base: "/",
    url: url_GetDeleteOpenIDConnectProvider_602049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicy_602096 = ref object of OpenApiRestCall_600426
proc url_PostDeletePolicy_602098(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicy_602097(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602099 = query.getOrDefault("Action")
  valid_602099 = validateParameter(valid_602099, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_602099 != nil:
    section.add "Action", valid_602099
  var valid_602100 = query.getOrDefault("Version")
  valid_602100 = validateParameter(valid_602100, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602100 != nil:
    section.add "Version", valid_602100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602101 = header.getOrDefault("X-Amz-Date")
  valid_602101 = validateParameter(valid_602101, JString, required = false,
                                 default = nil)
  if valid_602101 != nil:
    section.add "X-Amz-Date", valid_602101
  var valid_602102 = header.getOrDefault("X-Amz-Security-Token")
  valid_602102 = validateParameter(valid_602102, JString, required = false,
                                 default = nil)
  if valid_602102 != nil:
    section.add "X-Amz-Security-Token", valid_602102
  var valid_602103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602103 = validateParameter(valid_602103, JString, required = false,
                                 default = nil)
  if valid_602103 != nil:
    section.add "X-Amz-Content-Sha256", valid_602103
  var valid_602104 = header.getOrDefault("X-Amz-Algorithm")
  valid_602104 = validateParameter(valid_602104, JString, required = false,
                                 default = nil)
  if valid_602104 != nil:
    section.add "X-Amz-Algorithm", valid_602104
  var valid_602105 = header.getOrDefault("X-Amz-Signature")
  valid_602105 = validateParameter(valid_602105, JString, required = false,
                                 default = nil)
  if valid_602105 != nil:
    section.add "X-Amz-Signature", valid_602105
  var valid_602106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602106 = validateParameter(valid_602106, JString, required = false,
                                 default = nil)
  if valid_602106 != nil:
    section.add "X-Amz-SignedHeaders", valid_602106
  var valid_602107 = header.getOrDefault("X-Amz-Credential")
  valid_602107 = validateParameter(valid_602107, JString, required = false,
                                 default = nil)
  if valid_602107 != nil:
    section.add "X-Amz-Credential", valid_602107
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_602108 = formData.getOrDefault("PolicyArn")
  valid_602108 = validateParameter(valid_602108, JString, required = true,
                                 default = nil)
  if valid_602108 != nil:
    section.add "PolicyArn", valid_602108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602109: Call_PostDeletePolicy_602096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602109.validator(path, query, header, formData, body)
  let scheme = call_602109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602109.url(scheme.get, call_602109.host, call_602109.base,
                         call_602109.route, valid.getOrDefault("path"))
  result = hook(call_602109, url, valid)

proc call*(call_602110: Call_PostDeletePolicy_602096; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602111 = newJObject()
  var formData_602112 = newJObject()
  add(formData_602112, "PolicyArn", newJString(PolicyArn))
  add(query_602111, "Action", newJString(Action))
  add(query_602111, "Version", newJString(Version))
  result = call_602110.call(nil, query_602111, nil, formData_602112, nil)

var postDeletePolicy* = Call_PostDeletePolicy_602096(name: "postDeletePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_PostDeletePolicy_602097,
    base: "/", url: url_PostDeletePolicy_602098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicy_602080 = ref object of OpenApiRestCall_600426
proc url_GetDeletePolicy_602082(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicy_602081(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_602083 = query.getOrDefault("PolicyArn")
  valid_602083 = validateParameter(valid_602083, JString, required = true,
                                 default = nil)
  if valid_602083 != nil:
    section.add "PolicyArn", valid_602083
  var valid_602084 = query.getOrDefault("Action")
  valid_602084 = validateParameter(valid_602084, JString, required = true,
                                 default = newJString("DeletePolicy"))
  if valid_602084 != nil:
    section.add "Action", valid_602084
  var valid_602085 = query.getOrDefault("Version")
  valid_602085 = validateParameter(valid_602085, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602085 != nil:
    section.add "Version", valid_602085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602086 = header.getOrDefault("X-Amz-Date")
  valid_602086 = validateParameter(valid_602086, JString, required = false,
                                 default = nil)
  if valid_602086 != nil:
    section.add "X-Amz-Date", valid_602086
  var valid_602087 = header.getOrDefault("X-Amz-Security-Token")
  valid_602087 = validateParameter(valid_602087, JString, required = false,
                                 default = nil)
  if valid_602087 != nil:
    section.add "X-Amz-Security-Token", valid_602087
  var valid_602088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602088 = validateParameter(valid_602088, JString, required = false,
                                 default = nil)
  if valid_602088 != nil:
    section.add "X-Amz-Content-Sha256", valid_602088
  var valid_602089 = header.getOrDefault("X-Amz-Algorithm")
  valid_602089 = validateParameter(valid_602089, JString, required = false,
                                 default = nil)
  if valid_602089 != nil:
    section.add "X-Amz-Algorithm", valid_602089
  var valid_602090 = header.getOrDefault("X-Amz-Signature")
  valid_602090 = validateParameter(valid_602090, JString, required = false,
                                 default = nil)
  if valid_602090 != nil:
    section.add "X-Amz-Signature", valid_602090
  var valid_602091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602091 = validateParameter(valid_602091, JString, required = false,
                                 default = nil)
  if valid_602091 != nil:
    section.add "X-Amz-SignedHeaders", valid_602091
  var valid_602092 = header.getOrDefault("X-Amz-Credential")
  valid_602092 = validateParameter(valid_602092, JString, required = false,
                                 default = nil)
  if valid_602092 != nil:
    section.add "X-Amz-Credential", valid_602092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602093: Call_GetDeletePolicy_602080; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602093.validator(path, query, header, formData, body)
  let scheme = call_602093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602093.url(scheme.get, call_602093.host, call_602093.base,
                         call_602093.route, valid.getOrDefault("path"))
  result = hook(call_602093, url, valid)

proc call*(call_602094: Call_GetDeletePolicy_602080; PolicyArn: string;
          Action: string = "DeletePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicy
  ## <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> API operations. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602095 = newJObject()
  add(query_602095, "PolicyArn", newJString(PolicyArn))
  add(query_602095, "Action", newJString(Action))
  add(query_602095, "Version", newJString(Version))
  result = call_602094.call(nil, query_602095, nil, nil, nil)

var getDeletePolicy* = Call_GetDeletePolicy_602080(name: "getDeletePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeletePolicy", validator: validate_GetDeletePolicy_602081,
    base: "/", url: url_GetDeletePolicy_602082, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeletePolicyVersion_602130 = ref object of OpenApiRestCall_600426
proc url_PostDeletePolicyVersion_602132(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeletePolicyVersion_602131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602133 = query.getOrDefault("Action")
  valid_602133 = validateParameter(valid_602133, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_602133 != nil:
    section.add "Action", valid_602133
  var valid_602134 = query.getOrDefault("Version")
  valid_602134 = validateParameter(valid_602134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602134 != nil:
    section.add "Version", valid_602134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602135 = header.getOrDefault("X-Amz-Date")
  valid_602135 = validateParameter(valid_602135, JString, required = false,
                                 default = nil)
  if valid_602135 != nil:
    section.add "X-Amz-Date", valid_602135
  var valid_602136 = header.getOrDefault("X-Amz-Security-Token")
  valid_602136 = validateParameter(valid_602136, JString, required = false,
                                 default = nil)
  if valid_602136 != nil:
    section.add "X-Amz-Security-Token", valid_602136
  var valid_602137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602137 = validateParameter(valid_602137, JString, required = false,
                                 default = nil)
  if valid_602137 != nil:
    section.add "X-Amz-Content-Sha256", valid_602137
  var valid_602138 = header.getOrDefault("X-Amz-Algorithm")
  valid_602138 = validateParameter(valid_602138, JString, required = false,
                                 default = nil)
  if valid_602138 != nil:
    section.add "X-Amz-Algorithm", valid_602138
  var valid_602139 = header.getOrDefault("X-Amz-Signature")
  valid_602139 = validateParameter(valid_602139, JString, required = false,
                                 default = nil)
  if valid_602139 != nil:
    section.add "X-Amz-Signature", valid_602139
  var valid_602140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602140 = validateParameter(valid_602140, JString, required = false,
                                 default = nil)
  if valid_602140 != nil:
    section.add "X-Amz-SignedHeaders", valid_602140
  var valid_602141 = header.getOrDefault("X-Amz-Credential")
  valid_602141 = validateParameter(valid_602141, JString, required = false,
                                 default = nil)
  if valid_602141 != nil:
    section.add "X-Amz-Credential", valid_602141
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_602142 = formData.getOrDefault("PolicyArn")
  valid_602142 = validateParameter(valid_602142, JString, required = true,
                                 default = nil)
  if valid_602142 != nil:
    section.add "PolicyArn", valid_602142
  var valid_602143 = formData.getOrDefault("VersionId")
  valid_602143 = validateParameter(valid_602143, JString, required = true,
                                 default = nil)
  if valid_602143 != nil:
    section.add "VersionId", valid_602143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602144: Call_PostDeletePolicyVersion_602130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602144.validator(path, query, header, formData, body)
  let scheme = call_602144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602144.url(scheme.get, call_602144.host, call_602144.base,
                         call_602144.route, valid.getOrDefault("path"))
  result = hook(call_602144, url, valid)

proc call*(call_602145: Call_PostDeletePolicyVersion_602130; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_602146 = newJObject()
  var formData_602147 = newJObject()
  add(formData_602147, "PolicyArn", newJString(PolicyArn))
  add(query_602146, "Action", newJString(Action))
  add(query_602146, "Version", newJString(Version))
  add(formData_602147, "VersionId", newJString(VersionId))
  result = call_602145.call(nil, query_602146, nil, formData_602147, nil)

var postDeletePolicyVersion* = Call_PostDeletePolicyVersion_602130(
    name: "postDeletePolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_PostDeletePolicyVersion_602131, base: "/",
    url: url_PostDeletePolicyVersion_602132, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeletePolicyVersion_602113 = ref object of OpenApiRestCall_600426
proc url_GetDeletePolicyVersion_602115(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeletePolicyVersion_602114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_602116 = query.getOrDefault("PolicyArn")
  valid_602116 = validateParameter(valid_602116, JString, required = true,
                                 default = nil)
  if valid_602116 != nil:
    section.add "PolicyArn", valid_602116
  var valid_602117 = query.getOrDefault("VersionId")
  valid_602117 = validateParameter(valid_602117, JString, required = true,
                                 default = nil)
  if valid_602117 != nil:
    section.add "VersionId", valid_602117
  var valid_602118 = query.getOrDefault("Action")
  valid_602118 = validateParameter(valid_602118, JString, required = true,
                                 default = newJString("DeletePolicyVersion"))
  if valid_602118 != nil:
    section.add "Action", valid_602118
  var valid_602119 = query.getOrDefault("Version")
  valid_602119 = validateParameter(valid_602119, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602119 != nil:
    section.add "Version", valid_602119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602120 = header.getOrDefault("X-Amz-Date")
  valid_602120 = validateParameter(valid_602120, JString, required = false,
                                 default = nil)
  if valid_602120 != nil:
    section.add "X-Amz-Date", valid_602120
  var valid_602121 = header.getOrDefault("X-Amz-Security-Token")
  valid_602121 = validateParameter(valid_602121, JString, required = false,
                                 default = nil)
  if valid_602121 != nil:
    section.add "X-Amz-Security-Token", valid_602121
  var valid_602122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602122 = validateParameter(valid_602122, JString, required = false,
                                 default = nil)
  if valid_602122 != nil:
    section.add "X-Amz-Content-Sha256", valid_602122
  var valid_602123 = header.getOrDefault("X-Amz-Algorithm")
  valid_602123 = validateParameter(valid_602123, JString, required = false,
                                 default = nil)
  if valid_602123 != nil:
    section.add "X-Amz-Algorithm", valid_602123
  var valid_602124 = header.getOrDefault("X-Amz-Signature")
  valid_602124 = validateParameter(valid_602124, JString, required = false,
                                 default = nil)
  if valid_602124 != nil:
    section.add "X-Amz-Signature", valid_602124
  var valid_602125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602125 = validateParameter(valid_602125, JString, required = false,
                                 default = nil)
  if valid_602125 != nil:
    section.add "X-Amz-SignedHeaders", valid_602125
  var valid_602126 = header.getOrDefault("X-Amz-Credential")
  valid_602126 = validateParameter(valid_602126, JString, required = false,
                                 default = nil)
  if valid_602126 != nil:
    section.add "X-Amz-Credential", valid_602126
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602127: Call_GetDeletePolicyVersion_602113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602127.validator(path, query, header, formData, body)
  let scheme = call_602127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602127.url(scheme.get, call_602127.host, call_602127.base,
                         call_602127.route, valid.getOrDefault("path"))
  result = hook(call_602127, url, valid)

proc call*(call_602128: Call_GetDeletePolicyVersion_602113; PolicyArn: string;
          VersionId: string; Action: string = "DeletePolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getDeletePolicyVersion
  ## <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602129 = newJObject()
  add(query_602129, "PolicyArn", newJString(PolicyArn))
  add(query_602129, "VersionId", newJString(VersionId))
  add(query_602129, "Action", newJString(Action))
  add(query_602129, "Version", newJString(Version))
  result = call_602128.call(nil, query_602129, nil, nil, nil)

var getDeletePolicyVersion* = Call_GetDeletePolicyVersion_602113(
    name: "getDeletePolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeletePolicyVersion",
    validator: validate_GetDeletePolicyVersion_602114, base: "/",
    url: url_GetDeletePolicyVersion_602115, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRole_602164 = ref object of OpenApiRestCall_600426
proc url_PostDeleteRole_602166(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRole_602165(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602167 = query.getOrDefault("Action")
  valid_602167 = validateParameter(valid_602167, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_602167 != nil:
    section.add "Action", valid_602167
  var valid_602168 = query.getOrDefault("Version")
  valid_602168 = validateParameter(valid_602168, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602168 != nil:
    section.add "Version", valid_602168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602169 = header.getOrDefault("X-Amz-Date")
  valid_602169 = validateParameter(valid_602169, JString, required = false,
                                 default = nil)
  if valid_602169 != nil:
    section.add "X-Amz-Date", valid_602169
  var valid_602170 = header.getOrDefault("X-Amz-Security-Token")
  valid_602170 = validateParameter(valid_602170, JString, required = false,
                                 default = nil)
  if valid_602170 != nil:
    section.add "X-Amz-Security-Token", valid_602170
  var valid_602171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602171 = validateParameter(valid_602171, JString, required = false,
                                 default = nil)
  if valid_602171 != nil:
    section.add "X-Amz-Content-Sha256", valid_602171
  var valid_602172 = header.getOrDefault("X-Amz-Algorithm")
  valid_602172 = validateParameter(valid_602172, JString, required = false,
                                 default = nil)
  if valid_602172 != nil:
    section.add "X-Amz-Algorithm", valid_602172
  var valid_602173 = header.getOrDefault("X-Amz-Signature")
  valid_602173 = validateParameter(valid_602173, JString, required = false,
                                 default = nil)
  if valid_602173 != nil:
    section.add "X-Amz-Signature", valid_602173
  var valid_602174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602174 = validateParameter(valid_602174, JString, required = false,
                                 default = nil)
  if valid_602174 != nil:
    section.add "X-Amz-SignedHeaders", valid_602174
  var valid_602175 = header.getOrDefault("X-Amz-Credential")
  valid_602175 = validateParameter(valid_602175, JString, required = false,
                                 default = nil)
  if valid_602175 != nil:
    section.add "X-Amz-Credential", valid_602175
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_602176 = formData.getOrDefault("RoleName")
  valid_602176 = validateParameter(valid_602176, JString, required = true,
                                 default = nil)
  if valid_602176 != nil:
    section.add "RoleName", valid_602176
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602177: Call_PostDeleteRole_602164; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_602177.validator(path, query, header, formData, body)
  let scheme = call_602177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602177.url(scheme.get, call_602177.host, call_602177.base,
                         call_602177.route, valid.getOrDefault("path"))
  result = hook(call_602177, url, valid)

proc call*(call_602178: Call_PostDeleteRole_602164; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602179 = newJObject()
  var formData_602180 = newJObject()
  add(formData_602180, "RoleName", newJString(RoleName))
  add(query_602179, "Action", newJString(Action))
  add(query_602179, "Version", newJString(Version))
  result = call_602178.call(nil, query_602179, nil, formData_602180, nil)

var postDeleteRole* = Call_PostDeleteRole_602164(name: "postDeleteRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_PostDeleteRole_602165,
    base: "/", url: url_PostDeleteRole_602166, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRole_602148 = ref object of OpenApiRestCall_600426
proc url_GetDeleteRole_602150(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRole_602149(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602151 = query.getOrDefault("Action")
  valid_602151 = validateParameter(valid_602151, JString, required = true,
                                 default = newJString("DeleteRole"))
  if valid_602151 != nil:
    section.add "Action", valid_602151
  var valid_602152 = query.getOrDefault("RoleName")
  valid_602152 = validateParameter(valid_602152, JString, required = true,
                                 default = nil)
  if valid_602152 != nil:
    section.add "RoleName", valid_602152
  var valid_602153 = query.getOrDefault("Version")
  valid_602153 = validateParameter(valid_602153, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602153 != nil:
    section.add "Version", valid_602153
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602154 = header.getOrDefault("X-Amz-Date")
  valid_602154 = validateParameter(valid_602154, JString, required = false,
                                 default = nil)
  if valid_602154 != nil:
    section.add "X-Amz-Date", valid_602154
  var valid_602155 = header.getOrDefault("X-Amz-Security-Token")
  valid_602155 = validateParameter(valid_602155, JString, required = false,
                                 default = nil)
  if valid_602155 != nil:
    section.add "X-Amz-Security-Token", valid_602155
  var valid_602156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602156 = validateParameter(valid_602156, JString, required = false,
                                 default = nil)
  if valid_602156 != nil:
    section.add "X-Amz-Content-Sha256", valid_602156
  var valid_602157 = header.getOrDefault("X-Amz-Algorithm")
  valid_602157 = validateParameter(valid_602157, JString, required = false,
                                 default = nil)
  if valid_602157 != nil:
    section.add "X-Amz-Algorithm", valid_602157
  var valid_602158 = header.getOrDefault("X-Amz-Signature")
  valid_602158 = validateParameter(valid_602158, JString, required = false,
                                 default = nil)
  if valid_602158 != nil:
    section.add "X-Amz-Signature", valid_602158
  var valid_602159 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602159 = validateParameter(valid_602159, JString, required = false,
                                 default = nil)
  if valid_602159 != nil:
    section.add "X-Amz-SignedHeaders", valid_602159
  var valid_602160 = header.getOrDefault("X-Amz-Credential")
  valid_602160 = validateParameter(valid_602160, JString, required = false,
                                 default = nil)
  if valid_602160 != nil:
    section.add "X-Amz-Credential", valid_602160
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602161: Call_GetDeleteRole_602148; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ## 
  let valid = call_602161.validator(path, query, header, formData, body)
  let scheme = call_602161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602161.url(scheme.get, call_602161.host, call_602161.base,
                         call_602161.route, valid.getOrDefault("path"))
  result = hook(call_602161, url, valid)

proc call*(call_602162: Call_GetDeleteRole_602148; RoleName: string;
          Action: string = "DeleteRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteRole
  ## <p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_602163 = newJObject()
  add(query_602163, "Action", newJString(Action))
  add(query_602163, "RoleName", newJString(RoleName))
  add(query_602163, "Version", newJString(Version))
  result = call_602162.call(nil, query_602163, nil, nil, nil)

var getDeleteRole* = Call_GetDeleteRole_602148(name: "getDeleteRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteRole", validator: validate_GetDeleteRole_602149,
    base: "/", url: url_GetDeleteRole_602150, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePermissionsBoundary_602197 = ref object of OpenApiRestCall_600426
proc url_PostDeleteRolePermissionsBoundary_602199(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePermissionsBoundary_602198(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602200 = query.getOrDefault("Action")
  valid_602200 = validateParameter(valid_602200, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_602200 != nil:
    section.add "Action", valid_602200
  var valid_602201 = query.getOrDefault("Version")
  valid_602201 = validateParameter(valid_602201, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602201 != nil:
    section.add "Version", valid_602201
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602202 = header.getOrDefault("X-Amz-Date")
  valid_602202 = validateParameter(valid_602202, JString, required = false,
                                 default = nil)
  if valid_602202 != nil:
    section.add "X-Amz-Date", valid_602202
  var valid_602203 = header.getOrDefault("X-Amz-Security-Token")
  valid_602203 = validateParameter(valid_602203, JString, required = false,
                                 default = nil)
  if valid_602203 != nil:
    section.add "X-Amz-Security-Token", valid_602203
  var valid_602204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602204 = validateParameter(valid_602204, JString, required = false,
                                 default = nil)
  if valid_602204 != nil:
    section.add "X-Amz-Content-Sha256", valid_602204
  var valid_602205 = header.getOrDefault("X-Amz-Algorithm")
  valid_602205 = validateParameter(valid_602205, JString, required = false,
                                 default = nil)
  if valid_602205 != nil:
    section.add "X-Amz-Algorithm", valid_602205
  var valid_602206 = header.getOrDefault("X-Amz-Signature")
  valid_602206 = validateParameter(valid_602206, JString, required = false,
                                 default = nil)
  if valid_602206 != nil:
    section.add "X-Amz-Signature", valid_602206
  var valid_602207 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602207 = validateParameter(valid_602207, JString, required = false,
                                 default = nil)
  if valid_602207 != nil:
    section.add "X-Amz-SignedHeaders", valid_602207
  var valid_602208 = header.getOrDefault("X-Amz-Credential")
  valid_602208 = validateParameter(valid_602208, JString, required = false,
                                 default = nil)
  if valid_602208 != nil:
    section.add "X-Amz-Credential", valid_602208
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_602209 = formData.getOrDefault("RoleName")
  valid_602209 = validateParameter(valid_602209, JString, required = true,
                                 default = nil)
  if valid_602209 != nil:
    section.add "RoleName", valid_602209
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602210: Call_PostDeleteRolePermissionsBoundary_602197;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_602210.validator(path, query, header, formData, body)
  let scheme = call_602210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602210.url(scheme.get, call_602210.host, call_602210.base,
                         call_602210.route, valid.getOrDefault("path"))
  result = hook(call_602210, url, valid)

proc call*(call_602211: Call_PostDeleteRolePermissionsBoundary_602197;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602212 = newJObject()
  var formData_602213 = newJObject()
  add(formData_602213, "RoleName", newJString(RoleName))
  add(query_602212, "Action", newJString(Action))
  add(query_602212, "Version", newJString(Version))
  result = call_602211.call(nil, query_602212, nil, formData_602213, nil)

var postDeleteRolePermissionsBoundary* = Call_PostDeleteRolePermissionsBoundary_602197(
    name: "postDeleteRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_PostDeleteRolePermissionsBoundary_602198, base: "/",
    url: url_PostDeleteRolePermissionsBoundary_602199,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePermissionsBoundary_602181 = ref object of OpenApiRestCall_600426
proc url_GetDeleteRolePermissionsBoundary_602183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePermissionsBoundary_602182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602184 = query.getOrDefault("Action")
  valid_602184 = validateParameter(valid_602184, JString, required = true, default = newJString(
      "DeleteRolePermissionsBoundary"))
  if valid_602184 != nil:
    section.add "Action", valid_602184
  var valid_602185 = query.getOrDefault("RoleName")
  valid_602185 = validateParameter(valid_602185, JString, required = true,
                                 default = nil)
  if valid_602185 != nil:
    section.add "RoleName", valid_602185
  var valid_602186 = query.getOrDefault("Version")
  valid_602186 = validateParameter(valid_602186, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602186 != nil:
    section.add "Version", valid_602186
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602187 = header.getOrDefault("X-Amz-Date")
  valid_602187 = validateParameter(valid_602187, JString, required = false,
                                 default = nil)
  if valid_602187 != nil:
    section.add "X-Amz-Date", valid_602187
  var valid_602188 = header.getOrDefault("X-Amz-Security-Token")
  valid_602188 = validateParameter(valid_602188, JString, required = false,
                                 default = nil)
  if valid_602188 != nil:
    section.add "X-Amz-Security-Token", valid_602188
  var valid_602189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602189 = validateParameter(valid_602189, JString, required = false,
                                 default = nil)
  if valid_602189 != nil:
    section.add "X-Amz-Content-Sha256", valid_602189
  var valid_602190 = header.getOrDefault("X-Amz-Algorithm")
  valid_602190 = validateParameter(valid_602190, JString, required = false,
                                 default = nil)
  if valid_602190 != nil:
    section.add "X-Amz-Algorithm", valid_602190
  var valid_602191 = header.getOrDefault("X-Amz-Signature")
  valid_602191 = validateParameter(valid_602191, JString, required = false,
                                 default = nil)
  if valid_602191 != nil:
    section.add "X-Amz-Signature", valid_602191
  var valid_602192 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602192 = validateParameter(valid_602192, JString, required = false,
                                 default = nil)
  if valid_602192 != nil:
    section.add "X-Amz-SignedHeaders", valid_602192
  var valid_602193 = header.getOrDefault("X-Amz-Credential")
  valid_602193 = validateParameter(valid_602193, JString, required = false,
                                 default = nil)
  if valid_602193 != nil:
    section.add "X-Amz-Credential", valid_602193
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602194: Call_GetDeleteRolePermissionsBoundary_602181;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_602194.validator(path, query, header, formData, body)
  let scheme = call_602194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602194.url(scheme.get, call_602194.host, call_602194.base,
                         call_602194.route, valid.getOrDefault("path"))
  result = hook(call_602194, url, valid)

proc call*(call_602195: Call_GetDeleteRolePermissionsBoundary_602181;
          RoleName: string; Action: string = "DeleteRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM role. </p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies. </p> </important>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.
  ##   Version: string (required)
  var query_602196 = newJObject()
  add(query_602196, "Action", newJString(Action))
  add(query_602196, "RoleName", newJString(RoleName))
  add(query_602196, "Version", newJString(Version))
  result = call_602195.call(nil, query_602196, nil, nil, nil)

var getDeleteRolePermissionsBoundary* = Call_GetDeleteRolePermissionsBoundary_602181(
    name: "getDeleteRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePermissionsBoundary",
    validator: validate_GetDeleteRolePermissionsBoundary_602182, base: "/",
    url: url_GetDeleteRolePermissionsBoundary_602183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteRolePolicy_602231 = ref object of OpenApiRestCall_600426
proc url_PostDeleteRolePolicy_602233(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteRolePolicy_602232(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602234 = query.getOrDefault("Action")
  valid_602234 = validateParameter(valid_602234, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_602234 != nil:
    section.add "Action", valid_602234
  var valid_602235 = query.getOrDefault("Version")
  valid_602235 = validateParameter(valid_602235, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602235 != nil:
    section.add "Version", valid_602235
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602236 = header.getOrDefault("X-Amz-Date")
  valid_602236 = validateParameter(valid_602236, JString, required = false,
                                 default = nil)
  if valid_602236 != nil:
    section.add "X-Amz-Date", valid_602236
  var valid_602237 = header.getOrDefault("X-Amz-Security-Token")
  valid_602237 = validateParameter(valid_602237, JString, required = false,
                                 default = nil)
  if valid_602237 != nil:
    section.add "X-Amz-Security-Token", valid_602237
  var valid_602238 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602238 = validateParameter(valid_602238, JString, required = false,
                                 default = nil)
  if valid_602238 != nil:
    section.add "X-Amz-Content-Sha256", valid_602238
  var valid_602239 = header.getOrDefault("X-Amz-Algorithm")
  valid_602239 = validateParameter(valid_602239, JString, required = false,
                                 default = nil)
  if valid_602239 != nil:
    section.add "X-Amz-Algorithm", valid_602239
  var valid_602240 = header.getOrDefault("X-Amz-Signature")
  valid_602240 = validateParameter(valid_602240, JString, required = false,
                                 default = nil)
  if valid_602240 != nil:
    section.add "X-Amz-Signature", valid_602240
  var valid_602241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602241 = validateParameter(valid_602241, JString, required = false,
                                 default = nil)
  if valid_602241 != nil:
    section.add "X-Amz-SignedHeaders", valid_602241
  var valid_602242 = header.getOrDefault("X-Amz-Credential")
  valid_602242 = validateParameter(valid_602242, JString, required = false,
                                 default = nil)
  if valid_602242 != nil:
    section.add "X-Amz-Credential", valid_602242
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_602243 = formData.getOrDefault("PolicyName")
  valid_602243 = validateParameter(valid_602243, JString, required = true,
                                 default = nil)
  if valid_602243 != nil:
    section.add "PolicyName", valid_602243
  var valid_602244 = formData.getOrDefault("RoleName")
  valid_602244 = validateParameter(valid_602244, JString, required = true,
                                 default = nil)
  if valid_602244 != nil:
    section.add "RoleName", valid_602244
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602245: Call_PostDeleteRolePolicy_602231; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602245.validator(path, query, header, formData, body)
  let scheme = call_602245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602245.url(scheme.get, call_602245.host, call_602245.base,
                         call_602245.route, valid.getOrDefault("path"))
  result = hook(call_602245, url, valid)

proc call*(call_602246: Call_PostDeleteRolePolicy_602231; PolicyName: string;
          RoleName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602247 = newJObject()
  var formData_602248 = newJObject()
  add(formData_602248, "PolicyName", newJString(PolicyName))
  add(formData_602248, "RoleName", newJString(RoleName))
  add(query_602247, "Action", newJString(Action))
  add(query_602247, "Version", newJString(Version))
  result = call_602246.call(nil, query_602247, nil, formData_602248, nil)

var postDeleteRolePolicy* = Call_PostDeleteRolePolicy_602231(
    name: "postDeleteRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_PostDeleteRolePolicy_602232, base: "/",
    url: url_PostDeleteRolePolicy_602233, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteRolePolicy_602214 = ref object of OpenApiRestCall_600426
proc url_GetDeleteRolePolicy_602216(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteRolePolicy_602215(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602217 = query.getOrDefault("Action")
  valid_602217 = validateParameter(valid_602217, JString, required = true,
                                 default = newJString("DeleteRolePolicy"))
  if valid_602217 != nil:
    section.add "Action", valid_602217
  var valid_602218 = query.getOrDefault("RoleName")
  valid_602218 = validateParameter(valid_602218, JString, required = true,
                                 default = nil)
  if valid_602218 != nil:
    section.add "RoleName", valid_602218
  var valid_602219 = query.getOrDefault("Version")
  valid_602219 = validateParameter(valid_602219, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602219 != nil:
    section.add "Version", valid_602219
  var valid_602220 = query.getOrDefault("PolicyName")
  valid_602220 = validateParameter(valid_602220, JString, required = true,
                                 default = nil)
  if valid_602220 != nil:
    section.add "PolicyName", valid_602220
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602221 = header.getOrDefault("X-Amz-Date")
  valid_602221 = validateParameter(valid_602221, JString, required = false,
                                 default = nil)
  if valid_602221 != nil:
    section.add "X-Amz-Date", valid_602221
  var valid_602222 = header.getOrDefault("X-Amz-Security-Token")
  valid_602222 = validateParameter(valid_602222, JString, required = false,
                                 default = nil)
  if valid_602222 != nil:
    section.add "X-Amz-Security-Token", valid_602222
  var valid_602223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602223 = validateParameter(valid_602223, JString, required = false,
                                 default = nil)
  if valid_602223 != nil:
    section.add "X-Amz-Content-Sha256", valid_602223
  var valid_602224 = header.getOrDefault("X-Amz-Algorithm")
  valid_602224 = validateParameter(valid_602224, JString, required = false,
                                 default = nil)
  if valid_602224 != nil:
    section.add "X-Amz-Algorithm", valid_602224
  var valid_602225 = header.getOrDefault("X-Amz-Signature")
  valid_602225 = validateParameter(valid_602225, JString, required = false,
                                 default = nil)
  if valid_602225 != nil:
    section.add "X-Amz-Signature", valid_602225
  var valid_602226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602226 = validateParameter(valid_602226, JString, required = false,
                                 default = nil)
  if valid_602226 != nil:
    section.add "X-Amz-SignedHeaders", valid_602226
  var valid_602227 = header.getOrDefault("X-Amz-Credential")
  valid_602227 = validateParameter(valid_602227, JString, required = false,
                                 default = nil)
  if valid_602227 != nil:
    section.add "X-Amz-Credential", valid_602227
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602228: Call_GetDeleteRolePolicy_602214; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602228.validator(path, query, header, formData, body)
  let scheme = call_602228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602228.url(scheme.get, call_602228.host, call_602228.base,
                         call_602228.route, valid.getOrDefault("path"))
  result = hook(call_602228, url, valid)

proc call*(call_602229: Call_GetDeleteRolePolicy_602214; RoleName: string;
          PolicyName: string; Action: string = "DeleteRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteRolePolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_602230 = newJObject()
  add(query_602230, "Action", newJString(Action))
  add(query_602230, "RoleName", newJString(RoleName))
  add(query_602230, "Version", newJString(Version))
  add(query_602230, "PolicyName", newJString(PolicyName))
  result = call_602229.call(nil, query_602230, nil, nil, nil)

var getDeleteRolePolicy* = Call_GetDeleteRolePolicy_602214(
    name: "getDeleteRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteRolePolicy",
    validator: validate_GetDeleteRolePolicy_602215, base: "/",
    url: url_GetDeleteRolePolicy_602216, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSAMLProvider_602265 = ref object of OpenApiRestCall_600426
proc url_PostDeleteSAMLProvider_602267(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSAMLProvider_602266(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602268 = query.getOrDefault("Action")
  valid_602268 = validateParameter(valid_602268, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_602268 != nil:
    section.add "Action", valid_602268
  var valid_602269 = query.getOrDefault("Version")
  valid_602269 = validateParameter(valid_602269, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602269 != nil:
    section.add "Version", valid_602269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602270 = header.getOrDefault("X-Amz-Date")
  valid_602270 = validateParameter(valid_602270, JString, required = false,
                                 default = nil)
  if valid_602270 != nil:
    section.add "X-Amz-Date", valid_602270
  var valid_602271 = header.getOrDefault("X-Amz-Security-Token")
  valid_602271 = validateParameter(valid_602271, JString, required = false,
                                 default = nil)
  if valid_602271 != nil:
    section.add "X-Amz-Security-Token", valid_602271
  var valid_602272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602272 = validateParameter(valid_602272, JString, required = false,
                                 default = nil)
  if valid_602272 != nil:
    section.add "X-Amz-Content-Sha256", valid_602272
  var valid_602273 = header.getOrDefault("X-Amz-Algorithm")
  valid_602273 = validateParameter(valid_602273, JString, required = false,
                                 default = nil)
  if valid_602273 != nil:
    section.add "X-Amz-Algorithm", valid_602273
  var valid_602274 = header.getOrDefault("X-Amz-Signature")
  valid_602274 = validateParameter(valid_602274, JString, required = false,
                                 default = nil)
  if valid_602274 != nil:
    section.add "X-Amz-Signature", valid_602274
  var valid_602275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602275 = validateParameter(valid_602275, JString, required = false,
                                 default = nil)
  if valid_602275 != nil:
    section.add "X-Amz-SignedHeaders", valid_602275
  var valid_602276 = header.getOrDefault("X-Amz-Credential")
  valid_602276 = validateParameter(valid_602276, JString, required = false,
                                 default = nil)
  if valid_602276 != nil:
    section.add "X-Amz-Credential", valid_602276
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_602277 = formData.getOrDefault("SAMLProviderArn")
  valid_602277 = validateParameter(valid_602277, JString, required = true,
                                 default = nil)
  if valid_602277 != nil:
    section.add "SAMLProviderArn", valid_602277
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602278: Call_PostDeleteSAMLProvider_602265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_602278.validator(path, query, header, formData, body)
  let scheme = call_602278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602278.url(scheme.get, call_602278.host, call_602278.base,
                         call_602278.route, valid.getOrDefault("path"))
  result = hook(call_602278, url, valid)

proc call*(call_602279: Call_PostDeleteSAMLProvider_602265;
          SAMLProviderArn: string; Action: string = "DeleteSAMLProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602280 = newJObject()
  var formData_602281 = newJObject()
  add(formData_602281, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_602280, "Action", newJString(Action))
  add(query_602280, "Version", newJString(Version))
  result = call_602279.call(nil, query_602280, nil, formData_602281, nil)

var postDeleteSAMLProvider* = Call_PostDeleteSAMLProvider_602265(
    name: "postDeleteSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_PostDeleteSAMLProvider_602266, base: "/",
    url: url_PostDeleteSAMLProvider_602267, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSAMLProvider_602249 = ref object of OpenApiRestCall_600426
proc url_GetDeleteSAMLProvider_602251(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSAMLProvider_602250(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602252 = query.getOrDefault("Action")
  valid_602252 = validateParameter(valid_602252, JString, required = true,
                                 default = newJString("DeleteSAMLProvider"))
  if valid_602252 != nil:
    section.add "Action", valid_602252
  var valid_602253 = query.getOrDefault("SAMLProviderArn")
  valid_602253 = validateParameter(valid_602253, JString, required = true,
                                 default = nil)
  if valid_602253 != nil:
    section.add "SAMLProviderArn", valid_602253
  var valid_602254 = query.getOrDefault("Version")
  valid_602254 = validateParameter(valid_602254, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602254 != nil:
    section.add "Version", valid_602254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602255 = header.getOrDefault("X-Amz-Date")
  valid_602255 = validateParameter(valid_602255, JString, required = false,
                                 default = nil)
  if valid_602255 != nil:
    section.add "X-Amz-Date", valid_602255
  var valid_602256 = header.getOrDefault("X-Amz-Security-Token")
  valid_602256 = validateParameter(valid_602256, JString, required = false,
                                 default = nil)
  if valid_602256 != nil:
    section.add "X-Amz-Security-Token", valid_602256
  var valid_602257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602257 = validateParameter(valid_602257, JString, required = false,
                                 default = nil)
  if valid_602257 != nil:
    section.add "X-Amz-Content-Sha256", valid_602257
  var valid_602258 = header.getOrDefault("X-Amz-Algorithm")
  valid_602258 = validateParameter(valid_602258, JString, required = false,
                                 default = nil)
  if valid_602258 != nil:
    section.add "X-Amz-Algorithm", valid_602258
  var valid_602259 = header.getOrDefault("X-Amz-Signature")
  valid_602259 = validateParameter(valid_602259, JString, required = false,
                                 default = nil)
  if valid_602259 != nil:
    section.add "X-Amz-Signature", valid_602259
  var valid_602260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602260 = validateParameter(valid_602260, JString, required = false,
                                 default = nil)
  if valid_602260 != nil:
    section.add "X-Amz-SignedHeaders", valid_602260
  var valid_602261 = header.getOrDefault("X-Amz-Credential")
  valid_602261 = validateParameter(valid_602261, JString, required = false,
                                 default = nil)
  if valid_602261 != nil:
    section.add "X-Amz-Credential", valid_602261
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602262: Call_GetDeleteSAMLProvider_602249; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_602262.validator(path, query, header, formData, body)
  let scheme = call_602262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602262.url(scheme.get, call_602262.host, call_602262.base,
                         call_602262.route, valid.getOrDefault("path"))
  result = hook(call_602262, url, valid)

proc call*(call_602263: Call_GetDeleteSAMLProvider_602249; SAMLProviderArn: string;
          Action: string = "DeleteSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteSAMLProvider
  ## <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_602264 = newJObject()
  add(query_602264, "Action", newJString(Action))
  add(query_602264, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_602264, "Version", newJString(Version))
  result = call_602263.call(nil, query_602264, nil, nil, nil)

var getDeleteSAMLProvider* = Call_GetDeleteSAMLProvider_602249(
    name: "getDeleteSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSAMLProvider",
    validator: validate_GetDeleteSAMLProvider_602250, base: "/",
    url: url_GetDeleteSAMLProvider_602251, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSSHPublicKey_602299 = ref object of OpenApiRestCall_600426
proc url_PostDeleteSSHPublicKey_602301(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSSHPublicKey_602300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602302 = query.getOrDefault("Action")
  valid_602302 = validateParameter(valid_602302, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_602302 != nil:
    section.add "Action", valid_602302
  var valid_602303 = query.getOrDefault("Version")
  valid_602303 = validateParameter(valid_602303, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602303 != nil:
    section.add "Version", valid_602303
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602304 = header.getOrDefault("X-Amz-Date")
  valid_602304 = validateParameter(valid_602304, JString, required = false,
                                 default = nil)
  if valid_602304 != nil:
    section.add "X-Amz-Date", valid_602304
  var valid_602305 = header.getOrDefault("X-Amz-Security-Token")
  valid_602305 = validateParameter(valid_602305, JString, required = false,
                                 default = nil)
  if valid_602305 != nil:
    section.add "X-Amz-Security-Token", valid_602305
  var valid_602306 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602306 = validateParameter(valid_602306, JString, required = false,
                                 default = nil)
  if valid_602306 != nil:
    section.add "X-Amz-Content-Sha256", valid_602306
  var valid_602307 = header.getOrDefault("X-Amz-Algorithm")
  valid_602307 = validateParameter(valid_602307, JString, required = false,
                                 default = nil)
  if valid_602307 != nil:
    section.add "X-Amz-Algorithm", valid_602307
  var valid_602308 = header.getOrDefault("X-Amz-Signature")
  valid_602308 = validateParameter(valid_602308, JString, required = false,
                                 default = nil)
  if valid_602308 != nil:
    section.add "X-Amz-Signature", valid_602308
  var valid_602309 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602309 = validateParameter(valid_602309, JString, required = false,
                                 default = nil)
  if valid_602309 != nil:
    section.add "X-Amz-SignedHeaders", valid_602309
  var valid_602310 = header.getOrDefault("X-Amz-Credential")
  valid_602310 = validateParameter(valid_602310, JString, required = false,
                                 default = nil)
  if valid_602310 != nil:
    section.add "X-Amz-Credential", valid_602310
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_602311 = formData.getOrDefault("UserName")
  valid_602311 = validateParameter(valid_602311, JString, required = true,
                                 default = nil)
  if valid_602311 != nil:
    section.add "UserName", valid_602311
  var valid_602312 = formData.getOrDefault("SSHPublicKeyId")
  valid_602312 = validateParameter(valid_602312, JString, required = true,
                                 default = nil)
  if valid_602312 != nil:
    section.add "SSHPublicKeyId", valid_602312
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602313: Call_PostDeleteSSHPublicKey_602299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_602313.validator(path, query, header, formData, body)
  let scheme = call_602313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602313.url(scheme.get, call_602313.host, call_602313.base,
                         call_602313.route, valid.getOrDefault("path"))
  result = hook(call_602313, url, valid)

proc call*(call_602314: Call_PostDeleteSSHPublicKey_602299; UserName: string;
          SSHPublicKeyId: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602315 = newJObject()
  var formData_602316 = newJObject()
  add(formData_602316, "UserName", newJString(UserName))
  add(formData_602316, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_602315, "Action", newJString(Action))
  add(query_602315, "Version", newJString(Version))
  result = call_602314.call(nil, query_602315, nil, formData_602316, nil)

var postDeleteSSHPublicKey* = Call_PostDeleteSSHPublicKey_602299(
    name: "postDeleteSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_PostDeleteSSHPublicKey_602300, base: "/",
    url: url_PostDeleteSSHPublicKey_602301, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSSHPublicKey_602282 = ref object of OpenApiRestCall_600426
proc url_GetDeleteSSHPublicKey_602284(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSSHPublicKey_602283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_602285 = query.getOrDefault("SSHPublicKeyId")
  valid_602285 = validateParameter(valid_602285, JString, required = true,
                                 default = nil)
  if valid_602285 != nil:
    section.add "SSHPublicKeyId", valid_602285
  var valid_602286 = query.getOrDefault("UserName")
  valid_602286 = validateParameter(valid_602286, JString, required = true,
                                 default = nil)
  if valid_602286 != nil:
    section.add "UserName", valid_602286
  var valid_602287 = query.getOrDefault("Action")
  valid_602287 = validateParameter(valid_602287, JString, required = true,
                                 default = newJString("DeleteSSHPublicKey"))
  if valid_602287 != nil:
    section.add "Action", valid_602287
  var valid_602288 = query.getOrDefault("Version")
  valid_602288 = validateParameter(valid_602288, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602288 != nil:
    section.add "Version", valid_602288
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602289 = header.getOrDefault("X-Amz-Date")
  valid_602289 = validateParameter(valid_602289, JString, required = false,
                                 default = nil)
  if valid_602289 != nil:
    section.add "X-Amz-Date", valid_602289
  var valid_602290 = header.getOrDefault("X-Amz-Security-Token")
  valid_602290 = validateParameter(valid_602290, JString, required = false,
                                 default = nil)
  if valid_602290 != nil:
    section.add "X-Amz-Security-Token", valid_602290
  var valid_602291 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602291 = validateParameter(valid_602291, JString, required = false,
                                 default = nil)
  if valid_602291 != nil:
    section.add "X-Amz-Content-Sha256", valid_602291
  var valid_602292 = header.getOrDefault("X-Amz-Algorithm")
  valid_602292 = validateParameter(valid_602292, JString, required = false,
                                 default = nil)
  if valid_602292 != nil:
    section.add "X-Amz-Algorithm", valid_602292
  var valid_602293 = header.getOrDefault("X-Amz-Signature")
  valid_602293 = validateParameter(valid_602293, JString, required = false,
                                 default = nil)
  if valid_602293 != nil:
    section.add "X-Amz-Signature", valid_602293
  var valid_602294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602294 = validateParameter(valid_602294, JString, required = false,
                                 default = nil)
  if valid_602294 != nil:
    section.add "X-Amz-SignedHeaders", valid_602294
  var valid_602295 = header.getOrDefault("X-Amz-Credential")
  valid_602295 = validateParameter(valid_602295, JString, required = false,
                                 default = nil)
  if valid_602295 != nil:
    section.add "X-Amz-Credential", valid_602295
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602296: Call_GetDeleteSSHPublicKey_602282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_602296.validator(path, query, header, formData, body)
  let scheme = call_602296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602296.url(scheme.get, call_602296.host, call_602296.base,
                         call_602296.route, valid.getOrDefault("path"))
  result = hook(call_602296, url, valid)

proc call*(call_602297: Call_GetDeleteSSHPublicKey_602282; SSHPublicKeyId: string;
          UserName: string; Action: string = "DeleteSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSSHPublicKey
  ## <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602298 = newJObject()
  add(query_602298, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_602298, "UserName", newJString(UserName))
  add(query_602298, "Action", newJString(Action))
  add(query_602298, "Version", newJString(Version))
  result = call_602297.call(nil, query_602298, nil, nil, nil)

var getDeleteSSHPublicKey* = Call_GetDeleteSSHPublicKey_602282(
    name: "getDeleteSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSSHPublicKey",
    validator: validate_GetDeleteSSHPublicKey_602283, base: "/",
    url: url_GetDeleteSSHPublicKey_602284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServerCertificate_602333 = ref object of OpenApiRestCall_600426
proc url_PostDeleteServerCertificate_602335(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServerCertificate_602334(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602336 = query.getOrDefault("Action")
  valid_602336 = validateParameter(valid_602336, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_602336 != nil:
    section.add "Action", valid_602336
  var valid_602337 = query.getOrDefault("Version")
  valid_602337 = validateParameter(valid_602337, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602337 != nil:
    section.add "Version", valid_602337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602338 = header.getOrDefault("X-Amz-Date")
  valid_602338 = validateParameter(valid_602338, JString, required = false,
                                 default = nil)
  if valid_602338 != nil:
    section.add "X-Amz-Date", valid_602338
  var valid_602339 = header.getOrDefault("X-Amz-Security-Token")
  valid_602339 = validateParameter(valid_602339, JString, required = false,
                                 default = nil)
  if valid_602339 != nil:
    section.add "X-Amz-Security-Token", valid_602339
  var valid_602340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602340 = validateParameter(valid_602340, JString, required = false,
                                 default = nil)
  if valid_602340 != nil:
    section.add "X-Amz-Content-Sha256", valid_602340
  var valid_602341 = header.getOrDefault("X-Amz-Algorithm")
  valid_602341 = validateParameter(valid_602341, JString, required = false,
                                 default = nil)
  if valid_602341 != nil:
    section.add "X-Amz-Algorithm", valid_602341
  var valid_602342 = header.getOrDefault("X-Amz-Signature")
  valid_602342 = validateParameter(valid_602342, JString, required = false,
                                 default = nil)
  if valid_602342 != nil:
    section.add "X-Amz-Signature", valid_602342
  var valid_602343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602343 = validateParameter(valid_602343, JString, required = false,
                                 default = nil)
  if valid_602343 != nil:
    section.add "X-Amz-SignedHeaders", valid_602343
  var valid_602344 = header.getOrDefault("X-Amz-Credential")
  valid_602344 = validateParameter(valid_602344, JString, required = false,
                                 default = nil)
  if valid_602344 != nil:
    section.add "X-Amz-Credential", valid_602344
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_602345 = formData.getOrDefault("ServerCertificateName")
  valid_602345 = validateParameter(valid_602345, JString, required = true,
                                 default = nil)
  if valid_602345 != nil:
    section.add "ServerCertificateName", valid_602345
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602346: Call_PostDeleteServerCertificate_602333; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_602346.validator(path, query, header, formData, body)
  let scheme = call_602346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602346.url(scheme.get, call_602346.host, call_602346.base,
                         call_602346.route, valid.getOrDefault("path"))
  result = hook(call_602346, url, valid)

proc call*(call_602347: Call_PostDeleteServerCertificate_602333;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602348 = newJObject()
  var formData_602349 = newJObject()
  add(formData_602349, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_602348, "Action", newJString(Action))
  add(query_602348, "Version", newJString(Version))
  result = call_602347.call(nil, query_602348, nil, formData_602349, nil)

var postDeleteServerCertificate* = Call_PostDeleteServerCertificate_602333(
    name: "postDeleteServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_PostDeleteServerCertificate_602334, base: "/",
    url: url_PostDeleteServerCertificate_602335,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServerCertificate_602317 = ref object of OpenApiRestCall_600426
proc url_GetDeleteServerCertificate_602319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServerCertificate_602318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_602320 = query.getOrDefault("ServerCertificateName")
  valid_602320 = validateParameter(valid_602320, JString, required = true,
                                 default = nil)
  if valid_602320 != nil:
    section.add "ServerCertificateName", valid_602320
  var valid_602321 = query.getOrDefault("Action")
  valid_602321 = validateParameter(valid_602321, JString, required = true, default = newJString(
      "DeleteServerCertificate"))
  if valid_602321 != nil:
    section.add "Action", valid_602321
  var valid_602322 = query.getOrDefault("Version")
  valid_602322 = validateParameter(valid_602322, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602322 != nil:
    section.add "Version", valid_602322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602323 = header.getOrDefault("X-Amz-Date")
  valid_602323 = validateParameter(valid_602323, JString, required = false,
                                 default = nil)
  if valid_602323 != nil:
    section.add "X-Amz-Date", valid_602323
  var valid_602324 = header.getOrDefault("X-Amz-Security-Token")
  valid_602324 = validateParameter(valid_602324, JString, required = false,
                                 default = nil)
  if valid_602324 != nil:
    section.add "X-Amz-Security-Token", valid_602324
  var valid_602325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602325 = validateParameter(valid_602325, JString, required = false,
                                 default = nil)
  if valid_602325 != nil:
    section.add "X-Amz-Content-Sha256", valid_602325
  var valid_602326 = header.getOrDefault("X-Amz-Algorithm")
  valid_602326 = validateParameter(valid_602326, JString, required = false,
                                 default = nil)
  if valid_602326 != nil:
    section.add "X-Amz-Algorithm", valid_602326
  var valid_602327 = header.getOrDefault("X-Amz-Signature")
  valid_602327 = validateParameter(valid_602327, JString, required = false,
                                 default = nil)
  if valid_602327 != nil:
    section.add "X-Amz-Signature", valid_602327
  var valid_602328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602328 = validateParameter(valid_602328, JString, required = false,
                                 default = nil)
  if valid_602328 != nil:
    section.add "X-Amz-SignedHeaders", valid_602328
  var valid_602329 = header.getOrDefault("X-Amz-Credential")
  valid_602329 = validateParameter(valid_602329, JString, required = false,
                                 default = nil)
  if valid_602329 != nil:
    section.add "X-Amz-Credential", valid_602329
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602330: Call_GetDeleteServerCertificate_602317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ## 
  let valid = call_602330.validator(path, query, header, formData, body)
  let scheme = call_602330.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602330.url(scheme.get, call_602330.host, call_602330.base,
                         call_602330.route, valid.getOrDefault("path"))
  result = hook(call_602330, url, valid)

proc call*(call_602331: Call_GetDeleteServerCertificate_602317;
          ServerCertificateName: string;
          Action: string = "DeleteServerCertificate"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServerCertificate
  ## <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602332 = newJObject()
  add(query_602332, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_602332, "Action", newJString(Action))
  add(query_602332, "Version", newJString(Version))
  result = call_602331.call(nil, query_602332, nil, nil, nil)

var getDeleteServerCertificate* = Call_GetDeleteServerCertificate_602317(
    name: "getDeleteServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServerCertificate",
    validator: validate_GetDeleteServerCertificate_602318, base: "/",
    url: url_GetDeleteServerCertificate_602319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceLinkedRole_602366 = ref object of OpenApiRestCall_600426
proc url_PostDeleteServiceLinkedRole_602368(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceLinkedRole_602367(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602369 = query.getOrDefault("Action")
  valid_602369 = validateParameter(valid_602369, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_602369 != nil:
    section.add "Action", valid_602369
  var valid_602370 = query.getOrDefault("Version")
  valid_602370 = validateParameter(valid_602370, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602370 != nil:
    section.add "Version", valid_602370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602371 = header.getOrDefault("X-Amz-Date")
  valid_602371 = validateParameter(valid_602371, JString, required = false,
                                 default = nil)
  if valid_602371 != nil:
    section.add "X-Amz-Date", valid_602371
  var valid_602372 = header.getOrDefault("X-Amz-Security-Token")
  valid_602372 = validateParameter(valid_602372, JString, required = false,
                                 default = nil)
  if valid_602372 != nil:
    section.add "X-Amz-Security-Token", valid_602372
  var valid_602373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602373 = validateParameter(valid_602373, JString, required = false,
                                 default = nil)
  if valid_602373 != nil:
    section.add "X-Amz-Content-Sha256", valid_602373
  var valid_602374 = header.getOrDefault("X-Amz-Algorithm")
  valid_602374 = validateParameter(valid_602374, JString, required = false,
                                 default = nil)
  if valid_602374 != nil:
    section.add "X-Amz-Algorithm", valid_602374
  var valid_602375 = header.getOrDefault("X-Amz-Signature")
  valid_602375 = validateParameter(valid_602375, JString, required = false,
                                 default = nil)
  if valid_602375 != nil:
    section.add "X-Amz-Signature", valid_602375
  var valid_602376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602376 = validateParameter(valid_602376, JString, required = false,
                                 default = nil)
  if valid_602376 != nil:
    section.add "X-Amz-SignedHeaders", valid_602376
  var valid_602377 = header.getOrDefault("X-Amz-Credential")
  valid_602377 = validateParameter(valid_602377, JString, required = false,
                                 default = nil)
  if valid_602377 != nil:
    section.add "X-Amz-Credential", valid_602377
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_602378 = formData.getOrDefault("RoleName")
  valid_602378 = validateParameter(valid_602378, JString, required = true,
                                 default = nil)
  if valid_602378 != nil:
    section.add "RoleName", valid_602378
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602379: Call_PostDeleteServiceLinkedRole_602366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602379.validator(path, query, header, formData, body)
  let scheme = call_602379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602379.url(scheme.get, call_602379.host, call_602379.base,
                         call_602379.route, valid.getOrDefault("path"))
  result = hook(call_602379, url, valid)

proc call*(call_602380: Call_PostDeleteServiceLinkedRole_602366; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602381 = newJObject()
  var formData_602382 = newJObject()
  add(formData_602382, "RoleName", newJString(RoleName))
  add(query_602381, "Action", newJString(Action))
  add(query_602381, "Version", newJString(Version))
  result = call_602380.call(nil, query_602381, nil, formData_602382, nil)

var postDeleteServiceLinkedRole* = Call_PostDeleteServiceLinkedRole_602366(
    name: "postDeleteServiceLinkedRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_PostDeleteServiceLinkedRole_602367, base: "/",
    url: url_PostDeleteServiceLinkedRole_602368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceLinkedRole_602350 = ref object of OpenApiRestCall_600426
proc url_GetDeleteServiceLinkedRole_602352(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceLinkedRole_602351(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602353 = query.getOrDefault("Action")
  valid_602353 = validateParameter(valid_602353, JString, required = true, default = newJString(
      "DeleteServiceLinkedRole"))
  if valid_602353 != nil:
    section.add "Action", valid_602353
  var valid_602354 = query.getOrDefault("RoleName")
  valid_602354 = validateParameter(valid_602354, JString, required = true,
                                 default = nil)
  if valid_602354 != nil:
    section.add "RoleName", valid_602354
  var valid_602355 = query.getOrDefault("Version")
  valid_602355 = validateParameter(valid_602355, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602355 != nil:
    section.add "Version", valid_602355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602356 = header.getOrDefault("X-Amz-Date")
  valid_602356 = validateParameter(valid_602356, JString, required = false,
                                 default = nil)
  if valid_602356 != nil:
    section.add "X-Amz-Date", valid_602356
  var valid_602357 = header.getOrDefault("X-Amz-Security-Token")
  valid_602357 = validateParameter(valid_602357, JString, required = false,
                                 default = nil)
  if valid_602357 != nil:
    section.add "X-Amz-Security-Token", valid_602357
  var valid_602358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602358 = validateParameter(valid_602358, JString, required = false,
                                 default = nil)
  if valid_602358 != nil:
    section.add "X-Amz-Content-Sha256", valid_602358
  var valid_602359 = header.getOrDefault("X-Amz-Algorithm")
  valid_602359 = validateParameter(valid_602359, JString, required = false,
                                 default = nil)
  if valid_602359 != nil:
    section.add "X-Amz-Algorithm", valid_602359
  var valid_602360 = header.getOrDefault("X-Amz-Signature")
  valid_602360 = validateParameter(valid_602360, JString, required = false,
                                 default = nil)
  if valid_602360 != nil:
    section.add "X-Amz-Signature", valid_602360
  var valid_602361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602361 = validateParameter(valid_602361, JString, required = false,
                                 default = nil)
  if valid_602361 != nil:
    section.add "X-Amz-SignedHeaders", valid_602361
  var valid_602362 = header.getOrDefault("X-Amz-Credential")
  valid_602362 = validateParameter(valid_602362, JString, required = false,
                                 default = nil)
  if valid_602362 != nil:
    section.add "X-Amz-Credential", valid_602362
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602363: Call_GetDeleteServiceLinkedRole_602350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602363.validator(path, query, header, formData, body)
  let scheme = call_602363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602363.url(scheme.get, call_602363.host, call_602363.base,
                         call_602363.route, valid.getOrDefault("path"))
  result = hook(call_602363, url, valid)

proc call*(call_602364: Call_GetDeleteServiceLinkedRole_602350; RoleName: string;
          Action: string = "DeleteServiceLinkedRole"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceLinkedRole
  ## <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> API operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">AWS documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles Terms and Concepts: AWS Service-Linked Role</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the service-linked role to be deleted.
  ##   Version: string (required)
  var query_602365 = newJObject()
  add(query_602365, "Action", newJString(Action))
  add(query_602365, "RoleName", newJString(RoleName))
  add(query_602365, "Version", newJString(Version))
  result = call_602364.call(nil, query_602365, nil, nil, nil)

var getDeleteServiceLinkedRole* = Call_GetDeleteServiceLinkedRole_602350(
    name: "getDeleteServiceLinkedRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceLinkedRole",
    validator: validate_GetDeleteServiceLinkedRole_602351, base: "/",
    url: url_GetDeleteServiceLinkedRole_602352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteServiceSpecificCredential_602400 = ref object of OpenApiRestCall_600426
proc url_PostDeleteServiceSpecificCredential_602402(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteServiceSpecificCredential_602401(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602403 = query.getOrDefault("Action")
  valid_602403 = validateParameter(valid_602403, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_602403 != nil:
    section.add "Action", valid_602403
  var valid_602404 = query.getOrDefault("Version")
  valid_602404 = validateParameter(valid_602404, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602404 != nil:
    section.add "Version", valid_602404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602405 = header.getOrDefault("X-Amz-Date")
  valid_602405 = validateParameter(valid_602405, JString, required = false,
                                 default = nil)
  if valid_602405 != nil:
    section.add "X-Amz-Date", valid_602405
  var valid_602406 = header.getOrDefault("X-Amz-Security-Token")
  valid_602406 = validateParameter(valid_602406, JString, required = false,
                                 default = nil)
  if valid_602406 != nil:
    section.add "X-Amz-Security-Token", valid_602406
  var valid_602407 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602407 = validateParameter(valid_602407, JString, required = false,
                                 default = nil)
  if valid_602407 != nil:
    section.add "X-Amz-Content-Sha256", valid_602407
  var valid_602408 = header.getOrDefault("X-Amz-Algorithm")
  valid_602408 = validateParameter(valid_602408, JString, required = false,
                                 default = nil)
  if valid_602408 != nil:
    section.add "X-Amz-Algorithm", valid_602408
  var valid_602409 = header.getOrDefault("X-Amz-Signature")
  valid_602409 = validateParameter(valid_602409, JString, required = false,
                                 default = nil)
  if valid_602409 != nil:
    section.add "X-Amz-Signature", valid_602409
  var valid_602410 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602410 = validateParameter(valid_602410, JString, required = false,
                                 default = nil)
  if valid_602410 != nil:
    section.add "X-Amz-SignedHeaders", valid_602410
  var valid_602411 = header.getOrDefault("X-Amz-Credential")
  valid_602411 = validateParameter(valid_602411, JString, required = false,
                                 default = nil)
  if valid_602411 != nil:
    section.add "X-Amz-Credential", valid_602411
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_602412 = formData.getOrDefault("UserName")
  valid_602412 = validateParameter(valid_602412, JString, required = false,
                                 default = nil)
  if valid_602412 != nil:
    section.add "UserName", valid_602412
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_602413 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_602413 = validateParameter(valid_602413, JString, required = true,
                                 default = nil)
  if valid_602413 != nil:
    section.add "ServiceSpecificCredentialId", valid_602413
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602414: Call_PostDeleteServiceSpecificCredential_602400;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_602414.validator(path, query, header, formData, body)
  let scheme = call_602414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602414.url(scheme.get, call_602414.host, call_602414.base,
                         call_602414.route, valid.getOrDefault("path"))
  result = hook(call_602414, url, valid)

proc call*(call_602415: Call_PostDeleteServiceSpecificCredential_602400;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602416 = newJObject()
  var formData_602417 = newJObject()
  add(formData_602417, "UserName", newJString(UserName))
  add(formData_602417, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_602416, "Action", newJString(Action))
  add(query_602416, "Version", newJString(Version))
  result = call_602415.call(nil, query_602416, nil, formData_602417, nil)

var postDeleteServiceSpecificCredential* = Call_PostDeleteServiceSpecificCredential_602400(
    name: "postDeleteServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_PostDeleteServiceSpecificCredential_602401, base: "/",
    url: url_PostDeleteServiceSpecificCredential_602402,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteServiceSpecificCredential_602383 = ref object of OpenApiRestCall_600426
proc url_GetDeleteServiceSpecificCredential_602385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteServiceSpecificCredential_602384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified service-specific credential.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602386 = query.getOrDefault("UserName")
  valid_602386 = validateParameter(valid_602386, JString, required = false,
                                 default = nil)
  if valid_602386 != nil:
    section.add "UserName", valid_602386
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602387 = query.getOrDefault("Action")
  valid_602387 = validateParameter(valid_602387, JString, required = true, default = newJString(
      "DeleteServiceSpecificCredential"))
  if valid_602387 != nil:
    section.add "Action", valid_602387
  var valid_602388 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_602388 = validateParameter(valid_602388, JString, required = true,
                                 default = nil)
  if valid_602388 != nil:
    section.add "ServiceSpecificCredentialId", valid_602388
  var valid_602389 = query.getOrDefault("Version")
  valid_602389 = validateParameter(valid_602389, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602389 != nil:
    section.add "Version", valid_602389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602390 = header.getOrDefault("X-Amz-Date")
  valid_602390 = validateParameter(valid_602390, JString, required = false,
                                 default = nil)
  if valid_602390 != nil:
    section.add "X-Amz-Date", valid_602390
  var valid_602391 = header.getOrDefault("X-Amz-Security-Token")
  valid_602391 = validateParameter(valid_602391, JString, required = false,
                                 default = nil)
  if valid_602391 != nil:
    section.add "X-Amz-Security-Token", valid_602391
  var valid_602392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602392 = validateParameter(valid_602392, JString, required = false,
                                 default = nil)
  if valid_602392 != nil:
    section.add "X-Amz-Content-Sha256", valid_602392
  var valid_602393 = header.getOrDefault("X-Amz-Algorithm")
  valid_602393 = validateParameter(valid_602393, JString, required = false,
                                 default = nil)
  if valid_602393 != nil:
    section.add "X-Amz-Algorithm", valid_602393
  var valid_602394 = header.getOrDefault("X-Amz-Signature")
  valid_602394 = validateParameter(valid_602394, JString, required = false,
                                 default = nil)
  if valid_602394 != nil:
    section.add "X-Amz-Signature", valid_602394
  var valid_602395 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602395 = validateParameter(valid_602395, JString, required = false,
                                 default = nil)
  if valid_602395 != nil:
    section.add "X-Amz-SignedHeaders", valid_602395
  var valid_602396 = header.getOrDefault("X-Amz-Credential")
  valid_602396 = validateParameter(valid_602396, JString, required = false,
                                 default = nil)
  if valid_602396 != nil:
    section.add "X-Amz-Credential", valid_602396
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602397: Call_GetDeleteServiceSpecificCredential_602383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes the specified service-specific credential.
  ## 
  let valid = call_602397.validator(path, query, header, formData, body)
  let scheme = call_602397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602397.url(scheme.get, call_602397.host, call_602397.base,
                         call_602397.route, valid.getOrDefault("path"))
  result = hook(call_602397, url, valid)

proc call*(call_602398: Call_GetDeleteServiceSpecificCredential_602383;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "DeleteServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteServiceSpecificCredential
  ## Deletes the specified service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_602399 = newJObject()
  add(query_602399, "UserName", newJString(UserName))
  add(query_602399, "Action", newJString(Action))
  add(query_602399, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_602399, "Version", newJString(Version))
  result = call_602398.call(nil, query_602399, nil, nil, nil)

var getDeleteServiceSpecificCredential* = Call_GetDeleteServiceSpecificCredential_602383(
    name: "getDeleteServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteServiceSpecificCredential",
    validator: validate_GetDeleteServiceSpecificCredential_602384, base: "/",
    url: url_GetDeleteServiceSpecificCredential_602385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSigningCertificate_602435 = ref object of OpenApiRestCall_600426
proc url_PostDeleteSigningCertificate_602437(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSigningCertificate_602436(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602438 = query.getOrDefault("Action")
  valid_602438 = validateParameter(valid_602438, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_602438 != nil:
    section.add "Action", valid_602438
  var valid_602439 = query.getOrDefault("Version")
  valid_602439 = validateParameter(valid_602439, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602439 != nil:
    section.add "Version", valid_602439
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602440 = header.getOrDefault("X-Amz-Date")
  valid_602440 = validateParameter(valid_602440, JString, required = false,
                                 default = nil)
  if valid_602440 != nil:
    section.add "X-Amz-Date", valid_602440
  var valid_602441 = header.getOrDefault("X-Amz-Security-Token")
  valid_602441 = validateParameter(valid_602441, JString, required = false,
                                 default = nil)
  if valid_602441 != nil:
    section.add "X-Amz-Security-Token", valid_602441
  var valid_602442 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602442 = validateParameter(valid_602442, JString, required = false,
                                 default = nil)
  if valid_602442 != nil:
    section.add "X-Amz-Content-Sha256", valid_602442
  var valid_602443 = header.getOrDefault("X-Amz-Algorithm")
  valid_602443 = validateParameter(valid_602443, JString, required = false,
                                 default = nil)
  if valid_602443 != nil:
    section.add "X-Amz-Algorithm", valid_602443
  var valid_602444 = header.getOrDefault("X-Amz-Signature")
  valid_602444 = validateParameter(valid_602444, JString, required = false,
                                 default = nil)
  if valid_602444 != nil:
    section.add "X-Amz-Signature", valid_602444
  var valid_602445 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602445 = validateParameter(valid_602445, JString, required = false,
                                 default = nil)
  if valid_602445 != nil:
    section.add "X-Amz-SignedHeaders", valid_602445
  var valid_602446 = header.getOrDefault("X-Amz-Credential")
  valid_602446 = validateParameter(valid_602446, JString, required = false,
                                 default = nil)
  if valid_602446 != nil:
    section.add "X-Amz-Credential", valid_602446
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  section = newJObject()
  var valid_602447 = formData.getOrDefault("UserName")
  valid_602447 = validateParameter(valid_602447, JString, required = false,
                                 default = nil)
  if valid_602447 != nil:
    section.add "UserName", valid_602447
  assert formData != nil,
        "formData argument is necessary due to required `CertificateId` field"
  var valid_602448 = formData.getOrDefault("CertificateId")
  valid_602448 = validateParameter(valid_602448, JString, required = true,
                                 default = nil)
  if valid_602448 != nil:
    section.add "CertificateId", valid_602448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602449: Call_PostDeleteSigningCertificate_602435; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_602449.validator(path, query, header, formData, body)
  let scheme = call_602449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602449.url(scheme.get, call_602449.host, call_602449.base,
                         call_602449.route, valid.getOrDefault("path"))
  result = hook(call_602449, url, valid)

proc call*(call_602450: Call_PostDeleteSigningCertificate_602435;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602451 = newJObject()
  var formData_602452 = newJObject()
  add(formData_602452, "UserName", newJString(UserName))
  add(formData_602452, "CertificateId", newJString(CertificateId))
  add(query_602451, "Action", newJString(Action))
  add(query_602451, "Version", newJString(Version))
  result = call_602450.call(nil, query_602451, nil, formData_602452, nil)

var postDeleteSigningCertificate* = Call_PostDeleteSigningCertificate_602435(
    name: "postDeleteSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_PostDeleteSigningCertificate_602436, base: "/",
    url: url_PostDeleteSigningCertificate_602437,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSigningCertificate_602418 = ref object of OpenApiRestCall_600426
proc url_GetDeleteSigningCertificate_602420(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSigningCertificate_602419(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateId` field"
  var valid_602421 = query.getOrDefault("CertificateId")
  valid_602421 = validateParameter(valid_602421, JString, required = true,
                                 default = nil)
  if valid_602421 != nil:
    section.add "CertificateId", valid_602421
  var valid_602422 = query.getOrDefault("UserName")
  valid_602422 = validateParameter(valid_602422, JString, required = false,
                                 default = nil)
  if valid_602422 != nil:
    section.add "UserName", valid_602422
  var valid_602423 = query.getOrDefault("Action")
  valid_602423 = validateParameter(valid_602423, JString, required = true, default = newJString(
      "DeleteSigningCertificate"))
  if valid_602423 != nil:
    section.add "Action", valid_602423
  var valid_602424 = query.getOrDefault("Version")
  valid_602424 = validateParameter(valid_602424, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602424 != nil:
    section.add "Version", valid_602424
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602425 = header.getOrDefault("X-Amz-Date")
  valid_602425 = validateParameter(valid_602425, JString, required = false,
                                 default = nil)
  if valid_602425 != nil:
    section.add "X-Amz-Date", valid_602425
  var valid_602426 = header.getOrDefault("X-Amz-Security-Token")
  valid_602426 = validateParameter(valid_602426, JString, required = false,
                                 default = nil)
  if valid_602426 != nil:
    section.add "X-Amz-Security-Token", valid_602426
  var valid_602427 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602427 = validateParameter(valid_602427, JString, required = false,
                                 default = nil)
  if valid_602427 != nil:
    section.add "X-Amz-Content-Sha256", valid_602427
  var valid_602428 = header.getOrDefault("X-Amz-Algorithm")
  valid_602428 = validateParameter(valid_602428, JString, required = false,
                                 default = nil)
  if valid_602428 != nil:
    section.add "X-Amz-Algorithm", valid_602428
  var valid_602429 = header.getOrDefault("X-Amz-Signature")
  valid_602429 = validateParameter(valid_602429, JString, required = false,
                                 default = nil)
  if valid_602429 != nil:
    section.add "X-Amz-Signature", valid_602429
  var valid_602430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602430 = validateParameter(valid_602430, JString, required = false,
                                 default = nil)
  if valid_602430 != nil:
    section.add "X-Amz-SignedHeaders", valid_602430
  var valid_602431 = header.getOrDefault("X-Amz-Credential")
  valid_602431 = validateParameter(valid_602431, JString, required = false,
                                 default = nil)
  if valid_602431 != nil:
    section.add "X-Amz-Credential", valid_602431
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602432: Call_GetDeleteSigningCertificate_602418; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ## 
  let valid = call_602432.validator(path, query, header, formData, body)
  let scheme = call_602432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602432.url(scheme.get, call_602432.host, call_602432.base,
                         call_602432.route, valid.getOrDefault("path"))
  result = hook(call_602432, url, valid)

proc call*(call_602433: Call_GetDeleteSigningCertificate_602418;
          CertificateId: string; UserName: string = "";
          Action: string = "DeleteSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteSigningCertificate
  ## <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated IAM users.</p>
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602434 = newJObject()
  add(query_602434, "CertificateId", newJString(CertificateId))
  add(query_602434, "UserName", newJString(UserName))
  add(query_602434, "Action", newJString(Action))
  add(query_602434, "Version", newJString(Version))
  result = call_602433.call(nil, query_602434, nil, nil, nil)

var getDeleteSigningCertificate* = Call_GetDeleteSigningCertificate_602418(
    name: "getDeleteSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteSigningCertificate",
    validator: validate_GetDeleteSigningCertificate_602419, base: "/",
    url: url_GetDeleteSigningCertificate_602420,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUser_602469 = ref object of OpenApiRestCall_600426
proc url_PostDeleteUser_602471(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUser_602470(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602472 = query.getOrDefault("Action")
  valid_602472 = validateParameter(valid_602472, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_602472 != nil:
    section.add "Action", valid_602472
  var valid_602473 = query.getOrDefault("Version")
  valid_602473 = validateParameter(valid_602473, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602473 != nil:
    section.add "Version", valid_602473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602474 = header.getOrDefault("X-Amz-Date")
  valid_602474 = validateParameter(valid_602474, JString, required = false,
                                 default = nil)
  if valid_602474 != nil:
    section.add "X-Amz-Date", valid_602474
  var valid_602475 = header.getOrDefault("X-Amz-Security-Token")
  valid_602475 = validateParameter(valid_602475, JString, required = false,
                                 default = nil)
  if valid_602475 != nil:
    section.add "X-Amz-Security-Token", valid_602475
  var valid_602476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602476 = validateParameter(valid_602476, JString, required = false,
                                 default = nil)
  if valid_602476 != nil:
    section.add "X-Amz-Content-Sha256", valid_602476
  var valid_602477 = header.getOrDefault("X-Amz-Algorithm")
  valid_602477 = validateParameter(valid_602477, JString, required = false,
                                 default = nil)
  if valid_602477 != nil:
    section.add "X-Amz-Algorithm", valid_602477
  var valid_602478 = header.getOrDefault("X-Amz-Signature")
  valid_602478 = validateParameter(valid_602478, JString, required = false,
                                 default = nil)
  if valid_602478 != nil:
    section.add "X-Amz-Signature", valid_602478
  var valid_602479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602479 = validateParameter(valid_602479, JString, required = false,
                                 default = nil)
  if valid_602479 != nil:
    section.add "X-Amz-SignedHeaders", valid_602479
  var valid_602480 = header.getOrDefault("X-Amz-Credential")
  valid_602480 = validateParameter(valid_602480, JString, required = false,
                                 default = nil)
  if valid_602480 != nil:
    section.add "X-Amz-Credential", valid_602480
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_602481 = formData.getOrDefault("UserName")
  valid_602481 = validateParameter(valid_602481, JString, required = true,
                                 default = nil)
  if valid_602481 != nil:
    section.add "UserName", valid_602481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602482: Call_PostDeleteUser_602469; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_602482.validator(path, query, header, formData, body)
  let scheme = call_602482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602482.url(scheme.get, call_602482.host, call_602482.base,
                         call_602482.route, valid.getOrDefault("path"))
  result = hook(call_602482, url, valid)

proc call*(call_602483: Call_PostDeleteUser_602469; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## postDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602484 = newJObject()
  var formData_602485 = newJObject()
  add(formData_602485, "UserName", newJString(UserName))
  add(query_602484, "Action", newJString(Action))
  add(query_602484, "Version", newJString(Version))
  result = call_602483.call(nil, query_602484, nil, formData_602485, nil)

var postDeleteUser* = Call_PostDeleteUser_602469(name: "postDeleteUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_PostDeleteUser_602470,
    base: "/", url: url_PostDeleteUser_602471, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUser_602453 = ref object of OpenApiRestCall_600426
proc url_GetDeleteUser_602455(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUser_602454(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_602456 = query.getOrDefault("UserName")
  valid_602456 = validateParameter(valid_602456, JString, required = true,
                                 default = nil)
  if valid_602456 != nil:
    section.add "UserName", valid_602456
  var valid_602457 = query.getOrDefault("Action")
  valid_602457 = validateParameter(valid_602457, JString, required = true,
                                 default = newJString("DeleteUser"))
  if valid_602457 != nil:
    section.add "Action", valid_602457
  var valid_602458 = query.getOrDefault("Version")
  valid_602458 = validateParameter(valid_602458, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602458 != nil:
    section.add "Version", valid_602458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602459 = header.getOrDefault("X-Amz-Date")
  valid_602459 = validateParameter(valid_602459, JString, required = false,
                                 default = nil)
  if valid_602459 != nil:
    section.add "X-Amz-Date", valid_602459
  var valid_602460 = header.getOrDefault("X-Amz-Security-Token")
  valid_602460 = validateParameter(valid_602460, JString, required = false,
                                 default = nil)
  if valid_602460 != nil:
    section.add "X-Amz-Security-Token", valid_602460
  var valid_602461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602461 = validateParameter(valid_602461, JString, required = false,
                                 default = nil)
  if valid_602461 != nil:
    section.add "X-Amz-Content-Sha256", valid_602461
  var valid_602462 = header.getOrDefault("X-Amz-Algorithm")
  valid_602462 = validateParameter(valid_602462, JString, required = false,
                                 default = nil)
  if valid_602462 != nil:
    section.add "X-Amz-Algorithm", valid_602462
  var valid_602463 = header.getOrDefault("X-Amz-Signature")
  valid_602463 = validateParameter(valid_602463, JString, required = false,
                                 default = nil)
  if valid_602463 != nil:
    section.add "X-Amz-Signature", valid_602463
  var valid_602464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602464 = validateParameter(valid_602464, JString, required = false,
                                 default = nil)
  if valid_602464 != nil:
    section.add "X-Amz-SignedHeaders", valid_602464
  var valid_602465 = header.getOrDefault("X-Amz-Credential")
  valid_602465 = validateParameter(valid_602465, JString, required = false,
                                 default = nil)
  if valid_602465 != nil:
    section.add "X-Amz-Credential", valid_602465
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602466: Call_GetDeleteUser_602453; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ## 
  let valid = call_602466.validator(path, query, header, formData, body)
  let scheme = call_602466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602466.url(scheme.get, call_602466.host, call_602466.base,
                         call_602466.route, valid.getOrDefault("path"))
  result = hook(call_602466, url, valid)

proc call*(call_602467: Call_GetDeleteUser_602453; UserName: string;
          Action: string = "DeleteUser"; Version: string = "2010-05-08"): Recallable =
  ## getDeleteUser
  ## <p>Deletes the specified IAM user. Unlike the AWS Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM User</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602468 = newJObject()
  add(query_602468, "UserName", newJString(UserName))
  add(query_602468, "Action", newJString(Action))
  add(query_602468, "Version", newJString(Version))
  result = call_602467.call(nil, query_602468, nil, nil, nil)

var getDeleteUser* = Call_GetDeleteUser_602453(name: "getDeleteUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=DeleteUser", validator: validate_GetDeleteUser_602454,
    base: "/", url: url_GetDeleteUser_602455, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPermissionsBoundary_602502 = ref object of OpenApiRestCall_600426
proc url_PostDeleteUserPermissionsBoundary_602504(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPermissionsBoundary_602503(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602505 = query.getOrDefault("Action")
  valid_602505 = validateParameter(valid_602505, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_602505 != nil:
    section.add "Action", valid_602505
  var valid_602506 = query.getOrDefault("Version")
  valid_602506 = validateParameter(valid_602506, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602506 != nil:
    section.add "Version", valid_602506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602507 = header.getOrDefault("X-Amz-Date")
  valid_602507 = validateParameter(valid_602507, JString, required = false,
                                 default = nil)
  if valid_602507 != nil:
    section.add "X-Amz-Date", valid_602507
  var valid_602508 = header.getOrDefault("X-Amz-Security-Token")
  valid_602508 = validateParameter(valid_602508, JString, required = false,
                                 default = nil)
  if valid_602508 != nil:
    section.add "X-Amz-Security-Token", valid_602508
  var valid_602509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602509 = validateParameter(valid_602509, JString, required = false,
                                 default = nil)
  if valid_602509 != nil:
    section.add "X-Amz-Content-Sha256", valid_602509
  var valid_602510 = header.getOrDefault("X-Amz-Algorithm")
  valid_602510 = validateParameter(valid_602510, JString, required = false,
                                 default = nil)
  if valid_602510 != nil:
    section.add "X-Amz-Algorithm", valid_602510
  var valid_602511 = header.getOrDefault("X-Amz-Signature")
  valid_602511 = validateParameter(valid_602511, JString, required = false,
                                 default = nil)
  if valid_602511 != nil:
    section.add "X-Amz-Signature", valid_602511
  var valid_602512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602512 = validateParameter(valid_602512, JString, required = false,
                                 default = nil)
  if valid_602512 != nil:
    section.add "X-Amz-SignedHeaders", valid_602512
  var valid_602513 = header.getOrDefault("X-Amz-Credential")
  valid_602513 = validateParameter(valid_602513, JString, required = false,
                                 default = nil)
  if valid_602513 != nil:
    section.add "X-Amz-Credential", valid_602513
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_602514 = formData.getOrDefault("UserName")
  valid_602514 = validateParameter(valid_602514, JString, required = true,
                                 default = nil)
  if valid_602514 != nil:
    section.add "UserName", valid_602514
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602515: Call_PostDeleteUserPermissionsBoundary_602502;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_602515.validator(path, query, header, formData, body)
  let scheme = call_602515.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602515.url(scheme.get, call_602515.host, call_602515.base,
                         call_602515.route, valid.getOrDefault("path"))
  result = hook(call_602515, url, valid)

proc call*(call_602516: Call_PostDeleteUserPermissionsBoundary_602502;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602517 = newJObject()
  var formData_602518 = newJObject()
  add(formData_602518, "UserName", newJString(UserName))
  add(query_602517, "Action", newJString(Action))
  add(query_602517, "Version", newJString(Version))
  result = call_602516.call(nil, query_602517, nil, formData_602518, nil)

var postDeleteUserPermissionsBoundary* = Call_PostDeleteUserPermissionsBoundary_602502(
    name: "postDeleteUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_PostDeleteUserPermissionsBoundary_602503, base: "/",
    url: url_PostDeleteUserPermissionsBoundary_602504,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPermissionsBoundary_602486 = ref object of OpenApiRestCall_600426
proc url_GetDeleteUserPermissionsBoundary_602488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPermissionsBoundary_602487(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_602489 = query.getOrDefault("UserName")
  valid_602489 = validateParameter(valid_602489, JString, required = true,
                                 default = nil)
  if valid_602489 != nil:
    section.add "UserName", valid_602489
  var valid_602490 = query.getOrDefault("Action")
  valid_602490 = validateParameter(valid_602490, JString, required = true, default = newJString(
      "DeleteUserPermissionsBoundary"))
  if valid_602490 != nil:
    section.add "Action", valid_602490
  var valid_602491 = query.getOrDefault("Version")
  valid_602491 = validateParameter(valid_602491, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602491 != nil:
    section.add "Version", valid_602491
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602492 = header.getOrDefault("X-Amz-Date")
  valid_602492 = validateParameter(valid_602492, JString, required = false,
                                 default = nil)
  if valid_602492 != nil:
    section.add "X-Amz-Date", valid_602492
  var valid_602493 = header.getOrDefault("X-Amz-Security-Token")
  valid_602493 = validateParameter(valid_602493, JString, required = false,
                                 default = nil)
  if valid_602493 != nil:
    section.add "X-Amz-Security-Token", valid_602493
  var valid_602494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602494 = validateParameter(valid_602494, JString, required = false,
                                 default = nil)
  if valid_602494 != nil:
    section.add "X-Amz-Content-Sha256", valid_602494
  var valid_602495 = header.getOrDefault("X-Amz-Algorithm")
  valid_602495 = validateParameter(valid_602495, JString, required = false,
                                 default = nil)
  if valid_602495 != nil:
    section.add "X-Amz-Algorithm", valid_602495
  var valid_602496 = header.getOrDefault("X-Amz-Signature")
  valid_602496 = validateParameter(valid_602496, JString, required = false,
                                 default = nil)
  if valid_602496 != nil:
    section.add "X-Amz-Signature", valid_602496
  var valid_602497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602497 = validateParameter(valid_602497, JString, required = false,
                                 default = nil)
  if valid_602497 != nil:
    section.add "X-Amz-SignedHeaders", valid_602497
  var valid_602498 = header.getOrDefault("X-Amz-Credential")
  valid_602498 = validateParameter(valid_602498, JString, required = false,
                                 default = nil)
  if valid_602498 != nil:
    section.add "X-Amz-Credential", valid_602498
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602499: Call_GetDeleteUserPermissionsBoundary_602486;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ## 
  let valid = call_602499.validator(path, query, header, formData, body)
  let scheme = call_602499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602499.url(scheme.get, call_602499.host, call_602499.base,
                         call_602499.route, valid.getOrDefault("path"))
  result = hook(call_602499, url, valid)

proc call*(call_602500: Call_GetDeleteUserPermissionsBoundary_602486;
          UserName: string; Action: string = "DeleteUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPermissionsBoundary
  ## <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602501 = newJObject()
  add(query_602501, "UserName", newJString(UserName))
  add(query_602501, "Action", newJString(Action))
  add(query_602501, "Version", newJString(Version))
  result = call_602500.call(nil, query_602501, nil, nil, nil)

var getDeleteUserPermissionsBoundary* = Call_GetDeleteUserPermissionsBoundary_602486(
    name: "getDeleteUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPermissionsBoundary",
    validator: validate_GetDeleteUserPermissionsBoundary_602487, base: "/",
    url: url_GetDeleteUserPermissionsBoundary_602488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteUserPolicy_602536 = ref object of OpenApiRestCall_600426
proc url_PostDeleteUserPolicy_602538(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteUserPolicy_602537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602539 = query.getOrDefault("Action")
  valid_602539 = validateParameter(valid_602539, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_602539 != nil:
    section.add "Action", valid_602539
  var valid_602540 = query.getOrDefault("Version")
  valid_602540 = validateParameter(valid_602540, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602540 != nil:
    section.add "Version", valid_602540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602541 = header.getOrDefault("X-Amz-Date")
  valid_602541 = validateParameter(valid_602541, JString, required = false,
                                 default = nil)
  if valid_602541 != nil:
    section.add "X-Amz-Date", valid_602541
  var valid_602542 = header.getOrDefault("X-Amz-Security-Token")
  valid_602542 = validateParameter(valid_602542, JString, required = false,
                                 default = nil)
  if valid_602542 != nil:
    section.add "X-Amz-Security-Token", valid_602542
  var valid_602543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602543 = validateParameter(valid_602543, JString, required = false,
                                 default = nil)
  if valid_602543 != nil:
    section.add "X-Amz-Content-Sha256", valid_602543
  var valid_602544 = header.getOrDefault("X-Amz-Algorithm")
  valid_602544 = validateParameter(valid_602544, JString, required = false,
                                 default = nil)
  if valid_602544 != nil:
    section.add "X-Amz-Algorithm", valid_602544
  var valid_602545 = header.getOrDefault("X-Amz-Signature")
  valid_602545 = validateParameter(valid_602545, JString, required = false,
                                 default = nil)
  if valid_602545 != nil:
    section.add "X-Amz-Signature", valid_602545
  var valid_602546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602546 = validateParameter(valid_602546, JString, required = false,
                                 default = nil)
  if valid_602546 != nil:
    section.add "X-Amz-SignedHeaders", valid_602546
  var valid_602547 = header.getOrDefault("X-Amz-Credential")
  valid_602547 = validateParameter(valid_602547, JString, required = false,
                                 default = nil)
  if valid_602547 != nil:
    section.add "X-Amz-Credential", valid_602547
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_602548 = formData.getOrDefault("PolicyName")
  valid_602548 = validateParameter(valid_602548, JString, required = true,
                                 default = nil)
  if valid_602548 != nil:
    section.add "PolicyName", valid_602548
  var valid_602549 = formData.getOrDefault("UserName")
  valid_602549 = validateParameter(valid_602549, JString, required = true,
                                 default = nil)
  if valid_602549 != nil:
    section.add "UserName", valid_602549
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602550: Call_PostDeleteUserPolicy_602536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602550.validator(path, query, header, formData, body)
  let scheme = call_602550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602550.url(scheme.get, call_602550.host, call_602550.base,
                         call_602550.route, valid.getOrDefault("path"))
  result = hook(call_602550, url, valid)

proc call*(call_602551: Call_PostDeleteUserPolicy_602536; PolicyName: string;
          UserName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602552 = newJObject()
  var formData_602553 = newJObject()
  add(formData_602553, "PolicyName", newJString(PolicyName))
  add(formData_602553, "UserName", newJString(UserName))
  add(query_602552, "Action", newJString(Action))
  add(query_602552, "Version", newJString(Version))
  result = call_602551.call(nil, query_602552, nil, formData_602553, nil)

var postDeleteUserPolicy* = Call_PostDeleteUserPolicy_602536(
    name: "postDeleteUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_PostDeleteUserPolicy_602537, base: "/",
    url: url_PostDeleteUserPolicy_602538, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteUserPolicy_602519 = ref object of OpenApiRestCall_600426
proc url_GetDeleteUserPolicy_602521(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteUserPolicy_602520(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_602522 = query.getOrDefault("UserName")
  valid_602522 = validateParameter(valid_602522, JString, required = true,
                                 default = nil)
  if valid_602522 != nil:
    section.add "UserName", valid_602522
  var valid_602523 = query.getOrDefault("Action")
  valid_602523 = validateParameter(valid_602523, JString, required = true,
                                 default = newJString("DeleteUserPolicy"))
  if valid_602523 != nil:
    section.add "Action", valid_602523
  var valid_602524 = query.getOrDefault("Version")
  valid_602524 = validateParameter(valid_602524, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602524 != nil:
    section.add "Version", valid_602524
  var valid_602525 = query.getOrDefault("PolicyName")
  valid_602525 = validateParameter(valid_602525, JString, required = true,
                                 default = nil)
  if valid_602525 != nil:
    section.add "PolicyName", valid_602525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602526 = header.getOrDefault("X-Amz-Date")
  valid_602526 = validateParameter(valid_602526, JString, required = false,
                                 default = nil)
  if valid_602526 != nil:
    section.add "X-Amz-Date", valid_602526
  var valid_602527 = header.getOrDefault("X-Amz-Security-Token")
  valid_602527 = validateParameter(valid_602527, JString, required = false,
                                 default = nil)
  if valid_602527 != nil:
    section.add "X-Amz-Security-Token", valid_602527
  var valid_602528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602528 = validateParameter(valid_602528, JString, required = false,
                                 default = nil)
  if valid_602528 != nil:
    section.add "X-Amz-Content-Sha256", valid_602528
  var valid_602529 = header.getOrDefault("X-Amz-Algorithm")
  valid_602529 = validateParameter(valid_602529, JString, required = false,
                                 default = nil)
  if valid_602529 != nil:
    section.add "X-Amz-Algorithm", valid_602529
  var valid_602530 = header.getOrDefault("X-Amz-Signature")
  valid_602530 = validateParameter(valid_602530, JString, required = false,
                                 default = nil)
  if valid_602530 != nil:
    section.add "X-Amz-Signature", valid_602530
  var valid_602531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602531 = validateParameter(valid_602531, JString, required = false,
                                 default = nil)
  if valid_602531 != nil:
    section.add "X-Amz-SignedHeaders", valid_602531
  var valid_602532 = header.getOrDefault("X-Amz-Credential")
  valid_602532 = validateParameter(valid_602532, JString, required = false,
                                 default = nil)
  if valid_602532 != nil:
    section.add "X-Amz-Credential", valid_602532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602533: Call_GetDeleteUserPolicy_602519; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602533.validator(path, query, header, formData, body)
  let scheme = call_602533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602533.url(scheme.get, call_602533.host, call_602533.base,
                         call_602533.route, valid.getOrDefault("path"))
  result = hook(call_602533, url, valid)

proc call*(call_602534: Call_GetDeleteUserPolicy_602519; UserName: string;
          PolicyName: string; Action: string = "DeleteUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteUserPolicy
  ## <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_602535 = newJObject()
  add(query_602535, "UserName", newJString(UserName))
  add(query_602535, "Action", newJString(Action))
  add(query_602535, "Version", newJString(Version))
  add(query_602535, "PolicyName", newJString(PolicyName))
  result = call_602534.call(nil, query_602535, nil, nil, nil)

var getDeleteUserPolicy* = Call_GetDeleteUserPolicy_602519(
    name: "getDeleteUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteUserPolicy",
    validator: validate_GetDeleteUserPolicy_602520, base: "/",
    url: url_GetDeleteUserPolicy_602521, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteVirtualMFADevice_602570 = ref object of OpenApiRestCall_600426
proc url_PostDeleteVirtualMFADevice_602572(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteVirtualMFADevice_602571(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602573 = query.getOrDefault("Action")
  valid_602573 = validateParameter(valid_602573, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_602573 != nil:
    section.add "Action", valid_602573
  var valid_602574 = query.getOrDefault("Version")
  valid_602574 = validateParameter(valid_602574, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602574 != nil:
    section.add "Version", valid_602574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602575 = header.getOrDefault("X-Amz-Date")
  valid_602575 = validateParameter(valid_602575, JString, required = false,
                                 default = nil)
  if valid_602575 != nil:
    section.add "X-Amz-Date", valid_602575
  var valid_602576 = header.getOrDefault("X-Amz-Security-Token")
  valid_602576 = validateParameter(valid_602576, JString, required = false,
                                 default = nil)
  if valid_602576 != nil:
    section.add "X-Amz-Security-Token", valid_602576
  var valid_602577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602577 = validateParameter(valid_602577, JString, required = false,
                                 default = nil)
  if valid_602577 != nil:
    section.add "X-Amz-Content-Sha256", valid_602577
  var valid_602578 = header.getOrDefault("X-Amz-Algorithm")
  valid_602578 = validateParameter(valid_602578, JString, required = false,
                                 default = nil)
  if valid_602578 != nil:
    section.add "X-Amz-Algorithm", valid_602578
  var valid_602579 = header.getOrDefault("X-Amz-Signature")
  valid_602579 = validateParameter(valid_602579, JString, required = false,
                                 default = nil)
  if valid_602579 != nil:
    section.add "X-Amz-Signature", valid_602579
  var valid_602580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602580 = validateParameter(valid_602580, JString, required = false,
                                 default = nil)
  if valid_602580 != nil:
    section.add "X-Amz-SignedHeaders", valid_602580
  var valid_602581 = header.getOrDefault("X-Amz-Credential")
  valid_602581 = validateParameter(valid_602581, JString, required = false,
                                 default = nil)
  if valid_602581 != nil:
    section.add "X-Amz-Credential", valid_602581
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_602582 = formData.getOrDefault("SerialNumber")
  valid_602582 = validateParameter(valid_602582, JString, required = true,
                                 default = nil)
  if valid_602582 != nil:
    section.add "SerialNumber", valid_602582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602583: Call_PostDeleteVirtualMFADevice_602570; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_602583.validator(path, query, header, formData, body)
  let scheme = call_602583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602583.url(scheme.get, call_602583.host, call_602583.base,
                         call_602583.route, valid.getOrDefault("path"))
  result = hook(call_602583, url, valid)

proc call*(call_602584: Call_PostDeleteVirtualMFADevice_602570;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602585 = newJObject()
  var formData_602586 = newJObject()
  add(formData_602586, "SerialNumber", newJString(SerialNumber))
  add(query_602585, "Action", newJString(Action))
  add(query_602585, "Version", newJString(Version))
  result = call_602584.call(nil, query_602585, nil, formData_602586, nil)

var postDeleteVirtualMFADevice* = Call_PostDeleteVirtualMFADevice_602570(
    name: "postDeleteVirtualMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_PostDeleteVirtualMFADevice_602571, base: "/",
    url: url_PostDeleteVirtualMFADevice_602572,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteVirtualMFADevice_602554 = ref object of OpenApiRestCall_600426
proc url_GetDeleteVirtualMFADevice_602556(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteVirtualMFADevice_602555(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_602557 = query.getOrDefault("SerialNumber")
  valid_602557 = validateParameter(valid_602557, JString, required = true,
                                 default = nil)
  if valid_602557 != nil:
    section.add "SerialNumber", valid_602557
  var valid_602558 = query.getOrDefault("Action")
  valid_602558 = validateParameter(valid_602558, JString, required = true,
                                 default = newJString("DeleteVirtualMFADevice"))
  if valid_602558 != nil:
    section.add "Action", valid_602558
  var valid_602559 = query.getOrDefault("Version")
  valid_602559 = validateParameter(valid_602559, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602559 != nil:
    section.add "Version", valid_602559
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602560 = header.getOrDefault("X-Amz-Date")
  valid_602560 = validateParameter(valid_602560, JString, required = false,
                                 default = nil)
  if valid_602560 != nil:
    section.add "X-Amz-Date", valid_602560
  var valid_602561 = header.getOrDefault("X-Amz-Security-Token")
  valid_602561 = validateParameter(valid_602561, JString, required = false,
                                 default = nil)
  if valid_602561 != nil:
    section.add "X-Amz-Security-Token", valid_602561
  var valid_602562 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602562 = validateParameter(valid_602562, JString, required = false,
                                 default = nil)
  if valid_602562 != nil:
    section.add "X-Amz-Content-Sha256", valid_602562
  var valid_602563 = header.getOrDefault("X-Amz-Algorithm")
  valid_602563 = validateParameter(valid_602563, JString, required = false,
                                 default = nil)
  if valid_602563 != nil:
    section.add "X-Amz-Algorithm", valid_602563
  var valid_602564 = header.getOrDefault("X-Amz-Signature")
  valid_602564 = validateParameter(valid_602564, JString, required = false,
                                 default = nil)
  if valid_602564 != nil:
    section.add "X-Amz-Signature", valid_602564
  var valid_602565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602565 = validateParameter(valid_602565, JString, required = false,
                                 default = nil)
  if valid_602565 != nil:
    section.add "X-Amz-SignedHeaders", valid_602565
  var valid_602566 = header.getOrDefault("X-Amz-Credential")
  valid_602566 = validateParameter(valid_602566, JString, required = false,
                                 default = nil)
  if valid_602566 != nil:
    section.add "X-Amz-Credential", valid_602566
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602567: Call_GetDeleteVirtualMFADevice_602554; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ## 
  let valid = call_602567.validator(path, query, header, formData, body)
  let scheme = call_602567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602567.url(scheme.get, call_602567.host, call_602567.base,
                         call_602567.route, valid.getOrDefault("path"))
  result = hook(call_602567, url, valid)

proc call*(call_602568: Call_GetDeleteVirtualMFADevice_602554;
          SerialNumber: string; Action: string = "DeleteVirtualMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getDeleteVirtualMFADevice
  ## <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602569 = newJObject()
  add(query_602569, "SerialNumber", newJString(SerialNumber))
  add(query_602569, "Action", newJString(Action))
  add(query_602569, "Version", newJString(Version))
  result = call_602568.call(nil, query_602569, nil, nil, nil)

var getDeleteVirtualMFADevice* = Call_GetDeleteVirtualMFADevice_602554(
    name: "getDeleteVirtualMFADevice", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DeleteVirtualMFADevice",
    validator: validate_GetDeleteVirtualMFADevice_602555, base: "/",
    url: url_GetDeleteVirtualMFADevice_602556,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachGroupPolicy_602604 = ref object of OpenApiRestCall_600426
proc url_PostDetachGroupPolicy_602606(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachGroupPolicy_602605(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602607 = query.getOrDefault("Action")
  valid_602607 = validateParameter(valid_602607, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_602607 != nil:
    section.add "Action", valid_602607
  var valid_602608 = query.getOrDefault("Version")
  valid_602608 = validateParameter(valid_602608, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602608 != nil:
    section.add "Version", valid_602608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602609 = header.getOrDefault("X-Amz-Date")
  valid_602609 = validateParameter(valid_602609, JString, required = false,
                                 default = nil)
  if valid_602609 != nil:
    section.add "X-Amz-Date", valid_602609
  var valid_602610 = header.getOrDefault("X-Amz-Security-Token")
  valid_602610 = validateParameter(valid_602610, JString, required = false,
                                 default = nil)
  if valid_602610 != nil:
    section.add "X-Amz-Security-Token", valid_602610
  var valid_602611 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602611 = validateParameter(valid_602611, JString, required = false,
                                 default = nil)
  if valid_602611 != nil:
    section.add "X-Amz-Content-Sha256", valid_602611
  var valid_602612 = header.getOrDefault("X-Amz-Algorithm")
  valid_602612 = validateParameter(valid_602612, JString, required = false,
                                 default = nil)
  if valid_602612 != nil:
    section.add "X-Amz-Algorithm", valid_602612
  var valid_602613 = header.getOrDefault("X-Amz-Signature")
  valid_602613 = validateParameter(valid_602613, JString, required = false,
                                 default = nil)
  if valid_602613 != nil:
    section.add "X-Amz-Signature", valid_602613
  var valid_602614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602614 = validateParameter(valid_602614, JString, required = false,
                                 default = nil)
  if valid_602614 != nil:
    section.add "X-Amz-SignedHeaders", valid_602614
  var valid_602615 = header.getOrDefault("X-Amz-Credential")
  valid_602615 = validateParameter(valid_602615, JString, required = false,
                                 default = nil)
  if valid_602615 != nil:
    section.add "X-Amz-Credential", valid_602615
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_602616 = formData.getOrDefault("PolicyArn")
  valid_602616 = validateParameter(valid_602616, JString, required = true,
                                 default = nil)
  if valid_602616 != nil:
    section.add "PolicyArn", valid_602616
  var valid_602617 = formData.getOrDefault("GroupName")
  valid_602617 = validateParameter(valid_602617, JString, required = true,
                                 default = nil)
  if valid_602617 != nil:
    section.add "GroupName", valid_602617
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602618: Call_PostDetachGroupPolicy_602604; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602618.validator(path, query, header, formData, body)
  let scheme = call_602618.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602618.url(scheme.get, call_602618.host, call_602618.base,
                         call_602618.route, valid.getOrDefault("path"))
  result = hook(call_602618, url, valid)

proc call*(call_602619: Call_PostDetachGroupPolicy_602604; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602620 = newJObject()
  var formData_602621 = newJObject()
  add(formData_602621, "PolicyArn", newJString(PolicyArn))
  add(formData_602621, "GroupName", newJString(GroupName))
  add(query_602620, "Action", newJString(Action))
  add(query_602620, "Version", newJString(Version))
  result = call_602619.call(nil, query_602620, nil, formData_602621, nil)

var postDetachGroupPolicy* = Call_PostDetachGroupPolicy_602604(
    name: "postDetachGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_PostDetachGroupPolicy_602605, base: "/",
    url: url_PostDetachGroupPolicy_602606, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachGroupPolicy_602587 = ref object of OpenApiRestCall_600426
proc url_GetDetachGroupPolicy_602589(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachGroupPolicy_602588(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_602590 = query.getOrDefault("PolicyArn")
  valid_602590 = validateParameter(valid_602590, JString, required = true,
                                 default = nil)
  if valid_602590 != nil:
    section.add "PolicyArn", valid_602590
  var valid_602591 = query.getOrDefault("Action")
  valid_602591 = validateParameter(valid_602591, JString, required = true,
                                 default = newJString("DetachGroupPolicy"))
  if valid_602591 != nil:
    section.add "Action", valid_602591
  var valid_602592 = query.getOrDefault("GroupName")
  valid_602592 = validateParameter(valid_602592, JString, required = true,
                                 default = nil)
  if valid_602592 != nil:
    section.add "GroupName", valid_602592
  var valid_602593 = query.getOrDefault("Version")
  valid_602593 = validateParameter(valid_602593, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602593 != nil:
    section.add "Version", valid_602593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602594 = header.getOrDefault("X-Amz-Date")
  valid_602594 = validateParameter(valid_602594, JString, required = false,
                                 default = nil)
  if valid_602594 != nil:
    section.add "X-Amz-Date", valid_602594
  var valid_602595 = header.getOrDefault("X-Amz-Security-Token")
  valid_602595 = validateParameter(valid_602595, JString, required = false,
                                 default = nil)
  if valid_602595 != nil:
    section.add "X-Amz-Security-Token", valid_602595
  var valid_602596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602596 = validateParameter(valid_602596, JString, required = false,
                                 default = nil)
  if valid_602596 != nil:
    section.add "X-Amz-Content-Sha256", valid_602596
  var valid_602597 = header.getOrDefault("X-Amz-Algorithm")
  valid_602597 = validateParameter(valid_602597, JString, required = false,
                                 default = nil)
  if valid_602597 != nil:
    section.add "X-Amz-Algorithm", valid_602597
  var valid_602598 = header.getOrDefault("X-Amz-Signature")
  valid_602598 = validateParameter(valid_602598, JString, required = false,
                                 default = nil)
  if valid_602598 != nil:
    section.add "X-Amz-Signature", valid_602598
  var valid_602599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602599 = validateParameter(valid_602599, JString, required = false,
                                 default = nil)
  if valid_602599 != nil:
    section.add "X-Amz-SignedHeaders", valid_602599
  var valid_602600 = header.getOrDefault("X-Amz-Credential")
  valid_602600 = validateParameter(valid_602600, JString, required = false,
                                 default = nil)
  if valid_602600 != nil:
    section.add "X-Amz-Credential", valid_602600
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602601: Call_GetDetachGroupPolicy_602587; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602601.validator(path, query, header, formData, body)
  let scheme = call_602601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602601.url(scheme.get, call_602601.host, call_602601.base,
                         call_602601.route, valid.getOrDefault("path"))
  result = hook(call_602601, url, valid)

proc call*(call_602602: Call_GetDetachGroupPolicy_602587; PolicyArn: string;
          GroupName: string; Action: string = "DetachGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachGroupPolicy
  ## <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_602603 = newJObject()
  add(query_602603, "PolicyArn", newJString(PolicyArn))
  add(query_602603, "Action", newJString(Action))
  add(query_602603, "GroupName", newJString(GroupName))
  add(query_602603, "Version", newJString(Version))
  result = call_602602.call(nil, query_602603, nil, nil, nil)

var getDetachGroupPolicy* = Call_GetDetachGroupPolicy_602587(
    name: "getDetachGroupPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachGroupPolicy",
    validator: validate_GetDetachGroupPolicy_602588, base: "/",
    url: url_GetDetachGroupPolicy_602589, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachRolePolicy_602639 = ref object of OpenApiRestCall_600426
proc url_PostDetachRolePolicy_602641(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachRolePolicy_602640(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602642 = query.getOrDefault("Action")
  valid_602642 = validateParameter(valid_602642, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_602642 != nil:
    section.add "Action", valid_602642
  var valid_602643 = query.getOrDefault("Version")
  valid_602643 = validateParameter(valid_602643, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602643 != nil:
    section.add "Version", valid_602643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602644 = header.getOrDefault("X-Amz-Date")
  valid_602644 = validateParameter(valid_602644, JString, required = false,
                                 default = nil)
  if valid_602644 != nil:
    section.add "X-Amz-Date", valid_602644
  var valid_602645 = header.getOrDefault("X-Amz-Security-Token")
  valid_602645 = validateParameter(valid_602645, JString, required = false,
                                 default = nil)
  if valid_602645 != nil:
    section.add "X-Amz-Security-Token", valid_602645
  var valid_602646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602646 = validateParameter(valid_602646, JString, required = false,
                                 default = nil)
  if valid_602646 != nil:
    section.add "X-Amz-Content-Sha256", valid_602646
  var valid_602647 = header.getOrDefault("X-Amz-Algorithm")
  valid_602647 = validateParameter(valid_602647, JString, required = false,
                                 default = nil)
  if valid_602647 != nil:
    section.add "X-Amz-Algorithm", valid_602647
  var valid_602648 = header.getOrDefault("X-Amz-Signature")
  valid_602648 = validateParameter(valid_602648, JString, required = false,
                                 default = nil)
  if valid_602648 != nil:
    section.add "X-Amz-Signature", valid_602648
  var valid_602649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602649 = validateParameter(valid_602649, JString, required = false,
                                 default = nil)
  if valid_602649 != nil:
    section.add "X-Amz-SignedHeaders", valid_602649
  var valid_602650 = header.getOrDefault("X-Amz-Credential")
  valid_602650 = validateParameter(valid_602650, JString, required = false,
                                 default = nil)
  if valid_602650 != nil:
    section.add "X-Amz-Credential", valid_602650
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_602651 = formData.getOrDefault("RoleName")
  valid_602651 = validateParameter(valid_602651, JString, required = true,
                                 default = nil)
  if valid_602651 != nil:
    section.add "RoleName", valid_602651
  var valid_602652 = formData.getOrDefault("PolicyArn")
  valid_602652 = validateParameter(valid_602652, JString, required = true,
                                 default = nil)
  if valid_602652 != nil:
    section.add "PolicyArn", valid_602652
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602653: Call_PostDetachRolePolicy_602639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602653.validator(path, query, header, formData, body)
  let scheme = call_602653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602653.url(scheme.get, call_602653.host, call_602653.base,
                         call_602653.route, valid.getOrDefault("path"))
  result = hook(call_602653, url, valid)

proc call*(call_602654: Call_PostDetachRolePolicy_602639; RoleName: string;
          PolicyArn: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602655 = newJObject()
  var formData_602656 = newJObject()
  add(formData_602656, "RoleName", newJString(RoleName))
  add(formData_602656, "PolicyArn", newJString(PolicyArn))
  add(query_602655, "Action", newJString(Action))
  add(query_602655, "Version", newJString(Version))
  result = call_602654.call(nil, query_602655, nil, formData_602656, nil)

var postDetachRolePolicy* = Call_PostDetachRolePolicy_602639(
    name: "postDetachRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_PostDetachRolePolicy_602640, base: "/",
    url: url_PostDetachRolePolicy_602641, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachRolePolicy_602622 = ref object of OpenApiRestCall_600426
proc url_GetDetachRolePolicy_602624(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachRolePolicy_602623(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_602625 = query.getOrDefault("PolicyArn")
  valid_602625 = validateParameter(valid_602625, JString, required = true,
                                 default = nil)
  if valid_602625 != nil:
    section.add "PolicyArn", valid_602625
  var valid_602626 = query.getOrDefault("Action")
  valid_602626 = validateParameter(valid_602626, JString, required = true,
                                 default = newJString("DetachRolePolicy"))
  if valid_602626 != nil:
    section.add "Action", valid_602626
  var valid_602627 = query.getOrDefault("RoleName")
  valid_602627 = validateParameter(valid_602627, JString, required = true,
                                 default = nil)
  if valid_602627 != nil:
    section.add "RoleName", valid_602627
  var valid_602628 = query.getOrDefault("Version")
  valid_602628 = validateParameter(valid_602628, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602628 != nil:
    section.add "Version", valid_602628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602629 = header.getOrDefault("X-Amz-Date")
  valid_602629 = validateParameter(valid_602629, JString, required = false,
                                 default = nil)
  if valid_602629 != nil:
    section.add "X-Amz-Date", valid_602629
  var valid_602630 = header.getOrDefault("X-Amz-Security-Token")
  valid_602630 = validateParameter(valid_602630, JString, required = false,
                                 default = nil)
  if valid_602630 != nil:
    section.add "X-Amz-Security-Token", valid_602630
  var valid_602631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602631 = validateParameter(valid_602631, JString, required = false,
                                 default = nil)
  if valid_602631 != nil:
    section.add "X-Amz-Content-Sha256", valid_602631
  var valid_602632 = header.getOrDefault("X-Amz-Algorithm")
  valid_602632 = validateParameter(valid_602632, JString, required = false,
                                 default = nil)
  if valid_602632 != nil:
    section.add "X-Amz-Algorithm", valid_602632
  var valid_602633 = header.getOrDefault("X-Amz-Signature")
  valid_602633 = validateParameter(valid_602633, JString, required = false,
                                 default = nil)
  if valid_602633 != nil:
    section.add "X-Amz-Signature", valid_602633
  var valid_602634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602634 = validateParameter(valid_602634, JString, required = false,
                                 default = nil)
  if valid_602634 != nil:
    section.add "X-Amz-SignedHeaders", valid_602634
  var valid_602635 = header.getOrDefault("X-Amz-Credential")
  valid_602635 = validateParameter(valid_602635, JString, required = false,
                                 default = nil)
  if valid_602635 != nil:
    section.add "X-Amz-Credential", valid_602635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602636: Call_GetDetachRolePolicy_602622; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602636.validator(path, query, header, formData, body)
  let scheme = call_602636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602636.url(scheme.get, call_602636.host, call_602636.base,
                         call_602636.route, valid.getOrDefault("path"))
  result = hook(call_602636, url, valid)

proc call*(call_602637: Call_GetDetachRolePolicy_602622; PolicyArn: string;
          RoleName: string; Action: string = "DetachRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachRolePolicy
  ## <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_602638 = newJObject()
  add(query_602638, "PolicyArn", newJString(PolicyArn))
  add(query_602638, "Action", newJString(Action))
  add(query_602638, "RoleName", newJString(RoleName))
  add(query_602638, "Version", newJString(Version))
  result = call_602637.call(nil, query_602638, nil, nil, nil)

var getDetachRolePolicy* = Call_GetDetachRolePolicy_602622(
    name: "getDetachRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachRolePolicy",
    validator: validate_GetDetachRolePolicy_602623, base: "/",
    url: url_GetDetachRolePolicy_602624, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDetachUserPolicy_602674 = ref object of OpenApiRestCall_600426
proc url_PostDetachUserPolicy_602676(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDetachUserPolicy_602675(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602677 = query.getOrDefault("Action")
  valid_602677 = validateParameter(valid_602677, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_602677 != nil:
    section.add "Action", valid_602677
  var valid_602678 = query.getOrDefault("Version")
  valid_602678 = validateParameter(valid_602678, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602678 != nil:
    section.add "Version", valid_602678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602679 = header.getOrDefault("X-Amz-Date")
  valid_602679 = validateParameter(valid_602679, JString, required = false,
                                 default = nil)
  if valid_602679 != nil:
    section.add "X-Amz-Date", valid_602679
  var valid_602680 = header.getOrDefault("X-Amz-Security-Token")
  valid_602680 = validateParameter(valid_602680, JString, required = false,
                                 default = nil)
  if valid_602680 != nil:
    section.add "X-Amz-Security-Token", valid_602680
  var valid_602681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602681 = validateParameter(valid_602681, JString, required = false,
                                 default = nil)
  if valid_602681 != nil:
    section.add "X-Amz-Content-Sha256", valid_602681
  var valid_602682 = header.getOrDefault("X-Amz-Algorithm")
  valid_602682 = validateParameter(valid_602682, JString, required = false,
                                 default = nil)
  if valid_602682 != nil:
    section.add "X-Amz-Algorithm", valid_602682
  var valid_602683 = header.getOrDefault("X-Amz-Signature")
  valid_602683 = validateParameter(valid_602683, JString, required = false,
                                 default = nil)
  if valid_602683 != nil:
    section.add "X-Amz-Signature", valid_602683
  var valid_602684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602684 = validateParameter(valid_602684, JString, required = false,
                                 default = nil)
  if valid_602684 != nil:
    section.add "X-Amz-SignedHeaders", valid_602684
  var valid_602685 = header.getOrDefault("X-Amz-Credential")
  valid_602685 = validateParameter(valid_602685, JString, required = false,
                                 default = nil)
  if valid_602685 != nil:
    section.add "X-Amz-Credential", valid_602685
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_602686 = formData.getOrDefault("UserName")
  valid_602686 = validateParameter(valid_602686, JString, required = true,
                                 default = nil)
  if valid_602686 != nil:
    section.add "UserName", valid_602686
  var valid_602687 = formData.getOrDefault("PolicyArn")
  valid_602687 = validateParameter(valid_602687, JString, required = true,
                                 default = nil)
  if valid_602687 != nil:
    section.add "PolicyArn", valid_602687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602688: Call_PostDetachUserPolicy_602674; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602688.validator(path, query, header, formData, body)
  let scheme = call_602688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602688.url(scheme.get, call_602688.host, call_602688.base,
                         call_602688.route, valid.getOrDefault("path"))
  result = hook(call_602688, url, valid)

proc call*(call_602689: Call_PostDetachUserPolicy_602674; UserName: string;
          PolicyArn: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602690 = newJObject()
  var formData_602691 = newJObject()
  add(formData_602691, "UserName", newJString(UserName))
  add(formData_602691, "PolicyArn", newJString(PolicyArn))
  add(query_602690, "Action", newJString(Action))
  add(query_602690, "Version", newJString(Version))
  result = call_602689.call(nil, query_602690, nil, formData_602691, nil)

var postDetachUserPolicy* = Call_PostDetachUserPolicy_602674(
    name: "postDetachUserPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_PostDetachUserPolicy_602675, base: "/",
    url: url_PostDetachUserPolicy_602676, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDetachUserPolicy_602657 = ref object of OpenApiRestCall_600426
proc url_GetDetachUserPolicy_602659(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDetachUserPolicy_602658(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_602660 = query.getOrDefault("PolicyArn")
  valid_602660 = validateParameter(valid_602660, JString, required = true,
                                 default = nil)
  if valid_602660 != nil:
    section.add "PolicyArn", valid_602660
  var valid_602661 = query.getOrDefault("UserName")
  valid_602661 = validateParameter(valid_602661, JString, required = true,
                                 default = nil)
  if valid_602661 != nil:
    section.add "UserName", valid_602661
  var valid_602662 = query.getOrDefault("Action")
  valid_602662 = validateParameter(valid_602662, JString, required = true,
                                 default = newJString("DetachUserPolicy"))
  if valid_602662 != nil:
    section.add "Action", valid_602662
  var valid_602663 = query.getOrDefault("Version")
  valid_602663 = validateParameter(valid_602663, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602663 != nil:
    section.add "Version", valid_602663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602664 = header.getOrDefault("X-Amz-Date")
  valid_602664 = validateParameter(valid_602664, JString, required = false,
                                 default = nil)
  if valid_602664 != nil:
    section.add "X-Amz-Date", valid_602664
  var valid_602665 = header.getOrDefault("X-Amz-Security-Token")
  valid_602665 = validateParameter(valid_602665, JString, required = false,
                                 default = nil)
  if valid_602665 != nil:
    section.add "X-Amz-Security-Token", valid_602665
  var valid_602666 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602666 = validateParameter(valid_602666, JString, required = false,
                                 default = nil)
  if valid_602666 != nil:
    section.add "X-Amz-Content-Sha256", valid_602666
  var valid_602667 = header.getOrDefault("X-Amz-Algorithm")
  valid_602667 = validateParameter(valid_602667, JString, required = false,
                                 default = nil)
  if valid_602667 != nil:
    section.add "X-Amz-Algorithm", valid_602667
  var valid_602668 = header.getOrDefault("X-Amz-Signature")
  valid_602668 = validateParameter(valid_602668, JString, required = false,
                                 default = nil)
  if valid_602668 != nil:
    section.add "X-Amz-Signature", valid_602668
  var valid_602669 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602669 = validateParameter(valid_602669, JString, required = false,
                                 default = nil)
  if valid_602669 != nil:
    section.add "X-Amz-SignedHeaders", valid_602669
  var valid_602670 = header.getOrDefault("X-Amz-Credential")
  valid_602670 = validateParameter(valid_602670, JString, required = false,
                                 default = nil)
  if valid_602670 != nil:
    section.add "X-Amz-Credential", valid_602670
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602671: Call_GetDetachUserPolicy_602657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602671.validator(path, query, header, formData, body)
  let scheme = call_602671.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602671.url(scheme.get, call_602671.host, call_602671.base,
                         call_602671.route, valid.getOrDefault("path"))
  result = hook(call_602671, url, valid)

proc call*(call_602672: Call_GetDetachUserPolicy_602657; PolicyArn: string;
          UserName: string; Action: string = "DetachUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getDetachUserPolicy
  ## <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602673 = newJObject()
  add(query_602673, "PolicyArn", newJString(PolicyArn))
  add(query_602673, "UserName", newJString(UserName))
  add(query_602673, "Action", newJString(Action))
  add(query_602673, "Version", newJString(Version))
  result = call_602672.call(nil, query_602673, nil, nil, nil)

var getDetachUserPolicy* = Call_GetDetachUserPolicy_602657(
    name: "getDetachUserPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=DetachUserPolicy",
    validator: validate_GetDetachUserPolicy_602658, base: "/",
    url: url_GetDetachUserPolicy_602659, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostEnableMFADevice_602711 = ref object of OpenApiRestCall_600426
proc url_PostEnableMFADevice_602713(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostEnableMFADevice_602712(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602714 = query.getOrDefault("Action")
  valid_602714 = validateParameter(valid_602714, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_602714 != nil:
    section.add "Action", valid_602714
  var valid_602715 = query.getOrDefault("Version")
  valid_602715 = validateParameter(valid_602715, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602715 != nil:
    section.add "Version", valid_602715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602716 = header.getOrDefault("X-Amz-Date")
  valid_602716 = validateParameter(valid_602716, JString, required = false,
                                 default = nil)
  if valid_602716 != nil:
    section.add "X-Amz-Date", valid_602716
  var valid_602717 = header.getOrDefault("X-Amz-Security-Token")
  valid_602717 = validateParameter(valid_602717, JString, required = false,
                                 default = nil)
  if valid_602717 != nil:
    section.add "X-Amz-Security-Token", valid_602717
  var valid_602718 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602718 = validateParameter(valid_602718, JString, required = false,
                                 default = nil)
  if valid_602718 != nil:
    section.add "X-Amz-Content-Sha256", valid_602718
  var valid_602719 = header.getOrDefault("X-Amz-Algorithm")
  valid_602719 = validateParameter(valid_602719, JString, required = false,
                                 default = nil)
  if valid_602719 != nil:
    section.add "X-Amz-Algorithm", valid_602719
  var valid_602720 = header.getOrDefault("X-Amz-Signature")
  valid_602720 = validateParameter(valid_602720, JString, required = false,
                                 default = nil)
  if valid_602720 != nil:
    section.add "X-Amz-Signature", valid_602720
  var valid_602721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602721 = validateParameter(valid_602721, JString, required = false,
                                 default = nil)
  if valid_602721 != nil:
    section.add "X-Amz-SignedHeaders", valid_602721
  var valid_602722 = header.getOrDefault("X-Amz-Credential")
  valid_602722 = validateParameter(valid_602722, JString, required = false,
                                 default = nil)
  if valid_602722 != nil:
    section.add "X-Amz-Credential", valid_602722
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_602723 = formData.getOrDefault("SerialNumber")
  valid_602723 = validateParameter(valid_602723, JString, required = true,
                                 default = nil)
  if valid_602723 != nil:
    section.add "SerialNumber", valid_602723
  var valid_602724 = formData.getOrDefault("UserName")
  valid_602724 = validateParameter(valid_602724, JString, required = true,
                                 default = nil)
  if valid_602724 != nil:
    section.add "UserName", valid_602724
  var valid_602725 = formData.getOrDefault("AuthenticationCode2")
  valid_602725 = validateParameter(valid_602725, JString, required = true,
                                 default = nil)
  if valid_602725 != nil:
    section.add "AuthenticationCode2", valid_602725
  var valid_602726 = formData.getOrDefault("AuthenticationCode1")
  valid_602726 = validateParameter(valid_602726, JString, required = true,
                                 default = nil)
  if valid_602726 != nil:
    section.add "AuthenticationCode1", valid_602726
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602727: Call_PostEnableMFADevice_602711; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_602727.validator(path, query, header, formData, body)
  let scheme = call_602727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602727.url(scheme.get, call_602727.host, call_602727.base,
                         call_602727.route, valid.getOrDefault("path"))
  result = hook(call_602727, url, valid)

proc call*(call_602728: Call_PostEnableMFADevice_602711; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   Version: string (required)
  var query_602729 = newJObject()
  var formData_602730 = newJObject()
  add(formData_602730, "SerialNumber", newJString(SerialNumber))
  add(formData_602730, "UserName", newJString(UserName))
  add(formData_602730, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_602729, "Action", newJString(Action))
  add(formData_602730, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_602729, "Version", newJString(Version))
  result = call_602728.call(nil, query_602729, nil, formData_602730, nil)

var postEnableMFADevice* = Call_PostEnableMFADevice_602711(
    name: "postEnableMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=EnableMFADevice",
    validator: validate_PostEnableMFADevice_602712, base: "/",
    url: url_PostEnableMFADevice_602713, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetEnableMFADevice_602692 = ref object of OpenApiRestCall_600426
proc url_GetEnableMFADevice_602694(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetEnableMFADevice_602693(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_602695 = query.getOrDefault("SerialNumber")
  valid_602695 = validateParameter(valid_602695, JString, required = true,
                                 default = nil)
  if valid_602695 != nil:
    section.add "SerialNumber", valid_602695
  var valid_602696 = query.getOrDefault("AuthenticationCode2")
  valid_602696 = validateParameter(valid_602696, JString, required = true,
                                 default = nil)
  if valid_602696 != nil:
    section.add "AuthenticationCode2", valid_602696
  var valid_602697 = query.getOrDefault("AuthenticationCode1")
  valid_602697 = validateParameter(valid_602697, JString, required = true,
                                 default = nil)
  if valid_602697 != nil:
    section.add "AuthenticationCode1", valid_602697
  var valid_602698 = query.getOrDefault("UserName")
  valid_602698 = validateParameter(valid_602698, JString, required = true,
                                 default = nil)
  if valid_602698 != nil:
    section.add "UserName", valid_602698
  var valid_602699 = query.getOrDefault("Action")
  valid_602699 = validateParameter(valid_602699, JString, required = true,
                                 default = newJString("EnableMFADevice"))
  if valid_602699 != nil:
    section.add "Action", valid_602699
  var valid_602700 = query.getOrDefault("Version")
  valid_602700 = validateParameter(valid_602700, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602700 != nil:
    section.add "Version", valid_602700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602701 = header.getOrDefault("X-Amz-Date")
  valid_602701 = validateParameter(valid_602701, JString, required = false,
                                 default = nil)
  if valid_602701 != nil:
    section.add "X-Amz-Date", valid_602701
  var valid_602702 = header.getOrDefault("X-Amz-Security-Token")
  valid_602702 = validateParameter(valid_602702, JString, required = false,
                                 default = nil)
  if valid_602702 != nil:
    section.add "X-Amz-Security-Token", valid_602702
  var valid_602703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602703 = validateParameter(valid_602703, JString, required = false,
                                 default = nil)
  if valid_602703 != nil:
    section.add "X-Amz-Content-Sha256", valid_602703
  var valid_602704 = header.getOrDefault("X-Amz-Algorithm")
  valid_602704 = validateParameter(valid_602704, JString, required = false,
                                 default = nil)
  if valid_602704 != nil:
    section.add "X-Amz-Algorithm", valid_602704
  var valid_602705 = header.getOrDefault("X-Amz-Signature")
  valid_602705 = validateParameter(valid_602705, JString, required = false,
                                 default = nil)
  if valid_602705 != nil:
    section.add "X-Amz-Signature", valid_602705
  var valid_602706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602706 = validateParameter(valid_602706, JString, required = false,
                                 default = nil)
  if valid_602706 != nil:
    section.add "X-Amz-SignedHeaders", valid_602706
  var valid_602707 = header.getOrDefault("X-Amz-Credential")
  valid_602707 = validateParameter(valid_602707, JString, required = false,
                                 default = nil)
  if valid_602707 != nil:
    section.add "X-Amz-Credential", valid_602707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602708: Call_GetEnableMFADevice_602692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ## 
  let valid = call_602708.validator(path, query, header, formData, body)
  let scheme = call_602708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602708.url(scheme.get, call_602708.host, call_602708.base,
                         call_602708.route, valid.getOrDefault("path"))
  result = hook(call_602708, url, valid)

proc call*(call_602709: Call_GetEnableMFADevice_602692; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "EnableMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getEnableMFADevice
  ## Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
  ##   SerialNumber: string (required)
  ##               : <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602710 = newJObject()
  add(query_602710, "SerialNumber", newJString(SerialNumber))
  add(query_602710, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_602710, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_602710, "UserName", newJString(UserName))
  add(query_602710, "Action", newJString(Action))
  add(query_602710, "Version", newJString(Version))
  result = call_602709.call(nil, query_602710, nil, nil, nil)

var getEnableMFADevice* = Call_GetEnableMFADevice_602692(
    name: "getEnableMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=EnableMFADevice", validator: validate_GetEnableMFADevice_602693,
    base: "/", url: url_GetEnableMFADevice_602694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateCredentialReport_602746 = ref object of OpenApiRestCall_600426
proc url_PostGenerateCredentialReport_602748(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateCredentialReport_602747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602749 = query.getOrDefault("Action")
  valid_602749 = validateParameter(valid_602749, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_602749 != nil:
    section.add "Action", valid_602749
  var valid_602750 = query.getOrDefault("Version")
  valid_602750 = validateParameter(valid_602750, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602750 != nil:
    section.add "Version", valid_602750
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602751 = header.getOrDefault("X-Amz-Date")
  valid_602751 = validateParameter(valid_602751, JString, required = false,
                                 default = nil)
  if valid_602751 != nil:
    section.add "X-Amz-Date", valid_602751
  var valid_602752 = header.getOrDefault("X-Amz-Security-Token")
  valid_602752 = validateParameter(valid_602752, JString, required = false,
                                 default = nil)
  if valid_602752 != nil:
    section.add "X-Amz-Security-Token", valid_602752
  var valid_602753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602753 = validateParameter(valid_602753, JString, required = false,
                                 default = nil)
  if valid_602753 != nil:
    section.add "X-Amz-Content-Sha256", valid_602753
  var valid_602754 = header.getOrDefault("X-Amz-Algorithm")
  valid_602754 = validateParameter(valid_602754, JString, required = false,
                                 default = nil)
  if valid_602754 != nil:
    section.add "X-Amz-Algorithm", valid_602754
  var valid_602755 = header.getOrDefault("X-Amz-Signature")
  valid_602755 = validateParameter(valid_602755, JString, required = false,
                                 default = nil)
  if valid_602755 != nil:
    section.add "X-Amz-Signature", valid_602755
  var valid_602756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602756 = validateParameter(valid_602756, JString, required = false,
                                 default = nil)
  if valid_602756 != nil:
    section.add "X-Amz-SignedHeaders", valid_602756
  var valid_602757 = header.getOrDefault("X-Amz-Credential")
  valid_602757 = validateParameter(valid_602757, JString, required = false,
                                 default = nil)
  if valid_602757 != nil:
    section.add "X-Amz-Credential", valid_602757
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602758: Call_PostGenerateCredentialReport_602746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_602758.validator(path, query, header, formData, body)
  let scheme = call_602758.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602758.url(scheme.get, call_602758.host, call_602758.base,
                         call_602758.route, valid.getOrDefault("path"))
  result = hook(call_602758, url, valid)

proc call*(call_602759: Call_PostGenerateCredentialReport_602746;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602760 = newJObject()
  add(query_602760, "Action", newJString(Action))
  add(query_602760, "Version", newJString(Version))
  result = call_602759.call(nil, query_602760, nil, nil, nil)

var postGenerateCredentialReport* = Call_PostGenerateCredentialReport_602746(
    name: "postGenerateCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_PostGenerateCredentialReport_602747, base: "/",
    url: url_PostGenerateCredentialReport_602748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateCredentialReport_602731 = ref object of OpenApiRestCall_600426
proc url_GetGenerateCredentialReport_602733(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateCredentialReport_602732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602734 = query.getOrDefault("Action")
  valid_602734 = validateParameter(valid_602734, JString, required = true, default = newJString(
      "GenerateCredentialReport"))
  if valid_602734 != nil:
    section.add "Action", valid_602734
  var valid_602735 = query.getOrDefault("Version")
  valid_602735 = validateParameter(valid_602735, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602735 != nil:
    section.add "Version", valid_602735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602736 = header.getOrDefault("X-Amz-Date")
  valid_602736 = validateParameter(valid_602736, JString, required = false,
                                 default = nil)
  if valid_602736 != nil:
    section.add "X-Amz-Date", valid_602736
  var valid_602737 = header.getOrDefault("X-Amz-Security-Token")
  valid_602737 = validateParameter(valid_602737, JString, required = false,
                                 default = nil)
  if valid_602737 != nil:
    section.add "X-Amz-Security-Token", valid_602737
  var valid_602738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602738 = validateParameter(valid_602738, JString, required = false,
                                 default = nil)
  if valid_602738 != nil:
    section.add "X-Amz-Content-Sha256", valid_602738
  var valid_602739 = header.getOrDefault("X-Amz-Algorithm")
  valid_602739 = validateParameter(valid_602739, JString, required = false,
                                 default = nil)
  if valid_602739 != nil:
    section.add "X-Amz-Algorithm", valid_602739
  var valid_602740 = header.getOrDefault("X-Amz-Signature")
  valid_602740 = validateParameter(valid_602740, JString, required = false,
                                 default = nil)
  if valid_602740 != nil:
    section.add "X-Amz-Signature", valid_602740
  var valid_602741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602741 = validateParameter(valid_602741, JString, required = false,
                                 default = nil)
  if valid_602741 != nil:
    section.add "X-Amz-SignedHeaders", valid_602741
  var valid_602742 = header.getOrDefault("X-Amz-Credential")
  valid_602742 = validateParameter(valid_602742, JString, required = false,
                                 default = nil)
  if valid_602742 != nil:
    section.add "X-Amz-Credential", valid_602742
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602743: Call_GetGenerateCredentialReport_602731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_602743.validator(path, query, header, formData, body)
  let scheme = call_602743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602743.url(scheme.get, call_602743.host, call_602743.base,
                         call_602743.route, valid.getOrDefault("path"))
  result = hook(call_602743, url, valid)

proc call*(call_602744: Call_GetGenerateCredentialReport_602731;
          Action: string = "GenerateCredentialReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateCredentialReport
  ##  Generates a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602745 = newJObject()
  add(query_602745, "Action", newJString(Action))
  add(query_602745, "Version", newJString(Version))
  result = call_602744.call(nil, query_602745, nil, nil, nil)

var getGenerateCredentialReport* = Call_GetGenerateCredentialReport_602731(
    name: "getGenerateCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GenerateCredentialReport",
    validator: validate_GetGenerateCredentialReport_602732, base: "/",
    url: url_GetGenerateCredentialReport_602733,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateOrganizationsAccessReport_602778 = ref object of OpenApiRestCall_600426
proc url_PostGenerateOrganizationsAccessReport_602780(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateOrganizationsAccessReport_602779(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602781 = query.getOrDefault("Action")
  valid_602781 = validateParameter(valid_602781, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_602781 != nil:
    section.add "Action", valid_602781
  var valid_602782 = query.getOrDefault("Version")
  valid_602782 = validateParameter(valid_602782, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602782 != nil:
    section.add "Version", valid_602782
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602783 = header.getOrDefault("X-Amz-Date")
  valid_602783 = validateParameter(valid_602783, JString, required = false,
                                 default = nil)
  if valid_602783 != nil:
    section.add "X-Amz-Date", valid_602783
  var valid_602784 = header.getOrDefault("X-Amz-Security-Token")
  valid_602784 = validateParameter(valid_602784, JString, required = false,
                                 default = nil)
  if valid_602784 != nil:
    section.add "X-Amz-Security-Token", valid_602784
  var valid_602785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602785 = validateParameter(valid_602785, JString, required = false,
                                 default = nil)
  if valid_602785 != nil:
    section.add "X-Amz-Content-Sha256", valid_602785
  var valid_602786 = header.getOrDefault("X-Amz-Algorithm")
  valid_602786 = validateParameter(valid_602786, JString, required = false,
                                 default = nil)
  if valid_602786 != nil:
    section.add "X-Amz-Algorithm", valid_602786
  var valid_602787 = header.getOrDefault("X-Amz-Signature")
  valid_602787 = validateParameter(valid_602787, JString, required = false,
                                 default = nil)
  if valid_602787 != nil:
    section.add "X-Amz-Signature", valid_602787
  var valid_602788 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602788 = validateParameter(valid_602788, JString, required = false,
                                 default = nil)
  if valid_602788 != nil:
    section.add "X-Amz-SignedHeaders", valid_602788
  var valid_602789 = header.getOrDefault("X-Amz-Credential")
  valid_602789 = validateParameter(valid_602789, JString, required = false,
                                 default = nil)
  if valid_602789 != nil:
    section.add "X-Amz-Credential", valid_602789
  result.add "header", section
  ## parameters in `formData` object:
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  section = newJObject()
  var valid_602790 = formData.getOrDefault("OrganizationsPolicyId")
  valid_602790 = validateParameter(valid_602790, JString, required = false,
                                 default = nil)
  if valid_602790 != nil:
    section.add "OrganizationsPolicyId", valid_602790
  assert formData != nil,
        "formData argument is necessary due to required `EntityPath` field"
  var valid_602791 = formData.getOrDefault("EntityPath")
  valid_602791 = validateParameter(valid_602791, JString, required = true,
                                 default = nil)
  if valid_602791 != nil:
    section.add "EntityPath", valid_602791
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602792: Call_PostGenerateOrganizationsAccessReport_602778;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602792.validator(path, query, header, formData, body)
  let scheme = call_602792.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602792.url(scheme.get, call_602792.host, call_602792.base,
                         call_602792.route, valid.getOrDefault("path"))
  result = hook(call_602792, url, valid)

proc call*(call_602793: Call_PostGenerateOrganizationsAccessReport_602778;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   Version: string (required)
  var query_602794 = newJObject()
  var formData_602795 = newJObject()
  add(formData_602795, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_602794, "Action", newJString(Action))
  add(formData_602795, "EntityPath", newJString(EntityPath))
  add(query_602794, "Version", newJString(Version))
  result = call_602793.call(nil, query_602794, nil, formData_602795, nil)

var postGenerateOrganizationsAccessReport* = Call_PostGenerateOrganizationsAccessReport_602778(
    name: "postGenerateOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_PostGenerateOrganizationsAccessReport_602779, base: "/",
    url: url_PostGenerateOrganizationsAccessReport_602780,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateOrganizationsAccessReport_602761 = ref object of OpenApiRestCall_600426
proc url_GetGenerateOrganizationsAccessReport_602763(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateOrganizationsAccessReport_602762(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EntityPath: JString (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: JString
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EntityPath` field"
  var valid_602764 = query.getOrDefault("EntityPath")
  valid_602764 = validateParameter(valid_602764, JString, required = true,
                                 default = nil)
  if valid_602764 != nil:
    section.add "EntityPath", valid_602764
  var valid_602765 = query.getOrDefault("OrganizationsPolicyId")
  valid_602765 = validateParameter(valid_602765, JString, required = false,
                                 default = nil)
  if valid_602765 != nil:
    section.add "OrganizationsPolicyId", valid_602765
  var valid_602766 = query.getOrDefault("Action")
  valid_602766 = validateParameter(valid_602766, JString, required = true, default = newJString(
      "GenerateOrganizationsAccessReport"))
  if valid_602766 != nil:
    section.add "Action", valid_602766
  var valid_602767 = query.getOrDefault("Version")
  valid_602767 = validateParameter(valid_602767, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602767 != nil:
    section.add "Version", valid_602767
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602768 = header.getOrDefault("X-Amz-Date")
  valid_602768 = validateParameter(valid_602768, JString, required = false,
                                 default = nil)
  if valid_602768 != nil:
    section.add "X-Amz-Date", valid_602768
  var valid_602769 = header.getOrDefault("X-Amz-Security-Token")
  valid_602769 = validateParameter(valid_602769, JString, required = false,
                                 default = nil)
  if valid_602769 != nil:
    section.add "X-Amz-Security-Token", valid_602769
  var valid_602770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602770 = validateParameter(valid_602770, JString, required = false,
                                 default = nil)
  if valid_602770 != nil:
    section.add "X-Amz-Content-Sha256", valid_602770
  var valid_602771 = header.getOrDefault("X-Amz-Algorithm")
  valid_602771 = validateParameter(valid_602771, JString, required = false,
                                 default = nil)
  if valid_602771 != nil:
    section.add "X-Amz-Algorithm", valid_602771
  var valid_602772 = header.getOrDefault("X-Amz-Signature")
  valid_602772 = validateParameter(valid_602772, JString, required = false,
                                 default = nil)
  if valid_602772 != nil:
    section.add "X-Amz-Signature", valid_602772
  var valid_602773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602773 = validateParameter(valid_602773, JString, required = false,
                                 default = nil)
  if valid_602773 != nil:
    section.add "X-Amz-SignedHeaders", valid_602773
  var valid_602774 = header.getOrDefault("X-Amz-Credential")
  valid_602774 = validateParameter(valid_602774, JString, required = false,
                                 default = nil)
  if valid_602774 != nil:
    section.add "X-Amz-Credential", valid_602774
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602775: Call_GetGenerateOrganizationsAccessReport_602761;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602775.validator(path, query, header, formData, body)
  let scheme = call_602775.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602775.url(scheme.get, call_602775.host, call_602775.base,
                         call_602775.route, valid.getOrDefault("path"))
  result = hook(call_602775, url, valid)

proc call*(call_602776: Call_GetGenerateOrganizationsAccessReport_602761;
          EntityPath: string; OrganizationsPolicyId: string = "";
          Action: string = "GenerateOrganizationsAccessReport";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateOrganizationsAccessReport
  ## <p>Generates a report for service last accessed data for AWS Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your AWS Organizations master account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and AWS Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional AWS Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access AWS, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the master account, because the master account is not limited by SCPs.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional AWS Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the master account, because the master account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>Master account</b> – When you specify the master account, the resulting report lists all AWS services, because the master account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the master account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   EntityPath: string (required)
  ##             : The path of the AWS Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.
  ##   OrganizationsPolicyId: string
  ##                        : <p>The identifier of the AWS Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an AWS service.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602777 = newJObject()
  add(query_602777, "EntityPath", newJString(EntityPath))
  add(query_602777, "OrganizationsPolicyId", newJString(OrganizationsPolicyId))
  add(query_602777, "Action", newJString(Action))
  add(query_602777, "Version", newJString(Version))
  result = call_602776.call(nil, query_602777, nil, nil, nil)

var getGenerateOrganizationsAccessReport* = Call_GetGenerateOrganizationsAccessReport_602761(
    name: "getGenerateOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateOrganizationsAccessReport",
    validator: validate_GetGenerateOrganizationsAccessReport_602762, base: "/",
    url: url_GetGenerateOrganizationsAccessReport_602763,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGenerateServiceLastAccessedDetails_602812 = ref object of OpenApiRestCall_600426
proc url_PostGenerateServiceLastAccessedDetails_602814(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGenerateServiceLastAccessedDetails_602813(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602815 = query.getOrDefault("Action")
  valid_602815 = validateParameter(valid_602815, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_602815 != nil:
    section.add "Action", valid_602815
  var valid_602816 = query.getOrDefault("Version")
  valid_602816 = validateParameter(valid_602816, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602816 != nil:
    section.add "Version", valid_602816
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602817 = header.getOrDefault("X-Amz-Date")
  valid_602817 = validateParameter(valid_602817, JString, required = false,
                                 default = nil)
  if valid_602817 != nil:
    section.add "X-Amz-Date", valid_602817
  var valid_602818 = header.getOrDefault("X-Amz-Security-Token")
  valid_602818 = validateParameter(valid_602818, JString, required = false,
                                 default = nil)
  if valid_602818 != nil:
    section.add "X-Amz-Security-Token", valid_602818
  var valid_602819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602819 = validateParameter(valid_602819, JString, required = false,
                                 default = nil)
  if valid_602819 != nil:
    section.add "X-Amz-Content-Sha256", valid_602819
  var valid_602820 = header.getOrDefault("X-Amz-Algorithm")
  valid_602820 = validateParameter(valid_602820, JString, required = false,
                                 default = nil)
  if valid_602820 != nil:
    section.add "X-Amz-Algorithm", valid_602820
  var valid_602821 = header.getOrDefault("X-Amz-Signature")
  valid_602821 = validateParameter(valid_602821, JString, required = false,
                                 default = nil)
  if valid_602821 != nil:
    section.add "X-Amz-Signature", valid_602821
  var valid_602822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602822 = validateParameter(valid_602822, JString, required = false,
                                 default = nil)
  if valid_602822 != nil:
    section.add "X-Amz-SignedHeaders", valid_602822
  var valid_602823 = header.getOrDefault("X-Amz-Credential")
  valid_602823 = validateParameter(valid_602823, JString, required = false,
                                 default = nil)
  if valid_602823 != nil:
    section.add "X-Amz-Credential", valid_602823
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_602824 = formData.getOrDefault("Arn")
  valid_602824 = validateParameter(valid_602824, JString, required = true,
                                 default = nil)
  if valid_602824 != nil:
    section.add "Arn", valid_602824
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602825: Call_PostGenerateServiceLastAccessedDetails_602812;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602825.validator(path, query, header, formData, body)
  let scheme = call_602825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602825.url(scheme.get, call_602825.host, call_602825.base,
                         call_602825.route, valid.getOrDefault("path"))
  result = hook(call_602825, url, valid)

proc call*(call_602826: Call_PostGenerateServiceLastAccessedDetails_602812;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## postGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602827 = newJObject()
  var formData_602828 = newJObject()
  add(formData_602828, "Arn", newJString(Arn))
  add(query_602827, "Action", newJString(Action))
  add(query_602827, "Version", newJString(Version))
  result = call_602826.call(nil, query_602827, nil, formData_602828, nil)

var postGenerateServiceLastAccessedDetails* = Call_PostGenerateServiceLastAccessedDetails_602812(
    name: "postGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_PostGenerateServiceLastAccessedDetails_602813, base: "/",
    url: url_PostGenerateServiceLastAccessedDetails_602814,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGenerateServiceLastAccessedDetails_602796 = ref object of OpenApiRestCall_600426
proc url_GetGenerateServiceLastAccessedDetails_602798(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGenerateServiceLastAccessedDetails_602797(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602799 = query.getOrDefault("Action")
  valid_602799 = validateParameter(valid_602799, JString, required = true, default = newJString(
      "GenerateServiceLastAccessedDetails"))
  if valid_602799 != nil:
    section.add "Action", valid_602799
  var valid_602800 = query.getOrDefault("Arn")
  valid_602800 = validateParameter(valid_602800, JString, required = true,
                                 default = nil)
  if valid_602800 != nil:
    section.add "Arn", valid_602800
  var valid_602801 = query.getOrDefault("Version")
  valid_602801 = validateParameter(valid_602801, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602801 != nil:
    section.add "Version", valid_602801
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602802 = header.getOrDefault("X-Amz-Date")
  valid_602802 = validateParameter(valid_602802, JString, required = false,
                                 default = nil)
  if valid_602802 != nil:
    section.add "X-Amz-Date", valid_602802
  var valid_602803 = header.getOrDefault("X-Amz-Security-Token")
  valid_602803 = validateParameter(valid_602803, JString, required = false,
                                 default = nil)
  if valid_602803 != nil:
    section.add "X-Amz-Security-Token", valid_602803
  var valid_602804 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602804 = validateParameter(valid_602804, JString, required = false,
                                 default = nil)
  if valid_602804 != nil:
    section.add "X-Amz-Content-Sha256", valid_602804
  var valid_602805 = header.getOrDefault("X-Amz-Algorithm")
  valid_602805 = validateParameter(valid_602805, JString, required = false,
                                 default = nil)
  if valid_602805 != nil:
    section.add "X-Amz-Algorithm", valid_602805
  var valid_602806 = header.getOrDefault("X-Amz-Signature")
  valid_602806 = validateParameter(valid_602806, JString, required = false,
                                 default = nil)
  if valid_602806 != nil:
    section.add "X-Amz-Signature", valid_602806
  var valid_602807 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602807 = validateParameter(valid_602807, JString, required = false,
                                 default = nil)
  if valid_602807 != nil:
    section.add "X-Amz-SignedHeaders", valid_602807
  var valid_602808 = header.getOrDefault("X-Amz-Credential")
  valid_602808 = validateParameter(valid_602808, JString, required = false,
                                 default = nil)
  if valid_602808 != nil:
    section.add "X-Amz-Credential", valid_602808
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602809: Call_GetGenerateServiceLastAccessedDetails_602796;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602809.validator(path, query, header, formData, body)
  let scheme = call_602809.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602809.url(scheme.get, call_602809.host, call_602809.base,
                         call_602809.route, valid.getOrDefault("path"))
  result = hook(call_602809, url, valid)

proc call*(call_602810: Call_GetGenerateServiceLastAccessedDetails_602796;
          Arn: string; Action: string = "GenerateServiceLastAccessedDetails";
          Version: string = "2010-05-08"): Recallable =
  ## getGenerateServiceLastAccessedDetails
  ## <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access AWS services. Recent activity usually appears within four hours. IAM reports activity for the last 365 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions Where Data Is Tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an AWS API, not just the successful ones. This includes all attempts that were made using the AWS Management Console, the AWS API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM Events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every AWS service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt. </p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific AWS service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing Policy Scope by Viewing User Activity</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_602811 = newJObject()
  add(query_602811, "Action", newJString(Action))
  add(query_602811, "Arn", newJString(Arn))
  add(query_602811, "Version", newJString(Version))
  result = call_602810.call(nil, query_602811, nil, nil, nil)

var getGenerateServiceLastAccessedDetails* = Call_GetGenerateServiceLastAccessedDetails_602796(
    name: "getGenerateServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GenerateServiceLastAccessedDetails",
    validator: validate_GetGenerateServiceLastAccessedDetails_602797, base: "/",
    url: url_GetGenerateServiceLastAccessedDetails_602798,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccessKeyLastUsed_602845 = ref object of OpenApiRestCall_600426
proc url_PostGetAccessKeyLastUsed_602847(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccessKeyLastUsed_602846(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602848 = query.getOrDefault("Action")
  valid_602848 = validateParameter(valid_602848, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_602848 != nil:
    section.add "Action", valid_602848
  var valid_602849 = query.getOrDefault("Version")
  valid_602849 = validateParameter(valid_602849, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602849 != nil:
    section.add "Version", valid_602849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602850 = header.getOrDefault("X-Amz-Date")
  valid_602850 = validateParameter(valid_602850, JString, required = false,
                                 default = nil)
  if valid_602850 != nil:
    section.add "X-Amz-Date", valid_602850
  var valid_602851 = header.getOrDefault("X-Amz-Security-Token")
  valid_602851 = validateParameter(valid_602851, JString, required = false,
                                 default = nil)
  if valid_602851 != nil:
    section.add "X-Amz-Security-Token", valid_602851
  var valid_602852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602852 = validateParameter(valid_602852, JString, required = false,
                                 default = nil)
  if valid_602852 != nil:
    section.add "X-Amz-Content-Sha256", valid_602852
  var valid_602853 = header.getOrDefault("X-Amz-Algorithm")
  valid_602853 = validateParameter(valid_602853, JString, required = false,
                                 default = nil)
  if valid_602853 != nil:
    section.add "X-Amz-Algorithm", valid_602853
  var valid_602854 = header.getOrDefault("X-Amz-Signature")
  valid_602854 = validateParameter(valid_602854, JString, required = false,
                                 default = nil)
  if valid_602854 != nil:
    section.add "X-Amz-Signature", valid_602854
  var valid_602855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602855 = validateParameter(valid_602855, JString, required = false,
                                 default = nil)
  if valid_602855 != nil:
    section.add "X-Amz-SignedHeaders", valid_602855
  var valid_602856 = header.getOrDefault("X-Amz-Credential")
  valid_602856 = validateParameter(valid_602856, JString, required = false,
                                 default = nil)
  if valid_602856 != nil:
    section.add "X-Amz-Credential", valid_602856
  result.add "header", section
  ## parameters in `formData` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_602857 = formData.getOrDefault("AccessKeyId")
  valid_602857 = validateParameter(valid_602857, JString, required = true,
                                 default = nil)
  if valid_602857 != nil:
    section.add "AccessKeyId", valid_602857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602858: Call_PostGetAccessKeyLastUsed_602845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_602858.validator(path, query, header, formData, body)
  let scheme = call_602858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602858.url(scheme.get, call_602858.host, call_602858.base,
                         call_602858.route, valid.getOrDefault("path"))
  result = hook(call_602858, url, valid)

proc call*(call_602859: Call_PostGetAccessKeyLastUsed_602845; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602860 = newJObject()
  var formData_602861 = newJObject()
  add(formData_602861, "AccessKeyId", newJString(AccessKeyId))
  add(query_602860, "Action", newJString(Action))
  add(query_602860, "Version", newJString(Version))
  result = call_602859.call(nil, query_602860, nil, formData_602861, nil)

var postGetAccessKeyLastUsed* = Call_PostGetAccessKeyLastUsed_602845(
    name: "postGetAccessKeyLastUsed", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_PostGetAccessKeyLastUsed_602846, base: "/",
    url: url_PostGetAccessKeyLastUsed_602847, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccessKeyLastUsed_602829 = ref object of OpenApiRestCall_600426
proc url_GetGetAccessKeyLastUsed_602831(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccessKeyLastUsed_602830(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AccessKeyId: JString (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AccessKeyId` field"
  var valid_602832 = query.getOrDefault("AccessKeyId")
  valid_602832 = validateParameter(valid_602832, JString, required = true,
                                 default = nil)
  if valid_602832 != nil:
    section.add "AccessKeyId", valid_602832
  var valid_602833 = query.getOrDefault("Action")
  valid_602833 = validateParameter(valid_602833, JString, required = true,
                                 default = newJString("GetAccessKeyLastUsed"))
  if valid_602833 != nil:
    section.add "Action", valid_602833
  var valid_602834 = query.getOrDefault("Version")
  valid_602834 = validateParameter(valid_602834, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602834 != nil:
    section.add "Version", valid_602834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602835 = header.getOrDefault("X-Amz-Date")
  valid_602835 = validateParameter(valid_602835, JString, required = false,
                                 default = nil)
  if valid_602835 != nil:
    section.add "X-Amz-Date", valid_602835
  var valid_602836 = header.getOrDefault("X-Amz-Security-Token")
  valid_602836 = validateParameter(valid_602836, JString, required = false,
                                 default = nil)
  if valid_602836 != nil:
    section.add "X-Amz-Security-Token", valid_602836
  var valid_602837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602837 = validateParameter(valid_602837, JString, required = false,
                                 default = nil)
  if valid_602837 != nil:
    section.add "X-Amz-Content-Sha256", valid_602837
  var valid_602838 = header.getOrDefault("X-Amz-Algorithm")
  valid_602838 = validateParameter(valid_602838, JString, required = false,
                                 default = nil)
  if valid_602838 != nil:
    section.add "X-Amz-Algorithm", valid_602838
  var valid_602839 = header.getOrDefault("X-Amz-Signature")
  valid_602839 = validateParameter(valid_602839, JString, required = false,
                                 default = nil)
  if valid_602839 != nil:
    section.add "X-Amz-Signature", valid_602839
  var valid_602840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602840 = validateParameter(valid_602840, JString, required = false,
                                 default = nil)
  if valid_602840 != nil:
    section.add "X-Amz-SignedHeaders", valid_602840
  var valid_602841 = header.getOrDefault("X-Amz-Credential")
  valid_602841 = validateParameter(valid_602841, JString, required = false,
                                 default = nil)
  if valid_602841 != nil:
    section.add "X-Amz-Credential", valid_602841
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602842: Call_GetGetAccessKeyLastUsed_602829; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ## 
  let valid = call_602842.validator(path, query, header, formData, body)
  let scheme = call_602842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602842.url(scheme.get, call_602842.host, call_602842.base,
                         call_602842.route, valid.getOrDefault("path"))
  result = hook(call_602842, url, valid)

proc call*(call_602843: Call_GetGetAccessKeyLastUsed_602829; AccessKeyId: string;
          Action: string = "GetAccessKeyLastUsed"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccessKeyLastUsed
  ## Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and Region that were specified in the last request made with that key.
  ##   AccessKeyId: string (required)
  ##              : <p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602844 = newJObject()
  add(query_602844, "AccessKeyId", newJString(AccessKeyId))
  add(query_602844, "Action", newJString(Action))
  add(query_602844, "Version", newJString(Version))
  result = call_602843.call(nil, query_602844, nil, nil, nil)

var getGetAccessKeyLastUsed* = Call_GetGetAccessKeyLastUsed_602829(
    name: "getGetAccessKeyLastUsed", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccessKeyLastUsed",
    validator: validate_GetGetAccessKeyLastUsed_602830, base: "/",
    url: url_GetGetAccessKeyLastUsed_602831, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountAuthorizationDetails_602880 = ref object of OpenApiRestCall_600426
proc url_PostGetAccountAuthorizationDetails_602882(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountAuthorizationDetails_602881(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602883 = query.getOrDefault("Action")
  valid_602883 = validateParameter(valid_602883, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_602883 != nil:
    section.add "Action", valid_602883
  var valid_602884 = query.getOrDefault("Version")
  valid_602884 = validateParameter(valid_602884, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602884 != nil:
    section.add "Version", valid_602884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602885 = header.getOrDefault("X-Amz-Date")
  valid_602885 = validateParameter(valid_602885, JString, required = false,
                                 default = nil)
  if valid_602885 != nil:
    section.add "X-Amz-Date", valid_602885
  var valid_602886 = header.getOrDefault("X-Amz-Security-Token")
  valid_602886 = validateParameter(valid_602886, JString, required = false,
                                 default = nil)
  if valid_602886 != nil:
    section.add "X-Amz-Security-Token", valid_602886
  var valid_602887 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602887 = validateParameter(valid_602887, JString, required = false,
                                 default = nil)
  if valid_602887 != nil:
    section.add "X-Amz-Content-Sha256", valid_602887
  var valid_602888 = header.getOrDefault("X-Amz-Algorithm")
  valid_602888 = validateParameter(valid_602888, JString, required = false,
                                 default = nil)
  if valid_602888 != nil:
    section.add "X-Amz-Algorithm", valid_602888
  var valid_602889 = header.getOrDefault("X-Amz-Signature")
  valid_602889 = validateParameter(valid_602889, JString, required = false,
                                 default = nil)
  if valid_602889 != nil:
    section.add "X-Amz-Signature", valid_602889
  var valid_602890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602890 = validateParameter(valid_602890, JString, required = false,
                                 default = nil)
  if valid_602890 != nil:
    section.add "X-Amz-SignedHeaders", valid_602890
  var valid_602891 = header.getOrDefault("X-Amz-Credential")
  valid_602891 = validateParameter(valid_602891, JString, required = false,
                                 default = nil)
  if valid_602891 != nil:
    section.add "X-Amz-Credential", valid_602891
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_602892 = formData.getOrDefault("Filter")
  valid_602892 = validateParameter(valid_602892, JArray, required = false,
                                 default = nil)
  if valid_602892 != nil:
    section.add "Filter", valid_602892
  var valid_602893 = formData.getOrDefault("Marker")
  valid_602893 = validateParameter(valid_602893, JString, required = false,
                                 default = nil)
  if valid_602893 != nil:
    section.add "Marker", valid_602893
  var valid_602894 = formData.getOrDefault("MaxItems")
  valid_602894 = validateParameter(valid_602894, JInt, required = false, default = nil)
  if valid_602894 != nil:
    section.add "MaxItems", valid_602894
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602895: Call_PostGetAccountAuthorizationDetails_602880;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_602895.validator(path, query, header, formData, body)
  let scheme = call_602895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602895.url(scheme.get, call_602895.host, call_602895.base,
                         call_602895.route, valid.getOrDefault("path"))
  result = hook(call_602895, url, valid)

proc call*(call_602896: Call_PostGetAccountAuthorizationDetails_602880;
          Filter: JsonNode = nil; Marker: string = "";
          Action: string = "GetAccountAuthorizationDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_602897 = newJObject()
  var formData_602898 = newJObject()
  if Filter != nil:
    formData_602898.add "Filter", Filter
  add(formData_602898, "Marker", newJString(Marker))
  add(query_602897, "Action", newJString(Action))
  add(formData_602898, "MaxItems", newJInt(MaxItems))
  add(query_602897, "Version", newJString(Version))
  result = call_602896.call(nil, query_602897, nil, formData_602898, nil)

var postGetAccountAuthorizationDetails* = Call_PostGetAccountAuthorizationDetails_602880(
    name: "postGetAccountAuthorizationDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_PostGetAccountAuthorizationDetails_602881, base: "/",
    url: url_PostGetAccountAuthorizationDetails_602882,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountAuthorizationDetails_602862 = ref object of OpenApiRestCall_600426
proc url_GetGetAccountAuthorizationDetails_602864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountAuthorizationDetails_602863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_602865 = query.getOrDefault("Filter")
  valid_602865 = validateParameter(valid_602865, JArray, required = false,
                                 default = nil)
  if valid_602865 != nil:
    section.add "Filter", valid_602865
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602866 = query.getOrDefault("Action")
  valid_602866 = validateParameter(valid_602866, JString, required = true, default = newJString(
      "GetAccountAuthorizationDetails"))
  if valid_602866 != nil:
    section.add "Action", valid_602866
  var valid_602867 = query.getOrDefault("Marker")
  valid_602867 = validateParameter(valid_602867, JString, required = false,
                                 default = nil)
  if valid_602867 != nil:
    section.add "Marker", valid_602867
  var valid_602868 = query.getOrDefault("MaxItems")
  valid_602868 = validateParameter(valid_602868, JInt, required = false, default = nil)
  if valid_602868 != nil:
    section.add "MaxItems", valid_602868
  var valid_602869 = query.getOrDefault("Version")
  valid_602869 = validateParameter(valid_602869, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602869 != nil:
    section.add "Version", valid_602869
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602870 = header.getOrDefault("X-Amz-Date")
  valid_602870 = validateParameter(valid_602870, JString, required = false,
                                 default = nil)
  if valid_602870 != nil:
    section.add "X-Amz-Date", valid_602870
  var valid_602871 = header.getOrDefault("X-Amz-Security-Token")
  valid_602871 = validateParameter(valid_602871, JString, required = false,
                                 default = nil)
  if valid_602871 != nil:
    section.add "X-Amz-Security-Token", valid_602871
  var valid_602872 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602872 = validateParameter(valid_602872, JString, required = false,
                                 default = nil)
  if valid_602872 != nil:
    section.add "X-Amz-Content-Sha256", valid_602872
  var valid_602873 = header.getOrDefault("X-Amz-Algorithm")
  valid_602873 = validateParameter(valid_602873, JString, required = false,
                                 default = nil)
  if valid_602873 != nil:
    section.add "X-Amz-Algorithm", valid_602873
  var valid_602874 = header.getOrDefault("X-Amz-Signature")
  valid_602874 = validateParameter(valid_602874, JString, required = false,
                                 default = nil)
  if valid_602874 != nil:
    section.add "X-Amz-Signature", valid_602874
  var valid_602875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602875 = validateParameter(valid_602875, JString, required = false,
                                 default = nil)
  if valid_602875 != nil:
    section.add "X-Amz-SignedHeaders", valid_602875
  var valid_602876 = header.getOrDefault("X-Amz-Credential")
  valid_602876 = validateParameter(valid_602876, JString, required = false,
                                 default = nil)
  if valid_602876 != nil:
    section.add "X-Amz-Credential", valid_602876
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602877: Call_GetGetAccountAuthorizationDetails_602862;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_602877.validator(path, query, header, formData, body)
  let scheme = call_602877.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602877.url(scheme.get, call_602877.host, call_602877.base,
                         call_602877.route, valid.getOrDefault("path"))
  result = hook(call_602877, url, valid)

proc call*(call_602878: Call_GetGetAccountAuthorizationDetails_602862;
          Filter: JsonNode = nil; Action: string = "GetAccountAuthorizationDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountAuthorizationDetails
  ## <p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Filter: JArray
  ##         : <p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_602879 = newJObject()
  if Filter != nil:
    query_602879.add "Filter", Filter
  add(query_602879, "Action", newJString(Action))
  add(query_602879, "Marker", newJString(Marker))
  add(query_602879, "MaxItems", newJInt(MaxItems))
  add(query_602879, "Version", newJString(Version))
  result = call_602878.call(nil, query_602879, nil, nil, nil)

var getGetAccountAuthorizationDetails* = Call_GetGetAccountAuthorizationDetails_602862(
    name: "getGetAccountAuthorizationDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountAuthorizationDetails",
    validator: validate_GetGetAccountAuthorizationDetails_602863, base: "/",
    url: url_GetGetAccountAuthorizationDetails_602864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountPasswordPolicy_602914 = ref object of OpenApiRestCall_600426
proc url_PostGetAccountPasswordPolicy_602916(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountPasswordPolicy_602915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602917 = query.getOrDefault("Action")
  valid_602917 = validateParameter(valid_602917, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_602917 != nil:
    section.add "Action", valid_602917
  var valid_602918 = query.getOrDefault("Version")
  valid_602918 = validateParameter(valid_602918, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602918 != nil:
    section.add "Version", valid_602918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602919 = header.getOrDefault("X-Amz-Date")
  valid_602919 = validateParameter(valid_602919, JString, required = false,
                                 default = nil)
  if valid_602919 != nil:
    section.add "X-Amz-Date", valid_602919
  var valid_602920 = header.getOrDefault("X-Amz-Security-Token")
  valid_602920 = validateParameter(valid_602920, JString, required = false,
                                 default = nil)
  if valid_602920 != nil:
    section.add "X-Amz-Security-Token", valid_602920
  var valid_602921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602921 = validateParameter(valid_602921, JString, required = false,
                                 default = nil)
  if valid_602921 != nil:
    section.add "X-Amz-Content-Sha256", valid_602921
  var valid_602922 = header.getOrDefault("X-Amz-Algorithm")
  valid_602922 = validateParameter(valid_602922, JString, required = false,
                                 default = nil)
  if valid_602922 != nil:
    section.add "X-Amz-Algorithm", valid_602922
  var valid_602923 = header.getOrDefault("X-Amz-Signature")
  valid_602923 = validateParameter(valid_602923, JString, required = false,
                                 default = nil)
  if valid_602923 != nil:
    section.add "X-Amz-Signature", valid_602923
  var valid_602924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602924 = validateParameter(valid_602924, JString, required = false,
                                 default = nil)
  if valid_602924 != nil:
    section.add "X-Amz-SignedHeaders", valid_602924
  var valid_602925 = header.getOrDefault("X-Amz-Credential")
  valid_602925 = validateParameter(valid_602925, JString, required = false,
                                 default = nil)
  if valid_602925 != nil:
    section.add "X-Amz-Credential", valid_602925
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602926: Call_PostGetAccountPasswordPolicy_602914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_602926.validator(path, query, header, formData, body)
  let scheme = call_602926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602926.url(scheme.get, call_602926.host, call_602926.base,
                         call_602926.route, valid.getOrDefault("path"))
  result = hook(call_602926, url, valid)

proc call*(call_602927: Call_PostGetAccountPasswordPolicy_602914;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602928 = newJObject()
  add(query_602928, "Action", newJString(Action))
  add(query_602928, "Version", newJString(Version))
  result = call_602927.call(nil, query_602928, nil, nil, nil)

var postGetAccountPasswordPolicy* = Call_PostGetAccountPasswordPolicy_602914(
    name: "postGetAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_PostGetAccountPasswordPolicy_602915, base: "/",
    url: url_PostGetAccountPasswordPolicy_602916,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountPasswordPolicy_602899 = ref object of OpenApiRestCall_600426
proc url_GetGetAccountPasswordPolicy_602901(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountPasswordPolicy_602900(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602902 = query.getOrDefault("Action")
  valid_602902 = validateParameter(valid_602902, JString, required = true, default = newJString(
      "GetAccountPasswordPolicy"))
  if valid_602902 != nil:
    section.add "Action", valid_602902
  var valid_602903 = query.getOrDefault("Version")
  valid_602903 = validateParameter(valid_602903, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602903 != nil:
    section.add "Version", valid_602903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602904 = header.getOrDefault("X-Amz-Date")
  valid_602904 = validateParameter(valid_602904, JString, required = false,
                                 default = nil)
  if valid_602904 != nil:
    section.add "X-Amz-Date", valid_602904
  var valid_602905 = header.getOrDefault("X-Amz-Security-Token")
  valid_602905 = validateParameter(valid_602905, JString, required = false,
                                 default = nil)
  if valid_602905 != nil:
    section.add "X-Amz-Security-Token", valid_602905
  var valid_602906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602906 = validateParameter(valid_602906, JString, required = false,
                                 default = nil)
  if valid_602906 != nil:
    section.add "X-Amz-Content-Sha256", valid_602906
  var valid_602907 = header.getOrDefault("X-Amz-Algorithm")
  valid_602907 = validateParameter(valid_602907, JString, required = false,
                                 default = nil)
  if valid_602907 != nil:
    section.add "X-Amz-Algorithm", valid_602907
  var valid_602908 = header.getOrDefault("X-Amz-Signature")
  valid_602908 = validateParameter(valid_602908, JString, required = false,
                                 default = nil)
  if valid_602908 != nil:
    section.add "X-Amz-Signature", valid_602908
  var valid_602909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602909 = validateParameter(valid_602909, JString, required = false,
                                 default = nil)
  if valid_602909 != nil:
    section.add "X-Amz-SignedHeaders", valid_602909
  var valid_602910 = header.getOrDefault("X-Amz-Credential")
  valid_602910 = validateParameter(valid_602910, JString, required = false,
                                 default = nil)
  if valid_602910 != nil:
    section.add "X-Amz-Credential", valid_602910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602911: Call_GetGetAccountPasswordPolicy_602899; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ## 
  let valid = call_602911.validator(path, query, header, formData, body)
  let scheme = call_602911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602911.url(scheme.get, call_602911.host, call_602911.base,
                         call_602911.route, valid.getOrDefault("path"))
  result = hook(call_602911, url, valid)

proc call*(call_602912: Call_GetGetAccountPasswordPolicy_602899;
          Action: string = "GetAccountPasswordPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetAccountPasswordPolicy
  ## Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602913 = newJObject()
  add(query_602913, "Action", newJString(Action))
  add(query_602913, "Version", newJString(Version))
  result = call_602912.call(nil, query_602913, nil, nil, nil)

var getGetAccountPasswordPolicy* = Call_GetGetAccountPasswordPolicy_602899(
    name: "getGetAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountPasswordPolicy",
    validator: validate_GetGetAccountPasswordPolicy_602900, base: "/",
    url: url_GetGetAccountPasswordPolicy_602901,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetAccountSummary_602944 = ref object of OpenApiRestCall_600426
proc url_PostGetAccountSummary_602946(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetAccountSummary_602945(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602947 = query.getOrDefault("Action")
  valid_602947 = validateParameter(valid_602947, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_602947 != nil:
    section.add "Action", valid_602947
  var valid_602948 = query.getOrDefault("Version")
  valid_602948 = validateParameter(valid_602948, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602948 != nil:
    section.add "Version", valid_602948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602949 = header.getOrDefault("X-Amz-Date")
  valid_602949 = validateParameter(valid_602949, JString, required = false,
                                 default = nil)
  if valid_602949 != nil:
    section.add "X-Amz-Date", valid_602949
  var valid_602950 = header.getOrDefault("X-Amz-Security-Token")
  valid_602950 = validateParameter(valid_602950, JString, required = false,
                                 default = nil)
  if valid_602950 != nil:
    section.add "X-Amz-Security-Token", valid_602950
  var valid_602951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602951 = validateParameter(valid_602951, JString, required = false,
                                 default = nil)
  if valid_602951 != nil:
    section.add "X-Amz-Content-Sha256", valid_602951
  var valid_602952 = header.getOrDefault("X-Amz-Algorithm")
  valid_602952 = validateParameter(valid_602952, JString, required = false,
                                 default = nil)
  if valid_602952 != nil:
    section.add "X-Amz-Algorithm", valid_602952
  var valid_602953 = header.getOrDefault("X-Amz-Signature")
  valid_602953 = validateParameter(valid_602953, JString, required = false,
                                 default = nil)
  if valid_602953 != nil:
    section.add "X-Amz-Signature", valid_602953
  var valid_602954 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602954 = validateParameter(valid_602954, JString, required = false,
                                 default = nil)
  if valid_602954 != nil:
    section.add "X-Amz-SignedHeaders", valid_602954
  var valid_602955 = header.getOrDefault("X-Amz-Credential")
  valid_602955 = validateParameter(valid_602955, JString, required = false,
                                 default = nil)
  if valid_602955 != nil:
    section.add "X-Amz-Credential", valid_602955
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602956: Call_PostGetAccountSummary_602944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602956.validator(path, query, header, formData, body)
  let scheme = call_602956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602956.url(scheme.get, call_602956.host, call_602956.base,
                         call_602956.route, valid.getOrDefault("path"))
  result = hook(call_602956, url, valid)

proc call*(call_602957: Call_PostGetAccountSummary_602944;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## postGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602958 = newJObject()
  add(query_602958, "Action", newJString(Action))
  add(query_602958, "Version", newJString(Version))
  result = call_602957.call(nil, query_602958, nil, nil, nil)

var postGetAccountSummary* = Call_PostGetAccountSummary_602944(
    name: "postGetAccountSummary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_PostGetAccountSummary_602945, base: "/",
    url: url_PostGetAccountSummary_602946, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetAccountSummary_602929 = ref object of OpenApiRestCall_600426
proc url_GetGetAccountSummary_602931(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetAccountSummary_602930(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602932 = query.getOrDefault("Action")
  valid_602932 = validateParameter(valid_602932, JString, required = true,
                                 default = newJString("GetAccountSummary"))
  if valid_602932 != nil:
    section.add "Action", valid_602932
  var valid_602933 = query.getOrDefault("Version")
  valid_602933 = validateParameter(valid_602933, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602933 != nil:
    section.add "Version", valid_602933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602934 = header.getOrDefault("X-Amz-Date")
  valid_602934 = validateParameter(valid_602934, JString, required = false,
                                 default = nil)
  if valid_602934 != nil:
    section.add "X-Amz-Date", valid_602934
  var valid_602935 = header.getOrDefault("X-Amz-Security-Token")
  valid_602935 = validateParameter(valid_602935, JString, required = false,
                                 default = nil)
  if valid_602935 != nil:
    section.add "X-Amz-Security-Token", valid_602935
  var valid_602936 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602936 = validateParameter(valid_602936, JString, required = false,
                                 default = nil)
  if valid_602936 != nil:
    section.add "X-Amz-Content-Sha256", valid_602936
  var valid_602937 = header.getOrDefault("X-Amz-Algorithm")
  valid_602937 = validateParameter(valid_602937, JString, required = false,
                                 default = nil)
  if valid_602937 != nil:
    section.add "X-Amz-Algorithm", valid_602937
  var valid_602938 = header.getOrDefault("X-Amz-Signature")
  valid_602938 = validateParameter(valid_602938, JString, required = false,
                                 default = nil)
  if valid_602938 != nil:
    section.add "X-Amz-Signature", valid_602938
  var valid_602939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602939 = validateParameter(valid_602939, JString, required = false,
                                 default = nil)
  if valid_602939 != nil:
    section.add "X-Amz-SignedHeaders", valid_602939
  var valid_602940 = header.getOrDefault("X-Amz-Credential")
  valid_602940 = validateParameter(valid_602940, JString, required = false,
                                 default = nil)
  if valid_602940 != nil:
    section.add "X-Amz-Credential", valid_602940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602941: Call_GetGetAccountSummary_602929; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_602941.validator(path, query, header, formData, body)
  let scheme = call_602941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602941.url(scheme.get, call_602941.host, call_602941.base,
                         call_602941.route, valid.getOrDefault("path"))
  result = hook(call_602941, url, valid)

proc call*(call_602942: Call_GetGetAccountSummary_602929;
          Action: string = "GetAccountSummary"; Version: string = "2010-05-08"): Recallable =
  ## getGetAccountSummary
  ## <p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602943 = newJObject()
  add(query_602943, "Action", newJString(Action))
  add(query_602943, "Version", newJString(Version))
  result = call_602942.call(nil, query_602943, nil, nil, nil)

var getGetAccountSummary* = Call_GetGetAccountSummary_602929(
    name: "getGetAccountSummary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetAccountSummary",
    validator: validate_GetGetAccountSummary_602930, base: "/",
    url: url_GetGetAccountSummary_602931, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForCustomPolicy_602975 = ref object of OpenApiRestCall_600426
proc url_PostGetContextKeysForCustomPolicy_602977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForCustomPolicy_602976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_602978 = query.getOrDefault("Action")
  valid_602978 = validateParameter(valid_602978, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_602978 != nil:
    section.add "Action", valid_602978
  var valid_602979 = query.getOrDefault("Version")
  valid_602979 = validateParameter(valid_602979, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602979 != nil:
    section.add "Version", valid_602979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602980 = header.getOrDefault("X-Amz-Date")
  valid_602980 = validateParameter(valid_602980, JString, required = false,
                                 default = nil)
  if valid_602980 != nil:
    section.add "X-Amz-Date", valid_602980
  var valid_602981 = header.getOrDefault("X-Amz-Security-Token")
  valid_602981 = validateParameter(valid_602981, JString, required = false,
                                 default = nil)
  if valid_602981 != nil:
    section.add "X-Amz-Security-Token", valid_602981
  var valid_602982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602982 = validateParameter(valid_602982, JString, required = false,
                                 default = nil)
  if valid_602982 != nil:
    section.add "X-Amz-Content-Sha256", valid_602982
  var valid_602983 = header.getOrDefault("X-Amz-Algorithm")
  valid_602983 = validateParameter(valid_602983, JString, required = false,
                                 default = nil)
  if valid_602983 != nil:
    section.add "X-Amz-Algorithm", valid_602983
  var valid_602984 = header.getOrDefault("X-Amz-Signature")
  valid_602984 = validateParameter(valid_602984, JString, required = false,
                                 default = nil)
  if valid_602984 != nil:
    section.add "X-Amz-Signature", valid_602984
  var valid_602985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602985 = validateParameter(valid_602985, JString, required = false,
                                 default = nil)
  if valid_602985 != nil:
    section.add "X-Amz-SignedHeaders", valid_602985
  var valid_602986 = header.getOrDefault("X-Amz-Credential")
  valid_602986 = validateParameter(valid_602986, JString, required = false,
                                 default = nil)
  if valid_602986 != nil:
    section.add "X-Amz-Credential", valid_602986
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `PolicyInputList` field"
  var valid_602987 = formData.getOrDefault("PolicyInputList")
  valid_602987 = validateParameter(valid_602987, JArray, required = true, default = nil)
  if valid_602987 != nil:
    section.add "PolicyInputList", valid_602987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602988: Call_PostGetContextKeysForCustomPolicy_602975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_602988.validator(path, query, header, formData, body)
  let scheme = call_602988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602988.url(scheme.get, call_602988.host, call_602988.base,
                         call_602988.route, valid.getOrDefault("path"))
  result = hook(call_602988, url, valid)

proc call*(call_602989: Call_PostGetContextKeysForCustomPolicy_602975;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_602990 = newJObject()
  var formData_602991 = newJObject()
  add(query_602990, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_602991.add "PolicyInputList", PolicyInputList
  add(query_602990, "Version", newJString(Version))
  result = call_602989.call(nil, query_602990, nil, formData_602991, nil)

var postGetContextKeysForCustomPolicy* = Call_PostGetContextKeysForCustomPolicy_602975(
    name: "postGetContextKeysForCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_PostGetContextKeysForCustomPolicy_602976, base: "/",
    url: url_PostGetContextKeysForCustomPolicy_602977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForCustomPolicy_602959 = ref object of OpenApiRestCall_600426
proc url_GetGetContextKeysForCustomPolicy_602961(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForCustomPolicy_602960(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyInputList` field"
  var valid_602962 = query.getOrDefault("PolicyInputList")
  valid_602962 = validateParameter(valid_602962, JArray, required = true, default = nil)
  if valid_602962 != nil:
    section.add "PolicyInputList", valid_602962
  var valid_602963 = query.getOrDefault("Action")
  valid_602963 = validateParameter(valid_602963, JString, required = true, default = newJString(
      "GetContextKeysForCustomPolicy"))
  if valid_602963 != nil:
    section.add "Action", valid_602963
  var valid_602964 = query.getOrDefault("Version")
  valid_602964 = validateParameter(valid_602964, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602964 != nil:
    section.add "Version", valid_602964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602965 = header.getOrDefault("X-Amz-Date")
  valid_602965 = validateParameter(valid_602965, JString, required = false,
                                 default = nil)
  if valid_602965 != nil:
    section.add "X-Amz-Date", valid_602965
  var valid_602966 = header.getOrDefault("X-Amz-Security-Token")
  valid_602966 = validateParameter(valid_602966, JString, required = false,
                                 default = nil)
  if valid_602966 != nil:
    section.add "X-Amz-Security-Token", valid_602966
  var valid_602967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602967 = validateParameter(valid_602967, JString, required = false,
                                 default = nil)
  if valid_602967 != nil:
    section.add "X-Amz-Content-Sha256", valid_602967
  var valid_602968 = header.getOrDefault("X-Amz-Algorithm")
  valid_602968 = validateParameter(valid_602968, JString, required = false,
                                 default = nil)
  if valid_602968 != nil:
    section.add "X-Amz-Algorithm", valid_602968
  var valid_602969 = header.getOrDefault("X-Amz-Signature")
  valid_602969 = validateParameter(valid_602969, JString, required = false,
                                 default = nil)
  if valid_602969 != nil:
    section.add "X-Amz-Signature", valid_602969
  var valid_602970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602970 = validateParameter(valid_602970, JString, required = false,
                                 default = nil)
  if valid_602970 != nil:
    section.add "X-Amz-SignedHeaders", valid_602970
  var valid_602971 = header.getOrDefault("X-Amz-Credential")
  valid_602971 = validateParameter(valid_602971, JString, required = false,
                                 default = nil)
  if valid_602971 != nil:
    section.add "X-Amz-Credential", valid_602971
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602972: Call_GetGetContextKeysForCustomPolicy_602959;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ## 
  let valid = call_602972.validator(path, query, header, formData, body)
  let scheme = call_602972.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602972.url(scheme.get, call_602972.host, call_602972.base,
                         call_602972.route, valid.getOrDefault("path"))
  result = hook(call_602972, url, valid)

proc call*(call_602973: Call_GetGetContextKeysForCustomPolicy_602959;
          PolicyInputList: JsonNode;
          Action: string = "GetContextKeysForCustomPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForCustomPolicy
  ## <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_602974 = newJObject()
  if PolicyInputList != nil:
    query_602974.add "PolicyInputList", PolicyInputList
  add(query_602974, "Action", newJString(Action))
  add(query_602974, "Version", newJString(Version))
  result = call_602973.call(nil, query_602974, nil, nil, nil)

var getGetContextKeysForCustomPolicy* = Call_GetGetContextKeysForCustomPolicy_602959(
    name: "getGetContextKeysForCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForCustomPolicy",
    validator: validate_GetGetContextKeysForCustomPolicy_602960, base: "/",
    url: url_GetGetContextKeysForCustomPolicy_602961,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetContextKeysForPrincipalPolicy_603009 = ref object of OpenApiRestCall_600426
proc url_PostGetContextKeysForPrincipalPolicy_603011(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetContextKeysForPrincipalPolicy_603010(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603012 = query.getOrDefault("Action")
  valid_603012 = validateParameter(valid_603012, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_603012 != nil:
    section.add "Action", valid_603012
  var valid_603013 = query.getOrDefault("Version")
  valid_603013 = validateParameter(valid_603013, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603013 != nil:
    section.add "Version", valid_603013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603014 = header.getOrDefault("X-Amz-Date")
  valid_603014 = validateParameter(valid_603014, JString, required = false,
                                 default = nil)
  if valid_603014 != nil:
    section.add "X-Amz-Date", valid_603014
  var valid_603015 = header.getOrDefault("X-Amz-Security-Token")
  valid_603015 = validateParameter(valid_603015, JString, required = false,
                                 default = nil)
  if valid_603015 != nil:
    section.add "X-Amz-Security-Token", valid_603015
  var valid_603016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603016 = validateParameter(valid_603016, JString, required = false,
                                 default = nil)
  if valid_603016 != nil:
    section.add "X-Amz-Content-Sha256", valid_603016
  var valid_603017 = header.getOrDefault("X-Amz-Algorithm")
  valid_603017 = validateParameter(valid_603017, JString, required = false,
                                 default = nil)
  if valid_603017 != nil:
    section.add "X-Amz-Algorithm", valid_603017
  var valid_603018 = header.getOrDefault("X-Amz-Signature")
  valid_603018 = validateParameter(valid_603018, JString, required = false,
                                 default = nil)
  if valid_603018 != nil:
    section.add "X-Amz-Signature", valid_603018
  var valid_603019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603019 = validateParameter(valid_603019, JString, required = false,
                                 default = nil)
  if valid_603019 != nil:
    section.add "X-Amz-SignedHeaders", valid_603019
  var valid_603020 = header.getOrDefault("X-Amz-Credential")
  valid_603020 = validateParameter(valid_603020, JString, required = false,
                                 default = nil)
  if valid_603020 != nil:
    section.add "X-Amz-Credential", valid_603020
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  var valid_603021 = formData.getOrDefault("PolicyInputList")
  valid_603021 = validateParameter(valid_603021, JArray, required = false,
                                 default = nil)
  if valid_603021 != nil:
    section.add "PolicyInputList", valid_603021
  assert formData != nil, "formData argument is necessary due to required `PolicySourceArn` field"
  var valid_603022 = formData.getOrDefault("PolicySourceArn")
  valid_603022 = validateParameter(valid_603022, JString, required = true,
                                 default = nil)
  if valid_603022 != nil:
    section.add "PolicySourceArn", valid_603022
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603023: Call_PostGetContextKeysForPrincipalPolicy_603009;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_603023.validator(path, query, header, formData, body)
  let scheme = call_603023.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603023.url(scheme.get, call_603023.host, call_603023.base,
                         call_603023.route, valid.getOrDefault("path"))
  result = hook(call_603023, url, valid)

proc call*(call_603024: Call_PostGetContextKeysForPrincipalPolicy_603009;
          PolicySourceArn: string;
          Action: string = "GetContextKeysForPrincipalPolicy";
          PolicyInputList: JsonNode = nil; Version: string = "2010-05-08"): Recallable =
  ## postGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_603025 = newJObject()
  var formData_603026 = newJObject()
  add(query_603025, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_603026.add "PolicyInputList", PolicyInputList
  add(formData_603026, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_603025, "Version", newJString(Version))
  result = call_603024.call(nil, query_603025, nil, formData_603026, nil)

var postGetContextKeysForPrincipalPolicy* = Call_PostGetContextKeysForPrincipalPolicy_603009(
    name: "postGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_PostGetContextKeysForPrincipalPolicy_603010, base: "/",
    url: url_PostGetContextKeysForPrincipalPolicy_603011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetContextKeysForPrincipalPolicy_602992 = ref object of OpenApiRestCall_600426
proc url_GetGetContextKeysForPrincipalPolicy_602994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetContextKeysForPrincipalPolicy_602993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_602995 = query.getOrDefault("PolicyInputList")
  valid_602995 = validateParameter(valid_602995, JArray, required = false,
                                 default = nil)
  if valid_602995 != nil:
    section.add "PolicyInputList", valid_602995
  assert query != nil,
        "query argument is necessary due to required `PolicySourceArn` field"
  var valid_602996 = query.getOrDefault("PolicySourceArn")
  valid_602996 = validateParameter(valid_602996, JString, required = true,
                                 default = nil)
  if valid_602996 != nil:
    section.add "PolicySourceArn", valid_602996
  var valid_602997 = query.getOrDefault("Action")
  valid_602997 = validateParameter(valid_602997, JString, required = true, default = newJString(
      "GetContextKeysForPrincipalPolicy"))
  if valid_602997 != nil:
    section.add "Action", valid_602997
  var valid_602998 = query.getOrDefault("Version")
  valid_602998 = validateParameter(valid_602998, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_602998 != nil:
    section.add "Version", valid_602998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602999 = header.getOrDefault("X-Amz-Date")
  valid_602999 = validateParameter(valid_602999, JString, required = false,
                                 default = nil)
  if valid_602999 != nil:
    section.add "X-Amz-Date", valid_602999
  var valid_603000 = header.getOrDefault("X-Amz-Security-Token")
  valid_603000 = validateParameter(valid_603000, JString, required = false,
                                 default = nil)
  if valid_603000 != nil:
    section.add "X-Amz-Security-Token", valid_603000
  var valid_603001 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603001 = validateParameter(valid_603001, JString, required = false,
                                 default = nil)
  if valid_603001 != nil:
    section.add "X-Amz-Content-Sha256", valid_603001
  var valid_603002 = header.getOrDefault("X-Amz-Algorithm")
  valid_603002 = validateParameter(valid_603002, JString, required = false,
                                 default = nil)
  if valid_603002 != nil:
    section.add "X-Amz-Algorithm", valid_603002
  var valid_603003 = header.getOrDefault("X-Amz-Signature")
  valid_603003 = validateParameter(valid_603003, JString, required = false,
                                 default = nil)
  if valid_603003 != nil:
    section.add "X-Amz-Signature", valid_603003
  var valid_603004 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603004 = validateParameter(valid_603004, JString, required = false,
                                 default = nil)
  if valid_603004 != nil:
    section.add "X-Amz-SignedHeaders", valid_603004
  var valid_603005 = header.getOrDefault("X-Amz-Credential")
  valid_603005 = validateParameter(valid_603005, JString, required = false,
                                 default = nil)
  if valid_603005 != nil:
    section.add "X-Amz-Credential", valid_603005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603006: Call_GetGetContextKeysForPrincipalPolicy_602992;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ## 
  let valid = call_603006.validator(path, query, header, formData, body)
  let scheme = call_603006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603006.url(scheme.get, call_603006.host, call_603006.base,
                         call_603006.route, valid.getOrDefault("path"))
  result = hook(call_603006, url, valid)

proc call*(call_603007: Call_GetGetContextKeysForPrincipalPolicy_602992;
          PolicySourceArn: string; PolicyInputList: JsonNode = nil;
          Action: string = "GetContextKeysForPrincipalPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetContextKeysForPrincipalPolicy
  ## <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603008 = newJObject()
  if PolicyInputList != nil:
    query_603008.add "PolicyInputList", PolicyInputList
  add(query_603008, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_603008, "Action", newJString(Action))
  add(query_603008, "Version", newJString(Version))
  result = call_603007.call(nil, query_603008, nil, nil, nil)

var getGetContextKeysForPrincipalPolicy* = Call_GetGetContextKeysForPrincipalPolicy_602992(
    name: "getGetContextKeysForPrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetContextKeysForPrincipalPolicy",
    validator: validate_GetGetContextKeysForPrincipalPolicy_602993, base: "/",
    url: url_GetGetContextKeysForPrincipalPolicy_602994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetCredentialReport_603042 = ref object of OpenApiRestCall_600426
proc url_PostGetCredentialReport_603044(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetCredentialReport_603043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603045 = query.getOrDefault("Action")
  valid_603045 = validateParameter(valid_603045, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_603045 != nil:
    section.add "Action", valid_603045
  var valid_603046 = query.getOrDefault("Version")
  valid_603046 = validateParameter(valid_603046, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603046 != nil:
    section.add "Version", valid_603046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603047 = header.getOrDefault("X-Amz-Date")
  valid_603047 = validateParameter(valid_603047, JString, required = false,
                                 default = nil)
  if valid_603047 != nil:
    section.add "X-Amz-Date", valid_603047
  var valid_603048 = header.getOrDefault("X-Amz-Security-Token")
  valid_603048 = validateParameter(valid_603048, JString, required = false,
                                 default = nil)
  if valid_603048 != nil:
    section.add "X-Amz-Security-Token", valid_603048
  var valid_603049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603049 = validateParameter(valid_603049, JString, required = false,
                                 default = nil)
  if valid_603049 != nil:
    section.add "X-Amz-Content-Sha256", valid_603049
  var valid_603050 = header.getOrDefault("X-Amz-Algorithm")
  valid_603050 = validateParameter(valid_603050, JString, required = false,
                                 default = nil)
  if valid_603050 != nil:
    section.add "X-Amz-Algorithm", valid_603050
  var valid_603051 = header.getOrDefault("X-Amz-Signature")
  valid_603051 = validateParameter(valid_603051, JString, required = false,
                                 default = nil)
  if valid_603051 != nil:
    section.add "X-Amz-Signature", valid_603051
  var valid_603052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603052 = validateParameter(valid_603052, JString, required = false,
                                 default = nil)
  if valid_603052 != nil:
    section.add "X-Amz-SignedHeaders", valid_603052
  var valid_603053 = header.getOrDefault("X-Amz-Credential")
  valid_603053 = validateParameter(valid_603053, JString, required = false,
                                 default = nil)
  if valid_603053 != nil:
    section.add "X-Amz-Credential", valid_603053
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603054: Call_PostGetCredentialReport_603042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603054.validator(path, query, header, formData, body)
  let scheme = call_603054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603054.url(scheme.get, call_603054.host, call_603054.base,
                         call_603054.route, valid.getOrDefault("path"))
  result = hook(call_603054, url, valid)

proc call*(call_603055: Call_PostGetCredentialReport_603042;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## postGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603056 = newJObject()
  add(query_603056, "Action", newJString(Action))
  add(query_603056, "Version", newJString(Version))
  result = call_603055.call(nil, query_603056, nil, nil, nil)

var postGetCredentialReport* = Call_PostGetCredentialReport_603042(
    name: "postGetCredentialReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_PostGetCredentialReport_603043, base: "/",
    url: url_PostGetCredentialReport_603044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetCredentialReport_603027 = ref object of OpenApiRestCall_600426
proc url_GetGetCredentialReport_603029(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetCredentialReport_603028(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603030 = query.getOrDefault("Action")
  valid_603030 = validateParameter(valid_603030, JString, required = true,
                                 default = newJString("GetCredentialReport"))
  if valid_603030 != nil:
    section.add "Action", valid_603030
  var valid_603031 = query.getOrDefault("Version")
  valid_603031 = validateParameter(valid_603031, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603031 != nil:
    section.add "Version", valid_603031
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603032 = header.getOrDefault("X-Amz-Date")
  valid_603032 = validateParameter(valid_603032, JString, required = false,
                                 default = nil)
  if valid_603032 != nil:
    section.add "X-Amz-Date", valid_603032
  var valid_603033 = header.getOrDefault("X-Amz-Security-Token")
  valid_603033 = validateParameter(valid_603033, JString, required = false,
                                 default = nil)
  if valid_603033 != nil:
    section.add "X-Amz-Security-Token", valid_603033
  var valid_603034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603034 = validateParameter(valid_603034, JString, required = false,
                                 default = nil)
  if valid_603034 != nil:
    section.add "X-Amz-Content-Sha256", valid_603034
  var valid_603035 = header.getOrDefault("X-Amz-Algorithm")
  valid_603035 = validateParameter(valid_603035, JString, required = false,
                                 default = nil)
  if valid_603035 != nil:
    section.add "X-Amz-Algorithm", valid_603035
  var valid_603036 = header.getOrDefault("X-Amz-Signature")
  valid_603036 = validateParameter(valid_603036, JString, required = false,
                                 default = nil)
  if valid_603036 != nil:
    section.add "X-Amz-Signature", valid_603036
  var valid_603037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603037 = validateParameter(valid_603037, JString, required = false,
                                 default = nil)
  if valid_603037 != nil:
    section.add "X-Amz-SignedHeaders", valid_603037
  var valid_603038 = header.getOrDefault("X-Amz-Credential")
  valid_603038 = validateParameter(valid_603038, JString, required = false,
                                 default = nil)
  if valid_603038 != nil:
    section.add "X-Amz-Credential", valid_603038
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603039: Call_GetGetCredentialReport_603027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603039.validator(path, query, header, formData, body)
  let scheme = call_603039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603039.url(scheme.get, call_603039.host, call_603039.base,
                         call_603039.route, valid.getOrDefault("path"))
  result = hook(call_603039, url, valid)

proc call*(call_603040: Call_GetGetCredentialReport_603027;
          Action: string = "GetCredentialReport"; Version: string = "2010-05-08"): Recallable =
  ## getGetCredentialReport
  ##  Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603041 = newJObject()
  add(query_603041, "Action", newJString(Action))
  add(query_603041, "Version", newJString(Version))
  result = call_603040.call(nil, query_603041, nil, nil, nil)

var getGetCredentialReport* = Call_GetGetCredentialReport_603027(
    name: "getGetCredentialReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetCredentialReport",
    validator: validate_GetGetCredentialReport_603028, base: "/",
    url: url_GetGetCredentialReport_603029, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroup_603075 = ref object of OpenApiRestCall_600426
proc url_PostGetGroup_603077(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroup_603076(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603078 = query.getOrDefault("Action")
  valid_603078 = validateParameter(valid_603078, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_603078 != nil:
    section.add "Action", valid_603078
  var valid_603079 = query.getOrDefault("Version")
  valid_603079 = validateParameter(valid_603079, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603079 != nil:
    section.add "Version", valid_603079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603080 = header.getOrDefault("X-Amz-Date")
  valid_603080 = validateParameter(valid_603080, JString, required = false,
                                 default = nil)
  if valid_603080 != nil:
    section.add "X-Amz-Date", valid_603080
  var valid_603081 = header.getOrDefault("X-Amz-Security-Token")
  valid_603081 = validateParameter(valid_603081, JString, required = false,
                                 default = nil)
  if valid_603081 != nil:
    section.add "X-Amz-Security-Token", valid_603081
  var valid_603082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603082 = validateParameter(valid_603082, JString, required = false,
                                 default = nil)
  if valid_603082 != nil:
    section.add "X-Amz-Content-Sha256", valid_603082
  var valid_603083 = header.getOrDefault("X-Amz-Algorithm")
  valid_603083 = validateParameter(valid_603083, JString, required = false,
                                 default = nil)
  if valid_603083 != nil:
    section.add "X-Amz-Algorithm", valid_603083
  var valid_603084 = header.getOrDefault("X-Amz-Signature")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Signature", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-SignedHeaders", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Credential")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Credential", valid_603086
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_603087 = formData.getOrDefault("GroupName")
  valid_603087 = validateParameter(valid_603087, JString, required = true,
                                 default = nil)
  if valid_603087 != nil:
    section.add "GroupName", valid_603087
  var valid_603088 = formData.getOrDefault("Marker")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "Marker", valid_603088
  var valid_603089 = formData.getOrDefault("MaxItems")
  valid_603089 = validateParameter(valid_603089, JInt, required = false, default = nil)
  if valid_603089 != nil:
    section.add "MaxItems", valid_603089
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603090: Call_PostGetGroup_603075; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_603090.validator(path, query, header, formData, body)
  let scheme = call_603090.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603090.url(scheme.get, call_603090.host, call_603090.base,
                         call_603090.route, valid.getOrDefault("path"))
  result = hook(call_603090, url, valid)

proc call*(call_603091: Call_PostGetGroup_603075; GroupName: string;
          Marker: string = ""; Action: string = "GetGroup"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603092 = newJObject()
  var formData_603093 = newJObject()
  add(formData_603093, "GroupName", newJString(GroupName))
  add(formData_603093, "Marker", newJString(Marker))
  add(query_603092, "Action", newJString(Action))
  add(formData_603093, "MaxItems", newJInt(MaxItems))
  add(query_603092, "Version", newJString(Version))
  result = call_603091.call(nil, query_603092, nil, formData_603093, nil)

var postGetGroup* = Call_PostGetGroup_603075(name: "postGetGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetGroup", validator: validate_PostGetGroup_603076, base: "/",
    url: url_PostGetGroup_603077, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroup_603057 = ref object of OpenApiRestCall_600426
proc url_GetGetGroup_603059(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroup_603058(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603060 = query.getOrDefault("Action")
  valid_603060 = validateParameter(valid_603060, JString, required = true,
                                 default = newJString("GetGroup"))
  if valid_603060 != nil:
    section.add "Action", valid_603060
  var valid_603061 = query.getOrDefault("Marker")
  valid_603061 = validateParameter(valid_603061, JString, required = false,
                                 default = nil)
  if valid_603061 != nil:
    section.add "Marker", valid_603061
  var valid_603062 = query.getOrDefault("GroupName")
  valid_603062 = validateParameter(valid_603062, JString, required = true,
                                 default = nil)
  if valid_603062 != nil:
    section.add "GroupName", valid_603062
  var valid_603063 = query.getOrDefault("MaxItems")
  valid_603063 = validateParameter(valid_603063, JInt, required = false, default = nil)
  if valid_603063 != nil:
    section.add "MaxItems", valid_603063
  var valid_603064 = query.getOrDefault("Version")
  valid_603064 = validateParameter(valid_603064, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603064 != nil:
    section.add "Version", valid_603064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603065 = header.getOrDefault("X-Amz-Date")
  valid_603065 = validateParameter(valid_603065, JString, required = false,
                                 default = nil)
  if valid_603065 != nil:
    section.add "X-Amz-Date", valid_603065
  var valid_603066 = header.getOrDefault("X-Amz-Security-Token")
  valid_603066 = validateParameter(valid_603066, JString, required = false,
                                 default = nil)
  if valid_603066 != nil:
    section.add "X-Amz-Security-Token", valid_603066
  var valid_603067 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "X-Amz-Content-Sha256", valid_603067
  var valid_603068 = header.getOrDefault("X-Amz-Algorithm")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "X-Amz-Algorithm", valid_603068
  var valid_603069 = header.getOrDefault("X-Amz-Signature")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = nil)
  if valid_603069 != nil:
    section.add "X-Amz-Signature", valid_603069
  var valid_603070 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603070 = validateParameter(valid_603070, JString, required = false,
                                 default = nil)
  if valid_603070 != nil:
    section.add "X-Amz-SignedHeaders", valid_603070
  var valid_603071 = header.getOrDefault("X-Amz-Credential")
  valid_603071 = validateParameter(valid_603071, JString, required = false,
                                 default = nil)
  if valid_603071 != nil:
    section.add "X-Amz-Credential", valid_603071
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603072: Call_GetGetGroup_603057; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ## 
  let valid = call_603072.validator(path, query, header, formData, body)
  let scheme = call_603072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603072.url(scheme.get, call_603072.host, call_603072.base,
                         call_603072.route, valid.getOrDefault("path"))
  result = hook(call_603072, url, valid)

proc call*(call_603073: Call_GetGetGroup_603057; GroupName: string;
          Action: string = "GetGroup"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroup
  ##  Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603074 = newJObject()
  add(query_603074, "Action", newJString(Action))
  add(query_603074, "Marker", newJString(Marker))
  add(query_603074, "GroupName", newJString(GroupName))
  add(query_603074, "MaxItems", newJInt(MaxItems))
  add(query_603074, "Version", newJString(Version))
  result = call_603073.call(nil, query_603074, nil, nil, nil)

var getGetGroup* = Call_GetGetGroup_603057(name: "getGetGroup",
                                        meth: HttpMethod.HttpGet,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetGroup",
                                        validator: validate_GetGetGroup_603058,
                                        base: "/", url: url_GetGetGroup_603059,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetGroupPolicy_603111 = ref object of OpenApiRestCall_600426
proc url_PostGetGroupPolicy_603113(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetGroupPolicy_603112(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603114 = query.getOrDefault("Action")
  valid_603114 = validateParameter(valid_603114, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_603114 != nil:
    section.add "Action", valid_603114
  var valid_603115 = query.getOrDefault("Version")
  valid_603115 = validateParameter(valid_603115, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603115 != nil:
    section.add "Version", valid_603115
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603116 = header.getOrDefault("X-Amz-Date")
  valid_603116 = validateParameter(valid_603116, JString, required = false,
                                 default = nil)
  if valid_603116 != nil:
    section.add "X-Amz-Date", valid_603116
  var valid_603117 = header.getOrDefault("X-Amz-Security-Token")
  valid_603117 = validateParameter(valid_603117, JString, required = false,
                                 default = nil)
  if valid_603117 != nil:
    section.add "X-Amz-Security-Token", valid_603117
  var valid_603118 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603118 = validateParameter(valid_603118, JString, required = false,
                                 default = nil)
  if valid_603118 != nil:
    section.add "X-Amz-Content-Sha256", valid_603118
  var valid_603119 = header.getOrDefault("X-Amz-Algorithm")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-Algorithm", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-Signature")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Signature", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-SignedHeaders", valid_603121
  var valid_603122 = header.getOrDefault("X-Amz-Credential")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-Credential", valid_603122
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603123 = formData.getOrDefault("PolicyName")
  valid_603123 = validateParameter(valid_603123, JString, required = true,
                                 default = nil)
  if valid_603123 != nil:
    section.add "PolicyName", valid_603123
  var valid_603124 = formData.getOrDefault("GroupName")
  valid_603124 = validateParameter(valid_603124, JString, required = true,
                                 default = nil)
  if valid_603124 != nil:
    section.add "GroupName", valid_603124
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603125: Call_PostGetGroupPolicy_603111; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603125.validator(path, query, header, formData, body)
  let scheme = call_603125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603125.url(scheme.get, call_603125.host, call_603125.base,
                         call_603125.route, valid.getOrDefault("path"))
  result = hook(call_603125, url, valid)

proc call*(call_603126: Call_PostGetGroupPolicy_603111; PolicyName: string;
          GroupName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603127 = newJObject()
  var formData_603128 = newJObject()
  add(formData_603128, "PolicyName", newJString(PolicyName))
  add(formData_603128, "GroupName", newJString(GroupName))
  add(query_603127, "Action", newJString(Action))
  add(query_603127, "Version", newJString(Version))
  result = call_603126.call(nil, query_603127, nil, formData_603128, nil)

var postGetGroupPolicy* = Call_PostGetGroupPolicy_603111(
    name: "postGetGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetGroupPolicy",
    validator: validate_PostGetGroupPolicy_603112, base: "/",
    url: url_PostGetGroupPolicy_603113, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetGroupPolicy_603094 = ref object of OpenApiRestCall_600426
proc url_GetGetGroupPolicy_603096(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetGroupPolicy_603095(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603097 = query.getOrDefault("Action")
  valid_603097 = validateParameter(valid_603097, JString, required = true,
                                 default = newJString("GetGroupPolicy"))
  if valid_603097 != nil:
    section.add "Action", valid_603097
  var valid_603098 = query.getOrDefault("GroupName")
  valid_603098 = validateParameter(valid_603098, JString, required = true,
                                 default = nil)
  if valid_603098 != nil:
    section.add "GroupName", valid_603098
  var valid_603099 = query.getOrDefault("Version")
  valid_603099 = validateParameter(valid_603099, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603099 != nil:
    section.add "Version", valid_603099
  var valid_603100 = query.getOrDefault("PolicyName")
  valid_603100 = validateParameter(valid_603100, JString, required = true,
                                 default = nil)
  if valid_603100 != nil:
    section.add "PolicyName", valid_603100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603101 = header.getOrDefault("X-Amz-Date")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Date", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Security-Token")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Security-Token", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Content-Sha256", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-Algorithm")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-Algorithm", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Signature")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Signature", valid_603105
  var valid_603106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603106 = validateParameter(valid_603106, JString, required = false,
                                 default = nil)
  if valid_603106 != nil:
    section.add "X-Amz-SignedHeaders", valid_603106
  var valid_603107 = header.getOrDefault("X-Amz-Credential")
  valid_603107 = validateParameter(valid_603107, JString, required = false,
                                 default = nil)
  if valid_603107 != nil:
    section.add "X-Amz-Credential", valid_603107
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603108: Call_GetGetGroupPolicy_603094; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603108.validator(path, query, header, formData, body)
  let scheme = call_603108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603108.url(scheme.get, call_603108.host, call_603108.base,
                         call_603108.route, valid.getOrDefault("path"))
  result = hook(call_603108, url, valid)

proc call*(call_603109: Call_GetGetGroupPolicy_603094; GroupName: string;
          PolicyName: string; Action: string = "GetGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetGroupPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_603110 = newJObject()
  add(query_603110, "Action", newJString(Action))
  add(query_603110, "GroupName", newJString(GroupName))
  add(query_603110, "Version", newJString(Version))
  add(query_603110, "PolicyName", newJString(PolicyName))
  result = call_603109.call(nil, query_603110, nil, nil, nil)

var getGetGroupPolicy* = Call_GetGetGroupPolicy_603094(name: "getGetGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetGroupPolicy", validator: validate_GetGetGroupPolicy_603095,
    base: "/", url: url_GetGetGroupPolicy_603096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetInstanceProfile_603145 = ref object of OpenApiRestCall_600426
proc url_PostGetInstanceProfile_603147(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetInstanceProfile_603146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603148 = query.getOrDefault("Action")
  valid_603148 = validateParameter(valid_603148, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_603148 != nil:
    section.add "Action", valid_603148
  var valid_603149 = query.getOrDefault("Version")
  valid_603149 = validateParameter(valid_603149, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603149 != nil:
    section.add "Version", valid_603149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603150 = header.getOrDefault("X-Amz-Date")
  valid_603150 = validateParameter(valid_603150, JString, required = false,
                                 default = nil)
  if valid_603150 != nil:
    section.add "X-Amz-Date", valid_603150
  var valid_603151 = header.getOrDefault("X-Amz-Security-Token")
  valid_603151 = validateParameter(valid_603151, JString, required = false,
                                 default = nil)
  if valid_603151 != nil:
    section.add "X-Amz-Security-Token", valid_603151
  var valid_603152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603152 = validateParameter(valid_603152, JString, required = false,
                                 default = nil)
  if valid_603152 != nil:
    section.add "X-Amz-Content-Sha256", valid_603152
  var valid_603153 = header.getOrDefault("X-Amz-Algorithm")
  valid_603153 = validateParameter(valid_603153, JString, required = false,
                                 default = nil)
  if valid_603153 != nil:
    section.add "X-Amz-Algorithm", valid_603153
  var valid_603154 = header.getOrDefault("X-Amz-Signature")
  valid_603154 = validateParameter(valid_603154, JString, required = false,
                                 default = nil)
  if valid_603154 != nil:
    section.add "X-Amz-Signature", valid_603154
  var valid_603155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "X-Amz-SignedHeaders", valid_603155
  var valid_603156 = header.getOrDefault("X-Amz-Credential")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Credential", valid_603156
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstanceProfileName` field"
  var valid_603157 = formData.getOrDefault("InstanceProfileName")
  valid_603157 = validateParameter(valid_603157, JString, required = true,
                                 default = nil)
  if valid_603157 != nil:
    section.add "InstanceProfileName", valid_603157
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603158: Call_PostGetInstanceProfile_603145; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603158.validator(path, query, header, formData, body)
  let scheme = call_603158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603158.url(scheme.get, call_603158.host, call_603158.base,
                         call_603158.route, valid.getOrDefault("path"))
  result = hook(call_603158, url, valid)

proc call*(call_603159: Call_PostGetInstanceProfile_603145;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603160 = newJObject()
  var formData_603161 = newJObject()
  add(query_603160, "Action", newJString(Action))
  add(formData_603161, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603160, "Version", newJString(Version))
  result = call_603159.call(nil, query_603160, nil, formData_603161, nil)

var postGetInstanceProfile* = Call_PostGetInstanceProfile_603145(
    name: "postGetInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_PostGetInstanceProfile_603146, base: "/",
    url: url_PostGetInstanceProfile_603147, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetInstanceProfile_603129 = ref object of OpenApiRestCall_600426
proc url_GetGetInstanceProfile_603131(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetInstanceProfile_603130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_603132 = query.getOrDefault("InstanceProfileName")
  valid_603132 = validateParameter(valid_603132, JString, required = true,
                                 default = nil)
  if valid_603132 != nil:
    section.add "InstanceProfileName", valid_603132
  var valid_603133 = query.getOrDefault("Action")
  valid_603133 = validateParameter(valid_603133, JString, required = true,
                                 default = newJString("GetInstanceProfile"))
  if valid_603133 != nil:
    section.add "Action", valid_603133
  var valid_603134 = query.getOrDefault("Version")
  valid_603134 = validateParameter(valid_603134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603134 != nil:
    section.add "Version", valid_603134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603135 = header.getOrDefault("X-Amz-Date")
  valid_603135 = validateParameter(valid_603135, JString, required = false,
                                 default = nil)
  if valid_603135 != nil:
    section.add "X-Amz-Date", valid_603135
  var valid_603136 = header.getOrDefault("X-Amz-Security-Token")
  valid_603136 = validateParameter(valid_603136, JString, required = false,
                                 default = nil)
  if valid_603136 != nil:
    section.add "X-Amz-Security-Token", valid_603136
  var valid_603137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Content-Sha256", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Algorithm")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Algorithm", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-Signature")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-Signature", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-SignedHeaders", valid_603140
  var valid_603141 = header.getOrDefault("X-Amz-Credential")
  valid_603141 = validateParameter(valid_603141, JString, required = false,
                                 default = nil)
  if valid_603141 != nil:
    section.add "X-Amz-Credential", valid_603141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603142: Call_GetGetInstanceProfile_603129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603142.validator(path, query, header, formData, body)
  let scheme = call_603142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603142.url(scheme.get, call_603142.host, call_603142.base,
                         call_603142.route, valid.getOrDefault("path"))
  result = hook(call_603142, url, valid)

proc call*(call_603143: Call_GetGetInstanceProfile_603129;
          InstanceProfileName: string; Action: string = "GetInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getGetInstanceProfile
  ##  Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603144 = newJObject()
  add(query_603144, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_603144, "Action", newJString(Action))
  add(query_603144, "Version", newJString(Version))
  result = call_603143.call(nil, query_603144, nil, nil, nil)

var getGetInstanceProfile* = Call_GetGetInstanceProfile_603129(
    name: "getGetInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetInstanceProfile",
    validator: validate_GetGetInstanceProfile_603130, base: "/",
    url: url_GetGetInstanceProfile_603131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetLoginProfile_603178 = ref object of OpenApiRestCall_600426
proc url_PostGetLoginProfile_603180(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetLoginProfile_603179(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603181 = query.getOrDefault("Action")
  valid_603181 = validateParameter(valid_603181, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_603181 != nil:
    section.add "Action", valid_603181
  var valid_603182 = query.getOrDefault("Version")
  valid_603182 = validateParameter(valid_603182, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603182 != nil:
    section.add "Version", valid_603182
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603183 = header.getOrDefault("X-Amz-Date")
  valid_603183 = validateParameter(valid_603183, JString, required = false,
                                 default = nil)
  if valid_603183 != nil:
    section.add "X-Amz-Date", valid_603183
  var valid_603184 = header.getOrDefault("X-Amz-Security-Token")
  valid_603184 = validateParameter(valid_603184, JString, required = false,
                                 default = nil)
  if valid_603184 != nil:
    section.add "X-Amz-Security-Token", valid_603184
  var valid_603185 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603185 = validateParameter(valid_603185, JString, required = false,
                                 default = nil)
  if valid_603185 != nil:
    section.add "X-Amz-Content-Sha256", valid_603185
  var valid_603186 = header.getOrDefault("X-Amz-Algorithm")
  valid_603186 = validateParameter(valid_603186, JString, required = false,
                                 default = nil)
  if valid_603186 != nil:
    section.add "X-Amz-Algorithm", valid_603186
  var valid_603187 = header.getOrDefault("X-Amz-Signature")
  valid_603187 = validateParameter(valid_603187, JString, required = false,
                                 default = nil)
  if valid_603187 != nil:
    section.add "X-Amz-Signature", valid_603187
  var valid_603188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603188 = validateParameter(valid_603188, JString, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "X-Amz-SignedHeaders", valid_603188
  var valid_603189 = header.getOrDefault("X-Amz-Credential")
  valid_603189 = validateParameter(valid_603189, JString, required = false,
                                 default = nil)
  if valid_603189 != nil:
    section.add "X-Amz-Credential", valid_603189
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603190 = formData.getOrDefault("UserName")
  valid_603190 = validateParameter(valid_603190, JString, required = true,
                                 default = nil)
  if valid_603190 != nil:
    section.add "UserName", valid_603190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603191: Call_PostGetLoginProfile_603178; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_603191.validator(path, query, header, formData, body)
  let scheme = call_603191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603191.url(scheme.get, call_603191.host, call_603191.base,
                         call_603191.route, valid.getOrDefault("path"))
  result = hook(call_603191, url, valid)

proc call*(call_603192: Call_PostGetLoginProfile_603178; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603193 = newJObject()
  var formData_603194 = newJObject()
  add(formData_603194, "UserName", newJString(UserName))
  add(query_603193, "Action", newJString(Action))
  add(query_603193, "Version", newJString(Version))
  result = call_603192.call(nil, query_603193, nil, formData_603194, nil)

var postGetLoginProfile* = Call_PostGetLoginProfile_603178(
    name: "postGetLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetLoginProfile",
    validator: validate_PostGetLoginProfile_603179, base: "/",
    url: url_PostGetLoginProfile_603180, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetLoginProfile_603162 = ref object of OpenApiRestCall_600426
proc url_GetGetLoginProfile_603164(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetLoginProfile_603163(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603165 = query.getOrDefault("UserName")
  valid_603165 = validateParameter(valid_603165, JString, required = true,
                                 default = nil)
  if valid_603165 != nil:
    section.add "UserName", valid_603165
  var valid_603166 = query.getOrDefault("Action")
  valid_603166 = validateParameter(valid_603166, JString, required = true,
                                 default = newJString("GetLoginProfile"))
  if valid_603166 != nil:
    section.add "Action", valid_603166
  var valid_603167 = query.getOrDefault("Version")
  valid_603167 = validateParameter(valid_603167, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603167 != nil:
    section.add "Version", valid_603167
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603168 = header.getOrDefault("X-Amz-Date")
  valid_603168 = validateParameter(valid_603168, JString, required = false,
                                 default = nil)
  if valid_603168 != nil:
    section.add "X-Amz-Date", valid_603168
  var valid_603169 = header.getOrDefault("X-Amz-Security-Token")
  valid_603169 = validateParameter(valid_603169, JString, required = false,
                                 default = nil)
  if valid_603169 != nil:
    section.add "X-Amz-Security-Token", valid_603169
  var valid_603170 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603170 = validateParameter(valid_603170, JString, required = false,
                                 default = nil)
  if valid_603170 != nil:
    section.add "X-Amz-Content-Sha256", valid_603170
  var valid_603171 = header.getOrDefault("X-Amz-Algorithm")
  valid_603171 = validateParameter(valid_603171, JString, required = false,
                                 default = nil)
  if valid_603171 != nil:
    section.add "X-Amz-Algorithm", valid_603171
  var valid_603172 = header.getOrDefault("X-Amz-Signature")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "X-Amz-Signature", valid_603172
  var valid_603173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-SignedHeaders", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Credential")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Credential", valid_603174
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603175: Call_GetGetLoginProfile_603162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ## 
  let valid = call_603175.validator(path, query, header, formData, body)
  let scheme = call_603175.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603175.url(scheme.get, call_603175.host, call_603175.base,
                         call_603175.route, valid.getOrDefault("path"))
  result = hook(call_603175, url, valid)

proc call*(call_603176: Call_GetGetLoginProfile_603162; UserName: string;
          Action: string = "GetLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## getGetLoginProfile
  ## Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.
  ##   UserName: string (required)
  ##           : <p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603177 = newJObject()
  add(query_603177, "UserName", newJString(UserName))
  add(query_603177, "Action", newJString(Action))
  add(query_603177, "Version", newJString(Version))
  result = call_603176.call(nil, query_603177, nil, nil, nil)

var getGetLoginProfile* = Call_GetGetLoginProfile_603162(
    name: "getGetLoginProfile", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetLoginProfile", validator: validate_GetGetLoginProfile_603163,
    base: "/", url: url_GetGetLoginProfile_603164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOpenIDConnectProvider_603211 = ref object of OpenApiRestCall_600426
proc url_PostGetOpenIDConnectProvider_603213(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOpenIDConnectProvider_603212(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603214 = query.getOrDefault("Action")
  valid_603214 = validateParameter(valid_603214, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_603214 != nil:
    section.add "Action", valid_603214
  var valid_603215 = query.getOrDefault("Version")
  valid_603215 = validateParameter(valid_603215, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603215 != nil:
    section.add "Version", valid_603215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603216 = header.getOrDefault("X-Amz-Date")
  valid_603216 = validateParameter(valid_603216, JString, required = false,
                                 default = nil)
  if valid_603216 != nil:
    section.add "X-Amz-Date", valid_603216
  var valid_603217 = header.getOrDefault("X-Amz-Security-Token")
  valid_603217 = validateParameter(valid_603217, JString, required = false,
                                 default = nil)
  if valid_603217 != nil:
    section.add "X-Amz-Security-Token", valid_603217
  var valid_603218 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603218 = validateParameter(valid_603218, JString, required = false,
                                 default = nil)
  if valid_603218 != nil:
    section.add "X-Amz-Content-Sha256", valid_603218
  var valid_603219 = header.getOrDefault("X-Amz-Algorithm")
  valid_603219 = validateParameter(valid_603219, JString, required = false,
                                 default = nil)
  if valid_603219 != nil:
    section.add "X-Amz-Algorithm", valid_603219
  var valid_603220 = header.getOrDefault("X-Amz-Signature")
  valid_603220 = validateParameter(valid_603220, JString, required = false,
                                 default = nil)
  if valid_603220 != nil:
    section.add "X-Amz-Signature", valid_603220
  var valid_603221 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603221 = validateParameter(valid_603221, JString, required = false,
                                 default = nil)
  if valid_603221 != nil:
    section.add "X-Amz-SignedHeaders", valid_603221
  var valid_603222 = header.getOrDefault("X-Amz-Credential")
  valid_603222 = validateParameter(valid_603222, JString, required = false,
                                 default = nil)
  if valid_603222 != nil:
    section.add "X-Amz-Credential", valid_603222
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_603223 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_603223 = validateParameter(valid_603223, JString, required = true,
                                 default = nil)
  if valid_603223 != nil:
    section.add "OpenIDConnectProviderArn", valid_603223
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603224: Call_PostGetOpenIDConnectProvider_603211; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_603224.validator(path, query, header, formData, body)
  let scheme = call_603224.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603224.url(scheme.get, call_603224.host, call_603224.base,
                         call_603224.route, valid.getOrDefault("path"))
  result = hook(call_603224, url, valid)

proc call*(call_603225: Call_PostGetOpenIDConnectProvider_603211;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603226 = newJObject()
  var formData_603227 = newJObject()
  add(formData_603227, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_603226, "Action", newJString(Action))
  add(query_603226, "Version", newJString(Version))
  result = call_603225.call(nil, query_603226, nil, formData_603227, nil)

var postGetOpenIDConnectProvider* = Call_PostGetOpenIDConnectProvider_603211(
    name: "postGetOpenIDConnectProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_PostGetOpenIDConnectProvider_603212, base: "/",
    url: url_PostGetOpenIDConnectProvider_603213,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOpenIDConnectProvider_603195 = ref object of OpenApiRestCall_600426
proc url_GetGetOpenIDConnectProvider_603197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOpenIDConnectProvider_603196(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_603198 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_603198 = validateParameter(valid_603198, JString, required = true,
                                 default = nil)
  if valid_603198 != nil:
    section.add "OpenIDConnectProviderArn", valid_603198
  var valid_603199 = query.getOrDefault("Action")
  valid_603199 = validateParameter(valid_603199, JString, required = true, default = newJString(
      "GetOpenIDConnectProvider"))
  if valid_603199 != nil:
    section.add "Action", valid_603199
  var valid_603200 = query.getOrDefault("Version")
  valid_603200 = validateParameter(valid_603200, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603200 != nil:
    section.add "Version", valid_603200
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603201 = header.getOrDefault("X-Amz-Date")
  valid_603201 = validateParameter(valid_603201, JString, required = false,
                                 default = nil)
  if valid_603201 != nil:
    section.add "X-Amz-Date", valid_603201
  var valid_603202 = header.getOrDefault("X-Amz-Security-Token")
  valid_603202 = validateParameter(valid_603202, JString, required = false,
                                 default = nil)
  if valid_603202 != nil:
    section.add "X-Amz-Security-Token", valid_603202
  var valid_603203 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603203 = validateParameter(valid_603203, JString, required = false,
                                 default = nil)
  if valid_603203 != nil:
    section.add "X-Amz-Content-Sha256", valid_603203
  var valid_603204 = header.getOrDefault("X-Amz-Algorithm")
  valid_603204 = validateParameter(valid_603204, JString, required = false,
                                 default = nil)
  if valid_603204 != nil:
    section.add "X-Amz-Algorithm", valid_603204
  var valid_603205 = header.getOrDefault("X-Amz-Signature")
  valid_603205 = validateParameter(valid_603205, JString, required = false,
                                 default = nil)
  if valid_603205 != nil:
    section.add "X-Amz-Signature", valid_603205
  var valid_603206 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603206 = validateParameter(valid_603206, JString, required = false,
                                 default = nil)
  if valid_603206 != nil:
    section.add "X-Amz-SignedHeaders", valid_603206
  var valid_603207 = header.getOrDefault("X-Amz-Credential")
  valid_603207 = validateParameter(valid_603207, JString, required = false,
                                 default = nil)
  if valid_603207 != nil:
    section.add "X-Amz-Credential", valid_603207
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603208: Call_GetGetOpenIDConnectProvider_603195; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ## 
  let valid = call_603208.validator(path, query, header, formData, body)
  let scheme = call_603208.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603208.url(scheme.get, call_603208.host, call_603208.base,
                         call_603208.route, valid.getOrDefault("path"))
  result = hook(call_603208, url, valid)

proc call*(call_603209: Call_GetGetOpenIDConnectProvider_603195;
          OpenIDConnectProviderArn: string;
          Action: string = "GetOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getGetOpenIDConnectProvider
  ## Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603210 = newJObject()
  add(query_603210, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_603210, "Action", newJString(Action))
  add(query_603210, "Version", newJString(Version))
  result = call_603209.call(nil, query_603210, nil, nil, nil)

var getGetOpenIDConnectProvider* = Call_GetGetOpenIDConnectProvider_603195(
    name: "getGetOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOpenIDConnectProvider",
    validator: validate_GetGetOpenIDConnectProvider_603196, base: "/",
    url: url_GetGetOpenIDConnectProvider_603197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetOrganizationsAccessReport_603247 = ref object of OpenApiRestCall_600426
proc url_PostGetOrganizationsAccessReport_603249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetOrganizationsAccessReport_603248(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603250 = query.getOrDefault("Action")
  valid_603250 = validateParameter(valid_603250, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_603250 != nil:
    section.add "Action", valid_603250
  var valid_603251 = query.getOrDefault("Version")
  valid_603251 = validateParameter(valid_603251, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603251 != nil:
    section.add "Version", valid_603251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603252 = header.getOrDefault("X-Amz-Date")
  valid_603252 = validateParameter(valid_603252, JString, required = false,
                                 default = nil)
  if valid_603252 != nil:
    section.add "X-Amz-Date", valid_603252
  var valid_603253 = header.getOrDefault("X-Amz-Security-Token")
  valid_603253 = validateParameter(valid_603253, JString, required = false,
                                 default = nil)
  if valid_603253 != nil:
    section.add "X-Amz-Security-Token", valid_603253
  var valid_603254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "X-Amz-Content-Sha256", valid_603254
  var valid_603255 = header.getOrDefault("X-Amz-Algorithm")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "X-Amz-Algorithm", valid_603255
  var valid_603256 = header.getOrDefault("X-Amz-Signature")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "X-Amz-Signature", valid_603256
  var valid_603257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603257 = validateParameter(valid_603257, JString, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "X-Amz-SignedHeaders", valid_603257
  var valid_603258 = header.getOrDefault("X-Amz-Credential")
  valid_603258 = validateParameter(valid_603258, JString, required = false,
                                 default = nil)
  if valid_603258 != nil:
    section.add "X-Amz-Credential", valid_603258
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603259 = formData.getOrDefault("Marker")
  valid_603259 = validateParameter(valid_603259, JString, required = false,
                                 default = nil)
  if valid_603259 != nil:
    section.add "Marker", valid_603259
  var valid_603260 = formData.getOrDefault("SortKey")
  valid_603260 = validateParameter(valid_603260, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_603260 != nil:
    section.add "SortKey", valid_603260
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_603261 = formData.getOrDefault("JobId")
  valid_603261 = validateParameter(valid_603261, JString, required = true,
                                 default = nil)
  if valid_603261 != nil:
    section.add "JobId", valid_603261
  var valid_603262 = formData.getOrDefault("MaxItems")
  valid_603262 = validateParameter(valid_603262, JInt, required = false, default = nil)
  if valid_603262 != nil:
    section.add "MaxItems", valid_603262
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603263: Call_PostGetOrganizationsAccessReport_603247;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_603263.validator(path, query, header, formData, body)
  let scheme = call_603263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603263.url(scheme.get, call_603263.host, call_603263.base,
                         call_603263.route, valid.getOrDefault("path"))
  result = hook(call_603263, url, valid)

proc call*(call_603264: Call_PostGetOrganizationsAccessReport_603247;
          JobId: string; Marker: string = "";
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603265 = newJObject()
  var formData_603266 = newJObject()
  add(formData_603266, "Marker", newJString(Marker))
  add(formData_603266, "SortKey", newJString(SortKey))
  add(query_603265, "Action", newJString(Action))
  add(formData_603266, "JobId", newJString(JobId))
  add(formData_603266, "MaxItems", newJInt(MaxItems))
  add(query_603265, "Version", newJString(Version))
  result = call_603264.call(nil, query_603265, nil, formData_603266, nil)

var postGetOrganizationsAccessReport* = Call_PostGetOrganizationsAccessReport_603247(
    name: "postGetOrganizationsAccessReport", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_PostGetOrganizationsAccessReport_603248, base: "/",
    url: url_PostGetOrganizationsAccessReport_603249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetOrganizationsAccessReport_603228 = ref object of OpenApiRestCall_600426
proc url_GetGetOrganizationsAccessReport_603230(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetOrganizationsAccessReport_603229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SortKey: JString
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: JString (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603231 = query.getOrDefault("SortKey")
  valid_603231 = validateParameter(valid_603231, JString, required = false, default = newJString(
      "SERVICE_NAMESPACE_ASCENDING"))
  if valid_603231 != nil:
    section.add "SortKey", valid_603231
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_603232 = query.getOrDefault("JobId")
  valid_603232 = validateParameter(valid_603232, JString, required = true,
                                 default = nil)
  if valid_603232 != nil:
    section.add "JobId", valid_603232
  var valid_603233 = query.getOrDefault("Action")
  valid_603233 = validateParameter(valid_603233, JString, required = true, default = newJString(
      "GetOrganizationsAccessReport"))
  if valid_603233 != nil:
    section.add "Action", valid_603233
  var valid_603234 = query.getOrDefault("Marker")
  valid_603234 = validateParameter(valid_603234, JString, required = false,
                                 default = nil)
  if valid_603234 != nil:
    section.add "Marker", valid_603234
  var valid_603235 = query.getOrDefault("MaxItems")
  valid_603235 = validateParameter(valid_603235, JInt, required = false, default = nil)
  if valid_603235 != nil:
    section.add "MaxItems", valid_603235
  var valid_603236 = query.getOrDefault("Version")
  valid_603236 = validateParameter(valid_603236, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603236 != nil:
    section.add "Version", valid_603236
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603237 = header.getOrDefault("X-Amz-Date")
  valid_603237 = validateParameter(valid_603237, JString, required = false,
                                 default = nil)
  if valid_603237 != nil:
    section.add "X-Amz-Date", valid_603237
  var valid_603238 = header.getOrDefault("X-Amz-Security-Token")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Security-Token", valid_603238
  var valid_603239 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "X-Amz-Content-Sha256", valid_603239
  var valid_603240 = header.getOrDefault("X-Amz-Algorithm")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "X-Amz-Algorithm", valid_603240
  var valid_603241 = header.getOrDefault("X-Amz-Signature")
  valid_603241 = validateParameter(valid_603241, JString, required = false,
                                 default = nil)
  if valid_603241 != nil:
    section.add "X-Amz-Signature", valid_603241
  var valid_603242 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603242 = validateParameter(valid_603242, JString, required = false,
                                 default = nil)
  if valid_603242 != nil:
    section.add "X-Amz-SignedHeaders", valid_603242
  var valid_603243 = header.getOrDefault("X-Amz-Credential")
  valid_603243 = validateParameter(valid_603243, JString, required = false,
                                 default = nil)
  if valid_603243 != nil:
    section.add "X-Amz-Credential", valid_603243
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603244: Call_GetGetOrganizationsAccessReport_603228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_603244.validator(path, query, header, formData, body)
  let scheme = call_603244.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603244.url(scheme.get, call_603244.host, call_603244.base,
                         call_603244.route, valid.getOrDefault("path"))
  result = hook(call_603244, url, valid)

proc call*(call_603245: Call_GetGetOrganizationsAccessReport_603228; JobId: string;
          SortKey: string = "SERVICE_NAMESPACE_ASCENDING";
          Action: string = "GetOrganizationsAccessReport"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetOrganizationsAccessReport
  ## <p>Retrieves the service last accessed data report for AWS Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the master account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining Permissions Using Service Last Accessed Data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root users, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
  ##   SortKey: string
  ##          : The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.
  ##   JobId: string (required)
  ##        : The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603246 = newJObject()
  add(query_603246, "SortKey", newJString(SortKey))
  add(query_603246, "JobId", newJString(JobId))
  add(query_603246, "Action", newJString(Action))
  add(query_603246, "Marker", newJString(Marker))
  add(query_603246, "MaxItems", newJInt(MaxItems))
  add(query_603246, "Version", newJString(Version))
  result = call_603245.call(nil, query_603246, nil, nil, nil)

var getGetOrganizationsAccessReport* = Call_GetGetOrganizationsAccessReport_603228(
    name: "getGetOrganizationsAccessReport", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetOrganizationsAccessReport",
    validator: validate_GetGetOrganizationsAccessReport_603229, base: "/",
    url: url_GetGetOrganizationsAccessReport_603230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicy_603283 = ref object of OpenApiRestCall_600426
proc url_PostGetPolicy_603285(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicy_603284(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603286 = query.getOrDefault("Action")
  valid_603286 = validateParameter(valid_603286, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_603286 != nil:
    section.add "Action", valid_603286
  var valid_603287 = query.getOrDefault("Version")
  valid_603287 = validateParameter(valid_603287, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603287 != nil:
    section.add "Version", valid_603287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603288 = header.getOrDefault("X-Amz-Date")
  valid_603288 = validateParameter(valid_603288, JString, required = false,
                                 default = nil)
  if valid_603288 != nil:
    section.add "X-Amz-Date", valid_603288
  var valid_603289 = header.getOrDefault("X-Amz-Security-Token")
  valid_603289 = validateParameter(valid_603289, JString, required = false,
                                 default = nil)
  if valid_603289 != nil:
    section.add "X-Amz-Security-Token", valid_603289
  var valid_603290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "X-Amz-Content-Sha256", valid_603290
  var valid_603291 = header.getOrDefault("X-Amz-Algorithm")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-Algorithm", valid_603291
  var valid_603292 = header.getOrDefault("X-Amz-Signature")
  valid_603292 = validateParameter(valid_603292, JString, required = false,
                                 default = nil)
  if valid_603292 != nil:
    section.add "X-Amz-Signature", valid_603292
  var valid_603293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "X-Amz-SignedHeaders", valid_603293
  var valid_603294 = header.getOrDefault("X-Amz-Credential")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "X-Amz-Credential", valid_603294
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_603295 = formData.getOrDefault("PolicyArn")
  valid_603295 = validateParameter(valid_603295, JString, required = true,
                                 default = nil)
  if valid_603295 != nil:
    section.add "PolicyArn", valid_603295
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603296: Call_PostGetPolicy_603283; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603296.validator(path, query, header, formData, body)
  let scheme = call_603296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603296.url(scheme.get, call_603296.host, call_603296.base,
                         call_603296.route, valid.getOrDefault("path"))
  result = hook(call_603296, url, valid)

proc call*(call_603297: Call_PostGetPolicy_603283; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603298 = newJObject()
  var formData_603299 = newJObject()
  add(formData_603299, "PolicyArn", newJString(PolicyArn))
  add(query_603298, "Action", newJString(Action))
  add(query_603298, "Version", newJString(Version))
  result = call_603297.call(nil, query_603298, nil, formData_603299, nil)

var postGetPolicy* = Call_PostGetPolicy_603283(name: "postGetPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_PostGetPolicy_603284,
    base: "/", url: url_PostGetPolicy_603285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicy_603267 = ref object of OpenApiRestCall_600426
proc url_GetGetPolicy_603269(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicy_603268(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603270 = query.getOrDefault("PolicyArn")
  valid_603270 = validateParameter(valid_603270, JString, required = true,
                                 default = nil)
  if valid_603270 != nil:
    section.add "PolicyArn", valid_603270
  var valid_603271 = query.getOrDefault("Action")
  valid_603271 = validateParameter(valid_603271, JString, required = true,
                                 default = newJString("GetPolicy"))
  if valid_603271 != nil:
    section.add "Action", valid_603271
  var valid_603272 = query.getOrDefault("Version")
  valid_603272 = validateParameter(valid_603272, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603272 != nil:
    section.add "Version", valid_603272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603273 = header.getOrDefault("X-Amz-Date")
  valid_603273 = validateParameter(valid_603273, JString, required = false,
                                 default = nil)
  if valid_603273 != nil:
    section.add "X-Amz-Date", valid_603273
  var valid_603274 = header.getOrDefault("X-Amz-Security-Token")
  valid_603274 = validateParameter(valid_603274, JString, required = false,
                                 default = nil)
  if valid_603274 != nil:
    section.add "X-Amz-Security-Token", valid_603274
  var valid_603275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-Content-Sha256", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-Algorithm")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-Algorithm", valid_603276
  var valid_603277 = header.getOrDefault("X-Amz-Signature")
  valid_603277 = validateParameter(valid_603277, JString, required = false,
                                 default = nil)
  if valid_603277 != nil:
    section.add "X-Amz-Signature", valid_603277
  var valid_603278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603278 = validateParameter(valid_603278, JString, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "X-Amz-SignedHeaders", valid_603278
  var valid_603279 = header.getOrDefault("X-Amz-Credential")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "X-Amz-Credential", valid_603279
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603280: Call_GetGetPolicy_603267; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603280.validator(path, query, header, formData, body)
  let scheme = call_603280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603280.url(scheme.get, call_603280.host, call_603280.base,
                         call_603280.route, valid.getOrDefault("path"))
  result = hook(call_603280, url, valid)

proc call*(call_603281: Call_GetGetPolicy_603267; PolicyArn: string;
          Action: string = "GetPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getGetPolicy
  ## <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603282 = newJObject()
  add(query_603282, "PolicyArn", newJString(PolicyArn))
  add(query_603282, "Action", newJString(Action))
  add(query_603282, "Version", newJString(Version))
  result = call_603281.call(nil, query_603282, nil, nil, nil)

var getGetPolicy* = Call_GetGetPolicy_603267(name: "getGetPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetPolicy", validator: validate_GetGetPolicy_603268, base: "/",
    url: url_GetGetPolicy_603269, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetPolicyVersion_603317 = ref object of OpenApiRestCall_600426
proc url_PostGetPolicyVersion_603319(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetPolicyVersion_603318(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603320 = query.getOrDefault("Action")
  valid_603320 = validateParameter(valid_603320, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_603320 != nil:
    section.add "Action", valid_603320
  var valid_603321 = query.getOrDefault("Version")
  valid_603321 = validateParameter(valid_603321, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603321 != nil:
    section.add "Version", valid_603321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603322 = header.getOrDefault("X-Amz-Date")
  valid_603322 = validateParameter(valid_603322, JString, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "X-Amz-Date", valid_603322
  var valid_603323 = header.getOrDefault("X-Amz-Security-Token")
  valid_603323 = validateParameter(valid_603323, JString, required = false,
                                 default = nil)
  if valid_603323 != nil:
    section.add "X-Amz-Security-Token", valid_603323
  var valid_603324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603324 = validateParameter(valid_603324, JString, required = false,
                                 default = nil)
  if valid_603324 != nil:
    section.add "X-Amz-Content-Sha256", valid_603324
  var valid_603325 = header.getOrDefault("X-Amz-Algorithm")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "X-Amz-Algorithm", valid_603325
  var valid_603326 = header.getOrDefault("X-Amz-Signature")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "X-Amz-Signature", valid_603326
  var valid_603327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "X-Amz-SignedHeaders", valid_603327
  var valid_603328 = header.getOrDefault("X-Amz-Credential")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "X-Amz-Credential", valid_603328
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_603329 = formData.getOrDefault("PolicyArn")
  valid_603329 = validateParameter(valid_603329, JString, required = true,
                                 default = nil)
  if valid_603329 != nil:
    section.add "PolicyArn", valid_603329
  var valid_603330 = formData.getOrDefault("VersionId")
  valid_603330 = validateParameter(valid_603330, JString, required = true,
                                 default = nil)
  if valid_603330 != nil:
    section.add "VersionId", valid_603330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603331: Call_PostGetPolicyVersion_603317; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603331.validator(path, query, header, formData, body)
  let scheme = call_603331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603331.url(scheme.get, call_603331.host, call_603331.base,
                         call_603331.route, valid.getOrDefault("path"))
  result = hook(call_603331, url, valid)

proc call*(call_603332: Call_PostGetPolicyVersion_603317; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  var query_603333 = newJObject()
  var formData_603334 = newJObject()
  add(formData_603334, "PolicyArn", newJString(PolicyArn))
  add(query_603333, "Action", newJString(Action))
  add(query_603333, "Version", newJString(Version))
  add(formData_603334, "VersionId", newJString(VersionId))
  result = call_603332.call(nil, query_603333, nil, formData_603334, nil)

var postGetPolicyVersion* = Call_PostGetPolicyVersion_603317(
    name: "postGetPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_PostGetPolicyVersion_603318, base: "/",
    url: url_PostGetPolicyVersion_603319, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetPolicyVersion_603300 = ref object of OpenApiRestCall_600426
proc url_GetGetPolicyVersion_603302(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetPolicyVersion_603301(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603303 = query.getOrDefault("PolicyArn")
  valid_603303 = validateParameter(valid_603303, JString, required = true,
                                 default = nil)
  if valid_603303 != nil:
    section.add "PolicyArn", valid_603303
  var valid_603304 = query.getOrDefault("VersionId")
  valid_603304 = validateParameter(valid_603304, JString, required = true,
                                 default = nil)
  if valid_603304 != nil:
    section.add "VersionId", valid_603304
  var valid_603305 = query.getOrDefault("Action")
  valid_603305 = validateParameter(valid_603305, JString, required = true,
                                 default = newJString("GetPolicyVersion"))
  if valid_603305 != nil:
    section.add "Action", valid_603305
  var valid_603306 = query.getOrDefault("Version")
  valid_603306 = validateParameter(valid_603306, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603306 != nil:
    section.add "Version", valid_603306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603307 = header.getOrDefault("X-Amz-Date")
  valid_603307 = validateParameter(valid_603307, JString, required = false,
                                 default = nil)
  if valid_603307 != nil:
    section.add "X-Amz-Date", valid_603307
  var valid_603308 = header.getOrDefault("X-Amz-Security-Token")
  valid_603308 = validateParameter(valid_603308, JString, required = false,
                                 default = nil)
  if valid_603308 != nil:
    section.add "X-Amz-Security-Token", valid_603308
  var valid_603309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "X-Amz-Content-Sha256", valid_603309
  var valid_603310 = header.getOrDefault("X-Amz-Algorithm")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "X-Amz-Algorithm", valid_603310
  var valid_603311 = header.getOrDefault("X-Amz-Signature")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "X-Amz-Signature", valid_603311
  var valid_603312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603312 = validateParameter(valid_603312, JString, required = false,
                                 default = nil)
  if valid_603312 != nil:
    section.add "X-Amz-SignedHeaders", valid_603312
  var valid_603313 = header.getOrDefault("X-Amz-Credential")
  valid_603313 = validateParameter(valid_603313, JString, required = false,
                                 default = nil)
  if valid_603313 != nil:
    section.add "X-Amz-Credential", valid_603313
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603314: Call_GetGetPolicyVersion_603300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603314.validator(path, query, header, formData, body)
  let scheme = call_603314.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603314.url(scheme.get, call_603314.host, call_603314.base,
                         call_603314.route, valid.getOrDefault("path"))
  result = hook(call_603314, url, valid)

proc call*(call_603315: Call_GetGetPolicyVersion_603300; PolicyArn: string;
          VersionId: string; Action: string = "GetPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getGetPolicyVersion
  ## <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603316 = newJObject()
  add(query_603316, "PolicyArn", newJString(PolicyArn))
  add(query_603316, "VersionId", newJString(VersionId))
  add(query_603316, "Action", newJString(Action))
  add(query_603316, "Version", newJString(Version))
  result = call_603315.call(nil, query_603316, nil, nil, nil)

var getGetPolicyVersion* = Call_GetGetPolicyVersion_603300(
    name: "getGetPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetPolicyVersion",
    validator: validate_GetGetPolicyVersion_603301, base: "/",
    url: url_GetGetPolicyVersion_603302, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRole_603351 = ref object of OpenApiRestCall_600426
proc url_PostGetRole_603353(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRole_603352(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603354 = query.getOrDefault("Action")
  valid_603354 = validateParameter(valid_603354, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_603354 != nil:
    section.add "Action", valid_603354
  var valid_603355 = query.getOrDefault("Version")
  valid_603355 = validateParameter(valid_603355, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603355 != nil:
    section.add "Version", valid_603355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603356 = header.getOrDefault("X-Amz-Date")
  valid_603356 = validateParameter(valid_603356, JString, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "X-Amz-Date", valid_603356
  var valid_603357 = header.getOrDefault("X-Amz-Security-Token")
  valid_603357 = validateParameter(valid_603357, JString, required = false,
                                 default = nil)
  if valid_603357 != nil:
    section.add "X-Amz-Security-Token", valid_603357
  var valid_603358 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "X-Amz-Content-Sha256", valid_603358
  var valid_603359 = header.getOrDefault("X-Amz-Algorithm")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "X-Amz-Algorithm", valid_603359
  var valid_603360 = header.getOrDefault("X-Amz-Signature")
  valid_603360 = validateParameter(valid_603360, JString, required = false,
                                 default = nil)
  if valid_603360 != nil:
    section.add "X-Amz-Signature", valid_603360
  var valid_603361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603361 = validateParameter(valid_603361, JString, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "X-Amz-SignedHeaders", valid_603361
  var valid_603362 = header.getOrDefault("X-Amz-Credential")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "X-Amz-Credential", valid_603362
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_603363 = formData.getOrDefault("RoleName")
  valid_603363 = validateParameter(valid_603363, JString, required = true,
                                 default = nil)
  if valid_603363 != nil:
    section.add "RoleName", valid_603363
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603364: Call_PostGetRole_603351; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_603364.validator(path, query, header, formData, body)
  let scheme = call_603364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603364.url(scheme.get, call_603364.host, call_603364.base,
                         call_603364.route, valid.getOrDefault("path"))
  result = hook(call_603364, url, valid)

proc call*(call_603365: Call_PostGetRole_603351; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## postGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603366 = newJObject()
  var formData_603367 = newJObject()
  add(formData_603367, "RoleName", newJString(RoleName))
  add(query_603366, "Action", newJString(Action))
  add(query_603366, "Version", newJString(Version))
  result = call_603365.call(nil, query_603366, nil, formData_603367, nil)

var postGetRole* = Call_PostGetRole_603351(name: "postGetRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetRole",
                                        validator: validate_PostGetRole_603352,
                                        base: "/", url: url_PostGetRole_603353,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRole_603335 = ref object of OpenApiRestCall_600426
proc url_GetGetRole_603337(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRole_603336(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603338 = query.getOrDefault("Action")
  valid_603338 = validateParameter(valid_603338, JString, required = true,
                                 default = newJString("GetRole"))
  if valid_603338 != nil:
    section.add "Action", valid_603338
  var valid_603339 = query.getOrDefault("RoleName")
  valid_603339 = validateParameter(valid_603339, JString, required = true,
                                 default = nil)
  if valid_603339 != nil:
    section.add "RoleName", valid_603339
  var valid_603340 = query.getOrDefault("Version")
  valid_603340 = validateParameter(valid_603340, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603340 != nil:
    section.add "Version", valid_603340
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603341 = header.getOrDefault("X-Amz-Date")
  valid_603341 = validateParameter(valid_603341, JString, required = false,
                                 default = nil)
  if valid_603341 != nil:
    section.add "X-Amz-Date", valid_603341
  var valid_603342 = header.getOrDefault("X-Amz-Security-Token")
  valid_603342 = validateParameter(valid_603342, JString, required = false,
                                 default = nil)
  if valid_603342 != nil:
    section.add "X-Amz-Security-Token", valid_603342
  var valid_603343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603343 = validateParameter(valid_603343, JString, required = false,
                                 default = nil)
  if valid_603343 != nil:
    section.add "X-Amz-Content-Sha256", valid_603343
  var valid_603344 = header.getOrDefault("X-Amz-Algorithm")
  valid_603344 = validateParameter(valid_603344, JString, required = false,
                                 default = nil)
  if valid_603344 != nil:
    section.add "X-Amz-Algorithm", valid_603344
  var valid_603345 = header.getOrDefault("X-Amz-Signature")
  valid_603345 = validateParameter(valid_603345, JString, required = false,
                                 default = nil)
  if valid_603345 != nil:
    section.add "X-Amz-Signature", valid_603345
  var valid_603346 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603346 = validateParameter(valid_603346, JString, required = false,
                                 default = nil)
  if valid_603346 != nil:
    section.add "X-Amz-SignedHeaders", valid_603346
  var valid_603347 = header.getOrDefault("X-Amz-Credential")
  valid_603347 = validateParameter(valid_603347, JString, required = false,
                                 default = nil)
  if valid_603347 != nil:
    section.add "X-Amz-Credential", valid_603347
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603348: Call_GetGetRole_603335; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ## 
  let valid = call_603348.validator(path, query, header, formData, body)
  let scheme = call_603348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603348.url(scheme.get, call_603348.host, call_603348.base,
                         call_603348.route, valid.getOrDefault("path"))
  result = hook(call_603348, url, valid)

proc call*(call_603349: Call_GetGetRole_603335; RoleName: string;
          Action: string = "GetRole"; Version: string = "2010-05-08"): Recallable =
  ## getGetRole
  ## <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603350 = newJObject()
  add(query_603350, "Action", newJString(Action))
  add(query_603350, "RoleName", newJString(RoleName))
  add(query_603350, "Version", newJString(Version))
  result = call_603349.call(nil, query_603350, nil, nil, nil)

var getGetRole* = Call_GetGetRole_603335(name: "getGetRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetRole",
                                      validator: validate_GetGetRole_603336,
                                      base: "/", url: url_GetGetRole_603337,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetRolePolicy_603385 = ref object of OpenApiRestCall_600426
proc url_PostGetRolePolicy_603387(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetRolePolicy_603386(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603388 = query.getOrDefault("Action")
  valid_603388 = validateParameter(valid_603388, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_603388 != nil:
    section.add "Action", valid_603388
  var valid_603389 = query.getOrDefault("Version")
  valid_603389 = validateParameter(valid_603389, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603389 != nil:
    section.add "Version", valid_603389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603390 = header.getOrDefault("X-Amz-Date")
  valid_603390 = validateParameter(valid_603390, JString, required = false,
                                 default = nil)
  if valid_603390 != nil:
    section.add "X-Amz-Date", valid_603390
  var valid_603391 = header.getOrDefault("X-Amz-Security-Token")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Security-Token", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Content-Sha256", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Algorithm")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Algorithm", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Signature")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Signature", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-SignedHeaders", valid_603395
  var valid_603396 = header.getOrDefault("X-Amz-Credential")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "X-Amz-Credential", valid_603396
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603397 = formData.getOrDefault("PolicyName")
  valid_603397 = validateParameter(valid_603397, JString, required = true,
                                 default = nil)
  if valid_603397 != nil:
    section.add "PolicyName", valid_603397
  var valid_603398 = formData.getOrDefault("RoleName")
  valid_603398 = validateParameter(valid_603398, JString, required = true,
                                 default = nil)
  if valid_603398 != nil:
    section.add "RoleName", valid_603398
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603399: Call_PostGetRolePolicy_603385; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_603399.validator(path, query, header, formData, body)
  let scheme = call_603399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603399.url(scheme.get, call_603399.host, call_603399.base,
                         call_603399.route, valid.getOrDefault("path"))
  result = hook(call_603399, url, valid)

proc call*(call_603400: Call_PostGetRolePolicy_603385; PolicyName: string;
          RoleName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603401 = newJObject()
  var formData_603402 = newJObject()
  add(formData_603402, "PolicyName", newJString(PolicyName))
  add(formData_603402, "RoleName", newJString(RoleName))
  add(query_603401, "Action", newJString(Action))
  add(query_603401, "Version", newJString(Version))
  result = call_603400.call(nil, query_603401, nil, formData_603402, nil)

var postGetRolePolicy* = Call_PostGetRolePolicy_603385(name: "postGetRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_PostGetRolePolicy_603386,
    base: "/", url: url_PostGetRolePolicy_603387,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetRolePolicy_603368 = ref object of OpenApiRestCall_600426
proc url_GetGetRolePolicy_603370(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetRolePolicy_603369(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603371 = query.getOrDefault("Action")
  valid_603371 = validateParameter(valid_603371, JString, required = true,
                                 default = newJString("GetRolePolicy"))
  if valid_603371 != nil:
    section.add "Action", valid_603371
  var valid_603372 = query.getOrDefault("RoleName")
  valid_603372 = validateParameter(valid_603372, JString, required = true,
                                 default = nil)
  if valid_603372 != nil:
    section.add "RoleName", valid_603372
  var valid_603373 = query.getOrDefault("Version")
  valid_603373 = validateParameter(valid_603373, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603373 != nil:
    section.add "Version", valid_603373
  var valid_603374 = query.getOrDefault("PolicyName")
  valid_603374 = validateParameter(valid_603374, JString, required = true,
                                 default = nil)
  if valid_603374 != nil:
    section.add "PolicyName", valid_603374
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603375 = header.getOrDefault("X-Amz-Date")
  valid_603375 = validateParameter(valid_603375, JString, required = false,
                                 default = nil)
  if valid_603375 != nil:
    section.add "X-Amz-Date", valid_603375
  var valid_603376 = header.getOrDefault("X-Amz-Security-Token")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "X-Amz-Security-Token", valid_603376
  var valid_603377 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "X-Amz-Content-Sha256", valid_603377
  var valid_603378 = header.getOrDefault("X-Amz-Algorithm")
  valid_603378 = validateParameter(valid_603378, JString, required = false,
                                 default = nil)
  if valid_603378 != nil:
    section.add "X-Amz-Algorithm", valid_603378
  var valid_603379 = header.getOrDefault("X-Amz-Signature")
  valid_603379 = validateParameter(valid_603379, JString, required = false,
                                 default = nil)
  if valid_603379 != nil:
    section.add "X-Amz-Signature", valid_603379
  var valid_603380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603380 = validateParameter(valid_603380, JString, required = false,
                                 default = nil)
  if valid_603380 != nil:
    section.add "X-Amz-SignedHeaders", valid_603380
  var valid_603381 = header.getOrDefault("X-Amz-Credential")
  valid_603381 = validateParameter(valid_603381, JString, required = false,
                                 default = nil)
  if valid_603381 != nil:
    section.add "X-Amz-Credential", valid_603381
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603382: Call_GetGetRolePolicy_603368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ## 
  let valid = call_603382.validator(path, query, header, formData, body)
  let scheme = call_603382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603382.url(scheme.get, call_603382.host, call_603382.base,
                         call_603382.route, valid.getOrDefault("path"))
  result = hook(call_603382, url, valid)

proc call*(call_603383: Call_GetGetRolePolicy_603368; RoleName: string;
          PolicyName: string; Action: string = "GetRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetRolePolicy
  ## <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_603384 = newJObject()
  add(query_603384, "Action", newJString(Action))
  add(query_603384, "RoleName", newJString(RoleName))
  add(query_603384, "Version", newJString(Version))
  add(query_603384, "PolicyName", newJString(PolicyName))
  result = call_603383.call(nil, query_603384, nil, nil, nil)

var getGetRolePolicy* = Call_GetGetRolePolicy_603368(name: "getGetRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetRolePolicy", validator: validate_GetGetRolePolicy_603369,
    base: "/", url: url_GetGetRolePolicy_603370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSAMLProvider_603419 = ref object of OpenApiRestCall_600426
proc url_PostGetSAMLProvider_603421(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSAMLProvider_603420(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603422 = query.getOrDefault("Action")
  valid_603422 = validateParameter(valid_603422, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_603422 != nil:
    section.add "Action", valid_603422
  var valid_603423 = query.getOrDefault("Version")
  valid_603423 = validateParameter(valid_603423, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603423 != nil:
    section.add "Version", valid_603423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603424 = header.getOrDefault("X-Amz-Date")
  valid_603424 = validateParameter(valid_603424, JString, required = false,
                                 default = nil)
  if valid_603424 != nil:
    section.add "X-Amz-Date", valid_603424
  var valid_603425 = header.getOrDefault("X-Amz-Security-Token")
  valid_603425 = validateParameter(valid_603425, JString, required = false,
                                 default = nil)
  if valid_603425 != nil:
    section.add "X-Amz-Security-Token", valid_603425
  var valid_603426 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603426 = validateParameter(valid_603426, JString, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "X-Amz-Content-Sha256", valid_603426
  var valid_603427 = header.getOrDefault("X-Amz-Algorithm")
  valid_603427 = validateParameter(valid_603427, JString, required = false,
                                 default = nil)
  if valid_603427 != nil:
    section.add "X-Amz-Algorithm", valid_603427
  var valid_603428 = header.getOrDefault("X-Amz-Signature")
  valid_603428 = validateParameter(valid_603428, JString, required = false,
                                 default = nil)
  if valid_603428 != nil:
    section.add "X-Amz-Signature", valid_603428
  var valid_603429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-SignedHeaders", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-Credential")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Credential", valid_603430
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_603431 = formData.getOrDefault("SAMLProviderArn")
  valid_603431 = validateParameter(valid_603431, JString, required = true,
                                 default = nil)
  if valid_603431 != nil:
    section.add "SAMLProviderArn", valid_603431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603432: Call_PostGetSAMLProvider_603419; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_603432.validator(path, query, header, formData, body)
  let scheme = call_603432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603432.url(scheme.get, call_603432.host, call_603432.base,
                         call_603432.route, valid.getOrDefault("path"))
  result = hook(call_603432, url, valid)

proc call*(call_603433: Call_PostGetSAMLProvider_603419; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603434 = newJObject()
  var formData_603435 = newJObject()
  add(formData_603435, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_603434, "Action", newJString(Action))
  add(query_603434, "Version", newJString(Version))
  result = call_603433.call(nil, query_603434, nil, formData_603435, nil)

var postGetSAMLProvider* = Call_PostGetSAMLProvider_603419(
    name: "postGetSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSAMLProvider",
    validator: validate_PostGetSAMLProvider_603420, base: "/",
    url: url_PostGetSAMLProvider_603421, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSAMLProvider_603403 = ref object of OpenApiRestCall_600426
proc url_GetGetSAMLProvider_603405(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSAMLProvider_603404(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603406 = query.getOrDefault("Action")
  valid_603406 = validateParameter(valid_603406, JString, required = true,
                                 default = newJString("GetSAMLProvider"))
  if valid_603406 != nil:
    section.add "Action", valid_603406
  var valid_603407 = query.getOrDefault("SAMLProviderArn")
  valid_603407 = validateParameter(valid_603407, JString, required = true,
                                 default = nil)
  if valid_603407 != nil:
    section.add "SAMLProviderArn", valid_603407
  var valid_603408 = query.getOrDefault("Version")
  valid_603408 = validateParameter(valid_603408, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603408 != nil:
    section.add "Version", valid_603408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603409 = header.getOrDefault("X-Amz-Date")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-Date", valid_603409
  var valid_603410 = header.getOrDefault("X-Amz-Security-Token")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "X-Amz-Security-Token", valid_603410
  var valid_603411 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "X-Amz-Content-Sha256", valid_603411
  var valid_603412 = header.getOrDefault("X-Amz-Algorithm")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "X-Amz-Algorithm", valid_603412
  var valid_603413 = header.getOrDefault("X-Amz-Signature")
  valid_603413 = validateParameter(valid_603413, JString, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "X-Amz-Signature", valid_603413
  var valid_603414 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603414 = validateParameter(valid_603414, JString, required = false,
                                 default = nil)
  if valid_603414 != nil:
    section.add "X-Amz-SignedHeaders", valid_603414
  var valid_603415 = header.getOrDefault("X-Amz-Credential")
  valid_603415 = validateParameter(valid_603415, JString, required = false,
                                 default = nil)
  if valid_603415 != nil:
    section.add "X-Amz-Credential", valid_603415
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603416: Call_GetGetSAMLProvider_603403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_603416.validator(path, query, header, formData, body)
  let scheme = call_603416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603416.url(scheme.get, call_603416.host, call_603416.base,
                         call_603416.route, valid.getOrDefault("path"))
  result = hook(call_603416, url, valid)

proc call*(call_603417: Call_GetGetSAMLProvider_603403; SAMLProviderArn: string;
          Action: string = "GetSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getGetSAMLProvider
  ## <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_603418 = newJObject()
  add(query_603418, "Action", newJString(Action))
  add(query_603418, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_603418, "Version", newJString(Version))
  result = call_603417.call(nil, query_603418, nil, nil, nil)

var getGetSAMLProvider* = Call_GetGetSAMLProvider_603403(
    name: "getGetSAMLProvider", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSAMLProvider", validator: validate_GetGetSAMLProvider_603404,
    base: "/", url: url_GetGetSAMLProvider_603405,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetSSHPublicKey_603454 = ref object of OpenApiRestCall_600426
proc url_PostGetSSHPublicKey_603456(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetSSHPublicKey_603455(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603457 = query.getOrDefault("Action")
  valid_603457 = validateParameter(valid_603457, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_603457 != nil:
    section.add "Action", valid_603457
  var valid_603458 = query.getOrDefault("Version")
  valid_603458 = validateParameter(valid_603458, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603458 != nil:
    section.add "Version", valid_603458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603459 = header.getOrDefault("X-Amz-Date")
  valid_603459 = validateParameter(valid_603459, JString, required = false,
                                 default = nil)
  if valid_603459 != nil:
    section.add "X-Amz-Date", valid_603459
  var valid_603460 = header.getOrDefault("X-Amz-Security-Token")
  valid_603460 = validateParameter(valid_603460, JString, required = false,
                                 default = nil)
  if valid_603460 != nil:
    section.add "X-Amz-Security-Token", valid_603460
  var valid_603461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603461 = validateParameter(valid_603461, JString, required = false,
                                 default = nil)
  if valid_603461 != nil:
    section.add "X-Amz-Content-Sha256", valid_603461
  var valid_603462 = header.getOrDefault("X-Amz-Algorithm")
  valid_603462 = validateParameter(valid_603462, JString, required = false,
                                 default = nil)
  if valid_603462 != nil:
    section.add "X-Amz-Algorithm", valid_603462
  var valid_603463 = header.getOrDefault("X-Amz-Signature")
  valid_603463 = validateParameter(valid_603463, JString, required = false,
                                 default = nil)
  if valid_603463 != nil:
    section.add "X-Amz-Signature", valid_603463
  var valid_603464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603464 = validateParameter(valid_603464, JString, required = false,
                                 default = nil)
  if valid_603464 != nil:
    section.add "X-Amz-SignedHeaders", valid_603464
  var valid_603465 = header.getOrDefault("X-Amz-Credential")
  valid_603465 = validateParameter(valid_603465, JString, required = false,
                                 default = nil)
  if valid_603465 != nil:
    section.add "X-Amz-Credential", valid_603465
  result.add "header", section
  ## parameters in `formData` object:
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Encoding` field"
  var valid_603466 = formData.getOrDefault("Encoding")
  valid_603466 = validateParameter(valid_603466, JString, required = true,
                                 default = newJString("SSH"))
  if valid_603466 != nil:
    section.add "Encoding", valid_603466
  var valid_603467 = formData.getOrDefault("UserName")
  valid_603467 = validateParameter(valid_603467, JString, required = true,
                                 default = nil)
  if valid_603467 != nil:
    section.add "UserName", valid_603467
  var valid_603468 = formData.getOrDefault("SSHPublicKeyId")
  valid_603468 = validateParameter(valid_603468, JString, required = true,
                                 default = nil)
  if valid_603468 != nil:
    section.add "SSHPublicKeyId", valid_603468
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603469: Call_PostGetSSHPublicKey_603454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_603469.validator(path, query, header, formData, body)
  let scheme = call_603469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603469.url(scheme.get, call_603469.host, call_603469.base,
                         call_603469.route, valid.getOrDefault("path"))
  result = hook(call_603469, url, valid)

proc call*(call_603470: Call_PostGetSSHPublicKey_603454; UserName: string;
          SSHPublicKeyId: string; Encoding: string = "SSH";
          Action: string = "GetSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603471 = newJObject()
  var formData_603472 = newJObject()
  add(formData_603472, "Encoding", newJString(Encoding))
  add(formData_603472, "UserName", newJString(UserName))
  add(formData_603472, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_603471, "Action", newJString(Action))
  add(query_603471, "Version", newJString(Version))
  result = call_603470.call(nil, query_603471, nil, formData_603472, nil)

var postGetSSHPublicKey* = Call_PostGetSSHPublicKey_603454(
    name: "postGetSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetSSHPublicKey",
    validator: validate_PostGetSSHPublicKey_603455, base: "/",
    url: url_PostGetSSHPublicKey_603456, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetSSHPublicKey_603436 = ref object of OpenApiRestCall_600426
proc url_GetGetSSHPublicKey_603438(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetSSHPublicKey_603437(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Encoding: JString (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyId` field"
  var valid_603439 = query.getOrDefault("SSHPublicKeyId")
  valid_603439 = validateParameter(valid_603439, JString, required = true,
                                 default = nil)
  if valid_603439 != nil:
    section.add "SSHPublicKeyId", valid_603439
  var valid_603440 = query.getOrDefault("UserName")
  valid_603440 = validateParameter(valid_603440, JString, required = true,
                                 default = nil)
  if valid_603440 != nil:
    section.add "UserName", valid_603440
  var valid_603441 = query.getOrDefault("Action")
  valid_603441 = validateParameter(valid_603441, JString, required = true,
                                 default = newJString("GetSSHPublicKey"))
  if valid_603441 != nil:
    section.add "Action", valid_603441
  var valid_603442 = query.getOrDefault("Encoding")
  valid_603442 = validateParameter(valid_603442, JString, required = true,
                                 default = newJString("SSH"))
  if valid_603442 != nil:
    section.add "Encoding", valid_603442
  var valid_603443 = query.getOrDefault("Version")
  valid_603443 = validateParameter(valid_603443, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603443 != nil:
    section.add "Version", valid_603443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603444 = header.getOrDefault("X-Amz-Date")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-Date", valid_603444
  var valid_603445 = header.getOrDefault("X-Amz-Security-Token")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Security-Token", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-Content-Sha256", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Algorithm")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Algorithm", valid_603447
  var valid_603448 = header.getOrDefault("X-Amz-Signature")
  valid_603448 = validateParameter(valid_603448, JString, required = false,
                                 default = nil)
  if valid_603448 != nil:
    section.add "X-Amz-Signature", valid_603448
  var valid_603449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-SignedHeaders", valid_603449
  var valid_603450 = header.getOrDefault("X-Amz-Credential")
  valid_603450 = validateParameter(valid_603450, JString, required = false,
                                 default = nil)
  if valid_603450 != nil:
    section.add "X-Amz-Credential", valid_603450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603451: Call_GetGetSSHPublicKey_603436; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_603451.validator(path, query, header, formData, body)
  let scheme = call_603451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603451.url(scheme.get, call_603451.host, call_603451.base,
                         call_603451.route, valid.getOrDefault("path"))
  result = hook(call_603451, url, valid)

proc call*(call_603452: Call_GetGetSSHPublicKey_603436; SSHPublicKeyId: string;
          UserName: string; Action: string = "GetSSHPublicKey";
          Encoding: string = "SSH"; Version: string = "2010-05-08"): Recallable =
  ## getGetSSHPublicKey
  ## <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Encoding: string (required)
  ##           : Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.
  ##   Version: string (required)
  var query_603453 = newJObject()
  add(query_603453, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_603453, "UserName", newJString(UserName))
  add(query_603453, "Action", newJString(Action))
  add(query_603453, "Encoding", newJString(Encoding))
  add(query_603453, "Version", newJString(Version))
  result = call_603452.call(nil, query_603453, nil, nil, nil)

var getGetSSHPublicKey* = Call_GetGetSSHPublicKey_603436(
    name: "getGetSSHPublicKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetSSHPublicKey", validator: validate_GetGetSSHPublicKey_603437,
    base: "/", url: url_GetGetSSHPublicKey_603438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServerCertificate_603489 = ref object of OpenApiRestCall_600426
proc url_PostGetServerCertificate_603491(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServerCertificate_603490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603492 = query.getOrDefault("Action")
  valid_603492 = validateParameter(valid_603492, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_603492 != nil:
    section.add "Action", valid_603492
  var valid_603493 = query.getOrDefault("Version")
  valid_603493 = validateParameter(valid_603493, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603493 != nil:
    section.add "Version", valid_603493
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603494 = header.getOrDefault("X-Amz-Date")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "X-Amz-Date", valid_603494
  var valid_603495 = header.getOrDefault("X-Amz-Security-Token")
  valid_603495 = validateParameter(valid_603495, JString, required = false,
                                 default = nil)
  if valid_603495 != nil:
    section.add "X-Amz-Security-Token", valid_603495
  var valid_603496 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "X-Amz-Content-Sha256", valid_603496
  var valid_603497 = header.getOrDefault("X-Amz-Algorithm")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "X-Amz-Algorithm", valid_603497
  var valid_603498 = header.getOrDefault("X-Amz-Signature")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "X-Amz-Signature", valid_603498
  var valid_603499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603499 = validateParameter(valid_603499, JString, required = false,
                                 default = nil)
  if valid_603499 != nil:
    section.add "X-Amz-SignedHeaders", valid_603499
  var valid_603500 = header.getOrDefault("X-Amz-Credential")
  valid_603500 = validateParameter(valid_603500, JString, required = false,
                                 default = nil)
  if valid_603500 != nil:
    section.add "X-Amz-Credential", valid_603500
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_603501 = formData.getOrDefault("ServerCertificateName")
  valid_603501 = validateParameter(valid_603501, JString, required = true,
                                 default = nil)
  if valid_603501 != nil:
    section.add "ServerCertificateName", valid_603501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603502: Call_PostGetServerCertificate_603489; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_603502.validator(path, query, header, formData, body)
  let scheme = call_603502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603502.url(scheme.get, call_603502.host, call_603502.base,
                         call_603502.route, valid.getOrDefault("path"))
  result = hook(call_603502, url, valid)

proc call*(call_603503: Call_PostGetServerCertificate_603489;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603504 = newJObject()
  var formData_603505 = newJObject()
  add(formData_603505, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_603504, "Action", newJString(Action))
  add(query_603504, "Version", newJString(Version))
  result = call_603503.call(nil, query_603504, nil, formData_603505, nil)

var postGetServerCertificate* = Call_PostGetServerCertificate_603489(
    name: "postGetServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_PostGetServerCertificate_603490, base: "/",
    url: url_PostGetServerCertificate_603491, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServerCertificate_603473 = ref object of OpenApiRestCall_600426
proc url_GetGetServerCertificate_603475(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServerCertificate_603474(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_603476 = query.getOrDefault("ServerCertificateName")
  valid_603476 = validateParameter(valid_603476, JString, required = true,
                                 default = nil)
  if valid_603476 != nil:
    section.add "ServerCertificateName", valid_603476
  var valid_603477 = query.getOrDefault("Action")
  valid_603477 = validateParameter(valid_603477, JString, required = true,
                                 default = newJString("GetServerCertificate"))
  if valid_603477 != nil:
    section.add "Action", valid_603477
  var valid_603478 = query.getOrDefault("Version")
  valid_603478 = validateParameter(valid_603478, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603478 != nil:
    section.add "Version", valid_603478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603479 = header.getOrDefault("X-Amz-Date")
  valid_603479 = validateParameter(valid_603479, JString, required = false,
                                 default = nil)
  if valid_603479 != nil:
    section.add "X-Amz-Date", valid_603479
  var valid_603480 = header.getOrDefault("X-Amz-Security-Token")
  valid_603480 = validateParameter(valid_603480, JString, required = false,
                                 default = nil)
  if valid_603480 != nil:
    section.add "X-Amz-Security-Token", valid_603480
  var valid_603481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603481 = validateParameter(valid_603481, JString, required = false,
                                 default = nil)
  if valid_603481 != nil:
    section.add "X-Amz-Content-Sha256", valid_603481
  var valid_603482 = header.getOrDefault("X-Amz-Algorithm")
  valid_603482 = validateParameter(valid_603482, JString, required = false,
                                 default = nil)
  if valid_603482 != nil:
    section.add "X-Amz-Algorithm", valid_603482
  var valid_603483 = header.getOrDefault("X-Amz-Signature")
  valid_603483 = validateParameter(valid_603483, JString, required = false,
                                 default = nil)
  if valid_603483 != nil:
    section.add "X-Amz-Signature", valid_603483
  var valid_603484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603484 = validateParameter(valid_603484, JString, required = false,
                                 default = nil)
  if valid_603484 != nil:
    section.add "X-Amz-SignedHeaders", valid_603484
  var valid_603485 = header.getOrDefault("X-Amz-Credential")
  valid_603485 = validateParameter(valid_603485, JString, required = false,
                                 default = nil)
  if valid_603485 != nil:
    section.add "X-Amz-Credential", valid_603485
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603486: Call_GetGetServerCertificate_603473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_603486.validator(path, query, header, formData, body)
  let scheme = call_603486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603486.url(scheme.get, call_603486.host, call_603486.base,
                         call_603486.route, valid.getOrDefault("path"))
  result = hook(call_603486, url, valid)

proc call*(call_603487: Call_GetGetServerCertificate_603473;
          ServerCertificateName: string; Action: string = "GetServerCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServerCertificate
  ## <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603488 = newJObject()
  add(query_603488, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_603488, "Action", newJString(Action))
  add(query_603488, "Version", newJString(Version))
  result = call_603487.call(nil, query_603488, nil, nil, nil)

var getGetServerCertificate* = Call_GetGetServerCertificate_603473(
    name: "getGetServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServerCertificate",
    validator: validate_GetGetServerCertificate_603474, base: "/",
    url: url_GetGetServerCertificate_603475, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetails_603524 = ref object of OpenApiRestCall_600426
proc url_PostGetServiceLastAccessedDetails_603526(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetails_603525(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603527 = query.getOrDefault("Action")
  valid_603527 = validateParameter(valid_603527, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_603527 != nil:
    section.add "Action", valid_603527
  var valid_603528 = query.getOrDefault("Version")
  valid_603528 = validateParameter(valid_603528, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603528 != nil:
    section.add "Version", valid_603528
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603529 = header.getOrDefault("X-Amz-Date")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Date", valid_603529
  var valid_603530 = header.getOrDefault("X-Amz-Security-Token")
  valid_603530 = validateParameter(valid_603530, JString, required = false,
                                 default = nil)
  if valid_603530 != nil:
    section.add "X-Amz-Security-Token", valid_603530
  var valid_603531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603531 = validateParameter(valid_603531, JString, required = false,
                                 default = nil)
  if valid_603531 != nil:
    section.add "X-Amz-Content-Sha256", valid_603531
  var valid_603532 = header.getOrDefault("X-Amz-Algorithm")
  valid_603532 = validateParameter(valid_603532, JString, required = false,
                                 default = nil)
  if valid_603532 != nil:
    section.add "X-Amz-Algorithm", valid_603532
  var valid_603533 = header.getOrDefault("X-Amz-Signature")
  valid_603533 = validateParameter(valid_603533, JString, required = false,
                                 default = nil)
  if valid_603533 != nil:
    section.add "X-Amz-Signature", valid_603533
  var valid_603534 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603534 = validateParameter(valid_603534, JString, required = false,
                                 default = nil)
  if valid_603534 != nil:
    section.add "X-Amz-SignedHeaders", valid_603534
  var valid_603535 = header.getOrDefault("X-Amz-Credential")
  valid_603535 = validateParameter(valid_603535, JString, required = false,
                                 default = nil)
  if valid_603535 != nil:
    section.add "X-Amz-Credential", valid_603535
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603536 = formData.getOrDefault("Marker")
  valid_603536 = validateParameter(valid_603536, JString, required = false,
                                 default = nil)
  if valid_603536 != nil:
    section.add "Marker", valid_603536
  assert formData != nil,
        "formData argument is necessary due to required `JobId` field"
  var valid_603537 = formData.getOrDefault("JobId")
  valid_603537 = validateParameter(valid_603537, JString, required = true,
                                 default = nil)
  if valid_603537 != nil:
    section.add "JobId", valid_603537
  var valid_603538 = formData.getOrDefault("MaxItems")
  valid_603538 = validateParameter(valid_603538, JInt, required = false, default = nil)
  if valid_603538 != nil:
    section.add "MaxItems", valid_603538
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603539: Call_PostGetServiceLastAccessedDetails_603524;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_603539.validator(path, query, header, formData, body)
  let scheme = call_603539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603539.url(scheme.get, call_603539.host, call_603539.base,
                         call_603539.route, valid.getOrDefault("path"))
  result = hook(call_603539, url, valid)

proc call*(call_603540: Call_PostGetServiceLastAccessedDetails_603524;
          JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetails"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603541 = newJObject()
  var formData_603542 = newJObject()
  add(formData_603542, "Marker", newJString(Marker))
  add(query_603541, "Action", newJString(Action))
  add(formData_603542, "JobId", newJString(JobId))
  add(formData_603542, "MaxItems", newJInt(MaxItems))
  add(query_603541, "Version", newJString(Version))
  result = call_603540.call(nil, query_603541, nil, formData_603542, nil)

var postGetServiceLastAccessedDetails* = Call_PostGetServiceLastAccessedDetails_603524(
    name: "postGetServiceLastAccessedDetails", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_PostGetServiceLastAccessedDetails_603525, base: "/",
    url: url_PostGetServiceLastAccessedDetails_603526,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetails_603506 = ref object of OpenApiRestCall_600426
proc url_GetGetServiceLastAccessedDetails_603508(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetails_603507(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_603509 = query.getOrDefault("JobId")
  valid_603509 = validateParameter(valid_603509, JString, required = true,
                                 default = nil)
  if valid_603509 != nil:
    section.add "JobId", valid_603509
  var valid_603510 = query.getOrDefault("Action")
  valid_603510 = validateParameter(valid_603510, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetails"))
  if valid_603510 != nil:
    section.add "Action", valid_603510
  var valid_603511 = query.getOrDefault("Marker")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "Marker", valid_603511
  var valid_603512 = query.getOrDefault("MaxItems")
  valid_603512 = validateParameter(valid_603512, JInt, required = false, default = nil)
  if valid_603512 != nil:
    section.add "MaxItems", valid_603512
  var valid_603513 = query.getOrDefault("Version")
  valid_603513 = validateParameter(valid_603513, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603513 != nil:
    section.add "Version", valid_603513
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603514 = header.getOrDefault("X-Amz-Date")
  valid_603514 = validateParameter(valid_603514, JString, required = false,
                                 default = nil)
  if valid_603514 != nil:
    section.add "X-Amz-Date", valid_603514
  var valid_603515 = header.getOrDefault("X-Amz-Security-Token")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "X-Amz-Security-Token", valid_603515
  var valid_603516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "X-Amz-Content-Sha256", valid_603516
  var valid_603517 = header.getOrDefault("X-Amz-Algorithm")
  valid_603517 = validateParameter(valid_603517, JString, required = false,
                                 default = nil)
  if valid_603517 != nil:
    section.add "X-Amz-Algorithm", valid_603517
  var valid_603518 = header.getOrDefault("X-Amz-Signature")
  valid_603518 = validateParameter(valid_603518, JString, required = false,
                                 default = nil)
  if valid_603518 != nil:
    section.add "X-Amz-Signature", valid_603518
  var valid_603519 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603519 = validateParameter(valid_603519, JString, required = false,
                                 default = nil)
  if valid_603519 != nil:
    section.add "X-Amz-SignedHeaders", valid_603519
  var valid_603520 = header.getOrDefault("X-Amz-Credential")
  valid_603520 = validateParameter(valid_603520, JString, required = false,
                                 default = nil)
  if valid_603520 != nil:
    section.add "X-Amz-Credential", valid_603520
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603521: Call_GetGetServiceLastAccessedDetails_603506;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ## 
  let valid = call_603521.validator(path, query, header, formData, body)
  let scheme = call_603521.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603521.url(scheme.get, call_603521.host, call_603521.base,
                         call_603521.route, valid.getOrDefault("path"))
  result = hook(call_603521, url, valid)

proc call*(call_603522: Call_GetGetServiceLastAccessedDetails_603506;
          JobId: string; Action: string = "GetServiceLastAccessedDetails";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetails
  ## <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of AWS services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603523 = newJObject()
  add(query_603523, "JobId", newJString(JobId))
  add(query_603523, "Action", newJString(Action))
  add(query_603523, "Marker", newJString(Marker))
  add(query_603523, "MaxItems", newJInt(MaxItems))
  add(query_603523, "Version", newJString(Version))
  result = call_603522.call(nil, query_603523, nil, nil, nil)

var getGetServiceLastAccessedDetails* = Call_GetGetServiceLastAccessedDetails_603506(
    name: "getGetServiceLastAccessedDetails", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=GetServiceLastAccessedDetails",
    validator: validate_GetGetServiceLastAccessedDetails_603507, base: "/",
    url: url_GetGetServiceLastAccessedDetails_603508,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLastAccessedDetailsWithEntities_603562 = ref object of OpenApiRestCall_600426
proc url_PostGetServiceLastAccessedDetailsWithEntities_603564(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLastAccessedDetailsWithEntities_603563(
    path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
    body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603565 = query.getOrDefault("Action")
  valid_603565 = validateParameter(valid_603565, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_603565 != nil:
    section.add "Action", valid_603565
  var valid_603566 = query.getOrDefault("Version")
  valid_603566 = validateParameter(valid_603566, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603566 != nil:
    section.add "Version", valid_603566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603567 = header.getOrDefault("X-Amz-Date")
  valid_603567 = validateParameter(valid_603567, JString, required = false,
                                 default = nil)
  if valid_603567 != nil:
    section.add "X-Amz-Date", valid_603567
  var valid_603568 = header.getOrDefault("X-Amz-Security-Token")
  valid_603568 = validateParameter(valid_603568, JString, required = false,
                                 default = nil)
  if valid_603568 != nil:
    section.add "X-Amz-Security-Token", valid_603568
  var valid_603569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "X-Amz-Content-Sha256", valid_603569
  var valid_603570 = header.getOrDefault("X-Amz-Algorithm")
  valid_603570 = validateParameter(valid_603570, JString, required = false,
                                 default = nil)
  if valid_603570 != nil:
    section.add "X-Amz-Algorithm", valid_603570
  var valid_603571 = header.getOrDefault("X-Amz-Signature")
  valid_603571 = validateParameter(valid_603571, JString, required = false,
                                 default = nil)
  if valid_603571 != nil:
    section.add "X-Amz-Signature", valid_603571
  var valid_603572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603572 = validateParameter(valid_603572, JString, required = false,
                                 default = nil)
  if valid_603572 != nil:
    section.add "X-Amz-SignedHeaders", valid_603572
  var valid_603573 = header.getOrDefault("X-Amz-Credential")
  valid_603573 = validateParameter(valid_603573, JString, required = false,
                                 default = nil)
  if valid_603573 != nil:
    section.add "X-Amz-Credential", valid_603573
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceNamespace` field"
  var valid_603574 = formData.getOrDefault("ServiceNamespace")
  valid_603574 = validateParameter(valid_603574, JString, required = true,
                                 default = nil)
  if valid_603574 != nil:
    section.add "ServiceNamespace", valid_603574
  var valid_603575 = formData.getOrDefault("Marker")
  valid_603575 = validateParameter(valid_603575, JString, required = false,
                                 default = nil)
  if valid_603575 != nil:
    section.add "Marker", valid_603575
  var valid_603576 = formData.getOrDefault("JobId")
  valid_603576 = validateParameter(valid_603576, JString, required = true,
                                 default = nil)
  if valid_603576 != nil:
    section.add "JobId", valid_603576
  var valid_603577 = formData.getOrDefault("MaxItems")
  valid_603577 = validateParameter(valid_603577, JInt, required = false, default = nil)
  if valid_603577 != nil:
    section.add "MaxItems", valid_603577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603578: Call_PostGetServiceLastAccessedDetailsWithEntities_603562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_603578.validator(path, query, header, formData, body)
  let scheme = call_603578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603578.url(scheme.get, call_603578.host, call_603578.base,
                         call_603578.route, valid.getOrDefault("path"))
  result = hook(call_603578, url, valid)

proc call*(call_603579: Call_PostGetServiceLastAccessedDetailsWithEntities_603562;
          ServiceNamespace: string; JobId: string; Marker: string = "";
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603580 = newJObject()
  var formData_603581 = newJObject()
  add(formData_603581, "ServiceNamespace", newJString(ServiceNamespace))
  add(formData_603581, "Marker", newJString(Marker))
  add(query_603580, "Action", newJString(Action))
  add(formData_603581, "JobId", newJString(JobId))
  add(formData_603581, "MaxItems", newJInt(MaxItems))
  add(query_603580, "Version", newJString(Version))
  result = call_603579.call(nil, query_603580, nil, formData_603581, nil)

var postGetServiceLastAccessedDetailsWithEntities* = Call_PostGetServiceLastAccessedDetailsWithEntities_603562(
    name: "postGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_PostGetServiceLastAccessedDetailsWithEntities_603563,
    base: "/", url: url_PostGetServiceLastAccessedDetailsWithEntities_603564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLastAccessedDetailsWithEntities_603543 = ref object of OpenApiRestCall_600426
proc url_GetGetServiceLastAccessedDetailsWithEntities_603545(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLastAccessedDetailsWithEntities_603544(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   JobId: JString (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   ServiceNamespace: JString (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `JobId` field"
  var valid_603546 = query.getOrDefault("JobId")
  valid_603546 = validateParameter(valid_603546, JString, required = true,
                                 default = nil)
  if valid_603546 != nil:
    section.add "JobId", valid_603546
  var valid_603547 = query.getOrDefault("Action")
  valid_603547 = validateParameter(valid_603547, JString, required = true, default = newJString(
      "GetServiceLastAccessedDetailsWithEntities"))
  if valid_603547 != nil:
    section.add "Action", valid_603547
  var valid_603548 = query.getOrDefault("Marker")
  valid_603548 = validateParameter(valid_603548, JString, required = false,
                                 default = nil)
  if valid_603548 != nil:
    section.add "Marker", valid_603548
  var valid_603549 = query.getOrDefault("MaxItems")
  valid_603549 = validateParameter(valid_603549, JInt, required = false, default = nil)
  if valid_603549 != nil:
    section.add "MaxItems", valid_603549
  var valid_603550 = query.getOrDefault("Version")
  valid_603550 = validateParameter(valid_603550, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603550 != nil:
    section.add "Version", valid_603550
  var valid_603551 = query.getOrDefault("ServiceNamespace")
  valid_603551 = validateParameter(valid_603551, JString, required = true,
                                 default = nil)
  if valid_603551 != nil:
    section.add "ServiceNamespace", valid_603551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603552 = header.getOrDefault("X-Amz-Date")
  valid_603552 = validateParameter(valid_603552, JString, required = false,
                                 default = nil)
  if valid_603552 != nil:
    section.add "X-Amz-Date", valid_603552
  var valid_603553 = header.getOrDefault("X-Amz-Security-Token")
  valid_603553 = validateParameter(valid_603553, JString, required = false,
                                 default = nil)
  if valid_603553 != nil:
    section.add "X-Amz-Security-Token", valid_603553
  var valid_603554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603554 = validateParameter(valid_603554, JString, required = false,
                                 default = nil)
  if valid_603554 != nil:
    section.add "X-Amz-Content-Sha256", valid_603554
  var valid_603555 = header.getOrDefault("X-Amz-Algorithm")
  valid_603555 = validateParameter(valid_603555, JString, required = false,
                                 default = nil)
  if valid_603555 != nil:
    section.add "X-Amz-Algorithm", valid_603555
  var valid_603556 = header.getOrDefault("X-Amz-Signature")
  valid_603556 = validateParameter(valid_603556, JString, required = false,
                                 default = nil)
  if valid_603556 != nil:
    section.add "X-Amz-Signature", valid_603556
  var valid_603557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603557 = validateParameter(valid_603557, JString, required = false,
                                 default = nil)
  if valid_603557 != nil:
    section.add "X-Amz-SignedHeaders", valid_603557
  var valid_603558 = header.getOrDefault("X-Amz-Credential")
  valid_603558 = validateParameter(valid_603558, JString, required = false,
                                 default = nil)
  if valid_603558 != nil:
    section.add "X-Amz-Credential", valid_603558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603559: Call_GetGetServiceLastAccessedDetailsWithEntities_603543;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ## 
  let valid = call_603559.validator(path, query, header, formData, body)
  let scheme = call_603559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603559.url(scheme.get, call_603559.host, call_603559.base,
                         call_603559.route, valid.getOrDefault("path"))
  result = hook(call_603559, url, valid)

proc call*(call_603560: Call_GetGetServiceLastAccessedDetailsWithEntities_603543;
          JobId: string; ServiceNamespace: string;
          Action: string = "GetServiceLastAccessedDetailsWithEntities";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLastAccessedDetailsWithEntities
  ## <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
  ##   JobId: string (required)
  ##        : The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   ServiceNamespace: string (required)
  ##                   : <p>The service namespace for an AWS service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  var query_603561 = newJObject()
  add(query_603561, "JobId", newJString(JobId))
  add(query_603561, "Action", newJString(Action))
  add(query_603561, "Marker", newJString(Marker))
  add(query_603561, "MaxItems", newJInt(MaxItems))
  add(query_603561, "Version", newJString(Version))
  add(query_603561, "ServiceNamespace", newJString(ServiceNamespace))
  result = call_603560.call(nil, query_603561, nil, nil, nil)

var getGetServiceLastAccessedDetailsWithEntities* = Call_GetGetServiceLastAccessedDetailsWithEntities_603543(
    name: "getGetServiceLastAccessedDetailsWithEntities",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLastAccessedDetailsWithEntities",
    validator: validate_GetGetServiceLastAccessedDetailsWithEntities_603544,
    base: "/", url: url_GetGetServiceLastAccessedDetailsWithEntities_603545,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetServiceLinkedRoleDeletionStatus_603598 = ref object of OpenApiRestCall_600426
proc url_PostGetServiceLinkedRoleDeletionStatus_603600(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetServiceLinkedRoleDeletionStatus_603599(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603601 = query.getOrDefault("Action")
  valid_603601 = validateParameter(valid_603601, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_603601 != nil:
    section.add "Action", valid_603601
  var valid_603602 = query.getOrDefault("Version")
  valid_603602 = validateParameter(valid_603602, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603602 != nil:
    section.add "Version", valid_603602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603603 = header.getOrDefault("X-Amz-Date")
  valid_603603 = validateParameter(valid_603603, JString, required = false,
                                 default = nil)
  if valid_603603 != nil:
    section.add "X-Amz-Date", valid_603603
  var valid_603604 = header.getOrDefault("X-Amz-Security-Token")
  valid_603604 = validateParameter(valid_603604, JString, required = false,
                                 default = nil)
  if valid_603604 != nil:
    section.add "X-Amz-Security-Token", valid_603604
  var valid_603605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603605 = validateParameter(valid_603605, JString, required = false,
                                 default = nil)
  if valid_603605 != nil:
    section.add "X-Amz-Content-Sha256", valid_603605
  var valid_603606 = header.getOrDefault("X-Amz-Algorithm")
  valid_603606 = validateParameter(valid_603606, JString, required = false,
                                 default = nil)
  if valid_603606 != nil:
    section.add "X-Amz-Algorithm", valid_603606
  var valid_603607 = header.getOrDefault("X-Amz-Signature")
  valid_603607 = validateParameter(valid_603607, JString, required = false,
                                 default = nil)
  if valid_603607 != nil:
    section.add "X-Amz-Signature", valid_603607
  var valid_603608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603608 = validateParameter(valid_603608, JString, required = false,
                                 default = nil)
  if valid_603608 != nil:
    section.add "X-Amz-SignedHeaders", valid_603608
  var valid_603609 = header.getOrDefault("X-Amz-Credential")
  valid_603609 = validateParameter(valid_603609, JString, required = false,
                                 default = nil)
  if valid_603609 != nil:
    section.add "X-Amz-Credential", valid_603609
  result.add "header", section
  ## parameters in `formData` object:
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DeletionTaskId` field"
  var valid_603610 = formData.getOrDefault("DeletionTaskId")
  valid_603610 = validateParameter(valid_603610, JString, required = true,
                                 default = nil)
  if valid_603610 != nil:
    section.add "DeletionTaskId", valid_603610
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603611: Call_PostGetServiceLinkedRoleDeletionStatus_603598;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_603611.validator(path, query, header, formData, body)
  let scheme = call_603611.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603611.url(scheme.get, call_603611.host, call_603611.base,
                         call_603611.route, valid.getOrDefault("path"))
  result = hook(call_603611, url, valid)

proc call*(call_603612: Call_PostGetServiceLinkedRoleDeletionStatus_603598;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## postGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_603613 = newJObject()
  var formData_603614 = newJObject()
  add(query_603613, "Action", newJString(Action))
  add(formData_603614, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_603613, "Version", newJString(Version))
  result = call_603612.call(nil, query_603613, nil, formData_603614, nil)

var postGetServiceLinkedRoleDeletionStatus* = Call_PostGetServiceLinkedRoleDeletionStatus_603598(
    name: "postGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_PostGetServiceLinkedRoleDeletionStatus_603599, base: "/",
    url: url_PostGetServiceLinkedRoleDeletionStatus_603600,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetServiceLinkedRoleDeletionStatus_603582 = ref object of OpenApiRestCall_600426
proc url_GetGetServiceLinkedRoleDeletionStatus_603584(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetServiceLinkedRoleDeletionStatus_603583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DeletionTaskId: JString (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603585 = query.getOrDefault("Action")
  valid_603585 = validateParameter(valid_603585, JString, required = true, default = newJString(
      "GetServiceLinkedRoleDeletionStatus"))
  if valid_603585 != nil:
    section.add "Action", valid_603585
  var valid_603586 = query.getOrDefault("DeletionTaskId")
  valid_603586 = validateParameter(valid_603586, JString, required = true,
                                 default = nil)
  if valid_603586 != nil:
    section.add "DeletionTaskId", valid_603586
  var valid_603587 = query.getOrDefault("Version")
  valid_603587 = validateParameter(valid_603587, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603587 != nil:
    section.add "Version", valid_603587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603588 = header.getOrDefault("X-Amz-Date")
  valid_603588 = validateParameter(valid_603588, JString, required = false,
                                 default = nil)
  if valid_603588 != nil:
    section.add "X-Amz-Date", valid_603588
  var valid_603589 = header.getOrDefault("X-Amz-Security-Token")
  valid_603589 = validateParameter(valid_603589, JString, required = false,
                                 default = nil)
  if valid_603589 != nil:
    section.add "X-Amz-Security-Token", valid_603589
  var valid_603590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603590 = validateParameter(valid_603590, JString, required = false,
                                 default = nil)
  if valid_603590 != nil:
    section.add "X-Amz-Content-Sha256", valid_603590
  var valid_603591 = header.getOrDefault("X-Amz-Algorithm")
  valid_603591 = validateParameter(valid_603591, JString, required = false,
                                 default = nil)
  if valid_603591 != nil:
    section.add "X-Amz-Algorithm", valid_603591
  var valid_603592 = header.getOrDefault("X-Amz-Signature")
  valid_603592 = validateParameter(valid_603592, JString, required = false,
                                 default = nil)
  if valid_603592 != nil:
    section.add "X-Amz-Signature", valid_603592
  var valid_603593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603593 = validateParameter(valid_603593, JString, required = false,
                                 default = nil)
  if valid_603593 != nil:
    section.add "X-Amz-SignedHeaders", valid_603593
  var valid_603594 = header.getOrDefault("X-Amz-Credential")
  valid_603594 = validateParameter(valid_603594, JString, required = false,
                                 default = nil)
  if valid_603594 != nil:
    section.add "X-Amz-Credential", valid_603594
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603595: Call_GetGetServiceLinkedRoleDeletionStatus_603582;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ## 
  let valid = call_603595.validator(path, query, header, formData, body)
  let scheme = call_603595.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603595.url(scheme.get, call_603595.host, call_603595.base,
                         call_603595.route, valid.getOrDefault("path"))
  result = hook(call_603595, url, valid)

proc call*(call_603596: Call_GetGetServiceLinkedRoleDeletionStatus_603582;
          DeletionTaskId: string;
          Action: string = "GetServiceLinkedRoleDeletionStatus";
          Version: string = "2010-05-08"): Recallable =
  ## getGetServiceLinkedRoleDeletionStatus
  ## Retrieves the status of your service-linked role deletion. After you use the <a>DeleteServiceLinkedRole</a> API operation to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
  ##   Action: string (required)
  ##   DeletionTaskId: string (required)
  ##                 : The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format 
  ## <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.
  ##   Version: string (required)
  var query_603597 = newJObject()
  add(query_603597, "Action", newJString(Action))
  add(query_603597, "DeletionTaskId", newJString(DeletionTaskId))
  add(query_603597, "Version", newJString(Version))
  result = call_603596.call(nil, query_603597, nil, nil, nil)

var getGetServiceLinkedRoleDeletionStatus* = Call_GetGetServiceLinkedRoleDeletionStatus_603582(
    name: "getGetServiceLinkedRoleDeletionStatus", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=GetServiceLinkedRoleDeletionStatus",
    validator: validate_GetGetServiceLinkedRoleDeletionStatus_603583, base: "/",
    url: url_GetGetServiceLinkedRoleDeletionStatus_603584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUser_603631 = ref object of OpenApiRestCall_600426
proc url_PostGetUser_603633(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUser_603632(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603634 = query.getOrDefault("Action")
  valid_603634 = validateParameter(valid_603634, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_603634 != nil:
    section.add "Action", valid_603634
  var valid_603635 = query.getOrDefault("Version")
  valid_603635 = validateParameter(valid_603635, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603635 != nil:
    section.add "Version", valid_603635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603636 = header.getOrDefault("X-Amz-Date")
  valid_603636 = validateParameter(valid_603636, JString, required = false,
                                 default = nil)
  if valid_603636 != nil:
    section.add "X-Amz-Date", valid_603636
  var valid_603637 = header.getOrDefault("X-Amz-Security-Token")
  valid_603637 = validateParameter(valid_603637, JString, required = false,
                                 default = nil)
  if valid_603637 != nil:
    section.add "X-Amz-Security-Token", valid_603637
  var valid_603638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603638 = validateParameter(valid_603638, JString, required = false,
                                 default = nil)
  if valid_603638 != nil:
    section.add "X-Amz-Content-Sha256", valid_603638
  var valid_603639 = header.getOrDefault("X-Amz-Algorithm")
  valid_603639 = validateParameter(valid_603639, JString, required = false,
                                 default = nil)
  if valid_603639 != nil:
    section.add "X-Amz-Algorithm", valid_603639
  var valid_603640 = header.getOrDefault("X-Amz-Signature")
  valid_603640 = validateParameter(valid_603640, JString, required = false,
                                 default = nil)
  if valid_603640 != nil:
    section.add "X-Amz-Signature", valid_603640
  var valid_603641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603641 = validateParameter(valid_603641, JString, required = false,
                                 default = nil)
  if valid_603641 != nil:
    section.add "X-Amz-SignedHeaders", valid_603641
  var valid_603642 = header.getOrDefault("X-Amz-Credential")
  valid_603642 = validateParameter(valid_603642, JString, required = false,
                                 default = nil)
  if valid_603642 != nil:
    section.add "X-Amz-Credential", valid_603642
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  var valid_603643 = formData.getOrDefault("UserName")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "UserName", valid_603643
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603644: Call_PostGetUser_603631; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_603644.validator(path, query, header, formData, body)
  let scheme = call_603644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603644.url(scheme.get, call_603644.host, call_603644.base,
                         call_603644.route, valid.getOrDefault("path"))
  result = hook(call_603644, url, valid)

proc call*(call_603645: Call_PostGetUser_603631; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## postGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603646 = newJObject()
  var formData_603647 = newJObject()
  add(formData_603647, "UserName", newJString(UserName))
  add(query_603646, "Action", newJString(Action))
  add(query_603646, "Version", newJString(Version))
  result = call_603645.call(nil, query_603646, nil, formData_603647, nil)

var postGetUser* = Call_PostGetUser_603631(name: "postGetUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=GetUser",
                                        validator: validate_PostGetUser_603632,
                                        base: "/", url: url_PostGetUser_603633,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUser_603615 = ref object of OpenApiRestCall_600426
proc url_GetGetUser_603617(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUser_603616(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_603618 = query.getOrDefault("UserName")
  valid_603618 = validateParameter(valid_603618, JString, required = false,
                                 default = nil)
  if valid_603618 != nil:
    section.add "UserName", valid_603618
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603619 = query.getOrDefault("Action")
  valid_603619 = validateParameter(valid_603619, JString, required = true,
                                 default = newJString("GetUser"))
  if valid_603619 != nil:
    section.add "Action", valid_603619
  var valid_603620 = query.getOrDefault("Version")
  valid_603620 = validateParameter(valid_603620, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603620 != nil:
    section.add "Version", valid_603620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603621 = header.getOrDefault("X-Amz-Date")
  valid_603621 = validateParameter(valid_603621, JString, required = false,
                                 default = nil)
  if valid_603621 != nil:
    section.add "X-Amz-Date", valid_603621
  var valid_603622 = header.getOrDefault("X-Amz-Security-Token")
  valid_603622 = validateParameter(valid_603622, JString, required = false,
                                 default = nil)
  if valid_603622 != nil:
    section.add "X-Amz-Security-Token", valid_603622
  var valid_603623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603623 = validateParameter(valid_603623, JString, required = false,
                                 default = nil)
  if valid_603623 != nil:
    section.add "X-Amz-Content-Sha256", valid_603623
  var valid_603624 = header.getOrDefault("X-Amz-Algorithm")
  valid_603624 = validateParameter(valid_603624, JString, required = false,
                                 default = nil)
  if valid_603624 != nil:
    section.add "X-Amz-Algorithm", valid_603624
  var valid_603625 = header.getOrDefault("X-Amz-Signature")
  valid_603625 = validateParameter(valid_603625, JString, required = false,
                                 default = nil)
  if valid_603625 != nil:
    section.add "X-Amz-Signature", valid_603625
  var valid_603626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603626 = validateParameter(valid_603626, JString, required = false,
                                 default = nil)
  if valid_603626 != nil:
    section.add "X-Amz-SignedHeaders", valid_603626
  var valid_603627 = header.getOrDefault("X-Amz-Credential")
  valid_603627 = validateParameter(valid_603627, JString, required = false,
                                 default = nil)
  if valid_603627 != nil:
    section.add "X-Amz-Credential", valid_603627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603628: Call_GetGetUser_603615; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ## 
  let valid = call_603628.validator(path, query, header, formData, body)
  let scheme = call_603628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603628.url(scheme.get, call_603628.host, call_603628.base,
                         call_603628.route, valid.getOrDefault("path"))
  result = hook(call_603628, url, valid)

proc call*(call_603629: Call_GetGetUser_603615; UserName: string = "";
          Action: string = "GetUser"; Version: string = "2010-05-08"): Recallable =
  ## getGetUser
  ## <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>
  ##   UserName: string
  ##           : <p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603630 = newJObject()
  add(query_603630, "UserName", newJString(UserName))
  add(query_603630, "Action", newJString(Action))
  add(query_603630, "Version", newJString(Version))
  result = call_603629.call(nil, query_603630, nil, nil, nil)

var getGetUser* = Call_GetGetUser_603615(name: "getGetUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=GetUser",
                                      validator: validate_GetGetUser_603616,
                                      base: "/", url: url_GetGetUser_603617,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostGetUserPolicy_603665 = ref object of OpenApiRestCall_600426
proc url_PostGetUserPolicy_603667(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostGetUserPolicy_603666(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603668 = query.getOrDefault("Action")
  valid_603668 = validateParameter(valid_603668, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_603668 != nil:
    section.add "Action", valid_603668
  var valid_603669 = query.getOrDefault("Version")
  valid_603669 = validateParameter(valid_603669, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603669 != nil:
    section.add "Version", valid_603669
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603670 = header.getOrDefault("X-Amz-Date")
  valid_603670 = validateParameter(valid_603670, JString, required = false,
                                 default = nil)
  if valid_603670 != nil:
    section.add "X-Amz-Date", valid_603670
  var valid_603671 = header.getOrDefault("X-Amz-Security-Token")
  valid_603671 = validateParameter(valid_603671, JString, required = false,
                                 default = nil)
  if valid_603671 != nil:
    section.add "X-Amz-Security-Token", valid_603671
  var valid_603672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603672 = validateParameter(valid_603672, JString, required = false,
                                 default = nil)
  if valid_603672 != nil:
    section.add "X-Amz-Content-Sha256", valid_603672
  var valid_603673 = header.getOrDefault("X-Amz-Algorithm")
  valid_603673 = validateParameter(valid_603673, JString, required = false,
                                 default = nil)
  if valid_603673 != nil:
    section.add "X-Amz-Algorithm", valid_603673
  var valid_603674 = header.getOrDefault("X-Amz-Signature")
  valid_603674 = validateParameter(valid_603674, JString, required = false,
                                 default = nil)
  if valid_603674 != nil:
    section.add "X-Amz-Signature", valid_603674
  var valid_603675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603675 = validateParameter(valid_603675, JString, required = false,
                                 default = nil)
  if valid_603675 != nil:
    section.add "X-Amz-SignedHeaders", valid_603675
  var valid_603676 = header.getOrDefault("X-Amz-Credential")
  valid_603676 = validateParameter(valid_603676, JString, required = false,
                                 default = nil)
  if valid_603676 != nil:
    section.add "X-Amz-Credential", valid_603676
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_603677 = formData.getOrDefault("PolicyName")
  valid_603677 = validateParameter(valid_603677, JString, required = true,
                                 default = nil)
  if valid_603677 != nil:
    section.add "PolicyName", valid_603677
  var valid_603678 = formData.getOrDefault("UserName")
  valid_603678 = validateParameter(valid_603678, JString, required = true,
                                 default = nil)
  if valid_603678 != nil:
    section.add "UserName", valid_603678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603679: Call_PostGetUserPolicy_603665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603679.validator(path, query, header, formData, body)
  let scheme = call_603679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603679.url(scheme.get, call_603679.host, call_603679.base,
                         call_603679.route, valid.getOrDefault("path"))
  result = hook(call_603679, url, valid)

proc call*(call_603680: Call_PostGetUserPolicy_603665; PolicyName: string;
          UserName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603681 = newJObject()
  var formData_603682 = newJObject()
  add(formData_603682, "PolicyName", newJString(PolicyName))
  add(formData_603682, "UserName", newJString(UserName))
  add(query_603681, "Action", newJString(Action))
  add(query_603681, "Version", newJString(Version))
  result = call_603680.call(nil, query_603681, nil, formData_603682, nil)

var postGetUserPolicy* = Call_PostGetUserPolicy_603665(name: "postGetUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_PostGetUserPolicy_603666,
    base: "/", url: url_PostGetUserPolicy_603667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetGetUserPolicy_603648 = ref object of OpenApiRestCall_600426
proc url_GetGetUserPolicy_603650(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetGetUserPolicy_603649(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603651 = query.getOrDefault("UserName")
  valid_603651 = validateParameter(valid_603651, JString, required = true,
                                 default = nil)
  if valid_603651 != nil:
    section.add "UserName", valid_603651
  var valid_603652 = query.getOrDefault("Action")
  valid_603652 = validateParameter(valid_603652, JString, required = true,
                                 default = newJString("GetUserPolicy"))
  if valid_603652 != nil:
    section.add "Action", valid_603652
  var valid_603653 = query.getOrDefault("Version")
  valid_603653 = validateParameter(valid_603653, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603653 != nil:
    section.add "Version", valid_603653
  var valid_603654 = query.getOrDefault("PolicyName")
  valid_603654 = validateParameter(valid_603654, JString, required = true,
                                 default = nil)
  if valid_603654 != nil:
    section.add "PolicyName", valid_603654
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603655 = header.getOrDefault("X-Amz-Date")
  valid_603655 = validateParameter(valid_603655, JString, required = false,
                                 default = nil)
  if valid_603655 != nil:
    section.add "X-Amz-Date", valid_603655
  var valid_603656 = header.getOrDefault("X-Amz-Security-Token")
  valid_603656 = validateParameter(valid_603656, JString, required = false,
                                 default = nil)
  if valid_603656 != nil:
    section.add "X-Amz-Security-Token", valid_603656
  var valid_603657 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603657 = validateParameter(valid_603657, JString, required = false,
                                 default = nil)
  if valid_603657 != nil:
    section.add "X-Amz-Content-Sha256", valid_603657
  var valid_603658 = header.getOrDefault("X-Amz-Algorithm")
  valid_603658 = validateParameter(valid_603658, JString, required = false,
                                 default = nil)
  if valid_603658 != nil:
    section.add "X-Amz-Algorithm", valid_603658
  var valid_603659 = header.getOrDefault("X-Amz-Signature")
  valid_603659 = validateParameter(valid_603659, JString, required = false,
                                 default = nil)
  if valid_603659 != nil:
    section.add "X-Amz-Signature", valid_603659
  var valid_603660 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-SignedHeaders", valid_603660
  var valid_603661 = header.getOrDefault("X-Amz-Credential")
  valid_603661 = validateParameter(valid_603661, JString, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "X-Amz-Credential", valid_603661
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603662: Call_GetGetUserPolicy_603648; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_603662.validator(path, query, header, formData, body)
  let scheme = call_603662.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603662.url(scheme.get, call_603662.host, call_603662.base,
                         call_603662.route, valid.getOrDefault("path"))
  result = hook(call_603662, url, valid)

proc call*(call_603663: Call_GetGetUserPolicy_603648; UserName: string;
          PolicyName: string; Action: string = "GetUserPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getGetUserPolicy
  ## <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_603664 = newJObject()
  add(query_603664, "UserName", newJString(UserName))
  add(query_603664, "Action", newJString(Action))
  add(query_603664, "Version", newJString(Version))
  add(query_603664, "PolicyName", newJString(PolicyName))
  result = call_603663.call(nil, query_603664, nil, nil, nil)

var getGetUserPolicy* = Call_GetGetUserPolicy_603648(name: "getGetUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=GetUserPolicy", validator: validate_GetGetUserPolicy_603649,
    base: "/", url: url_GetGetUserPolicy_603650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccessKeys_603701 = ref object of OpenApiRestCall_600426
proc url_PostListAccessKeys_603703(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccessKeys_603702(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603704 = query.getOrDefault("Action")
  valid_603704 = validateParameter(valid_603704, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_603704 != nil:
    section.add "Action", valid_603704
  var valid_603705 = query.getOrDefault("Version")
  valid_603705 = validateParameter(valid_603705, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603705 != nil:
    section.add "Version", valid_603705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603706 = header.getOrDefault("X-Amz-Date")
  valid_603706 = validateParameter(valid_603706, JString, required = false,
                                 default = nil)
  if valid_603706 != nil:
    section.add "X-Amz-Date", valid_603706
  var valid_603707 = header.getOrDefault("X-Amz-Security-Token")
  valid_603707 = validateParameter(valid_603707, JString, required = false,
                                 default = nil)
  if valid_603707 != nil:
    section.add "X-Amz-Security-Token", valid_603707
  var valid_603708 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603708 = validateParameter(valid_603708, JString, required = false,
                                 default = nil)
  if valid_603708 != nil:
    section.add "X-Amz-Content-Sha256", valid_603708
  var valid_603709 = header.getOrDefault("X-Amz-Algorithm")
  valid_603709 = validateParameter(valid_603709, JString, required = false,
                                 default = nil)
  if valid_603709 != nil:
    section.add "X-Amz-Algorithm", valid_603709
  var valid_603710 = header.getOrDefault("X-Amz-Signature")
  valid_603710 = validateParameter(valid_603710, JString, required = false,
                                 default = nil)
  if valid_603710 != nil:
    section.add "X-Amz-Signature", valid_603710
  var valid_603711 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603711 = validateParameter(valid_603711, JString, required = false,
                                 default = nil)
  if valid_603711 != nil:
    section.add "X-Amz-SignedHeaders", valid_603711
  var valid_603712 = header.getOrDefault("X-Amz-Credential")
  valid_603712 = validateParameter(valid_603712, JString, required = false,
                                 default = nil)
  if valid_603712 != nil:
    section.add "X-Amz-Credential", valid_603712
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603713 = formData.getOrDefault("UserName")
  valid_603713 = validateParameter(valid_603713, JString, required = false,
                                 default = nil)
  if valid_603713 != nil:
    section.add "UserName", valid_603713
  var valid_603714 = formData.getOrDefault("Marker")
  valid_603714 = validateParameter(valid_603714, JString, required = false,
                                 default = nil)
  if valid_603714 != nil:
    section.add "Marker", valid_603714
  var valid_603715 = formData.getOrDefault("MaxItems")
  valid_603715 = validateParameter(valid_603715, JInt, required = false, default = nil)
  if valid_603715 != nil:
    section.add "MaxItems", valid_603715
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603716: Call_PostListAccessKeys_603701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_603716.validator(path, query, header, formData, body)
  let scheme = call_603716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603716.url(scheme.get, call_603716.host, call_603716.base,
                         call_603716.route, valid.getOrDefault("path"))
  result = hook(call_603716, url, valid)

proc call*(call_603717: Call_PostListAccessKeys_603701; UserName: string = "";
          Marker: string = ""; Action: string = "ListAccessKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603718 = newJObject()
  var formData_603719 = newJObject()
  add(formData_603719, "UserName", newJString(UserName))
  add(formData_603719, "Marker", newJString(Marker))
  add(query_603718, "Action", newJString(Action))
  add(formData_603719, "MaxItems", newJInt(MaxItems))
  add(query_603718, "Version", newJString(Version))
  result = call_603717.call(nil, query_603718, nil, formData_603719, nil)

var postListAccessKeys* = Call_PostListAccessKeys_603701(
    name: "postListAccessKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccessKeys",
    validator: validate_PostListAccessKeys_603702, base: "/",
    url: url_PostListAccessKeys_603703, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccessKeys_603683 = ref object of OpenApiRestCall_600426
proc url_GetListAccessKeys_603685(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccessKeys_603684(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603686 = query.getOrDefault("UserName")
  valid_603686 = validateParameter(valid_603686, JString, required = false,
                                 default = nil)
  if valid_603686 != nil:
    section.add "UserName", valid_603686
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603687 = query.getOrDefault("Action")
  valid_603687 = validateParameter(valid_603687, JString, required = true,
                                 default = newJString("ListAccessKeys"))
  if valid_603687 != nil:
    section.add "Action", valid_603687
  var valid_603688 = query.getOrDefault("Marker")
  valid_603688 = validateParameter(valid_603688, JString, required = false,
                                 default = nil)
  if valid_603688 != nil:
    section.add "Marker", valid_603688
  var valid_603689 = query.getOrDefault("MaxItems")
  valid_603689 = validateParameter(valid_603689, JInt, required = false, default = nil)
  if valid_603689 != nil:
    section.add "MaxItems", valid_603689
  var valid_603690 = query.getOrDefault("Version")
  valid_603690 = validateParameter(valid_603690, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603690 != nil:
    section.add "Version", valid_603690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603691 = header.getOrDefault("X-Amz-Date")
  valid_603691 = validateParameter(valid_603691, JString, required = false,
                                 default = nil)
  if valid_603691 != nil:
    section.add "X-Amz-Date", valid_603691
  var valid_603692 = header.getOrDefault("X-Amz-Security-Token")
  valid_603692 = validateParameter(valid_603692, JString, required = false,
                                 default = nil)
  if valid_603692 != nil:
    section.add "X-Amz-Security-Token", valid_603692
  var valid_603693 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603693 = validateParameter(valid_603693, JString, required = false,
                                 default = nil)
  if valid_603693 != nil:
    section.add "X-Amz-Content-Sha256", valid_603693
  var valid_603694 = header.getOrDefault("X-Amz-Algorithm")
  valid_603694 = validateParameter(valid_603694, JString, required = false,
                                 default = nil)
  if valid_603694 != nil:
    section.add "X-Amz-Algorithm", valid_603694
  var valid_603695 = header.getOrDefault("X-Amz-Signature")
  valid_603695 = validateParameter(valid_603695, JString, required = false,
                                 default = nil)
  if valid_603695 != nil:
    section.add "X-Amz-Signature", valid_603695
  var valid_603696 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-SignedHeaders", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-Credential")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-Credential", valid_603697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603698: Call_GetListAccessKeys_603683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ## 
  let valid = call_603698.validator(path, query, header, formData, body)
  let scheme = call_603698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603698.url(scheme.get, call_603698.host, call_603698.base,
                         call_603698.route, valid.getOrDefault("path"))
  result = hook(call_603698, url, valid)

proc call*(call_603699: Call_GetListAccessKeys_603683; UserName: string = "";
          Action: string = "ListAccessKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccessKeys
  ## <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>
  ##   UserName: string
  ##           : <p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603700 = newJObject()
  add(query_603700, "UserName", newJString(UserName))
  add(query_603700, "Action", newJString(Action))
  add(query_603700, "Marker", newJString(Marker))
  add(query_603700, "MaxItems", newJInt(MaxItems))
  add(query_603700, "Version", newJString(Version))
  result = call_603699.call(nil, query_603700, nil, nil, nil)

var getListAccessKeys* = Call_GetListAccessKeys_603683(name: "getListAccessKeys",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListAccessKeys", validator: validate_GetListAccessKeys_603684,
    base: "/", url: url_GetListAccessKeys_603685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAccountAliases_603737 = ref object of OpenApiRestCall_600426
proc url_PostListAccountAliases_603739(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAccountAliases_603738(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603740 = query.getOrDefault("Action")
  valid_603740 = validateParameter(valid_603740, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_603740 != nil:
    section.add "Action", valid_603740
  var valid_603741 = query.getOrDefault("Version")
  valid_603741 = validateParameter(valid_603741, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603741 != nil:
    section.add "Version", valid_603741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603742 = header.getOrDefault("X-Amz-Date")
  valid_603742 = validateParameter(valid_603742, JString, required = false,
                                 default = nil)
  if valid_603742 != nil:
    section.add "X-Amz-Date", valid_603742
  var valid_603743 = header.getOrDefault("X-Amz-Security-Token")
  valid_603743 = validateParameter(valid_603743, JString, required = false,
                                 default = nil)
  if valid_603743 != nil:
    section.add "X-Amz-Security-Token", valid_603743
  var valid_603744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "X-Amz-Content-Sha256", valid_603744
  var valid_603745 = header.getOrDefault("X-Amz-Algorithm")
  valid_603745 = validateParameter(valid_603745, JString, required = false,
                                 default = nil)
  if valid_603745 != nil:
    section.add "X-Amz-Algorithm", valid_603745
  var valid_603746 = header.getOrDefault("X-Amz-Signature")
  valid_603746 = validateParameter(valid_603746, JString, required = false,
                                 default = nil)
  if valid_603746 != nil:
    section.add "X-Amz-Signature", valid_603746
  var valid_603747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603747 = validateParameter(valid_603747, JString, required = false,
                                 default = nil)
  if valid_603747 != nil:
    section.add "X-Amz-SignedHeaders", valid_603747
  var valid_603748 = header.getOrDefault("X-Amz-Credential")
  valid_603748 = validateParameter(valid_603748, JString, required = false,
                                 default = nil)
  if valid_603748 != nil:
    section.add "X-Amz-Credential", valid_603748
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603749 = formData.getOrDefault("Marker")
  valid_603749 = validateParameter(valid_603749, JString, required = false,
                                 default = nil)
  if valid_603749 != nil:
    section.add "Marker", valid_603749
  var valid_603750 = formData.getOrDefault("MaxItems")
  valid_603750 = validateParameter(valid_603750, JInt, required = false, default = nil)
  if valid_603750 != nil:
    section.add "MaxItems", valid_603750
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603751: Call_PostListAccountAliases_603737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603751.validator(path, query, header, formData, body)
  let scheme = call_603751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603751.url(scheme.get, call_603751.host, call_603751.base,
                         call_603751.route, valid.getOrDefault("path"))
  result = hook(call_603751, url, valid)

proc call*(call_603752: Call_PostListAccountAliases_603737; Marker: string = "";
          Action: string = "ListAccountAliases"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603753 = newJObject()
  var formData_603754 = newJObject()
  add(formData_603754, "Marker", newJString(Marker))
  add(query_603753, "Action", newJString(Action))
  add(formData_603754, "MaxItems", newJInt(MaxItems))
  add(query_603753, "Version", newJString(Version))
  result = call_603752.call(nil, query_603753, nil, formData_603754, nil)

var postListAccountAliases* = Call_PostListAccountAliases_603737(
    name: "postListAccountAliases", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_PostListAccountAliases_603738, base: "/",
    url: url_PostListAccountAliases_603739, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAccountAliases_603720 = ref object of OpenApiRestCall_600426
proc url_GetListAccountAliases_603722(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAccountAliases_603721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603723 = query.getOrDefault("Action")
  valid_603723 = validateParameter(valid_603723, JString, required = true,
                                 default = newJString("ListAccountAliases"))
  if valid_603723 != nil:
    section.add "Action", valid_603723
  var valid_603724 = query.getOrDefault("Marker")
  valid_603724 = validateParameter(valid_603724, JString, required = false,
                                 default = nil)
  if valid_603724 != nil:
    section.add "Marker", valid_603724
  var valid_603725 = query.getOrDefault("MaxItems")
  valid_603725 = validateParameter(valid_603725, JInt, required = false, default = nil)
  if valid_603725 != nil:
    section.add "MaxItems", valid_603725
  var valid_603726 = query.getOrDefault("Version")
  valid_603726 = validateParameter(valid_603726, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603726 != nil:
    section.add "Version", valid_603726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603727 = header.getOrDefault("X-Amz-Date")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "X-Amz-Date", valid_603727
  var valid_603728 = header.getOrDefault("X-Amz-Security-Token")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Security-Token", valid_603728
  var valid_603729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603729 = validateParameter(valid_603729, JString, required = false,
                                 default = nil)
  if valid_603729 != nil:
    section.add "X-Amz-Content-Sha256", valid_603729
  var valid_603730 = header.getOrDefault("X-Amz-Algorithm")
  valid_603730 = validateParameter(valid_603730, JString, required = false,
                                 default = nil)
  if valid_603730 != nil:
    section.add "X-Amz-Algorithm", valid_603730
  var valid_603731 = header.getOrDefault("X-Amz-Signature")
  valid_603731 = validateParameter(valid_603731, JString, required = false,
                                 default = nil)
  if valid_603731 != nil:
    section.add "X-Amz-Signature", valid_603731
  var valid_603732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603732 = validateParameter(valid_603732, JString, required = false,
                                 default = nil)
  if valid_603732 != nil:
    section.add "X-Amz-SignedHeaders", valid_603732
  var valid_603733 = header.getOrDefault("X-Amz-Credential")
  valid_603733 = validateParameter(valid_603733, JString, required = false,
                                 default = nil)
  if valid_603733 != nil:
    section.add "X-Amz-Credential", valid_603733
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603734: Call_GetListAccountAliases_603720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_603734.validator(path, query, header, formData, body)
  let scheme = call_603734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603734.url(scheme.get, call_603734.host, call_603734.base,
                         call_603734.route, valid.getOrDefault("path"))
  result = hook(call_603734, url, valid)

proc call*(call_603735: Call_GetListAccountAliases_603720;
          Action: string = "ListAccountAliases"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListAccountAliases
  ## Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603736 = newJObject()
  add(query_603736, "Action", newJString(Action))
  add(query_603736, "Marker", newJString(Marker))
  add(query_603736, "MaxItems", newJInt(MaxItems))
  add(query_603736, "Version", newJString(Version))
  result = call_603735.call(nil, query_603736, nil, nil, nil)

var getListAccountAliases* = Call_GetListAccountAliases_603720(
    name: "getListAccountAliases", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAccountAliases",
    validator: validate_GetListAccountAliases_603721, base: "/",
    url: url_GetListAccountAliases_603722, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedGroupPolicies_603774 = ref object of OpenApiRestCall_600426
proc url_PostListAttachedGroupPolicies_603776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedGroupPolicies_603775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603777 = query.getOrDefault("Action")
  valid_603777 = validateParameter(valid_603777, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_603777 != nil:
    section.add "Action", valid_603777
  var valid_603778 = query.getOrDefault("Version")
  valid_603778 = validateParameter(valid_603778, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603778 != nil:
    section.add "Version", valid_603778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603779 = header.getOrDefault("X-Amz-Date")
  valid_603779 = validateParameter(valid_603779, JString, required = false,
                                 default = nil)
  if valid_603779 != nil:
    section.add "X-Amz-Date", valid_603779
  var valid_603780 = header.getOrDefault("X-Amz-Security-Token")
  valid_603780 = validateParameter(valid_603780, JString, required = false,
                                 default = nil)
  if valid_603780 != nil:
    section.add "X-Amz-Security-Token", valid_603780
  var valid_603781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603781 = validateParameter(valid_603781, JString, required = false,
                                 default = nil)
  if valid_603781 != nil:
    section.add "X-Amz-Content-Sha256", valid_603781
  var valid_603782 = header.getOrDefault("X-Amz-Algorithm")
  valid_603782 = validateParameter(valid_603782, JString, required = false,
                                 default = nil)
  if valid_603782 != nil:
    section.add "X-Amz-Algorithm", valid_603782
  var valid_603783 = header.getOrDefault("X-Amz-Signature")
  valid_603783 = validateParameter(valid_603783, JString, required = false,
                                 default = nil)
  if valid_603783 != nil:
    section.add "X-Amz-Signature", valid_603783
  var valid_603784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603784 = validateParameter(valid_603784, JString, required = false,
                                 default = nil)
  if valid_603784 != nil:
    section.add "X-Amz-SignedHeaders", valid_603784
  var valid_603785 = header.getOrDefault("X-Amz-Credential")
  valid_603785 = validateParameter(valid_603785, JString, required = false,
                                 default = nil)
  if valid_603785 != nil:
    section.add "X-Amz-Credential", valid_603785
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603786 = formData.getOrDefault("PathPrefix")
  valid_603786 = validateParameter(valid_603786, JString, required = false,
                                 default = nil)
  if valid_603786 != nil:
    section.add "PathPrefix", valid_603786
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_603787 = formData.getOrDefault("GroupName")
  valid_603787 = validateParameter(valid_603787, JString, required = true,
                                 default = nil)
  if valid_603787 != nil:
    section.add "GroupName", valid_603787
  var valid_603788 = formData.getOrDefault("Marker")
  valid_603788 = validateParameter(valid_603788, JString, required = false,
                                 default = nil)
  if valid_603788 != nil:
    section.add "Marker", valid_603788
  var valid_603789 = formData.getOrDefault("MaxItems")
  valid_603789 = validateParameter(valid_603789, JInt, required = false, default = nil)
  if valid_603789 != nil:
    section.add "MaxItems", valid_603789
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603790: Call_PostListAttachedGroupPolicies_603774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603790.validator(path, query, header, formData, body)
  let scheme = call_603790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603790.url(scheme.get, call_603790.host, call_603790.base,
                         call_603790.route, valid.getOrDefault("path"))
  result = hook(call_603790, url, valid)

proc call*(call_603791: Call_PostListAttachedGroupPolicies_603774;
          GroupName: string; PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603792 = newJObject()
  var formData_603793 = newJObject()
  add(formData_603793, "PathPrefix", newJString(PathPrefix))
  add(formData_603793, "GroupName", newJString(GroupName))
  add(formData_603793, "Marker", newJString(Marker))
  add(query_603792, "Action", newJString(Action))
  add(formData_603793, "MaxItems", newJInt(MaxItems))
  add(query_603792, "Version", newJString(Version))
  result = call_603791.call(nil, query_603792, nil, formData_603793, nil)

var postListAttachedGroupPolicies* = Call_PostListAttachedGroupPolicies_603774(
    name: "postListAttachedGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_PostListAttachedGroupPolicies_603775, base: "/",
    url: url_PostListAttachedGroupPolicies_603776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedGroupPolicies_603755 = ref object of OpenApiRestCall_600426
proc url_GetListAttachedGroupPolicies_603757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedGroupPolicies_603756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603758 = query.getOrDefault("PathPrefix")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "PathPrefix", valid_603758
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603759 = query.getOrDefault("Action")
  valid_603759 = validateParameter(valid_603759, JString, required = true, default = newJString(
      "ListAttachedGroupPolicies"))
  if valid_603759 != nil:
    section.add "Action", valid_603759
  var valid_603760 = query.getOrDefault("Marker")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "Marker", valid_603760
  var valid_603761 = query.getOrDefault("GroupName")
  valid_603761 = validateParameter(valid_603761, JString, required = true,
                                 default = nil)
  if valid_603761 != nil:
    section.add "GroupName", valid_603761
  var valid_603762 = query.getOrDefault("MaxItems")
  valid_603762 = validateParameter(valid_603762, JInt, required = false, default = nil)
  if valid_603762 != nil:
    section.add "MaxItems", valid_603762
  var valid_603763 = query.getOrDefault("Version")
  valid_603763 = validateParameter(valid_603763, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603763 != nil:
    section.add "Version", valid_603763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603764 = header.getOrDefault("X-Amz-Date")
  valid_603764 = validateParameter(valid_603764, JString, required = false,
                                 default = nil)
  if valid_603764 != nil:
    section.add "X-Amz-Date", valid_603764
  var valid_603765 = header.getOrDefault("X-Amz-Security-Token")
  valid_603765 = validateParameter(valid_603765, JString, required = false,
                                 default = nil)
  if valid_603765 != nil:
    section.add "X-Amz-Security-Token", valid_603765
  var valid_603766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603766 = validateParameter(valid_603766, JString, required = false,
                                 default = nil)
  if valid_603766 != nil:
    section.add "X-Amz-Content-Sha256", valid_603766
  var valid_603767 = header.getOrDefault("X-Amz-Algorithm")
  valid_603767 = validateParameter(valid_603767, JString, required = false,
                                 default = nil)
  if valid_603767 != nil:
    section.add "X-Amz-Algorithm", valid_603767
  var valid_603768 = header.getOrDefault("X-Amz-Signature")
  valid_603768 = validateParameter(valid_603768, JString, required = false,
                                 default = nil)
  if valid_603768 != nil:
    section.add "X-Amz-Signature", valid_603768
  var valid_603769 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603769 = validateParameter(valid_603769, JString, required = false,
                                 default = nil)
  if valid_603769 != nil:
    section.add "X-Amz-SignedHeaders", valid_603769
  var valid_603770 = header.getOrDefault("X-Amz-Credential")
  valid_603770 = validateParameter(valid_603770, JString, required = false,
                                 default = nil)
  if valid_603770 != nil:
    section.add "X-Amz-Credential", valid_603770
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603771: Call_GetListAttachedGroupPolicies_603755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603771.validator(path, query, header, formData, body)
  let scheme = call_603771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603771.url(scheme.get, call_603771.host, call_603771.base,
                         call_603771.route, valid.getOrDefault("path"))
  result = hook(call_603771, url, valid)

proc call*(call_603772: Call_GetListAttachedGroupPolicies_603755;
          GroupName: string; PathPrefix: string = "";
          Action: string = "ListAttachedGroupPolicies"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedGroupPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603773 = newJObject()
  add(query_603773, "PathPrefix", newJString(PathPrefix))
  add(query_603773, "Action", newJString(Action))
  add(query_603773, "Marker", newJString(Marker))
  add(query_603773, "GroupName", newJString(GroupName))
  add(query_603773, "MaxItems", newJInt(MaxItems))
  add(query_603773, "Version", newJString(Version))
  result = call_603772.call(nil, query_603773, nil, nil, nil)

var getListAttachedGroupPolicies* = Call_GetListAttachedGroupPolicies_603755(
    name: "getListAttachedGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedGroupPolicies",
    validator: validate_GetListAttachedGroupPolicies_603756, base: "/",
    url: url_GetListAttachedGroupPolicies_603757,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedRolePolicies_603813 = ref object of OpenApiRestCall_600426
proc url_PostListAttachedRolePolicies_603815(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedRolePolicies_603814(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603816 = query.getOrDefault("Action")
  valid_603816 = validateParameter(valid_603816, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_603816 != nil:
    section.add "Action", valid_603816
  var valid_603817 = query.getOrDefault("Version")
  valid_603817 = validateParameter(valid_603817, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603817 != nil:
    section.add "Version", valid_603817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603818 = header.getOrDefault("X-Amz-Date")
  valid_603818 = validateParameter(valid_603818, JString, required = false,
                                 default = nil)
  if valid_603818 != nil:
    section.add "X-Amz-Date", valid_603818
  var valid_603819 = header.getOrDefault("X-Amz-Security-Token")
  valid_603819 = validateParameter(valid_603819, JString, required = false,
                                 default = nil)
  if valid_603819 != nil:
    section.add "X-Amz-Security-Token", valid_603819
  var valid_603820 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603820 = validateParameter(valid_603820, JString, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "X-Amz-Content-Sha256", valid_603820
  var valid_603821 = header.getOrDefault("X-Amz-Algorithm")
  valid_603821 = validateParameter(valid_603821, JString, required = false,
                                 default = nil)
  if valid_603821 != nil:
    section.add "X-Amz-Algorithm", valid_603821
  var valid_603822 = header.getOrDefault("X-Amz-Signature")
  valid_603822 = validateParameter(valid_603822, JString, required = false,
                                 default = nil)
  if valid_603822 != nil:
    section.add "X-Amz-Signature", valid_603822
  var valid_603823 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603823 = validateParameter(valid_603823, JString, required = false,
                                 default = nil)
  if valid_603823 != nil:
    section.add "X-Amz-SignedHeaders", valid_603823
  var valid_603824 = header.getOrDefault("X-Amz-Credential")
  valid_603824 = validateParameter(valid_603824, JString, required = false,
                                 default = nil)
  if valid_603824 != nil:
    section.add "X-Amz-Credential", valid_603824
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603825 = formData.getOrDefault("PathPrefix")
  valid_603825 = validateParameter(valid_603825, JString, required = false,
                                 default = nil)
  if valid_603825 != nil:
    section.add "PathPrefix", valid_603825
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_603826 = formData.getOrDefault("RoleName")
  valid_603826 = validateParameter(valid_603826, JString, required = true,
                                 default = nil)
  if valid_603826 != nil:
    section.add "RoleName", valid_603826
  var valid_603827 = formData.getOrDefault("Marker")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "Marker", valid_603827
  var valid_603828 = formData.getOrDefault("MaxItems")
  valid_603828 = validateParameter(valid_603828, JInt, required = false, default = nil)
  if valid_603828 != nil:
    section.add "MaxItems", valid_603828
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603829: Call_PostListAttachedRolePolicies_603813; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603829.validator(path, query, header, formData, body)
  let scheme = call_603829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603829.url(scheme.get, call_603829.host, call_603829.base,
                         call_603829.route, valid.getOrDefault("path"))
  result = hook(call_603829, url, valid)

proc call*(call_603830: Call_PostListAttachedRolePolicies_603813; RoleName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603831 = newJObject()
  var formData_603832 = newJObject()
  add(formData_603832, "PathPrefix", newJString(PathPrefix))
  add(formData_603832, "RoleName", newJString(RoleName))
  add(formData_603832, "Marker", newJString(Marker))
  add(query_603831, "Action", newJString(Action))
  add(formData_603832, "MaxItems", newJInt(MaxItems))
  add(query_603831, "Version", newJString(Version))
  result = call_603830.call(nil, query_603831, nil, formData_603832, nil)

var postListAttachedRolePolicies* = Call_PostListAttachedRolePolicies_603813(
    name: "postListAttachedRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_PostListAttachedRolePolicies_603814, base: "/",
    url: url_PostListAttachedRolePolicies_603815,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedRolePolicies_603794 = ref object of OpenApiRestCall_600426
proc url_GetListAttachedRolePolicies_603796(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedRolePolicies_603795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603797 = query.getOrDefault("PathPrefix")
  valid_603797 = validateParameter(valid_603797, JString, required = false,
                                 default = nil)
  if valid_603797 != nil:
    section.add "PathPrefix", valid_603797
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603798 = query.getOrDefault("Action")
  valid_603798 = validateParameter(valid_603798, JString, required = true, default = newJString(
      "ListAttachedRolePolicies"))
  if valid_603798 != nil:
    section.add "Action", valid_603798
  var valid_603799 = query.getOrDefault("Marker")
  valid_603799 = validateParameter(valid_603799, JString, required = false,
                                 default = nil)
  if valid_603799 != nil:
    section.add "Marker", valid_603799
  var valid_603800 = query.getOrDefault("MaxItems")
  valid_603800 = validateParameter(valid_603800, JInt, required = false, default = nil)
  if valid_603800 != nil:
    section.add "MaxItems", valid_603800
  var valid_603801 = query.getOrDefault("RoleName")
  valid_603801 = validateParameter(valid_603801, JString, required = true,
                                 default = nil)
  if valid_603801 != nil:
    section.add "RoleName", valid_603801
  var valid_603802 = query.getOrDefault("Version")
  valid_603802 = validateParameter(valid_603802, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603802 != nil:
    section.add "Version", valid_603802
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603803 = header.getOrDefault("X-Amz-Date")
  valid_603803 = validateParameter(valid_603803, JString, required = false,
                                 default = nil)
  if valid_603803 != nil:
    section.add "X-Amz-Date", valid_603803
  var valid_603804 = header.getOrDefault("X-Amz-Security-Token")
  valid_603804 = validateParameter(valid_603804, JString, required = false,
                                 default = nil)
  if valid_603804 != nil:
    section.add "X-Amz-Security-Token", valid_603804
  var valid_603805 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-Content-Sha256", valid_603805
  var valid_603806 = header.getOrDefault("X-Amz-Algorithm")
  valid_603806 = validateParameter(valid_603806, JString, required = false,
                                 default = nil)
  if valid_603806 != nil:
    section.add "X-Amz-Algorithm", valid_603806
  var valid_603807 = header.getOrDefault("X-Amz-Signature")
  valid_603807 = validateParameter(valid_603807, JString, required = false,
                                 default = nil)
  if valid_603807 != nil:
    section.add "X-Amz-Signature", valid_603807
  var valid_603808 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603808 = validateParameter(valid_603808, JString, required = false,
                                 default = nil)
  if valid_603808 != nil:
    section.add "X-Amz-SignedHeaders", valid_603808
  var valid_603809 = header.getOrDefault("X-Amz-Credential")
  valid_603809 = validateParameter(valid_603809, JString, required = false,
                                 default = nil)
  if valid_603809 != nil:
    section.add "X-Amz-Credential", valid_603809
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603810: Call_GetListAttachedRolePolicies_603794; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603810.validator(path, query, header, formData, body)
  let scheme = call_603810.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603810.url(scheme.get, call_603810.host, call_603810.base,
                         call_603810.route, valid.getOrDefault("path"))
  result = hook(call_603810, url, valid)

proc call*(call_603811: Call_GetListAttachedRolePolicies_603794; RoleName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedRolePolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedRolePolicies
  ## <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_603812 = newJObject()
  add(query_603812, "PathPrefix", newJString(PathPrefix))
  add(query_603812, "Action", newJString(Action))
  add(query_603812, "Marker", newJString(Marker))
  add(query_603812, "MaxItems", newJInt(MaxItems))
  add(query_603812, "RoleName", newJString(RoleName))
  add(query_603812, "Version", newJString(Version))
  result = call_603811.call(nil, query_603812, nil, nil, nil)

var getListAttachedRolePolicies* = Call_GetListAttachedRolePolicies_603794(
    name: "getListAttachedRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedRolePolicies",
    validator: validate_GetListAttachedRolePolicies_603795, base: "/",
    url: url_GetListAttachedRolePolicies_603796,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAttachedUserPolicies_603852 = ref object of OpenApiRestCall_600426
proc url_PostListAttachedUserPolicies_603854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAttachedUserPolicies_603853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603855 = query.getOrDefault("Action")
  valid_603855 = validateParameter(valid_603855, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_603855 != nil:
    section.add "Action", valid_603855
  var valid_603856 = query.getOrDefault("Version")
  valid_603856 = validateParameter(valid_603856, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603856 != nil:
    section.add "Version", valid_603856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603857 = header.getOrDefault("X-Amz-Date")
  valid_603857 = validateParameter(valid_603857, JString, required = false,
                                 default = nil)
  if valid_603857 != nil:
    section.add "X-Amz-Date", valid_603857
  var valid_603858 = header.getOrDefault("X-Amz-Security-Token")
  valid_603858 = validateParameter(valid_603858, JString, required = false,
                                 default = nil)
  if valid_603858 != nil:
    section.add "X-Amz-Security-Token", valid_603858
  var valid_603859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603859 = validateParameter(valid_603859, JString, required = false,
                                 default = nil)
  if valid_603859 != nil:
    section.add "X-Amz-Content-Sha256", valid_603859
  var valid_603860 = header.getOrDefault("X-Amz-Algorithm")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Algorithm", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Signature")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Signature", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-SignedHeaders", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-Credential")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-Credential", valid_603863
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603864 = formData.getOrDefault("PathPrefix")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "PathPrefix", valid_603864
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_603865 = formData.getOrDefault("UserName")
  valid_603865 = validateParameter(valid_603865, JString, required = true,
                                 default = nil)
  if valid_603865 != nil:
    section.add "UserName", valid_603865
  var valid_603866 = formData.getOrDefault("Marker")
  valid_603866 = validateParameter(valid_603866, JString, required = false,
                                 default = nil)
  if valid_603866 != nil:
    section.add "Marker", valid_603866
  var valid_603867 = formData.getOrDefault("MaxItems")
  valid_603867 = validateParameter(valid_603867, JInt, required = false, default = nil)
  if valid_603867 != nil:
    section.add "MaxItems", valid_603867
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603868: Call_PostListAttachedUserPolicies_603852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603868.validator(path, query, header, formData, body)
  let scheme = call_603868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603868.url(scheme.get, call_603868.host, call_603868.base,
                         call_603868.route, valid.getOrDefault("path"))
  result = hook(call_603868, url, valid)

proc call*(call_603869: Call_PostListAttachedUserPolicies_603852; UserName: string;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListAttachedUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603870 = newJObject()
  var formData_603871 = newJObject()
  add(formData_603871, "PathPrefix", newJString(PathPrefix))
  add(formData_603871, "UserName", newJString(UserName))
  add(formData_603871, "Marker", newJString(Marker))
  add(query_603870, "Action", newJString(Action))
  add(formData_603871, "MaxItems", newJInt(MaxItems))
  add(query_603870, "Version", newJString(Version))
  result = call_603869.call(nil, query_603870, nil, formData_603871, nil)

var postListAttachedUserPolicies* = Call_PostListAttachedUserPolicies_603852(
    name: "postListAttachedUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_PostListAttachedUserPolicies_603853, base: "/",
    url: url_PostListAttachedUserPolicies_603854,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAttachedUserPolicies_603833 = ref object of OpenApiRestCall_600426
proc url_GetListAttachedUserPolicies_603835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAttachedUserPolicies_603834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: JString (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603836 = query.getOrDefault("PathPrefix")
  valid_603836 = validateParameter(valid_603836, JString, required = false,
                                 default = nil)
  if valid_603836 != nil:
    section.add "PathPrefix", valid_603836
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603837 = query.getOrDefault("UserName")
  valid_603837 = validateParameter(valid_603837, JString, required = true,
                                 default = nil)
  if valid_603837 != nil:
    section.add "UserName", valid_603837
  var valid_603838 = query.getOrDefault("Action")
  valid_603838 = validateParameter(valid_603838, JString, required = true, default = newJString(
      "ListAttachedUserPolicies"))
  if valid_603838 != nil:
    section.add "Action", valid_603838
  var valid_603839 = query.getOrDefault("Marker")
  valid_603839 = validateParameter(valid_603839, JString, required = false,
                                 default = nil)
  if valid_603839 != nil:
    section.add "Marker", valid_603839
  var valid_603840 = query.getOrDefault("MaxItems")
  valid_603840 = validateParameter(valid_603840, JInt, required = false, default = nil)
  if valid_603840 != nil:
    section.add "MaxItems", valid_603840
  var valid_603841 = query.getOrDefault("Version")
  valid_603841 = validateParameter(valid_603841, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603841 != nil:
    section.add "Version", valid_603841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603842 = header.getOrDefault("X-Amz-Date")
  valid_603842 = validateParameter(valid_603842, JString, required = false,
                                 default = nil)
  if valid_603842 != nil:
    section.add "X-Amz-Date", valid_603842
  var valid_603843 = header.getOrDefault("X-Amz-Security-Token")
  valid_603843 = validateParameter(valid_603843, JString, required = false,
                                 default = nil)
  if valid_603843 != nil:
    section.add "X-Amz-Security-Token", valid_603843
  var valid_603844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603844 = validateParameter(valid_603844, JString, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "X-Amz-Content-Sha256", valid_603844
  var valid_603845 = header.getOrDefault("X-Amz-Algorithm")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-Algorithm", valid_603845
  var valid_603846 = header.getOrDefault("X-Amz-Signature")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "X-Amz-Signature", valid_603846
  var valid_603847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603847 = validateParameter(valid_603847, JString, required = false,
                                 default = nil)
  if valid_603847 != nil:
    section.add "X-Amz-SignedHeaders", valid_603847
  var valid_603848 = header.getOrDefault("X-Amz-Credential")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "X-Amz-Credential", valid_603848
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603849: Call_GetListAttachedUserPolicies_603833; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ## 
  let valid = call_603849.validator(path, query, header, formData, body)
  let scheme = call_603849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603849.url(scheme.get, call_603849.host, call_603849.base,
                         call_603849.route, valid.getOrDefault("path"))
  result = hook(call_603849, url, valid)

proc call*(call_603850: Call_GetListAttachedUserPolicies_603833; UserName: string;
          PathPrefix: string = ""; Action: string = "ListAttachedUserPolicies";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListAttachedUserPolicies
  ## <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   UserName: string (required)
  ##           : <p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603851 = newJObject()
  add(query_603851, "PathPrefix", newJString(PathPrefix))
  add(query_603851, "UserName", newJString(UserName))
  add(query_603851, "Action", newJString(Action))
  add(query_603851, "Marker", newJString(Marker))
  add(query_603851, "MaxItems", newJInt(MaxItems))
  add(query_603851, "Version", newJString(Version))
  result = call_603850.call(nil, query_603851, nil, nil, nil)

var getListAttachedUserPolicies* = Call_GetListAttachedUserPolicies_603833(
    name: "getListAttachedUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListAttachedUserPolicies",
    validator: validate_GetListAttachedUserPolicies_603834, base: "/",
    url: url_GetListAttachedUserPolicies_603835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListEntitiesForPolicy_603893 = ref object of OpenApiRestCall_600426
proc url_PostListEntitiesForPolicy_603895(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListEntitiesForPolicy_603894(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603896 = query.getOrDefault("Action")
  valid_603896 = validateParameter(valid_603896, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_603896 != nil:
    section.add "Action", valid_603896
  var valid_603897 = query.getOrDefault("Version")
  valid_603897 = validateParameter(valid_603897, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603897 != nil:
    section.add "Version", valid_603897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603898 = header.getOrDefault("X-Amz-Date")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-Date", valid_603898
  var valid_603899 = header.getOrDefault("X-Amz-Security-Token")
  valid_603899 = validateParameter(valid_603899, JString, required = false,
                                 default = nil)
  if valid_603899 != nil:
    section.add "X-Amz-Security-Token", valid_603899
  var valid_603900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603900 = validateParameter(valid_603900, JString, required = false,
                                 default = nil)
  if valid_603900 != nil:
    section.add "X-Amz-Content-Sha256", valid_603900
  var valid_603901 = header.getOrDefault("X-Amz-Algorithm")
  valid_603901 = validateParameter(valid_603901, JString, required = false,
                                 default = nil)
  if valid_603901 != nil:
    section.add "X-Amz-Algorithm", valid_603901
  var valid_603902 = header.getOrDefault("X-Amz-Signature")
  valid_603902 = validateParameter(valid_603902, JString, required = false,
                                 default = nil)
  if valid_603902 != nil:
    section.add "X-Amz-Signature", valid_603902
  var valid_603903 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603903 = validateParameter(valid_603903, JString, required = false,
                                 default = nil)
  if valid_603903 != nil:
    section.add "X-Amz-SignedHeaders", valid_603903
  var valid_603904 = header.getOrDefault("X-Amz-Credential")
  valid_603904 = validateParameter(valid_603904, JString, required = false,
                                 default = nil)
  if valid_603904 != nil:
    section.add "X-Amz-Credential", valid_603904
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603905 = formData.getOrDefault("PathPrefix")
  valid_603905 = validateParameter(valid_603905, JString, required = false,
                                 default = nil)
  if valid_603905 != nil:
    section.add "PathPrefix", valid_603905
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_603906 = formData.getOrDefault("PolicyArn")
  valid_603906 = validateParameter(valid_603906, JString, required = true,
                                 default = nil)
  if valid_603906 != nil:
    section.add "PolicyArn", valid_603906
  var valid_603907 = formData.getOrDefault("EntityFilter")
  valid_603907 = validateParameter(valid_603907, JString, required = false,
                                 default = newJString("User"))
  if valid_603907 != nil:
    section.add "EntityFilter", valid_603907
  var valid_603908 = formData.getOrDefault("Marker")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "Marker", valid_603908
  var valid_603909 = formData.getOrDefault("PolicyUsageFilter")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_603909 != nil:
    section.add "PolicyUsageFilter", valid_603909
  var valid_603910 = formData.getOrDefault("MaxItems")
  valid_603910 = validateParameter(valid_603910, JInt, required = false, default = nil)
  if valid_603910 != nil:
    section.add "MaxItems", valid_603910
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603911: Call_PostListEntitiesForPolicy_603893; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_603911.validator(path, query, header, formData, body)
  let scheme = call_603911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603911.url(scheme.get, call_603911.host, call_603911.base,
                         call_603911.route, valid.getOrDefault("path"))
  result = hook(call_603911, url, valid)

proc call*(call_603912: Call_PostListEntitiesForPolicy_603893; PolicyArn: string;
          PathPrefix: string = ""; EntityFilter: string = "User"; Marker: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603913 = newJObject()
  var formData_603914 = newJObject()
  add(formData_603914, "PathPrefix", newJString(PathPrefix))
  add(formData_603914, "PolicyArn", newJString(PolicyArn))
  add(formData_603914, "EntityFilter", newJString(EntityFilter))
  add(formData_603914, "Marker", newJString(Marker))
  add(formData_603914, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_603913, "Action", newJString(Action))
  add(formData_603914, "MaxItems", newJInt(MaxItems))
  add(query_603913, "Version", newJString(Version))
  result = call_603912.call(nil, query_603913, nil, formData_603914, nil)

var postListEntitiesForPolicy* = Call_PostListEntitiesForPolicy_603893(
    name: "postListEntitiesForPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_PostListEntitiesForPolicy_603894, base: "/",
    url: url_PostListEntitiesForPolicy_603895,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListEntitiesForPolicy_603872 = ref object of OpenApiRestCall_600426
proc url_GetListEntitiesForPolicy_603874(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListEntitiesForPolicy_603873(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: JString
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603875 = query.getOrDefault("PathPrefix")
  valid_603875 = validateParameter(valid_603875, JString, required = false,
                                 default = nil)
  if valid_603875 != nil:
    section.add "PathPrefix", valid_603875
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_603876 = query.getOrDefault("PolicyArn")
  valid_603876 = validateParameter(valid_603876, JString, required = true,
                                 default = nil)
  if valid_603876 != nil:
    section.add "PolicyArn", valid_603876
  var valid_603877 = query.getOrDefault("PolicyUsageFilter")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_603877 != nil:
    section.add "PolicyUsageFilter", valid_603877
  var valid_603878 = query.getOrDefault("Action")
  valid_603878 = validateParameter(valid_603878, JString, required = true,
                                 default = newJString("ListEntitiesForPolicy"))
  if valid_603878 != nil:
    section.add "Action", valid_603878
  var valid_603879 = query.getOrDefault("Marker")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "Marker", valid_603879
  var valid_603880 = query.getOrDefault("EntityFilter")
  valid_603880 = validateParameter(valid_603880, JString, required = false,
                                 default = newJString("User"))
  if valid_603880 != nil:
    section.add "EntityFilter", valid_603880
  var valid_603881 = query.getOrDefault("MaxItems")
  valid_603881 = validateParameter(valid_603881, JInt, required = false, default = nil)
  if valid_603881 != nil:
    section.add "MaxItems", valid_603881
  var valid_603882 = query.getOrDefault("Version")
  valid_603882 = validateParameter(valid_603882, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603882 != nil:
    section.add "Version", valid_603882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603883 = header.getOrDefault("X-Amz-Date")
  valid_603883 = validateParameter(valid_603883, JString, required = false,
                                 default = nil)
  if valid_603883 != nil:
    section.add "X-Amz-Date", valid_603883
  var valid_603884 = header.getOrDefault("X-Amz-Security-Token")
  valid_603884 = validateParameter(valid_603884, JString, required = false,
                                 default = nil)
  if valid_603884 != nil:
    section.add "X-Amz-Security-Token", valid_603884
  var valid_603885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603885 = validateParameter(valid_603885, JString, required = false,
                                 default = nil)
  if valid_603885 != nil:
    section.add "X-Amz-Content-Sha256", valid_603885
  var valid_603886 = header.getOrDefault("X-Amz-Algorithm")
  valid_603886 = validateParameter(valid_603886, JString, required = false,
                                 default = nil)
  if valid_603886 != nil:
    section.add "X-Amz-Algorithm", valid_603886
  var valid_603887 = header.getOrDefault("X-Amz-Signature")
  valid_603887 = validateParameter(valid_603887, JString, required = false,
                                 default = nil)
  if valid_603887 != nil:
    section.add "X-Amz-Signature", valid_603887
  var valid_603888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603888 = validateParameter(valid_603888, JString, required = false,
                                 default = nil)
  if valid_603888 != nil:
    section.add "X-Amz-SignedHeaders", valid_603888
  var valid_603889 = header.getOrDefault("X-Amz-Credential")
  valid_603889 = validateParameter(valid_603889, JString, required = false,
                                 default = nil)
  if valid_603889 != nil:
    section.add "X-Amz-Credential", valid_603889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603890: Call_GetListEntitiesForPolicy_603872; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_603890.validator(path, query, header, formData, body)
  let scheme = call_603890.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603890.url(scheme.get, call_603890.host, call_603890.base,
                         call_603890.route, valid.getOrDefault("path"))
  result = hook(call_603890, url, valid)

proc call*(call_603891: Call_GetListEntitiesForPolicy_603872; PolicyArn: string;
          PathPrefix: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListEntitiesForPolicy"; Marker: string = "";
          EntityFilter: string = "User"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListEntitiesForPolicy
  ## <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   EntityFilter: string
  ##               : <p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603892 = newJObject()
  add(query_603892, "PathPrefix", newJString(PathPrefix))
  add(query_603892, "PolicyArn", newJString(PolicyArn))
  add(query_603892, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_603892, "Action", newJString(Action))
  add(query_603892, "Marker", newJString(Marker))
  add(query_603892, "EntityFilter", newJString(EntityFilter))
  add(query_603892, "MaxItems", newJInt(MaxItems))
  add(query_603892, "Version", newJString(Version))
  result = call_603891.call(nil, query_603892, nil, nil, nil)

var getListEntitiesForPolicy* = Call_GetListEntitiesForPolicy_603872(
    name: "getListEntitiesForPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListEntitiesForPolicy",
    validator: validate_GetListEntitiesForPolicy_603873, base: "/",
    url: url_GetListEntitiesForPolicy_603874, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupPolicies_603933 = ref object of OpenApiRestCall_600426
proc url_PostListGroupPolicies_603935(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupPolicies_603934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603936 = query.getOrDefault("Action")
  valid_603936 = validateParameter(valid_603936, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_603936 != nil:
    section.add "Action", valid_603936
  var valid_603937 = query.getOrDefault("Version")
  valid_603937 = validateParameter(valid_603937, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603937 != nil:
    section.add "Version", valid_603937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603938 = header.getOrDefault("X-Amz-Date")
  valid_603938 = validateParameter(valid_603938, JString, required = false,
                                 default = nil)
  if valid_603938 != nil:
    section.add "X-Amz-Date", valid_603938
  var valid_603939 = header.getOrDefault("X-Amz-Security-Token")
  valid_603939 = validateParameter(valid_603939, JString, required = false,
                                 default = nil)
  if valid_603939 != nil:
    section.add "X-Amz-Security-Token", valid_603939
  var valid_603940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603940 = validateParameter(valid_603940, JString, required = false,
                                 default = nil)
  if valid_603940 != nil:
    section.add "X-Amz-Content-Sha256", valid_603940
  var valid_603941 = header.getOrDefault("X-Amz-Algorithm")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-Algorithm", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Signature")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Signature", valid_603942
  var valid_603943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-SignedHeaders", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Credential")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Credential", valid_603944
  result.add "header", section
  ## parameters in `formData` object:
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_603945 = formData.getOrDefault("GroupName")
  valid_603945 = validateParameter(valid_603945, JString, required = true,
                                 default = nil)
  if valid_603945 != nil:
    section.add "GroupName", valid_603945
  var valid_603946 = formData.getOrDefault("Marker")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "Marker", valid_603946
  var valid_603947 = formData.getOrDefault("MaxItems")
  valid_603947 = validateParameter(valid_603947, JInt, required = false, default = nil)
  if valid_603947 != nil:
    section.add "MaxItems", valid_603947
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603948: Call_PostListGroupPolicies_603933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_603948.validator(path, query, header, formData, body)
  let scheme = call_603948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603948.url(scheme.get, call_603948.host, call_603948.base,
                         call_603948.route, valid.getOrDefault("path"))
  result = hook(call_603948, url, valid)

proc call*(call_603949: Call_PostListGroupPolicies_603933; GroupName: string;
          Marker: string = ""; Action: string = "ListGroupPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603950 = newJObject()
  var formData_603951 = newJObject()
  add(formData_603951, "GroupName", newJString(GroupName))
  add(formData_603951, "Marker", newJString(Marker))
  add(query_603950, "Action", newJString(Action))
  add(formData_603951, "MaxItems", newJInt(MaxItems))
  add(query_603950, "Version", newJString(Version))
  result = call_603949.call(nil, query_603950, nil, formData_603951, nil)

var postListGroupPolicies* = Call_PostListGroupPolicies_603933(
    name: "postListGroupPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_PostListGroupPolicies_603934, base: "/",
    url: url_PostListGroupPolicies_603935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupPolicies_603915 = ref object of OpenApiRestCall_600426
proc url_GetListGroupPolicies_603917(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupPolicies_603916(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603918 = query.getOrDefault("Action")
  valid_603918 = validateParameter(valid_603918, JString, required = true,
                                 default = newJString("ListGroupPolicies"))
  if valid_603918 != nil:
    section.add "Action", valid_603918
  var valid_603919 = query.getOrDefault("Marker")
  valid_603919 = validateParameter(valid_603919, JString, required = false,
                                 default = nil)
  if valid_603919 != nil:
    section.add "Marker", valid_603919
  var valid_603920 = query.getOrDefault("GroupName")
  valid_603920 = validateParameter(valid_603920, JString, required = true,
                                 default = nil)
  if valid_603920 != nil:
    section.add "GroupName", valid_603920
  var valid_603921 = query.getOrDefault("MaxItems")
  valid_603921 = validateParameter(valid_603921, JInt, required = false, default = nil)
  if valid_603921 != nil:
    section.add "MaxItems", valid_603921
  var valid_603922 = query.getOrDefault("Version")
  valid_603922 = validateParameter(valid_603922, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603922 != nil:
    section.add "Version", valid_603922
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603923 = header.getOrDefault("X-Amz-Date")
  valid_603923 = validateParameter(valid_603923, JString, required = false,
                                 default = nil)
  if valid_603923 != nil:
    section.add "X-Amz-Date", valid_603923
  var valid_603924 = header.getOrDefault("X-Amz-Security-Token")
  valid_603924 = validateParameter(valid_603924, JString, required = false,
                                 default = nil)
  if valid_603924 != nil:
    section.add "X-Amz-Security-Token", valid_603924
  var valid_603925 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603925 = validateParameter(valid_603925, JString, required = false,
                                 default = nil)
  if valid_603925 != nil:
    section.add "X-Amz-Content-Sha256", valid_603925
  var valid_603926 = header.getOrDefault("X-Amz-Algorithm")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-Algorithm", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Signature")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Signature", valid_603927
  var valid_603928 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-SignedHeaders", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Credential")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Credential", valid_603929
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603930: Call_GetListGroupPolicies_603915; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ## 
  let valid = call_603930.validator(path, query, header, formData, body)
  let scheme = call_603930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603930.url(scheme.get, call_603930.host, call_603930.base,
                         call_603930.route, valid.getOrDefault("path"))
  result = hook(call_603930, url, valid)

proc call*(call_603931: Call_GetListGroupPolicies_603915; GroupName: string;
          Action: string = "ListGroupPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupPolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   GroupName: string (required)
  ##            : <p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603932 = newJObject()
  add(query_603932, "Action", newJString(Action))
  add(query_603932, "Marker", newJString(Marker))
  add(query_603932, "GroupName", newJString(GroupName))
  add(query_603932, "MaxItems", newJInt(MaxItems))
  add(query_603932, "Version", newJString(Version))
  result = call_603931.call(nil, query_603932, nil, nil, nil)

var getListGroupPolicies* = Call_GetListGroupPolicies_603915(
    name: "getListGroupPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupPolicies",
    validator: validate_GetListGroupPolicies_603916, base: "/",
    url: url_GetListGroupPolicies_603917, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroups_603970 = ref object of OpenApiRestCall_600426
proc url_PostListGroups_603972(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroups_603971(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603973 = query.getOrDefault("Action")
  valid_603973 = validateParameter(valid_603973, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_603973 != nil:
    section.add "Action", valid_603973
  var valid_603974 = query.getOrDefault("Version")
  valid_603974 = validateParameter(valid_603974, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603974 != nil:
    section.add "Version", valid_603974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603975 = header.getOrDefault("X-Amz-Date")
  valid_603975 = validateParameter(valid_603975, JString, required = false,
                                 default = nil)
  if valid_603975 != nil:
    section.add "X-Amz-Date", valid_603975
  var valid_603976 = header.getOrDefault("X-Amz-Security-Token")
  valid_603976 = validateParameter(valid_603976, JString, required = false,
                                 default = nil)
  if valid_603976 != nil:
    section.add "X-Amz-Security-Token", valid_603976
  var valid_603977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Content-Sha256", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Algorithm")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Algorithm", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-Signature")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-Signature", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-SignedHeaders", valid_603980
  var valid_603981 = header.getOrDefault("X-Amz-Credential")
  valid_603981 = validateParameter(valid_603981, JString, required = false,
                                 default = nil)
  if valid_603981 != nil:
    section.add "X-Amz-Credential", valid_603981
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_603982 = formData.getOrDefault("PathPrefix")
  valid_603982 = validateParameter(valid_603982, JString, required = false,
                                 default = nil)
  if valid_603982 != nil:
    section.add "PathPrefix", valid_603982
  var valid_603983 = formData.getOrDefault("Marker")
  valid_603983 = validateParameter(valid_603983, JString, required = false,
                                 default = nil)
  if valid_603983 != nil:
    section.add "Marker", valid_603983
  var valid_603984 = formData.getOrDefault("MaxItems")
  valid_603984 = validateParameter(valid_603984, JInt, required = false, default = nil)
  if valid_603984 != nil:
    section.add "MaxItems", valid_603984
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603985: Call_PostListGroups_603970; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_603985.validator(path, query, header, formData, body)
  let scheme = call_603985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603985.url(scheme.get, call_603985.host, call_603985.base,
                         call_603985.route, valid.getOrDefault("path"))
  result = hook(call_603985, url, valid)

proc call*(call_603986: Call_PostListGroups_603970; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListGroups"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603987 = newJObject()
  var formData_603988 = newJObject()
  add(formData_603988, "PathPrefix", newJString(PathPrefix))
  add(formData_603988, "Marker", newJString(Marker))
  add(query_603987, "Action", newJString(Action))
  add(formData_603988, "MaxItems", newJInt(MaxItems))
  add(query_603987, "Version", newJString(Version))
  result = call_603986.call(nil, query_603987, nil, formData_603988, nil)

var postListGroups* = Call_PostListGroups_603970(name: "postListGroups",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_PostListGroups_603971,
    base: "/", url: url_PostListGroups_603972, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroups_603952 = ref object of OpenApiRestCall_600426
proc url_GetListGroups_603954(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroups_603953(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603955 = query.getOrDefault("PathPrefix")
  valid_603955 = validateParameter(valid_603955, JString, required = false,
                                 default = nil)
  if valid_603955 != nil:
    section.add "PathPrefix", valid_603955
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603956 = query.getOrDefault("Action")
  valid_603956 = validateParameter(valid_603956, JString, required = true,
                                 default = newJString("ListGroups"))
  if valid_603956 != nil:
    section.add "Action", valid_603956
  var valid_603957 = query.getOrDefault("Marker")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "Marker", valid_603957
  var valid_603958 = query.getOrDefault("MaxItems")
  valid_603958 = validateParameter(valid_603958, JInt, required = false, default = nil)
  if valid_603958 != nil:
    section.add "MaxItems", valid_603958
  var valid_603959 = query.getOrDefault("Version")
  valid_603959 = validateParameter(valid_603959, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603959 != nil:
    section.add "Version", valid_603959
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603960 = header.getOrDefault("X-Amz-Date")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "X-Amz-Date", valid_603960
  var valid_603961 = header.getOrDefault("X-Amz-Security-Token")
  valid_603961 = validateParameter(valid_603961, JString, required = false,
                                 default = nil)
  if valid_603961 != nil:
    section.add "X-Amz-Security-Token", valid_603961
  var valid_603962 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603962 = validateParameter(valid_603962, JString, required = false,
                                 default = nil)
  if valid_603962 != nil:
    section.add "X-Amz-Content-Sha256", valid_603962
  var valid_603963 = header.getOrDefault("X-Amz-Algorithm")
  valid_603963 = validateParameter(valid_603963, JString, required = false,
                                 default = nil)
  if valid_603963 != nil:
    section.add "X-Amz-Algorithm", valid_603963
  var valid_603964 = header.getOrDefault("X-Amz-Signature")
  valid_603964 = validateParameter(valid_603964, JString, required = false,
                                 default = nil)
  if valid_603964 != nil:
    section.add "X-Amz-Signature", valid_603964
  var valid_603965 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603965 = validateParameter(valid_603965, JString, required = false,
                                 default = nil)
  if valid_603965 != nil:
    section.add "X-Amz-SignedHeaders", valid_603965
  var valid_603966 = header.getOrDefault("X-Amz-Credential")
  valid_603966 = validateParameter(valid_603966, JString, required = false,
                                 default = nil)
  if valid_603966 != nil:
    section.add "X-Amz-Credential", valid_603966
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603967: Call_GetListGroups_603952; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_603967.validator(path, query, header, formData, body)
  let scheme = call_603967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603967.url(scheme.get, call_603967.host, call_603967.base,
                         call_603967.route, valid.getOrDefault("path"))
  result = hook(call_603967, url, valid)

proc call*(call_603968: Call_GetListGroups_603952; PathPrefix: string = "";
          Action: string = "ListGroups"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroups
  ## <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_603969 = newJObject()
  add(query_603969, "PathPrefix", newJString(PathPrefix))
  add(query_603969, "Action", newJString(Action))
  add(query_603969, "Marker", newJString(Marker))
  add(query_603969, "MaxItems", newJInt(MaxItems))
  add(query_603969, "Version", newJString(Version))
  result = call_603968.call(nil, query_603969, nil, nil, nil)

var getListGroups* = Call_GetListGroups_603952(name: "getListGroups",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListGroups", validator: validate_GetListGroups_603953,
    base: "/", url: url_GetListGroups_603954, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListGroupsForUser_604007 = ref object of OpenApiRestCall_600426
proc url_PostListGroupsForUser_604009(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListGroupsForUser_604008(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604010 = query.getOrDefault("Action")
  valid_604010 = validateParameter(valid_604010, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_604010 != nil:
    section.add "Action", valid_604010
  var valid_604011 = query.getOrDefault("Version")
  valid_604011 = validateParameter(valid_604011, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604011 != nil:
    section.add "Version", valid_604011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604012 = header.getOrDefault("X-Amz-Date")
  valid_604012 = validateParameter(valid_604012, JString, required = false,
                                 default = nil)
  if valid_604012 != nil:
    section.add "X-Amz-Date", valid_604012
  var valid_604013 = header.getOrDefault("X-Amz-Security-Token")
  valid_604013 = validateParameter(valid_604013, JString, required = false,
                                 default = nil)
  if valid_604013 != nil:
    section.add "X-Amz-Security-Token", valid_604013
  var valid_604014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604014 = validateParameter(valid_604014, JString, required = false,
                                 default = nil)
  if valid_604014 != nil:
    section.add "X-Amz-Content-Sha256", valid_604014
  var valid_604015 = header.getOrDefault("X-Amz-Algorithm")
  valid_604015 = validateParameter(valid_604015, JString, required = false,
                                 default = nil)
  if valid_604015 != nil:
    section.add "X-Amz-Algorithm", valid_604015
  var valid_604016 = header.getOrDefault("X-Amz-Signature")
  valid_604016 = validateParameter(valid_604016, JString, required = false,
                                 default = nil)
  if valid_604016 != nil:
    section.add "X-Amz-Signature", valid_604016
  var valid_604017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604017 = validateParameter(valid_604017, JString, required = false,
                                 default = nil)
  if valid_604017 != nil:
    section.add "X-Amz-SignedHeaders", valid_604017
  var valid_604018 = header.getOrDefault("X-Amz-Credential")
  valid_604018 = validateParameter(valid_604018, JString, required = false,
                                 default = nil)
  if valid_604018 != nil:
    section.add "X-Amz-Credential", valid_604018
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604019 = formData.getOrDefault("UserName")
  valid_604019 = validateParameter(valid_604019, JString, required = true,
                                 default = nil)
  if valid_604019 != nil:
    section.add "UserName", valid_604019
  var valid_604020 = formData.getOrDefault("Marker")
  valid_604020 = validateParameter(valid_604020, JString, required = false,
                                 default = nil)
  if valid_604020 != nil:
    section.add "Marker", valid_604020
  var valid_604021 = formData.getOrDefault("MaxItems")
  valid_604021 = validateParameter(valid_604021, JInt, required = false, default = nil)
  if valid_604021 != nil:
    section.add "MaxItems", valid_604021
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604022: Call_PostListGroupsForUser_604007; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604022.validator(path, query, header, formData, body)
  let scheme = call_604022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604022.url(scheme.get, call_604022.host, call_604022.base,
                         call_604022.route, valid.getOrDefault("path"))
  result = hook(call_604022, url, valid)

proc call*(call_604023: Call_PostListGroupsForUser_604007; UserName: string;
          Marker: string = ""; Action: string = "ListGroupsForUser"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604024 = newJObject()
  var formData_604025 = newJObject()
  add(formData_604025, "UserName", newJString(UserName))
  add(formData_604025, "Marker", newJString(Marker))
  add(query_604024, "Action", newJString(Action))
  add(formData_604025, "MaxItems", newJInt(MaxItems))
  add(query_604024, "Version", newJString(Version))
  result = call_604023.call(nil, query_604024, nil, formData_604025, nil)

var postListGroupsForUser* = Call_PostListGroupsForUser_604007(
    name: "postListGroupsForUser", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_PostListGroupsForUser_604008, base: "/",
    url: url_PostListGroupsForUser_604009, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListGroupsForUser_603989 = ref object of OpenApiRestCall_600426
proc url_GetListGroupsForUser_603991(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListGroupsForUser_603990(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_603992 = query.getOrDefault("UserName")
  valid_603992 = validateParameter(valid_603992, JString, required = true,
                                 default = nil)
  if valid_603992 != nil:
    section.add "UserName", valid_603992
  var valid_603993 = query.getOrDefault("Action")
  valid_603993 = validateParameter(valid_603993, JString, required = true,
                                 default = newJString("ListGroupsForUser"))
  if valid_603993 != nil:
    section.add "Action", valid_603993
  var valid_603994 = query.getOrDefault("Marker")
  valid_603994 = validateParameter(valid_603994, JString, required = false,
                                 default = nil)
  if valid_603994 != nil:
    section.add "Marker", valid_603994
  var valid_603995 = query.getOrDefault("MaxItems")
  valid_603995 = validateParameter(valid_603995, JInt, required = false, default = nil)
  if valid_603995 != nil:
    section.add "MaxItems", valid_603995
  var valid_603996 = query.getOrDefault("Version")
  valid_603996 = validateParameter(valid_603996, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_603996 != nil:
    section.add "Version", valid_603996
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603997 = header.getOrDefault("X-Amz-Date")
  valid_603997 = validateParameter(valid_603997, JString, required = false,
                                 default = nil)
  if valid_603997 != nil:
    section.add "X-Amz-Date", valid_603997
  var valid_603998 = header.getOrDefault("X-Amz-Security-Token")
  valid_603998 = validateParameter(valid_603998, JString, required = false,
                                 default = nil)
  if valid_603998 != nil:
    section.add "X-Amz-Security-Token", valid_603998
  var valid_603999 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603999 = validateParameter(valid_603999, JString, required = false,
                                 default = nil)
  if valid_603999 != nil:
    section.add "X-Amz-Content-Sha256", valid_603999
  var valid_604000 = header.getOrDefault("X-Amz-Algorithm")
  valid_604000 = validateParameter(valid_604000, JString, required = false,
                                 default = nil)
  if valid_604000 != nil:
    section.add "X-Amz-Algorithm", valid_604000
  var valid_604001 = header.getOrDefault("X-Amz-Signature")
  valid_604001 = validateParameter(valid_604001, JString, required = false,
                                 default = nil)
  if valid_604001 != nil:
    section.add "X-Amz-Signature", valid_604001
  var valid_604002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604002 = validateParameter(valid_604002, JString, required = false,
                                 default = nil)
  if valid_604002 != nil:
    section.add "X-Amz-SignedHeaders", valid_604002
  var valid_604003 = header.getOrDefault("X-Amz-Credential")
  valid_604003 = validateParameter(valid_604003, JString, required = false,
                                 default = nil)
  if valid_604003 != nil:
    section.add "X-Amz-Credential", valid_604003
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604004: Call_GetListGroupsForUser_603989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604004.validator(path, query, header, formData, body)
  let scheme = call_604004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604004.url(scheme.get, call_604004.host, call_604004.base,
                         call_604004.route, valid.getOrDefault("path"))
  result = hook(call_604004, url, valid)

proc call*(call_604005: Call_GetListGroupsForUser_603989; UserName: string;
          Action: string = "ListGroupsForUser"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListGroupsForUser
  ## <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604006 = newJObject()
  add(query_604006, "UserName", newJString(UserName))
  add(query_604006, "Action", newJString(Action))
  add(query_604006, "Marker", newJString(Marker))
  add(query_604006, "MaxItems", newJInt(MaxItems))
  add(query_604006, "Version", newJString(Version))
  result = call_604005.call(nil, query_604006, nil, nil, nil)

var getListGroupsForUser* = Call_GetListGroupsForUser_603989(
    name: "getListGroupsForUser", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListGroupsForUser",
    validator: validate_GetListGroupsForUser_603990, base: "/",
    url: url_GetListGroupsForUser_603991, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfiles_604044 = ref object of OpenApiRestCall_600426
proc url_PostListInstanceProfiles_604046(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfiles_604045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604047 = query.getOrDefault("Action")
  valid_604047 = validateParameter(valid_604047, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_604047 != nil:
    section.add "Action", valid_604047
  var valid_604048 = query.getOrDefault("Version")
  valid_604048 = validateParameter(valid_604048, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604048 != nil:
    section.add "Version", valid_604048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604049 = header.getOrDefault("X-Amz-Date")
  valid_604049 = validateParameter(valid_604049, JString, required = false,
                                 default = nil)
  if valid_604049 != nil:
    section.add "X-Amz-Date", valid_604049
  var valid_604050 = header.getOrDefault("X-Amz-Security-Token")
  valid_604050 = validateParameter(valid_604050, JString, required = false,
                                 default = nil)
  if valid_604050 != nil:
    section.add "X-Amz-Security-Token", valid_604050
  var valid_604051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604051 = validateParameter(valid_604051, JString, required = false,
                                 default = nil)
  if valid_604051 != nil:
    section.add "X-Amz-Content-Sha256", valid_604051
  var valid_604052 = header.getOrDefault("X-Amz-Algorithm")
  valid_604052 = validateParameter(valid_604052, JString, required = false,
                                 default = nil)
  if valid_604052 != nil:
    section.add "X-Amz-Algorithm", valid_604052
  var valid_604053 = header.getOrDefault("X-Amz-Signature")
  valid_604053 = validateParameter(valid_604053, JString, required = false,
                                 default = nil)
  if valid_604053 != nil:
    section.add "X-Amz-Signature", valid_604053
  var valid_604054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604054 = validateParameter(valid_604054, JString, required = false,
                                 default = nil)
  if valid_604054 != nil:
    section.add "X-Amz-SignedHeaders", valid_604054
  var valid_604055 = header.getOrDefault("X-Amz-Credential")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Credential", valid_604055
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604056 = formData.getOrDefault("PathPrefix")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "PathPrefix", valid_604056
  var valid_604057 = formData.getOrDefault("Marker")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "Marker", valid_604057
  var valid_604058 = formData.getOrDefault("MaxItems")
  valid_604058 = validateParameter(valid_604058, JInt, required = false, default = nil)
  if valid_604058 != nil:
    section.add "MaxItems", valid_604058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604059: Call_PostListInstanceProfiles_604044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604059.validator(path, query, header, formData, body)
  let scheme = call_604059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604059.url(scheme.get, call_604059.host, call_604059.base,
                         call_604059.route, valid.getOrDefault("path"))
  result = hook(call_604059, url, valid)

proc call*(call_604060: Call_PostListInstanceProfiles_604044;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListInstanceProfiles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604061 = newJObject()
  var formData_604062 = newJObject()
  add(formData_604062, "PathPrefix", newJString(PathPrefix))
  add(formData_604062, "Marker", newJString(Marker))
  add(query_604061, "Action", newJString(Action))
  add(formData_604062, "MaxItems", newJInt(MaxItems))
  add(query_604061, "Version", newJString(Version))
  result = call_604060.call(nil, query_604061, nil, formData_604062, nil)

var postListInstanceProfiles* = Call_PostListInstanceProfiles_604044(
    name: "postListInstanceProfiles", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_PostListInstanceProfiles_604045, base: "/",
    url: url_PostListInstanceProfiles_604046, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfiles_604026 = ref object of OpenApiRestCall_600426
proc url_GetListInstanceProfiles_604028(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfiles_604027(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604029 = query.getOrDefault("PathPrefix")
  valid_604029 = validateParameter(valid_604029, JString, required = false,
                                 default = nil)
  if valid_604029 != nil:
    section.add "PathPrefix", valid_604029
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604030 = query.getOrDefault("Action")
  valid_604030 = validateParameter(valid_604030, JString, required = true,
                                 default = newJString("ListInstanceProfiles"))
  if valid_604030 != nil:
    section.add "Action", valid_604030
  var valid_604031 = query.getOrDefault("Marker")
  valid_604031 = validateParameter(valid_604031, JString, required = false,
                                 default = nil)
  if valid_604031 != nil:
    section.add "Marker", valid_604031
  var valid_604032 = query.getOrDefault("MaxItems")
  valid_604032 = validateParameter(valid_604032, JInt, required = false, default = nil)
  if valid_604032 != nil:
    section.add "MaxItems", valid_604032
  var valid_604033 = query.getOrDefault("Version")
  valid_604033 = validateParameter(valid_604033, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604033 != nil:
    section.add "Version", valid_604033
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604034 = header.getOrDefault("X-Amz-Date")
  valid_604034 = validateParameter(valid_604034, JString, required = false,
                                 default = nil)
  if valid_604034 != nil:
    section.add "X-Amz-Date", valid_604034
  var valid_604035 = header.getOrDefault("X-Amz-Security-Token")
  valid_604035 = validateParameter(valid_604035, JString, required = false,
                                 default = nil)
  if valid_604035 != nil:
    section.add "X-Amz-Security-Token", valid_604035
  var valid_604036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604036 = validateParameter(valid_604036, JString, required = false,
                                 default = nil)
  if valid_604036 != nil:
    section.add "X-Amz-Content-Sha256", valid_604036
  var valid_604037 = header.getOrDefault("X-Amz-Algorithm")
  valid_604037 = validateParameter(valid_604037, JString, required = false,
                                 default = nil)
  if valid_604037 != nil:
    section.add "X-Amz-Algorithm", valid_604037
  var valid_604038 = header.getOrDefault("X-Amz-Signature")
  valid_604038 = validateParameter(valid_604038, JString, required = false,
                                 default = nil)
  if valid_604038 != nil:
    section.add "X-Amz-Signature", valid_604038
  var valid_604039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604039 = validateParameter(valid_604039, JString, required = false,
                                 default = nil)
  if valid_604039 != nil:
    section.add "X-Amz-SignedHeaders", valid_604039
  var valid_604040 = header.getOrDefault("X-Amz-Credential")
  valid_604040 = validateParameter(valid_604040, JString, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "X-Amz-Credential", valid_604040
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604041: Call_GetListInstanceProfiles_604026; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604041.validator(path, query, header, formData, body)
  let scheme = call_604041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604041.url(scheme.get, call_604041.host, call_604041.base,
                         call_604041.route, valid.getOrDefault("path"))
  result = hook(call_604041, url, valid)

proc call*(call_604042: Call_GetListInstanceProfiles_604026;
          PathPrefix: string = ""; Action: string = "ListInstanceProfiles";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfiles
  ## <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604043 = newJObject()
  add(query_604043, "PathPrefix", newJString(PathPrefix))
  add(query_604043, "Action", newJString(Action))
  add(query_604043, "Marker", newJString(Marker))
  add(query_604043, "MaxItems", newJInt(MaxItems))
  add(query_604043, "Version", newJString(Version))
  result = call_604042.call(nil, query_604043, nil, nil, nil)

var getListInstanceProfiles* = Call_GetListInstanceProfiles_604026(
    name: "getListInstanceProfiles", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfiles",
    validator: validate_GetListInstanceProfiles_604027, base: "/",
    url: url_GetListInstanceProfiles_604028, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListInstanceProfilesForRole_604081 = ref object of OpenApiRestCall_600426
proc url_PostListInstanceProfilesForRole_604083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListInstanceProfilesForRole_604082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604084 = query.getOrDefault("Action")
  valid_604084 = validateParameter(valid_604084, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_604084 != nil:
    section.add "Action", valid_604084
  var valid_604085 = query.getOrDefault("Version")
  valid_604085 = validateParameter(valid_604085, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604085 != nil:
    section.add "Version", valid_604085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604086 = header.getOrDefault("X-Amz-Date")
  valid_604086 = validateParameter(valid_604086, JString, required = false,
                                 default = nil)
  if valid_604086 != nil:
    section.add "X-Amz-Date", valid_604086
  var valid_604087 = header.getOrDefault("X-Amz-Security-Token")
  valid_604087 = validateParameter(valid_604087, JString, required = false,
                                 default = nil)
  if valid_604087 != nil:
    section.add "X-Amz-Security-Token", valid_604087
  var valid_604088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604088 = validateParameter(valid_604088, JString, required = false,
                                 default = nil)
  if valid_604088 != nil:
    section.add "X-Amz-Content-Sha256", valid_604088
  var valid_604089 = header.getOrDefault("X-Amz-Algorithm")
  valid_604089 = validateParameter(valid_604089, JString, required = false,
                                 default = nil)
  if valid_604089 != nil:
    section.add "X-Amz-Algorithm", valid_604089
  var valid_604090 = header.getOrDefault("X-Amz-Signature")
  valid_604090 = validateParameter(valid_604090, JString, required = false,
                                 default = nil)
  if valid_604090 != nil:
    section.add "X-Amz-Signature", valid_604090
  var valid_604091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604091 = validateParameter(valid_604091, JString, required = false,
                                 default = nil)
  if valid_604091 != nil:
    section.add "X-Amz-SignedHeaders", valid_604091
  var valid_604092 = header.getOrDefault("X-Amz-Credential")
  valid_604092 = validateParameter(valid_604092, JString, required = false,
                                 default = nil)
  if valid_604092 != nil:
    section.add "X-Amz-Credential", valid_604092
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604093 = formData.getOrDefault("RoleName")
  valid_604093 = validateParameter(valid_604093, JString, required = true,
                                 default = nil)
  if valid_604093 != nil:
    section.add "RoleName", valid_604093
  var valid_604094 = formData.getOrDefault("Marker")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "Marker", valid_604094
  var valid_604095 = formData.getOrDefault("MaxItems")
  valid_604095 = validateParameter(valid_604095, JInt, required = false, default = nil)
  if valid_604095 != nil:
    section.add "MaxItems", valid_604095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604096: Call_PostListInstanceProfilesForRole_604081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604096.validator(path, query, header, formData, body)
  let scheme = call_604096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604096.url(scheme.get, call_604096.host, call_604096.base,
                         call_604096.route, valid.getOrDefault("path"))
  result = hook(call_604096, url, valid)

proc call*(call_604097: Call_PostListInstanceProfilesForRole_604081;
          RoleName: string; Marker: string = "";
          Action: string = "ListInstanceProfilesForRole"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604098 = newJObject()
  var formData_604099 = newJObject()
  add(formData_604099, "RoleName", newJString(RoleName))
  add(formData_604099, "Marker", newJString(Marker))
  add(query_604098, "Action", newJString(Action))
  add(formData_604099, "MaxItems", newJInt(MaxItems))
  add(query_604098, "Version", newJString(Version))
  result = call_604097.call(nil, query_604098, nil, formData_604099, nil)

var postListInstanceProfilesForRole* = Call_PostListInstanceProfilesForRole_604081(
    name: "postListInstanceProfilesForRole", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_PostListInstanceProfilesForRole_604082, base: "/",
    url: url_PostListInstanceProfilesForRole_604083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListInstanceProfilesForRole_604063 = ref object of OpenApiRestCall_600426
proc url_GetListInstanceProfilesForRole_604065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListInstanceProfilesForRole_604064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604066 = query.getOrDefault("Action")
  valid_604066 = validateParameter(valid_604066, JString, required = true, default = newJString(
      "ListInstanceProfilesForRole"))
  if valid_604066 != nil:
    section.add "Action", valid_604066
  var valid_604067 = query.getOrDefault("Marker")
  valid_604067 = validateParameter(valid_604067, JString, required = false,
                                 default = nil)
  if valid_604067 != nil:
    section.add "Marker", valid_604067
  var valid_604068 = query.getOrDefault("MaxItems")
  valid_604068 = validateParameter(valid_604068, JInt, required = false, default = nil)
  if valid_604068 != nil:
    section.add "MaxItems", valid_604068
  var valid_604069 = query.getOrDefault("RoleName")
  valid_604069 = validateParameter(valid_604069, JString, required = true,
                                 default = nil)
  if valid_604069 != nil:
    section.add "RoleName", valid_604069
  var valid_604070 = query.getOrDefault("Version")
  valid_604070 = validateParameter(valid_604070, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604070 != nil:
    section.add "Version", valid_604070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604071 = header.getOrDefault("X-Amz-Date")
  valid_604071 = validateParameter(valid_604071, JString, required = false,
                                 default = nil)
  if valid_604071 != nil:
    section.add "X-Amz-Date", valid_604071
  var valid_604072 = header.getOrDefault("X-Amz-Security-Token")
  valid_604072 = validateParameter(valid_604072, JString, required = false,
                                 default = nil)
  if valid_604072 != nil:
    section.add "X-Amz-Security-Token", valid_604072
  var valid_604073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604073 = validateParameter(valid_604073, JString, required = false,
                                 default = nil)
  if valid_604073 != nil:
    section.add "X-Amz-Content-Sha256", valid_604073
  var valid_604074 = header.getOrDefault("X-Amz-Algorithm")
  valid_604074 = validateParameter(valid_604074, JString, required = false,
                                 default = nil)
  if valid_604074 != nil:
    section.add "X-Amz-Algorithm", valid_604074
  var valid_604075 = header.getOrDefault("X-Amz-Signature")
  valid_604075 = validateParameter(valid_604075, JString, required = false,
                                 default = nil)
  if valid_604075 != nil:
    section.add "X-Amz-Signature", valid_604075
  var valid_604076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "X-Amz-SignedHeaders", valid_604076
  var valid_604077 = header.getOrDefault("X-Amz-Credential")
  valid_604077 = validateParameter(valid_604077, JString, required = false,
                                 default = nil)
  if valid_604077 != nil:
    section.add "X-Amz-Credential", valid_604077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604078: Call_GetListInstanceProfilesForRole_604063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604078.validator(path, query, header, formData, body)
  let scheme = call_604078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604078.url(scheme.get, call_604078.host, call_604078.base,
                         call_604078.route, valid.getOrDefault("path"))
  result = hook(call_604078, url, valid)

proc call*(call_604079: Call_GetListInstanceProfilesForRole_604063;
          RoleName: string; Action: string = "ListInstanceProfilesForRole";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListInstanceProfilesForRole
  ## <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604080 = newJObject()
  add(query_604080, "Action", newJString(Action))
  add(query_604080, "Marker", newJString(Marker))
  add(query_604080, "MaxItems", newJInt(MaxItems))
  add(query_604080, "RoleName", newJString(RoleName))
  add(query_604080, "Version", newJString(Version))
  result = call_604079.call(nil, query_604080, nil, nil, nil)

var getListInstanceProfilesForRole* = Call_GetListInstanceProfilesForRole_604063(
    name: "getListInstanceProfilesForRole", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListInstanceProfilesForRole",
    validator: validate_GetListInstanceProfilesForRole_604064, base: "/",
    url: url_GetListInstanceProfilesForRole_604065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListMFADevices_604118 = ref object of OpenApiRestCall_600426
proc url_PostListMFADevices_604120(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListMFADevices_604119(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604121 = query.getOrDefault("Action")
  valid_604121 = validateParameter(valid_604121, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_604121 != nil:
    section.add "Action", valid_604121
  var valid_604122 = query.getOrDefault("Version")
  valid_604122 = validateParameter(valid_604122, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604122 != nil:
    section.add "Version", valid_604122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604123 = header.getOrDefault("X-Amz-Date")
  valid_604123 = validateParameter(valid_604123, JString, required = false,
                                 default = nil)
  if valid_604123 != nil:
    section.add "X-Amz-Date", valid_604123
  var valid_604124 = header.getOrDefault("X-Amz-Security-Token")
  valid_604124 = validateParameter(valid_604124, JString, required = false,
                                 default = nil)
  if valid_604124 != nil:
    section.add "X-Amz-Security-Token", valid_604124
  var valid_604125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604125 = validateParameter(valid_604125, JString, required = false,
                                 default = nil)
  if valid_604125 != nil:
    section.add "X-Amz-Content-Sha256", valid_604125
  var valid_604126 = header.getOrDefault("X-Amz-Algorithm")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Algorithm", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-Signature")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-Signature", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-SignedHeaders", valid_604128
  var valid_604129 = header.getOrDefault("X-Amz-Credential")
  valid_604129 = validateParameter(valid_604129, JString, required = false,
                                 default = nil)
  if valid_604129 != nil:
    section.add "X-Amz-Credential", valid_604129
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604130 = formData.getOrDefault("UserName")
  valid_604130 = validateParameter(valid_604130, JString, required = false,
                                 default = nil)
  if valid_604130 != nil:
    section.add "UserName", valid_604130
  var valid_604131 = formData.getOrDefault("Marker")
  valid_604131 = validateParameter(valid_604131, JString, required = false,
                                 default = nil)
  if valid_604131 != nil:
    section.add "Marker", valid_604131
  var valid_604132 = formData.getOrDefault("MaxItems")
  valid_604132 = validateParameter(valid_604132, JInt, required = false, default = nil)
  if valid_604132 != nil:
    section.add "MaxItems", valid_604132
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604133: Call_PostListMFADevices_604118; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604133.validator(path, query, header, formData, body)
  let scheme = call_604133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604133.url(scheme.get, call_604133.host, call_604133.base,
                         call_604133.route, valid.getOrDefault("path"))
  result = hook(call_604133, url, valid)

proc call*(call_604134: Call_PostListMFADevices_604118; UserName: string = "";
          Marker: string = ""; Action: string = "ListMFADevices"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604135 = newJObject()
  var formData_604136 = newJObject()
  add(formData_604136, "UserName", newJString(UserName))
  add(formData_604136, "Marker", newJString(Marker))
  add(query_604135, "Action", newJString(Action))
  add(formData_604136, "MaxItems", newJInt(MaxItems))
  add(query_604135, "Version", newJString(Version))
  result = call_604134.call(nil, query_604135, nil, formData_604136, nil)

var postListMFADevices* = Call_PostListMFADevices_604118(
    name: "postListMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListMFADevices",
    validator: validate_PostListMFADevices_604119, base: "/",
    url: url_PostListMFADevices_604120, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListMFADevices_604100 = ref object of OpenApiRestCall_600426
proc url_GetListMFADevices_604102(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListMFADevices_604101(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604103 = query.getOrDefault("UserName")
  valid_604103 = validateParameter(valid_604103, JString, required = false,
                                 default = nil)
  if valid_604103 != nil:
    section.add "UserName", valid_604103
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604104 = query.getOrDefault("Action")
  valid_604104 = validateParameter(valid_604104, JString, required = true,
                                 default = newJString("ListMFADevices"))
  if valid_604104 != nil:
    section.add "Action", valid_604104
  var valid_604105 = query.getOrDefault("Marker")
  valid_604105 = validateParameter(valid_604105, JString, required = false,
                                 default = nil)
  if valid_604105 != nil:
    section.add "Marker", valid_604105
  var valid_604106 = query.getOrDefault("MaxItems")
  valid_604106 = validateParameter(valid_604106, JInt, required = false, default = nil)
  if valid_604106 != nil:
    section.add "MaxItems", valid_604106
  var valid_604107 = query.getOrDefault("Version")
  valid_604107 = validateParameter(valid_604107, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604107 != nil:
    section.add "Version", valid_604107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604108 = header.getOrDefault("X-Amz-Date")
  valid_604108 = validateParameter(valid_604108, JString, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "X-Amz-Date", valid_604108
  var valid_604109 = header.getOrDefault("X-Amz-Security-Token")
  valid_604109 = validateParameter(valid_604109, JString, required = false,
                                 default = nil)
  if valid_604109 != nil:
    section.add "X-Amz-Security-Token", valid_604109
  var valid_604110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604110 = validateParameter(valid_604110, JString, required = false,
                                 default = nil)
  if valid_604110 != nil:
    section.add "X-Amz-Content-Sha256", valid_604110
  var valid_604111 = header.getOrDefault("X-Amz-Algorithm")
  valid_604111 = validateParameter(valid_604111, JString, required = false,
                                 default = nil)
  if valid_604111 != nil:
    section.add "X-Amz-Algorithm", valid_604111
  var valid_604112 = header.getOrDefault("X-Amz-Signature")
  valid_604112 = validateParameter(valid_604112, JString, required = false,
                                 default = nil)
  if valid_604112 != nil:
    section.add "X-Amz-Signature", valid_604112
  var valid_604113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604113 = validateParameter(valid_604113, JString, required = false,
                                 default = nil)
  if valid_604113 != nil:
    section.add "X-Amz-SignedHeaders", valid_604113
  var valid_604114 = header.getOrDefault("X-Amz-Credential")
  valid_604114 = validateParameter(valid_604114, JString, required = false,
                                 default = nil)
  if valid_604114 != nil:
    section.add "X-Amz-Credential", valid_604114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604115: Call_GetListMFADevices_604100; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604115.validator(path, query, header, formData, body)
  let scheme = call_604115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604115.url(scheme.get, call_604115.host, call_604115.base,
                         call_604115.route, valid.getOrDefault("path"))
  result = hook(call_604115, url, valid)

proc call*(call_604116: Call_GetListMFADevices_604100; UserName: string = "";
          Action: string = "ListMFADevices"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListMFADevices
  ## <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604117 = newJObject()
  add(query_604117, "UserName", newJString(UserName))
  add(query_604117, "Action", newJString(Action))
  add(query_604117, "Marker", newJString(Marker))
  add(query_604117, "MaxItems", newJInt(MaxItems))
  add(query_604117, "Version", newJString(Version))
  result = call_604116.call(nil, query_604117, nil, nil, nil)

var getListMFADevices* = Call_GetListMFADevices_604100(name: "getListMFADevices",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListMFADevices", validator: validate_GetListMFADevices_604101,
    base: "/", url: url_GetListMFADevices_604102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListOpenIDConnectProviders_604152 = ref object of OpenApiRestCall_600426
proc url_PostListOpenIDConnectProviders_604154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListOpenIDConnectProviders_604153(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604155 = query.getOrDefault("Action")
  valid_604155 = validateParameter(valid_604155, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_604155 != nil:
    section.add "Action", valid_604155
  var valid_604156 = query.getOrDefault("Version")
  valid_604156 = validateParameter(valid_604156, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604156 != nil:
    section.add "Version", valid_604156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604157 = header.getOrDefault("X-Amz-Date")
  valid_604157 = validateParameter(valid_604157, JString, required = false,
                                 default = nil)
  if valid_604157 != nil:
    section.add "X-Amz-Date", valid_604157
  var valid_604158 = header.getOrDefault("X-Amz-Security-Token")
  valid_604158 = validateParameter(valid_604158, JString, required = false,
                                 default = nil)
  if valid_604158 != nil:
    section.add "X-Amz-Security-Token", valid_604158
  var valid_604159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604159 = validateParameter(valid_604159, JString, required = false,
                                 default = nil)
  if valid_604159 != nil:
    section.add "X-Amz-Content-Sha256", valid_604159
  var valid_604160 = header.getOrDefault("X-Amz-Algorithm")
  valid_604160 = validateParameter(valid_604160, JString, required = false,
                                 default = nil)
  if valid_604160 != nil:
    section.add "X-Amz-Algorithm", valid_604160
  var valid_604161 = header.getOrDefault("X-Amz-Signature")
  valid_604161 = validateParameter(valid_604161, JString, required = false,
                                 default = nil)
  if valid_604161 != nil:
    section.add "X-Amz-Signature", valid_604161
  var valid_604162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604162 = validateParameter(valid_604162, JString, required = false,
                                 default = nil)
  if valid_604162 != nil:
    section.add "X-Amz-SignedHeaders", valid_604162
  var valid_604163 = header.getOrDefault("X-Amz-Credential")
  valid_604163 = validateParameter(valid_604163, JString, required = false,
                                 default = nil)
  if valid_604163 != nil:
    section.add "X-Amz-Credential", valid_604163
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604164: Call_PostListOpenIDConnectProviders_604152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_604164.validator(path, query, header, formData, body)
  let scheme = call_604164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604164.url(scheme.get, call_604164.host, call_604164.base,
                         call_604164.route, valid.getOrDefault("path"))
  result = hook(call_604164, url, valid)

proc call*(call_604165: Call_PostListOpenIDConnectProviders_604152;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## postListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604166 = newJObject()
  add(query_604166, "Action", newJString(Action))
  add(query_604166, "Version", newJString(Version))
  result = call_604165.call(nil, query_604166, nil, nil, nil)

var postListOpenIDConnectProviders* = Call_PostListOpenIDConnectProviders_604152(
    name: "postListOpenIDConnectProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_PostListOpenIDConnectProviders_604153, base: "/",
    url: url_PostListOpenIDConnectProviders_604154,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListOpenIDConnectProviders_604137 = ref object of OpenApiRestCall_600426
proc url_GetListOpenIDConnectProviders_604139(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListOpenIDConnectProviders_604138(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604140 = query.getOrDefault("Action")
  valid_604140 = validateParameter(valid_604140, JString, required = true, default = newJString(
      "ListOpenIDConnectProviders"))
  if valid_604140 != nil:
    section.add "Action", valid_604140
  var valid_604141 = query.getOrDefault("Version")
  valid_604141 = validateParameter(valid_604141, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604141 != nil:
    section.add "Version", valid_604141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604142 = header.getOrDefault("X-Amz-Date")
  valid_604142 = validateParameter(valid_604142, JString, required = false,
                                 default = nil)
  if valid_604142 != nil:
    section.add "X-Amz-Date", valid_604142
  var valid_604143 = header.getOrDefault("X-Amz-Security-Token")
  valid_604143 = validateParameter(valid_604143, JString, required = false,
                                 default = nil)
  if valid_604143 != nil:
    section.add "X-Amz-Security-Token", valid_604143
  var valid_604144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604144 = validateParameter(valid_604144, JString, required = false,
                                 default = nil)
  if valid_604144 != nil:
    section.add "X-Amz-Content-Sha256", valid_604144
  var valid_604145 = header.getOrDefault("X-Amz-Algorithm")
  valid_604145 = validateParameter(valid_604145, JString, required = false,
                                 default = nil)
  if valid_604145 != nil:
    section.add "X-Amz-Algorithm", valid_604145
  var valid_604146 = header.getOrDefault("X-Amz-Signature")
  valid_604146 = validateParameter(valid_604146, JString, required = false,
                                 default = nil)
  if valid_604146 != nil:
    section.add "X-Amz-Signature", valid_604146
  var valid_604147 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604147 = validateParameter(valid_604147, JString, required = false,
                                 default = nil)
  if valid_604147 != nil:
    section.add "X-Amz-SignedHeaders", valid_604147
  var valid_604148 = header.getOrDefault("X-Amz-Credential")
  valid_604148 = validateParameter(valid_604148, JString, required = false,
                                 default = nil)
  if valid_604148 != nil:
    section.add "X-Amz-Credential", valid_604148
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604149: Call_GetListOpenIDConnectProviders_604137; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ## 
  let valid = call_604149.validator(path, query, header, formData, body)
  let scheme = call_604149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604149.url(scheme.get, call_604149.host, call_604149.base,
                         call_604149.route, valid.getOrDefault("path"))
  result = hook(call_604149, url, valid)

proc call*(call_604150: Call_GetListOpenIDConnectProviders_604137;
          Action: string = "ListOpenIDConnectProviders";
          Version: string = "2010-05-08"): Recallable =
  ## getListOpenIDConnectProviders
  ## Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604151 = newJObject()
  add(query_604151, "Action", newJString(Action))
  add(query_604151, "Version", newJString(Version))
  result = call_604150.call(nil, query_604151, nil, nil, nil)

var getListOpenIDConnectProviders* = Call_GetListOpenIDConnectProviders_604137(
    name: "getListOpenIDConnectProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListOpenIDConnectProviders",
    validator: validate_GetListOpenIDConnectProviders_604138, base: "/",
    url: url_GetListOpenIDConnectProviders_604139,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicies_604188 = ref object of OpenApiRestCall_600426
proc url_PostListPolicies_604190(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicies_604189(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604191 = query.getOrDefault("Action")
  valid_604191 = validateParameter(valid_604191, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_604191 != nil:
    section.add "Action", valid_604191
  var valid_604192 = query.getOrDefault("Version")
  valid_604192 = validateParameter(valid_604192, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604192 != nil:
    section.add "Version", valid_604192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604193 = header.getOrDefault("X-Amz-Date")
  valid_604193 = validateParameter(valid_604193, JString, required = false,
                                 default = nil)
  if valid_604193 != nil:
    section.add "X-Amz-Date", valid_604193
  var valid_604194 = header.getOrDefault("X-Amz-Security-Token")
  valid_604194 = validateParameter(valid_604194, JString, required = false,
                                 default = nil)
  if valid_604194 != nil:
    section.add "X-Amz-Security-Token", valid_604194
  var valid_604195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604195 = validateParameter(valid_604195, JString, required = false,
                                 default = nil)
  if valid_604195 != nil:
    section.add "X-Amz-Content-Sha256", valid_604195
  var valid_604196 = header.getOrDefault("X-Amz-Algorithm")
  valid_604196 = validateParameter(valid_604196, JString, required = false,
                                 default = nil)
  if valid_604196 != nil:
    section.add "X-Amz-Algorithm", valid_604196
  var valid_604197 = header.getOrDefault("X-Amz-Signature")
  valid_604197 = validateParameter(valid_604197, JString, required = false,
                                 default = nil)
  if valid_604197 != nil:
    section.add "X-Amz-Signature", valid_604197
  var valid_604198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604198 = validateParameter(valid_604198, JString, required = false,
                                 default = nil)
  if valid_604198 != nil:
    section.add "X-Amz-SignedHeaders", valid_604198
  var valid_604199 = header.getOrDefault("X-Amz-Credential")
  valid_604199 = validateParameter(valid_604199, JString, required = false,
                                 default = nil)
  if valid_604199 != nil:
    section.add "X-Amz-Credential", valid_604199
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604200 = formData.getOrDefault("PathPrefix")
  valid_604200 = validateParameter(valid_604200, JString, required = false,
                                 default = nil)
  if valid_604200 != nil:
    section.add "PathPrefix", valid_604200
  var valid_604201 = formData.getOrDefault("Marker")
  valid_604201 = validateParameter(valid_604201, JString, required = false,
                                 default = nil)
  if valid_604201 != nil:
    section.add "Marker", valid_604201
  var valid_604202 = formData.getOrDefault("PolicyUsageFilter")
  valid_604202 = validateParameter(valid_604202, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_604202 != nil:
    section.add "PolicyUsageFilter", valid_604202
  var valid_604203 = formData.getOrDefault("Scope")
  valid_604203 = validateParameter(valid_604203, JString, required = false,
                                 default = newJString("All"))
  if valid_604203 != nil:
    section.add "Scope", valid_604203
  var valid_604204 = formData.getOrDefault("OnlyAttached")
  valid_604204 = validateParameter(valid_604204, JBool, required = false, default = nil)
  if valid_604204 != nil:
    section.add "OnlyAttached", valid_604204
  var valid_604205 = formData.getOrDefault("MaxItems")
  valid_604205 = validateParameter(valid_604205, JInt, required = false, default = nil)
  if valid_604205 != nil:
    section.add "MaxItems", valid_604205
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604206: Call_PostListPolicies_604188; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604206.validator(path, query, header, formData, body)
  let scheme = call_604206.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604206.url(scheme.get, call_604206.host, call_604206.base,
                         call_604206.route, valid.getOrDefault("path"))
  result = hook(call_604206, url, valid)

proc call*(call_604207: Call_PostListPolicies_604188; PathPrefix: string = "";
          Marker: string = ""; PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Scope: string = "All";
          OnlyAttached: bool = false; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## postListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604208 = newJObject()
  var formData_604209 = newJObject()
  add(formData_604209, "PathPrefix", newJString(PathPrefix))
  add(formData_604209, "Marker", newJString(Marker))
  add(formData_604209, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_604208, "Action", newJString(Action))
  add(formData_604209, "Scope", newJString(Scope))
  add(formData_604209, "OnlyAttached", newJBool(OnlyAttached))
  add(formData_604209, "MaxItems", newJInt(MaxItems))
  add(query_604208, "Version", newJString(Version))
  result = call_604207.call(nil, query_604208, nil, formData_604209, nil)

var postListPolicies* = Call_PostListPolicies_604188(name: "postListPolicies",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_PostListPolicies_604189,
    base: "/", url: url_PostListPolicies_604190,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicies_604167 = ref object of OpenApiRestCall_600426
proc url_GetListPolicies_604169(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicies_604168(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: JString
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: JString
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: JBool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604170 = query.getOrDefault("PathPrefix")
  valid_604170 = validateParameter(valid_604170, JString, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "PathPrefix", valid_604170
  var valid_604171 = query.getOrDefault("PolicyUsageFilter")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = newJString("PermissionsPolicy"))
  if valid_604171 != nil:
    section.add "PolicyUsageFilter", valid_604171
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604172 = query.getOrDefault("Action")
  valid_604172 = validateParameter(valid_604172, JString, required = true,
                                 default = newJString("ListPolicies"))
  if valid_604172 != nil:
    section.add "Action", valid_604172
  var valid_604173 = query.getOrDefault("Marker")
  valid_604173 = validateParameter(valid_604173, JString, required = false,
                                 default = nil)
  if valid_604173 != nil:
    section.add "Marker", valid_604173
  var valid_604174 = query.getOrDefault("Scope")
  valid_604174 = validateParameter(valid_604174, JString, required = false,
                                 default = newJString("All"))
  if valid_604174 != nil:
    section.add "Scope", valid_604174
  var valid_604175 = query.getOrDefault("MaxItems")
  valid_604175 = validateParameter(valid_604175, JInt, required = false, default = nil)
  if valid_604175 != nil:
    section.add "MaxItems", valid_604175
  var valid_604176 = query.getOrDefault("OnlyAttached")
  valid_604176 = validateParameter(valid_604176, JBool, required = false, default = nil)
  if valid_604176 != nil:
    section.add "OnlyAttached", valid_604176
  var valid_604177 = query.getOrDefault("Version")
  valid_604177 = validateParameter(valid_604177, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604177 != nil:
    section.add "Version", valid_604177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604178 = header.getOrDefault("X-Amz-Date")
  valid_604178 = validateParameter(valid_604178, JString, required = false,
                                 default = nil)
  if valid_604178 != nil:
    section.add "X-Amz-Date", valid_604178
  var valid_604179 = header.getOrDefault("X-Amz-Security-Token")
  valid_604179 = validateParameter(valid_604179, JString, required = false,
                                 default = nil)
  if valid_604179 != nil:
    section.add "X-Amz-Security-Token", valid_604179
  var valid_604180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604180 = validateParameter(valid_604180, JString, required = false,
                                 default = nil)
  if valid_604180 != nil:
    section.add "X-Amz-Content-Sha256", valid_604180
  var valid_604181 = header.getOrDefault("X-Amz-Algorithm")
  valid_604181 = validateParameter(valid_604181, JString, required = false,
                                 default = nil)
  if valid_604181 != nil:
    section.add "X-Amz-Algorithm", valid_604181
  var valid_604182 = header.getOrDefault("X-Amz-Signature")
  valid_604182 = validateParameter(valid_604182, JString, required = false,
                                 default = nil)
  if valid_604182 != nil:
    section.add "X-Amz-Signature", valid_604182
  var valid_604183 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604183 = validateParameter(valid_604183, JString, required = false,
                                 default = nil)
  if valid_604183 != nil:
    section.add "X-Amz-SignedHeaders", valid_604183
  var valid_604184 = header.getOrDefault("X-Amz-Credential")
  valid_604184 = validateParameter(valid_604184, JString, required = false,
                                 default = nil)
  if valid_604184 != nil:
    section.add "X-Amz-Credential", valid_604184
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604185: Call_GetListPolicies_604167; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604185.validator(path, query, header, formData, body)
  let scheme = call_604185.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604185.url(scheme.get, call_604185.host, call_604185.base,
                         call_604185.route, valid.getOrDefault("path"))
  result = hook(call_604185, url, valid)

proc call*(call_604186: Call_GetListPolicies_604167; PathPrefix: string = "";
          PolicyUsageFilter: string = "PermissionsPolicy";
          Action: string = "ListPolicies"; Marker: string = ""; Scope: string = "All";
          MaxItems: int = 0; OnlyAttached: bool = false; Version: string = "2010-05-08"): Recallable =
  ## getListPolicies
  ## <p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PathPrefix: string
  ##             : The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
  ##   PolicyUsageFilter: string
  ##                    : <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions Boundaries for IAM Identities </a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Scope: string
  ##        : <p>The scope to use for filtering the results.</p> <p>To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   OnlyAttached: bool
  ##               : <p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p>
  ##   Version: string (required)
  var query_604187 = newJObject()
  add(query_604187, "PathPrefix", newJString(PathPrefix))
  add(query_604187, "PolicyUsageFilter", newJString(PolicyUsageFilter))
  add(query_604187, "Action", newJString(Action))
  add(query_604187, "Marker", newJString(Marker))
  add(query_604187, "Scope", newJString(Scope))
  add(query_604187, "MaxItems", newJInt(MaxItems))
  add(query_604187, "OnlyAttached", newJBool(OnlyAttached))
  add(query_604187, "Version", newJString(Version))
  result = call_604186.call(nil, query_604187, nil, nil, nil)

var getListPolicies* = Call_GetListPolicies_604167(name: "getListPolicies",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListPolicies", validator: validate_GetListPolicies_604168,
    base: "/", url: url_GetListPolicies_604169, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPoliciesGrantingServiceAccess_604228 = ref object of OpenApiRestCall_600426
proc url_PostListPoliciesGrantingServiceAccess_604230(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPoliciesGrantingServiceAccess_604229(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604231 = query.getOrDefault("Action")
  valid_604231 = validateParameter(valid_604231, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_604231 != nil:
    section.add "Action", valid_604231
  var valid_604232 = query.getOrDefault("Version")
  valid_604232 = validateParameter(valid_604232, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604232 != nil:
    section.add "Version", valid_604232
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604233 = header.getOrDefault("X-Amz-Date")
  valid_604233 = validateParameter(valid_604233, JString, required = false,
                                 default = nil)
  if valid_604233 != nil:
    section.add "X-Amz-Date", valid_604233
  var valid_604234 = header.getOrDefault("X-Amz-Security-Token")
  valid_604234 = validateParameter(valid_604234, JString, required = false,
                                 default = nil)
  if valid_604234 != nil:
    section.add "X-Amz-Security-Token", valid_604234
  var valid_604235 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604235 = validateParameter(valid_604235, JString, required = false,
                                 default = nil)
  if valid_604235 != nil:
    section.add "X-Amz-Content-Sha256", valid_604235
  var valid_604236 = header.getOrDefault("X-Amz-Algorithm")
  valid_604236 = validateParameter(valid_604236, JString, required = false,
                                 default = nil)
  if valid_604236 != nil:
    section.add "X-Amz-Algorithm", valid_604236
  var valid_604237 = header.getOrDefault("X-Amz-Signature")
  valid_604237 = validateParameter(valid_604237, JString, required = false,
                                 default = nil)
  if valid_604237 != nil:
    section.add "X-Amz-Signature", valid_604237
  var valid_604238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604238 = validateParameter(valid_604238, JString, required = false,
                                 default = nil)
  if valid_604238 != nil:
    section.add "X-Amz-SignedHeaders", valid_604238
  var valid_604239 = header.getOrDefault("X-Amz-Credential")
  valid_604239 = validateParameter(valid_604239, JString, required = false,
                                 default = nil)
  if valid_604239 != nil:
    section.add "X-Amz-Credential", valid_604239
  result.add "header", section
  ## parameters in `formData` object:
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Arn` field"
  var valid_604240 = formData.getOrDefault("Arn")
  valid_604240 = validateParameter(valid_604240, JString, required = true,
                                 default = nil)
  if valid_604240 != nil:
    section.add "Arn", valid_604240
  var valid_604241 = formData.getOrDefault("Marker")
  valid_604241 = validateParameter(valid_604241, JString, required = false,
                                 default = nil)
  if valid_604241 != nil:
    section.add "Marker", valid_604241
  var valid_604242 = formData.getOrDefault("ServiceNamespaces")
  valid_604242 = validateParameter(valid_604242, JArray, required = true, default = nil)
  if valid_604242 != nil:
    section.add "ServiceNamespaces", valid_604242
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604243: Call_PostListPoliciesGrantingServiceAccess_604228;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_604243.validator(path, query, header, formData, body)
  let scheme = call_604243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604243.url(scheme.get, call_604243.host, call_604243.base,
                         call_604243.route, valid.getOrDefault("path"))
  result = hook(call_604243, url, valid)

proc call*(call_604244: Call_PostListPoliciesGrantingServiceAccess_604228;
          Arn: string; ServiceNamespaces: JsonNode; Marker: string = "";
          Action: string = "ListPoliciesGrantingServiceAccess";
          Version: string = "2010-05-08"): Recallable =
  ## postListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604245 = newJObject()
  var formData_604246 = newJObject()
  add(formData_604246, "Arn", newJString(Arn))
  add(formData_604246, "Marker", newJString(Marker))
  if ServiceNamespaces != nil:
    formData_604246.add "ServiceNamespaces", ServiceNamespaces
  add(query_604245, "Action", newJString(Action))
  add(query_604245, "Version", newJString(Version))
  result = call_604244.call(nil, query_604245, nil, formData_604246, nil)

var postListPoliciesGrantingServiceAccess* = Call_PostListPoliciesGrantingServiceAccess_604228(
    name: "postListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_PostListPoliciesGrantingServiceAccess_604229, base: "/",
    url: url_PostListPoliciesGrantingServiceAccess_604230,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPoliciesGrantingServiceAccess_604210 = ref object of OpenApiRestCall_600426
proc url_GetListPoliciesGrantingServiceAccess_604212(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPoliciesGrantingServiceAccess_604211(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: JString (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceNamespaces` field"
  var valid_604213 = query.getOrDefault("ServiceNamespaces")
  valid_604213 = validateParameter(valid_604213, JArray, required = true, default = nil)
  if valid_604213 != nil:
    section.add "ServiceNamespaces", valid_604213
  var valid_604214 = query.getOrDefault("Action")
  valid_604214 = validateParameter(valid_604214, JString, required = true, default = newJString(
      "ListPoliciesGrantingServiceAccess"))
  if valid_604214 != nil:
    section.add "Action", valid_604214
  var valid_604215 = query.getOrDefault("Marker")
  valid_604215 = validateParameter(valid_604215, JString, required = false,
                                 default = nil)
  if valid_604215 != nil:
    section.add "Marker", valid_604215
  var valid_604216 = query.getOrDefault("Arn")
  valid_604216 = validateParameter(valid_604216, JString, required = true,
                                 default = nil)
  if valid_604216 != nil:
    section.add "Arn", valid_604216
  var valid_604217 = query.getOrDefault("Version")
  valid_604217 = validateParameter(valid_604217, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604217 != nil:
    section.add "Version", valid_604217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604218 = header.getOrDefault("X-Amz-Date")
  valid_604218 = validateParameter(valid_604218, JString, required = false,
                                 default = nil)
  if valid_604218 != nil:
    section.add "X-Amz-Date", valid_604218
  var valid_604219 = header.getOrDefault("X-Amz-Security-Token")
  valid_604219 = validateParameter(valid_604219, JString, required = false,
                                 default = nil)
  if valid_604219 != nil:
    section.add "X-Amz-Security-Token", valid_604219
  var valid_604220 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604220 = validateParameter(valid_604220, JString, required = false,
                                 default = nil)
  if valid_604220 != nil:
    section.add "X-Amz-Content-Sha256", valid_604220
  var valid_604221 = header.getOrDefault("X-Amz-Algorithm")
  valid_604221 = validateParameter(valid_604221, JString, required = false,
                                 default = nil)
  if valid_604221 != nil:
    section.add "X-Amz-Algorithm", valid_604221
  var valid_604222 = header.getOrDefault("X-Amz-Signature")
  valid_604222 = validateParameter(valid_604222, JString, required = false,
                                 default = nil)
  if valid_604222 != nil:
    section.add "X-Amz-Signature", valid_604222
  var valid_604223 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604223 = validateParameter(valid_604223, JString, required = false,
                                 default = nil)
  if valid_604223 != nil:
    section.add "X-Amz-SignedHeaders", valid_604223
  var valid_604224 = header.getOrDefault("X-Amz-Credential")
  valid_604224 = validateParameter(valid_604224, JString, required = false,
                                 default = nil)
  if valid_604224 != nil:
    section.add "X-Amz-Credential", valid_604224
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604225: Call_GetListPoliciesGrantingServiceAccess_604210;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ## 
  let valid = call_604225.validator(path, query, header, formData, body)
  let scheme = call_604225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604225.url(scheme.get, call_604225.host, call_604225.base,
                         call_604225.route, valid.getOrDefault("path"))
  result = hook(call_604225, url, valid)

proc call*(call_604226: Call_GetListPoliciesGrantingServiceAccess_604210;
          ServiceNamespaces: JsonNode; Arn: string;
          Action: string = "ListPoliciesGrantingServiceAccess"; Marker: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getListPoliciesGrantingServiceAccess
  ## <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, AWS Organizations policies, IAM permissions boundaries, and AWS STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating Policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
  ##   ServiceNamespaces: JArray (required)
  ##                    : <p>The service namespace for the AWS services whose policies you want to list.</p> <p>To learn the service namespace for a service, go to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_actions-resources-contextkeys.html">Actions, Resources, and Condition Keys for AWS Services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Arn: string (required)
  ##      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_604227 = newJObject()
  if ServiceNamespaces != nil:
    query_604227.add "ServiceNamespaces", ServiceNamespaces
  add(query_604227, "Action", newJString(Action))
  add(query_604227, "Marker", newJString(Marker))
  add(query_604227, "Arn", newJString(Arn))
  add(query_604227, "Version", newJString(Version))
  result = call_604226.call(nil, query_604227, nil, nil, nil)

var getListPoliciesGrantingServiceAccess* = Call_GetListPoliciesGrantingServiceAccess_604210(
    name: "getListPoliciesGrantingServiceAccess", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=ListPoliciesGrantingServiceAccess",
    validator: validate_GetListPoliciesGrantingServiceAccess_604211, base: "/",
    url: url_GetListPoliciesGrantingServiceAccess_604212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListPolicyVersions_604265 = ref object of OpenApiRestCall_600426
proc url_PostListPolicyVersions_604267(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListPolicyVersions_604266(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604268 = query.getOrDefault("Action")
  valid_604268 = validateParameter(valid_604268, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_604268 != nil:
    section.add "Action", valid_604268
  var valid_604269 = query.getOrDefault("Version")
  valid_604269 = validateParameter(valid_604269, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604269 != nil:
    section.add "Version", valid_604269
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604270 = header.getOrDefault("X-Amz-Date")
  valid_604270 = validateParameter(valid_604270, JString, required = false,
                                 default = nil)
  if valid_604270 != nil:
    section.add "X-Amz-Date", valid_604270
  var valid_604271 = header.getOrDefault("X-Amz-Security-Token")
  valid_604271 = validateParameter(valid_604271, JString, required = false,
                                 default = nil)
  if valid_604271 != nil:
    section.add "X-Amz-Security-Token", valid_604271
  var valid_604272 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604272 = validateParameter(valid_604272, JString, required = false,
                                 default = nil)
  if valid_604272 != nil:
    section.add "X-Amz-Content-Sha256", valid_604272
  var valid_604273 = header.getOrDefault("X-Amz-Algorithm")
  valid_604273 = validateParameter(valid_604273, JString, required = false,
                                 default = nil)
  if valid_604273 != nil:
    section.add "X-Amz-Algorithm", valid_604273
  var valid_604274 = header.getOrDefault("X-Amz-Signature")
  valid_604274 = validateParameter(valid_604274, JString, required = false,
                                 default = nil)
  if valid_604274 != nil:
    section.add "X-Amz-Signature", valid_604274
  var valid_604275 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604275 = validateParameter(valid_604275, JString, required = false,
                                 default = nil)
  if valid_604275 != nil:
    section.add "X-Amz-SignedHeaders", valid_604275
  var valid_604276 = header.getOrDefault("X-Amz-Credential")
  valid_604276 = validateParameter(valid_604276, JString, required = false,
                                 default = nil)
  if valid_604276 != nil:
    section.add "X-Amz-Credential", valid_604276
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_604277 = formData.getOrDefault("PolicyArn")
  valid_604277 = validateParameter(valid_604277, JString, required = true,
                                 default = nil)
  if valid_604277 != nil:
    section.add "PolicyArn", valid_604277
  var valid_604278 = formData.getOrDefault("Marker")
  valid_604278 = validateParameter(valid_604278, JString, required = false,
                                 default = nil)
  if valid_604278 != nil:
    section.add "Marker", valid_604278
  var valid_604279 = formData.getOrDefault("MaxItems")
  valid_604279 = validateParameter(valid_604279, JInt, required = false, default = nil)
  if valid_604279 != nil:
    section.add "MaxItems", valid_604279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604280: Call_PostListPolicyVersions_604265; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604280.validator(path, query, header, formData, body)
  let scheme = call_604280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604280.url(scheme.get, call_604280.host, call_604280.base,
                         call_604280.route, valid.getOrDefault("path"))
  result = hook(call_604280, url, valid)

proc call*(call_604281: Call_PostListPolicyVersions_604265; PolicyArn: string;
          Marker: string = ""; Action: string = "ListPolicyVersions"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604282 = newJObject()
  var formData_604283 = newJObject()
  add(formData_604283, "PolicyArn", newJString(PolicyArn))
  add(formData_604283, "Marker", newJString(Marker))
  add(query_604282, "Action", newJString(Action))
  add(formData_604283, "MaxItems", newJInt(MaxItems))
  add(query_604282, "Version", newJString(Version))
  result = call_604281.call(nil, query_604282, nil, formData_604283, nil)

var postListPolicyVersions* = Call_PostListPolicyVersions_604265(
    name: "postListPolicyVersions", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_PostListPolicyVersions_604266, base: "/",
    url: url_PostListPolicyVersions_604267, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListPolicyVersions_604247 = ref object of OpenApiRestCall_600426
proc url_GetListPolicyVersions_604249(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListPolicyVersions_604248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_604250 = query.getOrDefault("PolicyArn")
  valid_604250 = validateParameter(valid_604250, JString, required = true,
                                 default = nil)
  if valid_604250 != nil:
    section.add "PolicyArn", valid_604250
  var valid_604251 = query.getOrDefault("Action")
  valid_604251 = validateParameter(valid_604251, JString, required = true,
                                 default = newJString("ListPolicyVersions"))
  if valid_604251 != nil:
    section.add "Action", valid_604251
  var valid_604252 = query.getOrDefault("Marker")
  valid_604252 = validateParameter(valid_604252, JString, required = false,
                                 default = nil)
  if valid_604252 != nil:
    section.add "Marker", valid_604252
  var valid_604253 = query.getOrDefault("MaxItems")
  valid_604253 = validateParameter(valid_604253, JInt, required = false, default = nil)
  if valid_604253 != nil:
    section.add "MaxItems", valid_604253
  var valid_604254 = query.getOrDefault("Version")
  valid_604254 = validateParameter(valid_604254, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604254 != nil:
    section.add "Version", valid_604254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604255 = header.getOrDefault("X-Amz-Date")
  valid_604255 = validateParameter(valid_604255, JString, required = false,
                                 default = nil)
  if valid_604255 != nil:
    section.add "X-Amz-Date", valid_604255
  var valid_604256 = header.getOrDefault("X-Amz-Security-Token")
  valid_604256 = validateParameter(valid_604256, JString, required = false,
                                 default = nil)
  if valid_604256 != nil:
    section.add "X-Amz-Security-Token", valid_604256
  var valid_604257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604257 = validateParameter(valid_604257, JString, required = false,
                                 default = nil)
  if valid_604257 != nil:
    section.add "X-Amz-Content-Sha256", valid_604257
  var valid_604258 = header.getOrDefault("X-Amz-Algorithm")
  valid_604258 = validateParameter(valid_604258, JString, required = false,
                                 default = nil)
  if valid_604258 != nil:
    section.add "X-Amz-Algorithm", valid_604258
  var valid_604259 = header.getOrDefault("X-Amz-Signature")
  valid_604259 = validateParameter(valid_604259, JString, required = false,
                                 default = nil)
  if valid_604259 != nil:
    section.add "X-Amz-Signature", valid_604259
  var valid_604260 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604260 = validateParameter(valid_604260, JString, required = false,
                                 default = nil)
  if valid_604260 != nil:
    section.add "X-Amz-SignedHeaders", valid_604260
  var valid_604261 = header.getOrDefault("X-Amz-Credential")
  valid_604261 = validateParameter(valid_604261, JString, required = false,
                                 default = nil)
  if valid_604261 != nil:
    section.add "X-Amz-Credential", valid_604261
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604262: Call_GetListPolicyVersions_604247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_604262.validator(path, query, header, formData, body)
  let scheme = call_604262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604262.url(scheme.get, call_604262.host, call_604262.base,
                         call_604262.route, valid.getOrDefault("path"))
  result = hook(call_604262, url, valid)

proc call*(call_604263: Call_GetListPolicyVersions_604247; PolicyArn: string;
          Action: string = "ListPolicyVersions"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListPolicyVersions
  ## <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604264 = newJObject()
  add(query_604264, "PolicyArn", newJString(PolicyArn))
  add(query_604264, "Action", newJString(Action))
  add(query_604264, "Marker", newJString(Marker))
  add(query_604264, "MaxItems", newJInt(MaxItems))
  add(query_604264, "Version", newJString(Version))
  result = call_604263.call(nil, query_604264, nil, nil, nil)

var getListPolicyVersions* = Call_GetListPolicyVersions_604247(
    name: "getListPolicyVersions", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListPolicyVersions",
    validator: validate_GetListPolicyVersions_604248, base: "/",
    url: url_GetListPolicyVersions_604249, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRolePolicies_604302 = ref object of OpenApiRestCall_600426
proc url_PostListRolePolicies_604304(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRolePolicies_604303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604305 = query.getOrDefault("Action")
  valid_604305 = validateParameter(valid_604305, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_604305 != nil:
    section.add "Action", valid_604305
  var valid_604306 = query.getOrDefault("Version")
  valid_604306 = validateParameter(valid_604306, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604306 != nil:
    section.add "Version", valid_604306
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604307 = header.getOrDefault("X-Amz-Date")
  valid_604307 = validateParameter(valid_604307, JString, required = false,
                                 default = nil)
  if valid_604307 != nil:
    section.add "X-Amz-Date", valid_604307
  var valid_604308 = header.getOrDefault("X-Amz-Security-Token")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Security-Token", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-Content-Sha256", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Algorithm")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Algorithm", valid_604310
  var valid_604311 = header.getOrDefault("X-Amz-Signature")
  valid_604311 = validateParameter(valid_604311, JString, required = false,
                                 default = nil)
  if valid_604311 != nil:
    section.add "X-Amz-Signature", valid_604311
  var valid_604312 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "X-Amz-SignedHeaders", valid_604312
  var valid_604313 = header.getOrDefault("X-Amz-Credential")
  valid_604313 = validateParameter(valid_604313, JString, required = false,
                                 default = nil)
  if valid_604313 != nil:
    section.add "X-Amz-Credential", valid_604313
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604314 = formData.getOrDefault("RoleName")
  valid_604314 = validateParameter(valid_604314, JString, required = true,
                                 default = nil)
  if valid_604314 != nil:
    section.add "RoleName", valid_604314
  var valid_604315 = formData.getOrDefault("Marker")
  valid_604315 = validateParameter(valid_604315, JString, required = false,
                                 default = nil)
  if valid_604315 != nil:
    section.add "Marker", valid_604315
  var valid_604316 = formData.getOrDefault("MaxItems")
  valid_604316 = validateParameter(valid_604316, JInt, required = false, default = nil)
  if valid_604316 != nil:
    section.add "MaxItems", valid_604316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604317: Call_PostListRolePolicies_604302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_604317.validator(path, query, header, formData, body)
  let scheme = call_604317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604317.url(scheme.get, call_604317.host, call_604317.base,
                         call_604317.route, valid.getOrDefault("path"))
  result = hook(call_604317, url, valid)

proc call*(call_604318: Call_PostListRolePolicies_604302; RoleName: string;
          Marker: string = ""; Action: string = "ListRolePolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604319 = newJObject()
  var formData_604320 = newJObject()
  add(formData_604320, "RoleName", newJString(RoleName))
  add(formData_604320, "Marker", newJString(Marker))
  add(query_604319, "Action", newJString(Action))
  add(formData_604320, "MaxItems", newJInt(MaxItems))
  add(query_604319, "Version", newJString(Version))
  result = call_604318.call(nil, query_604319, nil, formData_604320, nil)

var postListRolePolicies* = Call_PostListRolePolicies_604302(
    name: "postListRolePolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_PostListRolePolicies_604303, base: "/",
    url: url_PostListRolePolicies_604304, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRolePolicies_604284 = ref object of OpenApiRestCall_600426
proc url_GetListRolePolicies_604286(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRolePolicies_604285(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604287 = query.getOrDefault("Action")
  valid_604287 = validateParameter(valid_604287, JString, required = true,
                                 default = newJString("ListRolePolicies"))
  if valid_604287 != nil:
    section.add "Action", valid_604287
  var valid_604288 = query.getOrDefault("Marker")
  valid_604288 = validateParameter(valid_604288, JString, required = false,
                                 default = nil)
  if valid_604288 != nil:
    section.add "Marker", valid_604288
  var valid_604289 = query.getOrDefault("MaxItems")
  valid_604289 = validateParameter(valid_604289, JInt, required = false, default = nil)
  if valid_604289 != nil:
    section.add "MaxItems", valid_604289
  var valid_604290 = query.getOrDefault("RoleName")
  valid_604290 = validateParameter(valid_604290, JString, required = true,
                                 default = nil)
  if valid_604290 != nil:
    section.add "RoleName", valid_604290
  var valid_604291 = query.getOrDefault("Version")
  valid_604291 = validateParameter(valid_604291, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604291 != nil:
    section.add "Version", valid_604291
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604292 = header.getOrDefault("X-Amz-Date")
  valid_604292 = validateParameter(valid_604292, JString, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "X-Amz-Date", valid_604292
  var valid_604293 = header.getOrDefault("X-Amz-Security-Token")
  valid_604293 = validateParameter(valid_604293, JString, required = false,
                                 default = nil)
  if valid_604293 != nil:
    section.add "X-Amz-Security-Token", valid_604293
  var valid_604294 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604294 = validateParameter(valid_604294, JString, required = false,
                                 default = nil)
  if valid_604294 != nil:
    section.add "X-Amz-Content-Sha256", valid_604294
  var valid_604295 = header.getOrDefault("X-Amz-Algorithm")
  valid_604295 = validateParameter(valid_604295, JString, required = false,
                                 default = nil)
  if valid_604295 != nil:
    section.add "X-Amz-Algorithm", valid_604295
  var valid_604296 = header.getOrDefault("X-Amz-Signature")
  valid_604296 = validateParameter(valid_604296, JString, required = false,
                                 default = nil)
  if valid_604296 != nil:
    section.add "X-Amz-Signature", valid_604296
  var valid_604297 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604297 = validateParameter(valid_604297, JString, required = false,
                                 default = nil)
  if valid_604297 != nil:
    section.add "X-Amz-SignedHeaders", valid_604297
  var valid_604298 = header.getOrDefault("X-Amz-Credential")
  valid_604298 = validateParameter(valid_604298, JString, required = false,
                                 default = nil)
  if valid_604298 != nil:
    section.add "X-Amz-Credential", valid_604298
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604299: Call_GetListRolePolicies_604284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ## 
  let valid = call_604299.validator(path, query, header, formData, body)
  let scheme = call_604299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604299.url(scheme.get, call_604299.host, call_604299.base,
                         call_604299.route, valid.getOrDefault("path"))
  result = hook(call_604299, url, valid)

proc call*(call_604300: Call_GetListRolePolicies_604284; RoleName: string;
          Action: string = "ListRolePolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRolePolicies
  ## <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604301 = newJObject()
  add(query_604301, "Action", newJString(Action))
  add(query_604301, "Marker", newJString(Marker))
  add(query_604301, "MaxItems", newJInt(MaxItems))
  add(query_604301, "RoleName", newJString(RoleName))
  add(query_604301, "Version", newJString(Version))
  result = call_604300.call(nil, query_604301, nil, nil, nil)

var getListRolePolicies* = Call_GetListRolePolicies_604284(
    name: "getListRolePolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListRolePolicies",
    validator: validate_GetListRolePolicies_604285, base: "/",
    url: url_GetListRolePolicies_604286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoleTags_604339 = ref object of OpenApiRestCall_600426
proc url_PostListRoleTags_604341(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoleTags_604340(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604342 = query.getOrDefault("Action")
  valid_604342 = validateParameter(valid_604342, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_604342 != nil:
    section.add "Action", valid_604342
  var valid_604343 = query.getOrDefault("Version")
  valid_604343 = validateParameter(valid_604343, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604343 != nil:
    section.add "Version", valid_604343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604344 = header.getOrDefault("X-Amz-Date")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Date", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-Security-Token")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-Security-Token", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-Content-Sha256", valid_604346
  var valid_604347 = header.getOrDefault("X-Amz-Algorithm")
  valid_604347 = validateParameter(valid_604347, JString, required = false,
                                 default = nil)
  if valid_604347 != nil:
    section.add "X-Amz-Algorithm", valid_604347
  var valid_604348 = header.getOrDefault("X-Amz-Signature")
  valid_604348 = validateParameter(valid_604348, JString, required = false,
                                 default = nil)
  if valid_604348 != nil:
    section.add "X-Amz-Signature", valid_604348
  var valid_604349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604349 = validateParameter(valid_604349, JString, required = false,
                                 default = nil)
  if valid_604349 != nil:
    section.add "X-Amz-SignedHeaders", valid_604349
  var valid_604350 = header.getOrDefault("X-Amz-Credential")
  valid_604350 = validateParameter(valid_604350, JString, required = false,
                                 default = nil)
  if valid_604350 != nil:
    section.add "X-Amz-Credential", valid_604350
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604351 = formData.getOrDefault("RoleName")
  valid_604351 = validateParameter(valid_604351, JString, required = true,
                                 default = nil)
  if valid_604351 != nil:
    section.add "RoleName", valid_604351
  var valid_604352 = formData.getOrDefault("Marker")
  valid_604352 = validateParameter(valid_604352, JString, required = false,
                                 default = nil)
  if valid_604352 != nil:
    section.add "Marker", valid_604352
  var valid_604353 = formData.getOrDefault("MaxItems")
  valid_604353 = validateParameter(valid_604353, JInt, required = false, default = nil)
  if valid_604353 != nil:
    section.add "MaxItems", valid_604353
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604354: Call_PostListRoleTags_604339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604354.validator(path, query, header, formData, body)
  let scheme = call_604354.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604354.url(scheme.get, call_604354.host, call_604354.base,
                         call_604354.route, valid.getOrDefault("path"))
  result = hook(call_604354, url, valid)

proc call*(call_604355: Call_PostListRoleTags_604339; RoleName: string;
          Marker: string = ""; Action: string = "ListRoleTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604356 = newJObject()
  var formData_604357 = newJObject()
  add(formData_604357, "RoleName", newJString(RoleName))
  add(formData_604357, "Marker", newJString(Marker))
  add(query_604356, "Action", newJString(Action))
  add(formData_604357, "MaxItems", newJInt(MaxItems))
  add(query_604356, "Version", newJString(Version))
  result = call_604355.call(nil, query_604356, nil, formData_604357, nil)

var postListRoleTags* = Call_PostListRoleTags_604339(name: "postListRoleTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_PostListRoleTags_604340,
    base: "/", url: url_PostListRoleTags_604341,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoleTags_604321 = ref object of OpenApiRestCall_600426
proc url_GetListRoleTags_604323(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoleTags_604322(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604324 = query.getOrDefault("Action")
  valid_604324 = validateParameter(valid_604324, JString, required = true,
                                 default = newJString("ListRoleTags"))
  if valid_604324 != nil:
    section.add "Action", valid_604324
  var valid_604325 = query.getOrDefault("Marker")
  valid_604325 = validateParameter(valid_604325, JString, required = false,
                                 default = nil)
  if valid_604325 != nil:
    section.add "Marker", valid_604325
  var valid_604326 = query.getOrDefault("MaxItems")
  valid_604326 = validateParameter(valid_604326, JInt, required = false, default = nil)
  if valid_604326 != nil:
    section.add "MaxItems", valid_604326
  var valid_604327 = query.getOrDefault("RoleName")
  valid_604327 = validateParameter(valid_604327, JString, required = true,
                                 default = nil)
  if valid_604327 != nil:
    section.add "RoleName", valid_604327
  var valid_604328 = query.getOrDefault("Version")
  valid_604328 = validateParameter(valid_604328, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604328 != nil:
    section.add "Version", valid_604328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604329 = header.getOrDefault("X-Amz-Date")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-Date", valid_604329
  var valid_604330 = header.getOrDefault("X-Amz-Security-Token")
  valid_604330 = validateParameter(valid_604330, JString, required = false,
                                 default = nil)
  if valid_604330 != nil:
    section.add "X-Amz-Security-Token", valid_604330
  var valid_604331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604331 = validateParameter(valid_604331, JString, required = false,
                                 default = nil)
  if valid_604331 != nil:
    section.add "X-Amz-Content-Sha256", valid_604331
  var valid_604332 = header.getOrDefault("X-Amz-Algorithm")
  valid_604332 = validateParameter(valid_604332, JString, required = false,
                                 default = nil)
  if valid_604332 != nil:
    section.add "X-Amz-Algorithm", valid_604332
  var valid_604333 = header.getOrDefault("X-Amz-Signature")
  valid_604333 = validateParameter(valid_604333, JString, required = false,
                                 default = nil)
  if valid_604333 != nil:
    section.add "X-Amz-Signature", valid_604333
  var valid_604334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604334 = validateParameter(valid_604334, JString, required = false,
                                 default = nil)
  if valid_604334 != nil:
    section.add "X-Amz-SignedHeaders", valid_604334
  var valid_604335 = header.getOrDefault("X-Amz-Credential")
  valid_604335 = validateParameter(valid_604335, JString, required = false,
                                 default = nil)
  if valid_604335 != nil:
    section.add "X-Amz-Credential", valid_604335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604336: Call_GetListRoleTags_604321; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604336.validator(path, query, header, formData, body)
  let scheme = call_604336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604336.url(scheme.get, call_604336.host, call_604336.base,
                         call_604336.route, valid.getOrDefault("path"))
  result = hook(call_604336, url, valid)

proc call*(call_604337: Call_GetListRoleTags_604321; RoleName: string;
          Action: string = "ListRoleTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoleTags
  ## Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604338 = newJObject()
  add(query_604338, "Action", newJString(Action))
  add(query_604338, "Marker", newJString(Marker))
  add(query_604338, "MaxItems", newJInt(MaxItems))
  add(query_604338, "RoleName", newJString(RoleName))
  add(query_604338, "Version", newJString(Version))
  result = call_604337.call(nil, query_604338, nil, nil, nil)

var getListRoleTags* = Call_GetListRoleTags_604321(name: "getListRoleTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoleTags", validator: validate_GetListRoleTags_604322,
    base: "/", url: url_GetListRoleTags_604323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListRoles_604376 = ref object of OpenApiRestCall_600426
proc url_PostListRoles_604378(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListRoles_604377(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604379 = query.getOrDefault("Action")
  valid_604379 = validateParameter(valid_604379, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_604379 != nil:
    section.add "Action", valid_604379
  var valid_604380 = query.getOrDefault("Version")
  valid_604380 = validateParameter(valid_604380, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604380 != nil:
    section.add "Version", valid_604380
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604381 = header.getOrDefault("X-Amz-Date")
  valid_604381 = validateParameter(valid_604381, JString, required = false,
                                 default = nil)
  if valid_604381 != nil:
    section.add "X-Amz-Date", valid_604381
  var valid_604382 = header.getOrDefault("X-Amz-Security-Token")
  valid_604382 = validateParameter(valid_604382, JString, required = false,
                                 default = nil)
  if valid_604382 != nil:
    section.add "X-Amz-Security-Token", valid_604382
  var valid_604383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604383 = validateParameter(valid_604383, JString, required = false,
                                 default = nil)
  if valid_604383 != nil:
    section.add "X-Amz-Content-Sha256", valid_604383
  var valid_604384 = header.getOrDefault("X-Amz-Algorithm")
  valid_604384 = validateParameter(valid_604384, JString, required = false,
                                 default = nil)
  if valid_604384 != nil:
    section.add "X-Amz-Algorithm", valid_604384
  var valid_604385 = header.getOrDefault("X-Amz-Signature")
  valid_604385 = validateParameter(valid_604385, JString, required = false,
                                 default = nil)
  if valid_604385 != nil:
    section.add "X-Amz-Signature", valid_604385
  var valid_604386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604386 = validateParameter(valid_604386, JString, required = false,
                                 default = nil)
  if valid_604386 != nil:
    section.add "X-Amz-SignedHeaders", valid_604386
  var valid_604387 = header.getOrDefault("X-Amz-Credential")
  valid_604387 = validateParameter(valid_604387, JString, required = false,
                                 default = nil)
  if valid_604387 != nil:
    section.add "X-Amz-Credential", valid_604387
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604388 = formData.getOrDefault("PathPrefix")
  valid_604388 = validateParameter(valid_604388, JString, required = false,
                                 default = nil)
  if valid_604388 != nil:
    section.add "PathPrefix", valid_604388
  var valid_604389 = formData.getOrDefault("Marker")
  valid_604389 = validateParameter(valid_604389, JString, required = false,
                                 default = nil)
  if valid_604389 != nil:
    section.add "Marker", valid_604389
  var valid_604390 = formData.getOrDefault("MaxItems")
  valid_604390 = validateParameter(valid_604390, JInt, required = false, default = nil)
  if valid_604390 != nil:
    section.add "MaxItems", valid_604390
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604391: Call_PostListRoles_604376; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604391.validator(path, query, header, formData, body)
  let scheme = call_604391.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604391.url(scheme.get, call_604391.host, call_604391.base,
                         call_604391.route, valid.getOrDefault("path"))
  result = hook(call_604391, url, valid)

proc call*(call_604392: Call_PostListRoles_604376; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListRoles"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604393 = newJObject()
  var formData_604394 = newJObject()
  add(formData_604394, "PathPrefix", newJString(PathPrefix))
  add(formData_604394, "Marker", newJString(Marker))
  add(query_604393, "Action", newJString(Action))
  add(formData_604394, "MaxItems", newJInt(MaxItems))
  add(query_604393, "Version", newJString(Version))
  result = call_604392.call(nil, query_604393, nil, formData_604394, nil)

var postListRoles* = Call_PostListRoles_604376(name: "postListRoles",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_PostListRoles_604377,
    base: "/", url: url_PostListRoles_604378, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListRoles_604358 = ref object of OpenApiRestCall_600426
proc url_GetListRoles_604360(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListRoles_604359(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604361 = query.getOrDefault("PathPrefix")
  valid_604361 = validateParameter(valid_604361, JString, required = false,
                                 default = nil)
  if valid_604361 != nil:
    section.add "PathPrefix", valid_604361
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604362 = query.getOrDefault("Action")
  valid_604362 = validateParameter(valid_604362, JString, required = true,
                                 default = newJString("ListRoles"))
  if valid_604362 != nil:
    section.add "Action", valid_604362
  var valid_604363 = query.getOrDefault("Marker")
  valid_604363 = validateParameter(valid_604363, JString, required = false,
                                 default = nil)
  if valid_604363 != nil:
    section.add "Marker", valid_604363
  var valid_604364 = query.getOrDefault("MaxItems")
  valid_604364 = validateParameter(valid_604364, JInt, required = false, default = nil)
  if valid_604364 != nil:
    section.add "MaxItems", valid_604364
  var valid_604365 = query.getOrDefault("Version")
  valid_604365 = validateParameter(valid_604365, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604365 != nil:
    section.add "Version", valid_604365
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604366 = header.getOrDefault("X-Amz-Date")
  valid_604366 = validateParameter(valid_604366, JString, required = false,
                                 default = nil)
  if valid_604366 != nil:
    section.add "X-Amz-Date", valid_604366
  var valid_604367 = header.getOrDefault("X-Amz-Security-Token")
  valid_604367 = validateParameter(valid_604367, JString, required = false,
                                 default = nil)
  if valid_604367 != nil:
    section.add "X-Amz-Security-Token", valid_604367
  var valid_604368 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604368 = validateParameter(valid_604368, JString, required = false,
                                 default = nil)
  if valid_604368 != nil:
    section.add "X-Amz-Content-Sha256", valid_604368
  var valid_604369 = header.getOrDefault("X-Amz-Algorithm")
  valid_604369 = validateParameter(valid_604369, JString, required = false,
                                 default = nil)
  if valid_604369 != nil:
    section.add "X-Amz-Algorithm", valid_604369
  var valid_604370 = header.getOrDefault("X-Amz-Signature")
  valid_604370 = validateParameter(valid_604370, JString, required = false,
                                 default = nil)
  if valid_604370 != nil:
    section.add "X-Amz-Signature", valid_604370
  var valid_604371 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604371 = validateParameter(valid_604371, JString, required = false,
                                 default = nil)
  if valid_604371 != nil:
    section.add "X-Amz-SignedHeaders", valid_604371
  var valid_604372 = header.getOrDefault("X-Amz-Credential")
  valid_604372 = validateParameter(valid_604372, JString, required = false,
                                 default = nil)
  if valid_604372 != nil:
    section.add "X-Amz-Credential", valid_604372
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604373: Call_GetListRoles_604358; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604373.validator(path, query, header, formData, body)
  let scheme = call_604373.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604373.url(scheme.get, call_604373.host, call_604373.base,
                         call_604373.route, valid.getOrDefault("path"))
  result = hook(call_604373, url, valid)

proc call*(call_604374: Call_GetListRoles_604358; PathPrefix: string = "";
          Action: string = "ListRoles"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListRoles
  ## <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604375 = newJObject()
  add(query_604375, "PathPrefix", newJString(PathPrefix))
  add(query_604375, "Action", newJString(Action))
  add(query_604375, "Marker", newJString(Marker))
  add(query_604375, "MaxItems", newJInt(MaxItems))
  add(query_604375, "Version", newJString(Version))
  result = call_604374.call(nil, query_604375, nil, nil, nil)

var getListRoles* = Call_GetListRoles_604358(name: "getListRoles",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListRoles", validator: validate_GetListRoles_604359, base: "/",
    url: url_GetListRoles_604360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSAMLProviders_604410 = ref object of OpenApiRestCall_600426
proc url_PostListSAMLProviders_604412(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSAMLProviders_604411(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604413 = query.getOrDefault("Action")
  valid_604413 = validateParameter(valid_604413, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_604413 != nil:
    section.add "Action", valid_604413
  var valid_604414 = query.getOrDefault("Version")
  valid_604414 = validateParameter(valid_604414, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604414 != nil:
    section.add "Version", valid_604414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604415 = header.getOrDefault("X-Amz-Date")
  valid_604415 = validateParameter(valid_604415, JString, required = false,
                                 default = nil)
  if valid_604415 != nil:
    section.add "X-Amz-Date", valid_604415
  var valid_604416 = header.getOrDefault("X-Amz-Security-Token")
  valid_604416 = validateParameter(valid_604416, JString, required = false,
                                 default = nil)
  if valid_604416 != nil:
    section.add "X-Amz-Security-Token", valid_604416
  var valid_604417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604417 = validateParameter(valid_604417, JString, required = false,
                                 default = nil)
  if valid_604417 != nil:
    section.add "X-Amz-Content-Sha256", valid_604417
  var valid_604418 = header.getOrDefault("X-Amz-Algorithm")
  valid_604418 = validateParameter(valid_604418, JString, required = false,
                                 default = nil)
  if valid_604418 != nil:
    section.add "X-Amz-Algorithm", valid_604418
  var valid_604419 = header.getOrDefault("X-Amz-Signature")
  valid_604419 = validateParameter(valid_604419, JString, required = false,
                                 default = nil)
  if valid_604419 != nil:
    section.add "X-Amz-Signature", valid_604419
  var valid_604420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604420 = validateParameter(valid_604420, JString, required = false,
                                 default = nil)
  if valid_604420 != nil:
    section.add "X-Amz-SignedHeaders", valid_604420
  var valid_604421 = header.getOrDefault("X-Amz-Credential")
  valid_604421 = validateParameter(valid_604421, JString, required = false,
                                 default = nil)
  if valid_604421 != nil:
    section.add "X-Amz-Credential", valid_604421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604422: Call_PostListSAMLProviders_604410; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_604422.validator(path, query, header, formData, body)
  let scheme = call_604422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604422.url(scheme.get, call_604422.host, call_604422.base,
                         call_604422.route, valid.getOrDefault("path"))
  result = hook(call_604422, url, valid)

proc call*(call_604423: Call_PostListSAMLProviders_604410;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## postListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604424 = newJObject()
  add(query_604424, "Action", newJString(Action))
  add(query_604424, "Version", newJString(Version))
  result = call_604423.call(nil, query_604424, nil, nil, nil)

var postListSAMLProviders* = Call_PostListSAMLProviders_604410(
    name: "postListSAMLProviders", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_PostListSAMLProviders_604411, base: "/",
    url: url_PostListSAMLProviders_604412, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSAMLProviders_604395 = ref object of OpenApiRestCall_600426
proc url_GetListSAMLProviders_604397(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSAMLProviders_604396(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604398 = query.getOrDefault("Action")
  valid_604398 = validateParameter(valid_604398, JString, required = true,
                                 default = newJString("ListSAMLProviders"))
  if valid_604398 != nil:
    section.add "Action", valid_604398
  var valid_604399 = query.getOrDefault("Version")
  valid_604399 = validateParameter(valid_604399, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604399 != nil:
    section.add "Version", valid_604399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604400 = header.getOrDefault("X-Amz-Date")
  valid_604400 = validateParameter(valid_604400, JString, required = false,
                                 default = nil)
  if valid_604400 != nil:
    section.add "X-Amz-Date", valid_604400
  var valid_604401 = header.getOrDefault("X-Amz-Security-Token")
  valid_604401 = validateParameter(valid_604401, JString, required = false,
                                 default = nil)
  if valid_604401 != nil:
    section.add "X-Amz-Security-Token", valid_604401
  var valid_604402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604402 = validateParameter(valid_604402, JString, required = false,
                                 default = nil)
  if valid_604402 != nil:
    section.add "X-Amz-Content-Sha256", valid_604402
  var valid_604403 = header.getOrDefault("X-Amz-Algorithm")
  valid_604403 = validateParameter(valid_604403, JString, required = false,
                                 default = nil)
  if valid_604403 != nil:
    section.add "X-Amz-Algorithm", valid_604403
  var valid_604404 = header.getOrDefault("X-Amz-Signature")
  valid_604404 = validateParameter(valid_604404, JString, required = false,
                                 default = nil)
  if valid_604404 != nil:
    section.add "X-Amz-Signature", valid_604404
  var valid_604405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "X-Amz-SignedHeaders", valid_604405
  var valid_604406 = header.getOrDefault("X-Amz-Credential")
  valid_604406 = validateParameter(valid_604406, JString, required = false,
                                 default = nil)
  if valid_604406 != nil:
    section.add "X-Amz-Credential", valid_604406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604407: Call_GetListSAMLProviders_604395; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_604407.validator(path, query, header, formData, body)
  let scheme = call_604407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604407.url(scheme.get, call_604407.host, call_604407.base,
                         call_604407.route, valid.getOrDefault("path"))
  result = hook(call_604407, url, valid)

proc call*(call_604408: Call_GetListSAMLProviders_604395;
          Action: string = "ListSAMLProviders"; Version: string = "2010-05-08"): Recallable =
  ## getListSAMLProviders
  ## <p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604409 = newJObject()
  add(query_604409, "Action", newJString(Action))
  add(query_604409, "Version", newJString(Version))
  result = call_604408.call(nil, query_604409, nil, nil, nil)

var getListSAMLProviders* = Call_GetListSAMLProviders_604395(
    name: "getListSAMLProviders", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSAMLProviders",
    validator: validate_GetListSAMLProviders_604396, base: "/",
    url: url_GetListSAMLProviders_604397, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSSHPublicKeys_604443 = ref object of OpenApiRestCall_600426
proc url_PostListSSHPublicKeys_604445(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSSHPublicKeys_604444(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604446 = query.getOrDefault("Action")
  valid_604446 = validateParameter(valid_604446, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_604446 != nil:
    section.add "Action", valid_604446
  var valid_604447 = query.getOrDefault("Version")
  valid_604447 = validateParameter(valid_604447, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604447 != nil:
    section.add "Version", valid_604447
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604448 = header.getOrDefault("X-Amz-Date")
  valid_604448 = validateParameter(valid_604448, JString, required = false,
                                 default = nil)
  if valid_604448 != nil:
    section.add "X-Amz-Date", valid_604448
  var valid_604449 = header.getOrDefault("X-Amz-Security-Token")
  valid_604449 = validateParameter(valid_604449, JString, required = false,
                                 default = nil)
  if valid_604449 != nil:
    section.add "X-Amz-Security-Token", valid_604449
  var valid_604450 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604450 = validateParameter(valid_604450, JString, required = false,
                                 default = nil)
  if valid_604450 != nil:
    section.add "X-Amz-Content-Sha256", valid_604450
  var valid_604451 = header.getOrDefault("X-Amz-Algorithm")
  valid_604451 = validateParameter(valid_604451, JString, required = false,
                                 default = nil)
  if valid_604451 != nil:
    section.add "X-Amz-Algorithm", valid_604451
  var valid_604452 = header.getOrDefault("X-Amz-Signature")
  valid_604452 = validateParameter(valid_604452, JString, required = false,
                                 default = nil)
  if valid_604452 != nil:
    section.add "X-Amz-Signature", valid_604452
  var valid_604453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604453 = validateParameter(valid_604453, JString, required = false,
                                 default = nil)
  if valid_604453 != nil:
    section.add "X-Amz-SignedHeaders", valid_604453
  var valid_604454 = header.getOrDefault("X-Amz-Credential")
  valid_604454 = validateParameter(valid_604454, JString, required = false,
                                 default = nil)
  if valid_604454 != nil:
    section.add "X-Amz-Credential", valid_604454
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604455 = formData.getOrDefault("UserName")
  valid_604455 = validateParameter(valid_604455, JString, required = false,
                                 default = nil)
  if valid_604455 != nil:
    section.add "UserName", valid_604455
  var valid_604456 = formData.getOrDefault("Marker")
  valid_604456 = validateParameter(valid_604456, JString, required = false,
                                 default = nil)
  if valid_604456 != nil:
    section.add "Marker", valid_604456
  var valid_604457 = formData.getOrDefault("MaxItems")
  valid_604457 = validateParameter(valid_604457, JInt, required = false, default = nil)
  if valid_604457 != nil:
    section.add "MaxItems", valid_604457
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604458: Call_PostListSSHPublicKeys_604443; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604458.validator(path, query, header, formData, body)
  let scheme = call_604458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604458.url(scheme.get, call_604458.host, call_604458.base,
                         call_604458.route, valid.getOrDefault("path"))
  result = hook(call_604458, url, valid)

proc call*(call_604459: Call_PostListSSHPublicKeys_604443; UserName: string = "";
          Marker: string = ""; Action: string = "ListSSHPublicKeys"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604460 = newJObject()
  var formData_604461 = newJObject()
  add(formData_604461, "UserName", newJString(UserName))
  add(formData_604461, "Marker", newJString(Marker))
  add(query_604460, "Action", newJString(Action))
  add(formData_604461, "MaxItems", newJInt(MaxItems))
  add(query_604460, "Version", newJString(Version))
  result = call_604459.call(nil, query_604460, nil, formData_604461, nil)

var postListSSHPublicKeys* = Call_PostListSSHPublicKeys_604443(
    name: "postListSSHPublicKeys", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_PostListSSHPublicKeys_604444, base: "/",
    url: url_PostListSSHPublicKeys_604445, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSSHPublicKeys_604425 = ref object of OpenApiRestCall_600426
proc url_GetListSSHPublicKeys_604427(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSSHPublicKeys_604426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604428 = query.getOrDefault("UserName")
  valid_604428 = validateParameter(valid_604428, JString, required = false,
                                 default = nil)
  if valid_604428 != nil:
    section.add "UserName", valid_604428
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604429 = query.getOrDefault("Action")
  valid_604429 = validateParameter(valid_604429, JString, required = true,
                                 default = newJString("ListSSHPublicKeys"))
  if valid_604429 != nil:
    section.add "Action", valid_604429
  var valid_604430 = query.getOrDefault("Marker")
  valid_604430 = validateParameter(valid_604430, JString, required = false,
                                 default = nil)
  if valid_604430 != nil:
    section.add "Marker", valid_604430
  var valid_604431 = query.getOrDefault("MaxItems")
  valid_604431 = validateParameter(valid_604431, JInt, required = false, default = nil)
  if valid_604431 != nil:
    section.add "MaxItems", valid_604431
  var valid_604432 = query.getOrDefault("Version")
  valid_604432 = validateParameter(valid_604432, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604432 != nil:
    section.add "Version", valid_604432
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604433 = header.getOrDefault("X-Amz-Date")
  valid_604433 = validateParameter(valid_604433, JString, required = false,
                                 default = nil)
  if valid_604433 != nil:
    section.add "X-Amz-Date", valid_604433
  var valid_604434 = header.getOrDefault("X-Amz-Security-Token")
  valid_604434 = validateParameter(valid_604434, JString, required = false,
                                 default = nil)
  if valid_604434 != nil:
    section.add "X-Amz-Security-Token", valid_604434
  var valid_604435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604435 = validateParameter(valid_604435, JString, required = false,
                                 default = nil)
  if valid_604435 != nil:
    section.add "X-Amz-Content-Sha256", valid_604435
  var valid_604436 = header.getOrDefault("X-Amz-Algorithm")
  valid_604436 = validateParameter(valid_604436, JString, required = false,
                                 default = nil)
  if valid_604436 != nil:
    section.add "X-Amz-Algorithm", valid_604436
  var valid_604437 = header.getOrDefault("X-Amz-Signature")
  valid_604437 = validateParameter(valid_604437, JString, required = false,
                                 default = nil)
  if valid_604437 != nil:
    section.add "X-Amz-Signature", valid_604437
  var valid_604438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604438 = validateParameter(valid_604438, JString, required = false,
                                 default = nil)
  if valid_604438 != nil:
    section.add "X-Amz-SignedHeaders", valid_604438
  var valid_604439 = header.getOrDefault("X-Amz-Credential")
  valid_604439 = validateParameter(valid_604439, JString, required = false,
                                 default = nil)
  if valid_604439 != nil:
    section.add "X-Amz-Credential", valid_604439
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604440: Call_GetListSSHPublicKeys_604425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604440.validator(path, query, header, formData, body)
  let scheme = call_604440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604440.url(scheme.get, call_604440.host, call_604440.base,
                         call_604440.route, valid.getOrDefault("path"))
  result = hook(call_604440, url, valid)

proc call*(call_604441: Call_GetListSSHPublicKeys_604425; UserName: string = "";
          Action: string = "ListSSHPublicKeys"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListSSHPublicKeys
  ## <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the AWS access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604442 = newJObject()
  add(query_604442, "UserName", newJString(UserName))
  add(query_604442, "Action", newJString(Action))
  add(query_604442, "Marker", newJString(Marker))
  add(query_604442, "MaxItems", newJInt(MaxItems))
  add(query_604442, "Version", newJString(Version))
  result = call_604441.call(nil, query_604442, nil, nil, nil)

var getListSSHPublicKeys* = Call_GetListSSHPublicKeys_604425(
    name: "getListSSHPublicKeys", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSSHPublicKeys",
    validator: validate_GetListSSHPublicKeys_604426, base: "/",
    url: url_GetListSSHPublicKeys_604427, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServerCertificates_604480 = ref object of OpenApiRestCall_600426
proc url_PostListServerCertificates_604482(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServerCertificates_604481(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604483 = query.getOrDefault("Action")
  valid_604483 = validateParameter(valid_604483, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_604483 != nil:
    section.add "Action", valid_604483
  var valid_604484 = query.getOrDefault("Version")
  valid_604484 = validateParameter(valid_604484, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604484 != nil:
    section.add "Version", valid_604484
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604485 = header.getOrDefault("X-Amz-Date")
  valid_604485 = validateParameter(valid_604485, JString, required = false,
                                 default = nil)
  if valid_604485 != nil:
    section.add "X-Amz-Date", valid_604485
  var valid_604486 = header.getOrDefault("X-Amz-Security-Token")
  valid_604486 = validateParameter(valid_604486, JString, required = false,
                                 default = nil)
  if valid_604486 != nil:
    section.add "X-Amz-Security-Token", valid_604486
  var valid_604487 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Content-Sha256", valid_604487
  var valid_604488 = header.getOrDefault("X-Amz-Algorithm")
  valid_604488 = validateParameter(valid_604488, JString, required = false,
                                 default = nil)
  if valid_604488 != nil:
    section.add "X-Amz-Algorithm", valid_604488
  var valid_604489 = header.getOrDefault("X-Amz-Signature")
  valid_604489 = validateParameter(valid_604489, JString, required = false,
                                 default = nil)
  if valid_604489 != nil:
    section.add "X-Amz-Signature", valid_604489
  var valid_604490 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604490 = validateParameter(valid_604490, JString, required = false,
                                 default = nil)
  if valid_604490 != nil:
    section.add "X-Amz-SignedHeaders", valid_604490
  var valid_604491 = header.getOrDefault("X-Amz-Credential")
  valid_604491 = validateParameter(valid_604491, JString, required = false,
                                 default = nil)
  if valid_604491 != nil:
    section.add "X-Amz-Credential", valid_604491
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604492 = formData.getOrDefault("PathPrefix")
  valid_604492 = validateParameter(valid_604492, JString, required = false,
                                 default = nil)
  if valid_604492 != nil:
    section.add "PathPrefix", valid_604492
  var valid_604493 = formData.getOrDefault("Marker")
  valid_604493 = validateParameter(valid_604493, JString, required = false,
                                 default = nil)
  if valid_604493 != nil:
    section.add "Marker", valid_604493
  var valid_604494 = formData.getOrDefault("MaxItems")
  valid_604494 = validateParameter(valid_604494, JInt, required = false, default = nil)
  if valid_604494 != nil:
    section.add "MaxItems", valid_604494
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604495: Call_PostListServerCertificates_604480; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_604495.validator(path, query, header, formData, body)
  let scheme = call_604495.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604495.url(scheme.get, call_604495.host, call_604495.base,
                         call_604495.route, valid.getOrDefault("path"))
  result = hook(call_604495, url, valid)

proc call*(call_604496: Call_PostListServerCertificates_604480;
          PathPrefix: string = ""; Marker: string = "";
          Action: string = "ListServerCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604497 = newJObject()
  var formData_604498 = newJObject()
  add(formData_604498, "PathPrefix", newJString(PathPrefix))
  add(formData_604498, "Marker", newJString(Marker))
  add(query_604497, "Action", newJString(Action))
  add(formData_604498, "MaxItems", newJInt(MaxItems))
  add(query_604497, "Version", newJString(Version))
  result = call_604496.call(nil, query_604497, nil, formData_604498, nil)

var postListServerCertificates* = Call_PostListServerCertificates_604480(
    name: "postListServerCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_PostListServerCertificates_604481, base: "/",
    url: url_PostListServerCertificates_604482,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServerCertificates_604462 = ref object of OpenApiRestCall_600426
proc url_GetListServerCertificates_604464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServerCertificates_604463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604465 = query.getOrDefault("PathPrefix")
  valid_604465 = validateParameter(valid_604465, JString, required = false,
                                 default = nil)
  if valid_604465 != nil:
    section.add "PathPrefix", valid_604465
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604466 = query.getOrDefault("Action")
  valid_604466 = validateParameter(valid_604466, JString, required = true,
                                 default = newJString("ListServerCertificates"))
  if valid_604466 != nil:
    section.add "Action", valid_604466
  var valid_604467 = query.getOrDefault("Marker")
  valid_604467 = validateParameter(valid_604467, JString, required = false,
                                 default = nil)
  if valid_604467 != nil:
    section.add "Marker", valid_604467
  var valid_604468 = query.getOrDefault("MaxItems")
  valid_604468 = validateParameter(valid_604468, JInt, required = false, default = nil)
  if valid_604468 != nil:
    section.add "MaxItems", valid_604468
  var valid_604469 = query.getOrDefault("Version")
  valid_604469 = validateParameter(valid_604469, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604469 != nil:
    section.add "Version", valid_604469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604470 = header.getOrDefault("X-Amz-Date")
  valid_604470 = validateParameter(valid_604470, JString, required = false,
                                 default = nil)
  if valid_604470 != nil:
    section.add "X-Amz-Date", valid_604470
  var valid_604471 = header.getOrDefault("X-Amz-Security-Token")
  valid_604471 = validateParameter(valid_604471, JString, required = false,
                                 default = nil)
  if valid_604471 != nil:
    section.add "X-Amz-Security-Token", valid_604471
  var valid_604472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604472 = validateParameter(valid_604472, JString, required = false,
                                 default = nil)
  if valid_604472 != nil:
    section.add "X-Amz-Content-Sha256", valid_604472
  var valid_604473 = header.getOrDefault("X-Amz-Algorithm")
  valid_604473 = validateParameter(valid_604473, JString, required = false,
                                 default = nil)
  if valid_604473 != nil:
    section.add "X-Amz-Algorithm", valid_604473
  var valid_604474 = header.getOrDefault("X-Amz-Signature")
  valid_604474 = validateParameter(valid_604474, JString, required = false,
                                 default = nil)
  if valid_604474 != nil:
    section.add "X-Amz-Signature", valid_604474
  var valid_604475 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604475 = validateParameter(valid_604475, JString, required = false,
                                 default = nil)
  if valid_604475 != nil:
    section.add "X-Amz-SignedHeaders", valid_604475
  var valid_604476 = header.getOrDefault("X-Amz-Credential")
  valid_604476 = validateParameter(valid_604476, JString, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "X-Amz-Credential", valid_604476
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604477: Call_GetListServerCertificates_604462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ## 
  let valid = call_604477.validator(path, query, header, formData, body)
  let scheme = call_604477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604477.url(scheme.get, call_604477.host, call_604477.base,
                         call_604477.route, valid.getOrDefault("path"))
  result = hook(call_604477, url, valid)

proc call*(call_604478: Call_GetListServerCertificates_604462;
          PathPrefix: string = ""; Action: string = "ListServerCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListServerCertificates
  ## <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604479 = newJObject()
  add(query_604479, "PathPrefix", newJString(PathPrefix))
  add(query_604479, "Action", newJString(Action))
  add(query_604479, "Marker", newJString(Marker))
  add(query_604479, "MaxItems", newJInt(MaxItems))
  add(query_604479, "Version", newJString(Version))
  result = call_604478.call(nil, query_604479, nil, nil, nil)

var getListServerCertificates* = Call_GetListServerCertificates_604462(
    name: "getListServerCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServerCertificates",
    validator: validate_GetListServerCertificates_604463, base: "/",
    url: url_GetListServerCertificates_604464,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListServiceSpecificCredentials_604516 = ref object of OpenApiRestCall_600426
proc url_PostListServiceSpecificCredentials_604518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListServiceSpecificCredentials_604517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604519 = query.getOrDefault("Action")
  valid_604519 = validateParameter(valid_604519, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_604519 != nil:
    section.add "Action", valid_604519
  var valid_604520 = query.getOrDefault("Version")
  valid_604520 = validateParameter(valid_604520, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604520 != nil:
    section.add "Version", valid_604520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604521 = header.getOrDefault("X-Amz-Date")
  valid_604521 = validateParameter(valid_604521, JString, required = false,
                                 default = nil)
  if valid_604521 != nil:
    section.add "X-Amz-Date", valid_604521
  var valid_604522 = header.getOrDefault("X-Amz-Security-Token")
  valid_604522 = validateParameter(valid_604522, JString, required = false,
                                 default = nil)
  if valid_604522 != nil:
    section.add "X-Amz-Security-Token", valid_604522
  var valid_604523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604523 = validateParameter(valid_604523, JString, required = false,
                                 default = nil)
  if valid_604523 != nil:
    section.add "X-Amz-Content-Sha256", valid_604523
  var valid_604524 = header.getOrDefault("X-Amz-Algorithm")
  valid_604524 = validateParameter(valid_604524, JString, required = false,
                                 default = nil)
  if valid_604524 != nil:
    section.add "X-Amz-Algorithm", valid_604524
  var valid_604525 = header.getOrDefault("X-Amz-Signature")
  valid_604525 = validateParameter(valid_604525, JString, required = false,
                                 default = nil)
  if valid_604525 != nil:
    section.add "X-Amz-Signature", valid_604525
  var valid_604526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604526 = validateParameter(valid_604526, JString, required = false,
                                 default = nil)
  if valid_604526 != nil:
    section.add "X-Amz-SignedHeaders", valid_604526
  var valid_604527 = header.getOrDefault("X-Amz-Credential")
  valid_604527 = validateParameter(valid_604527, JString, required = false,
                                 default = nil)
  if valid_604527 != nil:
    section.add "X-Amz-Credential", valid_604527
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  section = newJObject()
  var valid_604528 = formData.getOrDefault("UserName")
  valid_604528 = validateParameter(valid_604528, JString, required = false,
                                 default = nil)
  if valid_604528 != nil:
    section.add "UserName", valid_604528
  var valid_604529 = formData.getOrDefault("ServiceName")
  valid_604529 = validateParameter(valid_604529, JString, required = false,
                                 default = nil)
  if valid_604529 != nil:
    section.add "ServiceName", valid_604529
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604530: Call_PostListServiceSpecificCredentials_604516;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_604530.validator(path, query, header, formData, body)
  let scheme = call_604530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604530.url(scheme.get, call_604530.host, call_604530.base,
                         call_604530.route, valid.getOrDefault("path"))
  result = hook(call_604530, url, valid)

proc call*(call_604531: Call_PostListServiceSpecificCredentials_604516;
          UserName: string = ""; Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"; ServiceName: string = ""): Recallable =
  ## postListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  var query_604532 = newJObject()
  var formData_604533 = newJObject()
  add(formData_604533, "UserName", newJString(UserName))
  add(query_604532, "Action", newJString(Action))
  add(query_604532, "Version", newJString(Version))
  add(formData_604533, "ServiceName", newJString(ServiceName))
  result = call_604531.call(nil, query_604532, nil, formData_604533, nil)

var postListServiceSpecificCredentials* = Call_PostListServiceSpecificCredentials_604516(
    name: "postListServiceSpecificCredentials", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_PostListServiceSpecificCredentials_604517, base: "/",
    url: url_PostListServiceSpecificCredentials_604518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListServiceSpecificCredentials_604499 = ref object of OpenApiRestCall_600426
proc url_GetListServiceSpecificCredentials_604501(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListServiceSpecificCredentials_604500(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceName: JString
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: JString
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604502 = query.getOrDefault("ServiceName")
  valid_604502 = validateParameter(valid_604502, JString, required = false,
                                 default = nil)
  if valid_604502 != nil:
    section.add "ServiceName", valid_604502
  var valid_604503 = query.getOrDefault("UserName")
  valid_604503 = validateParameter(valid_604503, JString, required = false,
                                 default = nil)
  if valid_604503 != nil:
    section.add "UserName", valid_604503
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604504 = query.getOrDefault("Action")
  valid_604504 = validateParameter(valid_604504, JString, required = true, default = newJString(
      "ListServiceSpecificCredentials"))
  if valid_604504 != nil:
    section.add "Action", valid_604504
  var valid_604505 = query.getOrDefault("Version")
  valid_604505 = validateParameter(valid_604505, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604505 != nil:
    section.add "Version", valid_604505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604506 = header.getOrDefault("X-Amz-Date")
  valid_604506 = validateParameter(valid_604506, JString, required = false,
                                 default = nil)
  if valid_604506 != nil:
    section.add "X-Amz-Date", valid_604506
  var valid_604507 = header.getOrDefault("X-Amz-Security-Token")
  valid_604507 = validateParameter(valid_604507, JString, required = false,
                                 default = nil)
  if valid_604507 != nil:
    section.add "X-Amz-Security-Token", valid_604507
  var valid_604508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604508 = validateParameter(valid_604508, JString, required = false,
                                 default = nil)
  if valid_604508 != nil:
    section.add "X-Amz-Content-Sha256", valid_604508
  var valid_604509 = header.getOrDefault("X-Amz-Algorithm")
  valid_604509 = validateParameter(valid_604509, JString, required = false,
                                 default = nil)
  if valid_604509 != nil:
    section.add "X-Amz-Algorithm", valid_604509
  var valid_604510 = header.getOrDefault("X-Amz-Signature")
  valid_604510 = validateParameter(valid_604510, JString, required = false,
                                 default = nil)
  if valid_604510 != nil:
    section.add "X-Amz-Signature", valid_604510
  var valid_604511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604511 = validateParameter(valid_604511, JString, required = false,
                                 default = nil)
  if valid_604511 != nil:
    section.add "X-Amz-SignedHeaders", valid_604511
  var valid_604512 = header.getOrDefault("X-Amz-Credential")
  valid_604512 = validateParameter(valid_604512, JString, required = false,
                                 default = nil)
  if valid_604512 != nil:
    section.add "X-Amz-Credential", valid_604512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604513: Call_GetListServiceSpecificCredentials_604499;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ## 
  let valid = call_604513.validator(path, query, header, formData, body)
  let scheme = call_604513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604513.url(scheme.get, call_604513.host, call_604513.base,
                         call_604513.route, valid.getOrDefault("path"))
  result = hook(call_604513, url, valid)

proc call*(call_604514: Call_GetListServiceSpecificCredentials_604499;
          ServiceName: string = ""; UserName: string = "";
          Action: string = "ListServiceSpecificCredentials";
          Version: string = "2010-05-08"): Recallable =
  ## getListServiceSpecificCredentials
  ## Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.
  ##   ServiceName: string
  ##              : Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
  ##   UserName: string
  ##           : <p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604515 = newJObject()
  add(query_604515, "ServiceName", newJString(ServiceName))
  add(query_604515, "UserName", newJString(UserName))
  add(query_604515, "Action", newJString(Action))
  add(query_604515, "Version", newJString(Version))
  result = call_604514.call(nil, query_604515, nil, nil, nil)

var getListServiceSpecificCredentials* = Call_GetListServiceSpecificCredentials_604499(
    name: "getListServiceSpecificCredentials", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListServiceSpecificCredentials",
    validator: validate_GetListServiceSpecificCredentials_604500, base: "/",
    url: url_GetListServiceSpecificCredentials_604501,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListSigningCertificates_604552 = ref object of OpenApiRestCall_600426
proc url_PostListSigningCertificates_604554(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListSigningCertificates_604553(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604555 = query.getOrDefault("Action")
  valid_604555 = validateParameter(valid_604555, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_604555 != nil:
    section.add "Action", valid_604555
  var valid_604556 = query.getOrDefault("Version")
  valid_604556 = validateParameter(valid_604556, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604556 != nil:
    section.add "Version", valid_604556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604557 = header.getOrDefault("X-Amz-Date")
  valid_604557 = validateParameter(valid_604557, JString, required = false,
                                 default = nil)
  if valid_604557 != nil:
    section.add "X-Amz-Date", valid_604557
  var valid_604558 = header.getOrDefault("X-Amz-Security-Token")
  valid_604558 = validateParameter(valid_604558, JString, required = false,
                                 default = nil)
  if valid_604558 != nil:
    section.add "X-Amz-Security-Token", valid_604558
  var valid_604559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604559 = validateParameter(valid_604559, JString, required = false,
                                 default = nil)
  if valid_604559 != nil:
    section.add "X-Amz-Content-Sha256", valid_604559
  var valid_604560 = header.getOrDefault("X-Amz-Algorithm")
  valid_604560 = validateParameter(valid_604560, JString, required = false,
                                 default = nil)
  if valid_604560 != nil:
    section.add "X-Amz-Algorithm", valid_604560
  var valid_604561 = header.getOrDefault("X-Amz-Signature")
  valid_604561 = validateParameter(valid_604561, JString, required = false,
                                 default = nil)
  if valid_604561 != nil:
    section.add "X-Amz-Signature", valid_604561
  var valid_604562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604562 = validateParameter(valid_604562, JString, required = false,
                                 default = nil)
  if valid_604562 != nil:
    section.add "X-Amz-SignedHeaders", valid_604562
  var valid_604563 = header.getOrDefault("X-Amz-Credential")
  valid_604563 = validateParameter(valid_604563, JString, required = false,
                                 default = nil)
  if valid_604563 != nil:
    section.add "X-Amz-Credential", valid_604563
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604564 = formData.getOrDefault("UserName")
  valid_604564 = validateParameter(valid_604564, JString, required = false,
                                 default = nil)
  if valid_604564 != nil:
    section.add "UserName", valid_604564
  var valid_604565 = formData.getOrDefault("Marker")
  valid_604565 = validateParameter(valid_604565, JString, required = false,
                                 default = nil)
  if valid_604565 != nil:
    section.add "Marker", valid_604565
  var valid_604566 = formData.getOrDefault("MaxItems")
  valid_604566 = validateParameter(valid_604566, JInt, required = false, default = nil)
  if valid_604566 != nil:
    section.add "MaxItems", valid_604566
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604567: Call_PostListSigningCertificates_604552; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_604567.validator(path, query, header, formData, body)
  let scheme = call_604567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604567.url(scheme.get, call_604567.host, call_604567.base,
                         call_604567.route, valid.getOrDefault("path"))
  result = hook(call_604567, url, valid)

proc call*(call_604568: Call_PostListSigningCertificates_604552;
          UserName: string = ""; Marker: string = "";
          Action: string = "ListSigningCertificates"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604569 = newJObject()
  var formData_604570 = newJObject()
  add(formData_604570, "UserName", newJString(UserName))
  add(formData_604570, "Marker", newJString(Marker))
  add(query_604569, "Action", newJString(Action))
  add(formData_604570, "MaxItems", newJInt(MaxItems))
  add(query_604569, "Version", newJString(Version))
  result = call_604568.call(nil, query_604569, nil, formData_604570, nil)

var postListSigningCertificates* = Call_PostListSigningCertificates_604552(
    name: "postListSigningCertificates", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_PostListSigningCertificates_604553, base: "/",
    url: url_PostListSigningCertificates_604554,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListSigningCertificates_604534 = ref object of OpenApiRestCall_600426
proc url_GetListSigningCertificates_604536(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListSigningCertificates_604535(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604537 = query.getOrDefault("UserName")
  valid_604537 = validateParameter(valid_604537, JString, required = false,
                                 default = nil)
  if valid_604537 != nil:
    section.add "UserName", valid_604537
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604538 = query.getOrDefault("Action")
  valid_604538 = validateParameter(valid_604538, JString, required = true, default = newJString(
      "ListSigningCertificates"))
  if valid_604538 != nil:
    section.add "Action", valid_604538
  var valid_604539 = query.getOrDefault("Marker")
  valid_604539 = validateParameter(valid_604539, JString, required = false,
                                 default = nil)
  if valid_604539 != nil:
    section.add "Marker", valid_604539
  var valid_604540 = query.getOrDefault("MaxItems")
  valid_604540 = validateParameter(valid_604540, JInt, required = false, default = nil)
  if valid_604540 != nil:
    section.add "MaxItems", valid_604540
  var valid_604541 = query.getOrDefault("Version")
  valid_604541 = validateParameter(valid_604541, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604541 != nil:
    section.add "Version", valid_604541
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604542 = header.getOrDefault("X-Amz-Date")
  valid_604542 = validateParameter(valid_604542, JString, required = false,
                                 default = nil)
  if valid_604542 != nil:
    section.add "X-Amz-Date", valid_604542
  var valid_604543 = header.getOrDefault("X-Amz-Security-Token")
  valid_604543 = validateParameter(valid_604543, JString, required = false,
                                 default = nil)
  if valid_604543 != nil:
    section.add "X-Amz-Security-Token", valid_604543
  var valid_604544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604544 = validateParameter(valid_604544, JString, required = false,
                                 default = nil)
  if valid_604544 != nil:
    section.add "X-Amz-Content-Sha256", valid_604544
  var valid_604545 = header.getOrDefault("X-Amz-Algorithm")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "X-Amz-Algorithm", valid_604545
  var valid_604546 = header.getOrDefault("X-Amz-Signature")
  valid_604546 = validateParameter(valid_604546, JString, required = false,
                                 default = nil)
  if valid_604546 != nil:
    section.add "X-Amz-Signature", valid_604546
  var valid_604547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604547 = validateParameter(valid_604547, JString, required = false,
                                 default = nil)
  if valid_604547 != nil:
    section.add "X-Amz-SignedHeaders", valid_604547
  var valid_604548 = header.getOrDefault("X-Amz-Credential")
  valid_604548 = validateParameter(valid_604548, JString, required = false,
                                 default = nil)
  if valid_604548 != nil:
    section.add "X-Amz-Credential", valid_604548
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604549: Call_GetListSigningCertificates_604534; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_604549.validator(path, query, header, formData, body)
  let scheme = call_604549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604549.url(scheme.get, call_604549.host, call_604549.base,
                         call_604549.route, valid.getOrDefault("path"))
  result = hook(call_604549, url, valid)

proc call*(call_604550: Call_GetListSigningCertificates_604534;
          UserName: string = ""; Action: string = "ListSigningCertificates";
          Marker: string = ""; MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getListSigningCertificates
  ## <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604551 = newJObject()
  add(query_604551, "UserName", newJString(UserName))
  add(query_604551, "Action", newJString(Action))
  add(query_604551, "Marker", newJString(Marker))
  add(query_604551, "MaxItems", newJInt(MaxItems))
  add(query_604551, "Version", newJString(Version))
  result = call_604550.call(nil, query_604551, nil, nil, nil)

var getListSigningCertificates* = Call_GetListSigningCertificates_604534(
    name: "getListSigningCertificates", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListSigningCertificates",
    validator: validate_GetListSigningCertificates_604535, base: "/",
    url: url_GetListSigningCertificates_604536,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserPolicies_604589 = ref object of OpenApiRestCall_600426
proc url_PostListUserPolicies_604591(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserPolicies_604590(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604592 = query.getOrDefault("Action")
  valid_604592 = validateParameter(valid_604592, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_604592 != nil:
    section.add "Action", valid_604592
  var valid_604593 = query.getOrDefault("Version")
  valid_604593 = validateParameter(valid_604593, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604593 != nil:
    section.add "Version", valid_604593
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604594 = header.getOrDefault("X-Amz-Date")
  valid_604594 = validateParameter(valid_604594, JString, required = false,
                                 default = nil)
  if valid_604594 != nil:
    section.add "X-Amz-Date", valid_604594
  var valid_604595 = header.getOrDefault("X-Amz-Security-Token")
  valid_604595 = validateParameter(valid_604595, JString, required = false,
                                 default = nil)
  if valid_604595 != nil:
    section.add "X-Amz-Security-Token", valid_604595
  var valid_604596 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604596 = validateParameter(valid_604596, JString, required = false,
                                 default = nil)
  if valid_604596 != nil:
    section.add "X-Amz-Content-Sha256", valid_604596
  var valid_604597 = header.getOrDefault("X-Amz-Algorithm")
  valid_604597 = validateParameter(valid_604597, JString, required = false,
                                 default = nil)
  if valid_604597 != nil:
    section.add "X-Amz-Algorithm", valid_604597
  var valid_604598 = header.getOrDefault("X-Amz-Signature")
  valid_604598 = validateParameter(valid_604598, JString, required = false,
                                 default = nil)
  if valid_604598 != nil:
    section.add "X-Amz-Signature", valid_604598
  var valid_604599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604599 = validateParameter(valid_604599, JString, required = false,
                                 default = nil)
  if valid_604599 != nil:
    section.add "X-Amz-SignedHeaders", valid_604599
  var valid_604600 = header.getOrDefault("X-Amz-Credential")
  valid_604600 = validateParameter(valid_604600, JString, required = false,
                                 default = nil)
  if valid_604600 != nil:
    section.add "X-Amz-Credential", valid_604600
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604601 = formData.getOrDefault("UserName")
  valid_604601 = validateParameter(valid_604601, JString, required = true,
                                 default = nil)
  if valid_604601 != nil:
    section.add "UserName", valid_604601
  var valid_604602 = formData.getOrDefault("Marker")
  valid_604602 = validateParameter(valid_604602, JString, required = false,
                                 default = nil)
  if valid_604602 != nil:
    section.add "Marker", valid_604602
  var valid_604603 = formData.getOrDefault("MaxItems")
  valid_604603 = validateParameter(valid_604603, JInt, required = false, default = nil)
  if valid_604603 != nil:
    section.add "MaxItems", valid_604603
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604604: Call_PostListUserPolicies_604589; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_604604.validator(path, query, header, formData, body)
  let scheme = call_604604.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604604.url(scheme.get, call_604604.host, call_604604.base,
                         call_604604.route, valid.getOrDefault("path"))
  result = hook(call_604604, url, valid)

proc call*(call_604605: Call_PostListUserPolicies_604589; UserName: string;
          Marker: string = ""; Action: string = "ListUserPolicies"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604606 = newJObject()
  var formData_604607 = newJObject()
  add(formData_604607, "UserName", newJString(UserName))
  add(formData_604607, "Marker", newJString(Marker))
  add(query_604606, "Action", newJString(Action))
  add(formData_604607, "MaxItems", newJInt(MaxItems))
  add(query_604606, "Version", newJString(Version))
  result = call_604605.call(nil, query_604606, nil, formData_604607, nil)

var postListUserPolicies* = Call_PostListUserPolicies_604589(
    name: "postListUserPolicies", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_PostListUserPolicies_604590, base: "/",
    url: url_PostListUserPolicies_604591, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserPolicies_604571 = ref object of OpenApiRestCall_600426
proc url_GetListUserPolicies_604573(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserPolicies_604572(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604574 = query.getOrDefault("UserName")
  valid_604574 = validateParameter(valid_604574, JString, required = true,
                                 default = nil)
  if valid_604574 != nil:
    section.add "UserName", valid_604574
  var valid_604575 = query.getOrDefault("Action")
  valid_604575 = validateParameter(valid_604575, JString, required = true,
                                 default = newJString("ListUserPolicies"))
  if valid_604575 != nil:
    section.add "Action", valid_604575
  var valid_604576 = query.getOrDefault("Marker")
  valid_604576 = validateParameter(valid_604576, JString, required = false,
                                 default = nil)
  if valid_604576 != nil:
    section.add "Marker", valid_604576
  var valid_604577 = query.getOrDefault("MaxItems")
  valid_604577 = validateParameter(valid_604577, JInt, required = false, default = nil)
  if valid_604577 != nil:
    section.add "MaxItems", valid_604577
  var valid_604578 = query.getOrDefault("Version")
  valid_604578 = validateParameter(valid_604578, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604578 != nil:
    section.add "Version", valid_604578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604579 = header.getOrDefault("X-Amz-Date")
  valid_604579 = validateParameter(valid_604579, JString, required = false,
                                 default = nil)
  if valid_604579 != nil:
    section.add "X-Amz-Date", valid_604579
  var valid_604580 = header.getOrDefault("X-Amz-Security-Token")
  valid_604580 = validateParameter(valid_604580, JString, required = false,
                                 default = nil)
  if valid_604580 != nil:
    section.add "X-Amz-Security-Token", valid_604580
  var valid_604581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604581 = validateParameter(valid_604581, JString, required = false,
                                 default = nil)
  if valid_604581 != nil:
    section.add "X-Amz-Content-Sha256", valid_604581
  var valid_604582 = header.getOrDefault("X-Amz-Algorithm")
  valid_604582 = validateParameter(valid_604582, JString, required = false,
                                 default = nil)
  if valid_604582 != nil:
    section.add "X-Amz-Algorithm", valid_604582
  var valid_604583 = header.getOrDefault("X-Amz-Signature")
  valid_604583 = validateParameter(valid_604583, JString, required = false,
                                 default = nil)
  if valid_604583 != nil:
    section.add "X-Amz-Signature", valid_604583
  var valid_604584 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604584 = validateParameter(valid_604584, JString, required = false,
                                 default = nil)
  if valid_604584 != nil:
    section.add "X-Amz-SignedHeaders", valid_604584
  var valid_604585 = header.getOrDefault("X-Amz-Credential")
  valid_604585 = validateParameter(valid_604585, JString, required = false,
                                 default = nil)
  if valid_604585 != nil:
    section.add "X-Amz-Credential", valid_604585
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604586: Call_GetListUserPolicies_604571; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ## 
  let valid = call_604586.validator(path, query, header, formData, body)
  let scheme = call_604586.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604586.url(scheme.get, call_604586.host, call_604586.base,
                         call_604586.route, valid.getOrDefault("path"))
  result = hook(call_604586, url, valid)

proc call*(call_604587: Call_GetListUserPolicies_604571; UserName: string;
          Action: string = "ListUserPolicies"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserPolicies
  ## <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604588 = newJObject()
  add(query_604588, "UserName", newJString(UserName))
  add(query_604588, "Action", newJString(Action))
  add(query_604588, "Marker", newJString(Marker))
  add(query_604588, "MaxItems", newJInt(MaxItems))
  add(query_604588, "Version", newJString(Version))
  result = call_604587.call(nil, query_604588, nil, nil, nil)

var getListUserPolicies* = Call_GetListUserPolicies_604571(
    name: "getListUserPolicies", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListUserPolicies",
    validator: validate_GetListUserPolicies_604572, base: "/",
    url: url_GetListUserPolicies_604573, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUserTags_604626 = ref object of OpenApiRestCall_600426
proc url_PostListUserTags_604628(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUserTags_604627(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604629 = query.getOrDefault("Action")
  valid_604629 = validateParameter(valid_604629, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_604629 != nil:
    section.add "Action", valid_604629
  var valid_604630 = query.getOrDefault("Version")
  valid_604630 = validateParameter(valid_604630, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604630 != nil:
    section.add "Version", valid_604630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604631 = header.getOrDefault("X-Amz-Date")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "X-Amz-Date", valid_604631
  var valid_604632 = header.getOrDefault("X-Amz-Security-Token")
  valid_604632 = validateParameter(valid_604632, JString, required = false,
                                 default = nil)
  if valid_604632 != nil:
    section.add "X-Amz-Security-Token", valid_604632
  var valid_604633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Content-Sha256", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Algorithm")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Algorithm", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Signature")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Signature", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-SignedHeaders", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Credential")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Credential", valid_604637
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604638 = formData.getOrDefault("UserName")
  valid_604638 = validateParameter(valid_604638, JString, required = true,
                                 default = nil)
  if valid_604638 != nil:
    section.add "UserName", valid_604638
  var valid_604639 = formData.getOrDefault("Marker")
  valid_604639 = validateParameter(valid_604639, JString, required = false,
                                 default = nil)
  if valid_604639 != nil:
    section.add "Marker", valid_604639
  var valid_604640 = formData.getOrDefault("MaxItems")
  valid_604640 = validateParameter(valid_604640, JInt, required = false, default = nil)
  if valid_604640 != nil:
    section.add "MaxItems", valid_604640
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604641: Call_PostListUserTags_604626; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604641.validator(path, query, header, formData, body)
  let scheme = call_604641.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604641.url(scheme.get, call_604641.host, call_604641.base,
                         call_604641.route, valid.getOrDefault("path"))
  result = hook(call_604641, url, valid)

proc call*(call_604642: Call_PostListUserTags_604626; UserName: string;
          Marker: string = ""; Action: string = "ListUserTags"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604643 = newJObject()
  var formData_604644 = newJObject()
  add(formData_604644, "UserName", newJString(UserName))
  add(formData_604644, "Marker", newJString(Marker))
  add(query_604643, "Action", newJString(Action))
  add(formData_604644, "MaxItems", newJInt(MaxItems))
  add(query_604643, "Version", newJString(Version))
  result = call_604642.call(nil, query_604643, nil, formData_604644, nil)

var postListUserTags* = Call_PostListUserTags_604626(name: "postListUserTags",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_PostListUserTags_604627,
    base: "/", url: url_PostListUserTags_604628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUserTags_604608 = ref object of OpenApiRestCall_600426
proc url_GetListUserTags_604610(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUserTags_604609(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604611 = query.getOrDefault("UserName")
  valid_604611 = validateParameter(valid_604611, JString, required = true,
                                 default = nil)
  if valid_604611 != nil:
    section.add "UserName", valid_604611
  var valid_604612 = query.getOrDefault("Action")
  valid_604612 = validateParameter(valid_604612, JString, required = true,
                                 default = newJString("ListUserTags"))
  if valid_604612 != nil:
    section.add "Action", valid_604612
  var valid_604613 = query.getOrDefault("Marker")
  valid_604613 = validateParameter(valid_604613, JString, required = false,
                                 default = nil)
  if valid_604613 != nil:
    section.add "Marker", valid_604613
  var valid_604614 = query.getOrDefault("MaxItems")
  valid_604614 = validateParameter(valid_604614, JInt, required = false, default = nil)
  if valid_604614 != nil:
    section.add "MaxItems", valid_604614
  var valid_604615 = query.getOrDefault("Version")
  valid_604615 = validateParameter(valid_604615, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604615 != nil:
    section.add "Version", valid_604615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604616 = header.getOrDefault("X-Amz-Date")
  valid_604616 = validateParameter(valid_604616, JString, required = false,
                                 default = nil)
  if valid_604616 != nil:
    section.add "X-Amz-Date", valid_604616
  var valid_604617 = header.getOrDefault("X-Amz-Security-Token")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "X-Amz-Security-Token", valid_604617
  var valid_604618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604618 = validateParameter(valid_604618, JString, required = false,
                                 default = nil)
  if valid_604618 != nil:
    section.add "X-Amz-Content-Sha256", valid_604618
  var valid_604619 = header.getOrDefault("X-Amz-Algorithm")
  valid_604619 = validateParameter(valid_604619, JString, required = false,
                                 default = nil)
  if valid_604619 != nil:
    section.add "X-Amz-Algorithm", valid_604619
  var valid_604620 = header.getOrDefault("X-Amz-Signature")
  valid_604620 = validateParameter(valid_604620, JString, required = false,
                                 default = nil)
  if valid_604620 != nil:
    section.add "X-Amz-Signature", valid_604620
  var valid_604621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604621 = validateParameter(valid_604621, JString, required = false,
                                 default = nil)
  if valid_604621 != nil:
    section.add "X-Amz-SignedHeaders", valid_604621
  var valid_604622 = header.getOrDefault("X-Amz-Credential")
  valid_604622 = validateParameter(valid_604622, JString, required = false,
                                 default = nil)
  if valid_604622 != nil:
    section.add "X-Amz-Credential", valid_604622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604623: Call_GetListUserTags_604608; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_604623.validator(path, query, header, formData, body)
  let scheme = call_604623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604623.url(scheme.get, call_604623.host, call_604623.base,
                         call_604623.route, valid.getOrDefault("path"))
  result = hook(call_604623, url, valid)

proc call*(call_604624: Call_GetListUserTags_604608; UserName: string;
          Action: string = "ListUserTags"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUserTags
  ## Lists the tags that are attached to the specified user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user whose tags you want to see.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>(Optional) Use this only when paginating results to indicate the maximum number of items that you want in the response. If additional items exist beyond the maximum that you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when more results are available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604625 = newJObject()
  add(query_604625, "UserName", newJString(UserName))
  add(query_604625, "Action", newJString(Action))
  add(query_604625, "Marker", newJString(Marker))
  add(query_604625, "MaxItems", newJInt(MaxItems))
  add(query_604625, "Version", newJString(Version))
  result = call_604624.call(nil, query_604625, nil, nil, nil)

var getListUserTags* = Call_GetListUserTags_604608(name: "getListUserTags",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUserTags", validator: validate_GetListUserTags_604609,
    base: "/", url: url_GetListUserTags_604610, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListUsers_604663 = ref object of OpenApiRestCall_600426
proc url_PostListUsers_604665(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListUsers_604664(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604666 = query.getOrDefault("Action")
  valid_604666 = validateParameter(valid_604666, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_604666 != nil:
    section.add "Action", valid_604666
  var valid_604667 = query.getOrDefault("Version")
  valid_604667 = validateParameter(valid_604667, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604667 != nil:
    section.add "Version", valid_604667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604668 = header.getOrDefault("X-Amz-Date")
  valid_604668 = validateParameter(valid_604668, JString, required = false,
                                 default = nil)
  if valid_604668 != nil:
    section.add "X-Amz-Date", valid_604668
  var valid_604669 = header.getOrDefault("X-Amz-Security-Token")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Security-Token", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Content-Sha256", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-Algorithm")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-Algorithm", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-Signature")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-Signature", valid_604672
  var valid_604673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604673 = validateParameter(valid_604673, JString, required = false,
                                 default = nil)
  if valid_604673 != nil:
    section.add "X-Amz-SignedHeaders", valid_604673
  var valid_604674 = header.getOrDefault("X-Amz-Credential")
  valid_604674 = validateParameter(valid_604674, JString, required = false,
                                 default = nil)
  if valid_604674 != nil:
    section.add "X-Amz-Credential", valid_604674
  result.add "header", section
  ## parameters in `formData` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604675 = formData.getOrDefault("PathPrefix")
  valid_604675 = validateParameter(valid_604675, JString, required = false,
                                 default = nil)
  if valid_604675 != nil:
    section.add "PathPrefix", valid_604675
  var valid_604676 = formData.getOrDefault("Marker")
  valid_604676 = validateParameter(valid_604676, JString, required = false,
                                 default = nil)
  if valid_604676 != nil:
    section.add "Marker", valid_604676
  var valid_604677 = formData.getOrDefault("MaxItems")
  valid_604677 = validateParameter(valid_604677, JInt, required = false, default = nil)
  if valid_604677 != nil:
    section.add "MaxItems", valid_604677
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604678: Call_PostListUsers_604663; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604678.validator(path, query, header, formData, body)
  let scheme = call_604678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604678.url(scheme.get, call_604678.host, call_604678.base,
                         call_604678.route, valid.getOrDefault("path"))
  result = hook(call_604678, url, valid)

proc call*(call_604679: Call_PostListUsers_604663; PathPrefix: string = "";
          Marker: string = ""; Action: string = "ListUsers"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604680 = newJObject()
  var formData_604681 = newJObject()
  add(formData_604681, "PathPrefix", newJString(PathPrefix))
  add(formData_604681, "Marker", newJString(Marker))
  add(query_604680, "Action", newJString(Action))
  add(formData_604681, "MaxItems", newJInt(MaxItems))
  add(query_604680, "Version", newJString(Version))
  result = call_604679.call(nil, query_604680, nil, formData_604681, nil)

var postListUsers* = Call_PostListUsers_604663(name: "postListUsers",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_PostListUsers_604664,
    base: "/", url: url_PostListUsers_604665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListUsers_604645 = ref object of OpenApiRestCall_600426
proc url_GetListUsers_604647(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListUsers_604646(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PathPrefix: JString
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604648 = query.getOrDefault("PathPrefix")
  valid_604648 = validateParameter(valid_604648, JString, required = false,
                                 default = nil)
  if valid_604648 != nil:
    section.add "PathPrefix", valid_604648
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604649 = query.getOrDefault("Action")
  valid_604649 = validateParameter(valid_604649, JString, required = true,
                                 default = newJString("ListUsers"))
  if valid_604649 != nil:
    section.add "Action", valid_604649
  var valid_604650 = query.getOrDefault("Marker")
  valid_604650 = validateParameter(valid_604650, JString, required = false,
                                 default = nil)
  if valid_604650 != nil:
    section.add "Marker", valid_604650
  var valid_604651 = query.getOrDefault("MaxItems")
  valid_604651 = validateParameter(valid_604651, JInt, required = false, default = nil)
  if valid_604651 != nil:
    section.add "MaxItems", valid_604651
  var valid_604652 = query.getOrDefault("Version")
  valid_604652 = validateParameter(valid_604652, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604652 != nil:
    section.add "Version", valid_604652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604653 = header.getOrDefault("X-Amz-Date")
  valid_604653 = validateParameter(valid_604653, JString, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "X-Amz-Date", valid_604653
  var valid_604654 = header.getOrDefault("X-Amz-Security-Token")
  valid_604654 = validateParameter(valid_604654, JString, required = false,
                                 default = nil)
  if valid_604654 != nil:
    section.add "X-Amz-Security-Token", valid_604654
  var valid_604655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "X-Amz-Content-Sha256", valid_604655
  var valid_604656 = header.getOrDefault("X-Amz-Algorithm")
  valid_604656 = validateParameter(valid_604656, JString, required = false,
                                 default = nil)
  if valid_604656 != nil:
    section.add "X-Amz-Algorithm", valid_604656
  var valid_604657 = header.getOrDefault("X-Amz-Signature")
  valid_604657 = validateParameter(valid_604657, JString, required = false,
                                 default = nil)
  if valid_604657 != nil:
    section.add "X-Amz-Signature", valid_604657
  var valid_604658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604658 = validateParameter(valid_604658, JString, required = false,
                                 default = nil)
  if valid_604658 != nil:
    section.add "X-Amz-SignedHeaders", valid_604658
  var valid_604659 = header.getOrDefault("X-Amz-Credential")
  valid_604659 = validateParameter(valid_604659, JString, required = false,
                                 default = nil)
  if valid_604659 != nil:
    section.add "X-Amz-Credential", valid_604659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604660: Call_GetListUsers_604645; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604660.validator(path, query, header, formData, body)
  let scheme = call_604660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604660.url(scheme.get, call_604660.host, call_604660.base,
                         call_604660.route, valid.getOrDefault("path"))
  result = hook(call_604660, url, valid)

proc call*(call_604661: Call_GetListUsers_604645; PathPrefix: string = "";
          Action: string = "ListUsers"; Marker: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getListUsers
  ## <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the AWS account. If there are none, the operation returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   PathPrefix: string
  ##             : <p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604662 = newJObject()
  add(query_604662, "PathPrefix", newJString(PathPrefix))
  add(query_604662, "Action", newJString(Action))
  add(query_604662, "Marker", newJString(Marker))
  add(query_604662, "MaxItems", newJInt(MaxItems))
  add(query_604662, "Version", newJString(Version))
  result = call_604661.call(nil, query_604662, nil, nil, nil)

var getListUsers* = Call_GetListUsers_604645(name: "getListUsers",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ListUsers", validator: validate_GetListUsers_604646, base: "/",
    url: url_GetListUsers_604647, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListVirtualMFADevices_604700 = ref object of OpenApiRestCall_600426
proc url_PostListVirtualMFADevices_604702(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListVirtualMFADevices_604701(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604703 = query.getOrDefault("Action")
  valid_604703 = validateParameter(valid_604703, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_604703 != nil:
    section.add "Action", valid_604703
  var valid_604704 = query.getOrDefault("Version")
  valid_604704 = validateParameter(valid_604704, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604704 != nil:
    section.add "Version", valid_604704
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604705 = header.getOrDefault("X-Amz-Date")
  valid_604705 = validateParameter(valid_604705, JString, required = false,
                                 default = nil)
  if valid_604705 != nil:
    section.add "X-Amz-Date", valid_604705
  var valid_604706 = header.getOrDefault("X-Amz-Security-Token")
  valid_604706 = validateParameter(valid_604706, JString, required = false,
                                 default = nil)
  if valid_604706 != nil:
    section.add "X-Amz-Security-Token", valid_604706
  var valid_604707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604707 = validateParameter(valid_604707, JString, required = false,
                                 default = nil)
  if valid_604707 != nil:
    section.add "X-Amz-Content-Sha256", valid_604707
  var valid_604708 = header.getOrDefault("X-Amz-Algorithm")
  valid_604708 = validateParameter(valid_604708, JString, required = false,
                                 default = nil)
  if valid_604708 != nil:
    section.add "X-Amz-Algorithm", valid_604708
  var valid_604709 = header.getOrDefault("X-Amz-Signature")
  valid_604709 = validateParameter(valid_604709, JString, required = false,
                                 default = nil)
  if valid_604709 != nil:
    section.add "X-Amz-Signature", valid_604709
  var valid_604710 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604710 = validateParameter(valid_604710, JString, required = false,
                                 default = nil)
  if valid_604710 != nil:
    section.add "X-Amz-SignedHeaders", valid_604710
  var valid_604711 = header.getOrDefault("X-Amz-Credential")
  valid_604711 = validateParameter(valid_604711, JString, required = false,
                                 default = nil)
  if valid_604711 != nil:
    section.add "X-Amz-Credential", valid_604711
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  section = newJObject()
  var valid_604712 = formData.getOrDefault("Marker")
  valid_604712 = validateParameter(valid_604712, JString, required = false,
                                 default = nil)
  if valid_604712 != nil:
    section.add "Marker", valid_604712
  var valid_604713 = formData.getOrDefault("AssignmentStatus")
  valid_604713 = validateParameter(valid_604713, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_604713 != nil:
    section.add "AssignmentStatus", valid_604713
  var valid_604714 = formData.getOrDefault("MaxItems")
  valid_604714 = validateParameter(valid_604714, JInt, required = false, default = nil)
  if valid_604714 != nil:
    section.add "MaxItems", valid_604714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604715: Call_PostListVirtualMFADevices_604700; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604715.validator(path, query, header, formData, body)
  let scheme = call_604715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604715.url(scheme.get, call_604715.host, call_604715.base,
                         call_604715.route, valid.getOrDefault("path"))
  result = hook(call_604715, url, valid)

proc call*(call_604716: Call_PostListVirtualMFADevices_604700; Marker: string = "";
          Action: string = "ListVirtualMFADevices";
          AssignmentStatus: string = "Assigned"; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_604717 = newJObject()
  var formData_604718 = newJObject()
  add(formData_604718, "Marker", newJString(Marker))
  add(query_604717, "Action", newJString(Action))
  add(formData_604718, "AssignmentStatus", newJString(AssignmentStatus))
  add(formData_604718, "MaxItems", newJInt(MaxItems))
  add(query_604717, "Version", newJString(Version))
  result = call_604716.call(nil, query_604717, nil, formData_604718, nil)

var postListVirtualMFADevices* = Call_PostListVirtualMFADevices_604700(
    name: "postListVirtualMFADevices", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_PostListVirtualMFADevices_604701, base: "/",
    url: url_PostListVirtualMFADevices_604702,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListVirtualMFADevices_604682 = ref object of OpenApiRestCall_600426
proc url_GetListVirtualMFADevices_604684(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListVirtualMFADevices_604683(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  ##   AssignmentStatus: JString
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604685 = query.getOrDefault("Action")
  valid_604685 = validateParameter(valid_604685, JString, required = true,
                                 default = newJString("ListVirtualMFADevices"))
  if valid_604685 != nil:
    section.add "Action", valid_604685
  var valid_604686 = query.getOrDefault("Marker")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "Marker", valid_604686
  var valid_604687 = query.getOrDefault("MaxItems")
  valid_604687 = validateParameter(valid_604687, JInt, required = false, default = nil)
  if valid_604687 != nil:
    section.add "MaxItems", valid_604687
  var valid_604688 = query.getOrDefault("Version")
  valid_604688 = validateParameter(valid_604688, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604688 != nil:
    section.add "Version", valid_604688
  var valid_604689 = query.getOrDefault("AssignmentStatus")
  valid_604689 = validateParameter(valid_604689, JString, required = false,
                                 default = newJString("Assigned"))
  if valid_604689 != nil:
    section.add "AssignmentStatus", valid_604689
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604690 = header.getOrDefault("X-Amz-Date")
  valid_604690 = validateParameter(valid_604690, JString, required = false,
                                 default = nil)
  if valid_604690 != nil:
    section.add "X-Amz-Date", valid_604690
  var valid_604691 = header.getOrDefault("X-Amz-Security-Token")
  valid_604691 = validateParameter(valid_604691, JString, required = false,
                                 default = nil)
  if valid_604691 != nil:
    section.add "X-Amz-Security-Token", valid_604691
  var valid_604692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604692 = validateParameter(valid_604692, JString, required = false,
                                 default = nil)
  if valid_604692 != nil:
    section.add "X-Amz-Content-Sha256", valid_604692
  var valid_604693 = header.getOrDefault("X-Amz-Algorithm")
  valid_604693 = validateParameter(valid_604693, JString, required = false,
                                 default = nil)
  if valid_604693 != nil:
    section.add "X-Amz-Algorithm", valid_604693
  var valid_604694 = header.getOrDefault("X-Amz-Signature")
  valid_604694 = validateParameter(valid_604694, JString, required = false,
                                 default = nil)
  if valid_604694 != nil:
    section.add "X-Amz-Signature", valid_604694
  var valid_604695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604695 = validateParameter(valid_604695, JString, required = false,
                                 default = nil)
  if valid_604695 != nil:
    section.add "X-Amz-SignedHeaders", valid_604695
  var valid_604696 = header.getOrDefault("X-Amz-Credential")
  valid_604696 = validateParameter(valid_604696, JString, required = false,
                                 default = nil)
  if valid_604696 != nil:
    section.add "X-Amz-Credential", valid_604696
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604697: Call_GetListVirtualMFADevices_604682; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ## 
  let valid = call_604697.validator(path, query, header, formData, body)
  let scheme = call_604697.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604697.url(scheme.get, call_604697.host, call_604697.base,
                         call_604697.route, valid.getOrDefault("path"))
  result = hook(call_604697, url, valid)

proc call*(call_604698: Call_GetListVirtualMFADevices_604682;
          Action: string = "ListVirtualMFADevices"; Marker: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08";
          AssignmentStatus: string = "Assigned"): Recallable =
  ## getListVirtualMFADevices
  ## <p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  ##   AssignmentStatus: string
  ##                   :  The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,
  var query_604699 = newJObject()
  add(query_604699, "Action", newJString(Action))
  add(query_604699, "Marker", newJString(Marker))
  add(query_604699, "MaxItems", newJInt(MaxItems))
  add(query_604699, "Version", newJString(Version))
  add(query_604699, "AssignmentStatus", newJString(AssignmentStatus))
  result = call_604698.call(nil, query_604699, nil, nil, nil)

var getListVirtualMFADevices* = Call_GetListVirtualMFADevices_604682(
    name: "getListVirtualMFADevices", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ListVirtualMFADevices",
    validator: validate_GetListVirtualMFADevices_604683, base: "/",
    url: url_GetListVirtualMFADevices_604684, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutGroupPolicy_604737 = ref object of OpenApiRestCall_600426
proc url_PostPutGroupPolicy_604739(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutGroupPolicy_604738(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604740 = query.getOrDefault("Action")
  valid_604740 = validateParameter(valid_604740, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_604740 != nil:
    section.add "Action", valid_604740
  var valid_604741 = query.getOrDefault("Version")
  valid_604741 = validateParameter(valid_604741, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604741 != nil:
    section.add "Version", valid_604741
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604742 = header.getOrDefault("X-Amz-Date")
  valid_604742 = validateParameter(valid_604742, JString, required = false,
                                 default = nil)
  if valid_604742 != nil:
    section.add "X-Amz-Date", valid_604742
  var valid_604743 = header.getOrDefault("X-Amz-Security-Token")
  valid_604743 = validateParameter(valid_604743, JString, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "X-Amz-Security-Token", valid_604743
  var valid_604744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604744 = validateParameter(valid_604744, JString, required = false,
                                 default = nil)
  if valid_604744 != nil:
    section.add "X-Amz-Content-Sha256", valid_604744
  var valid_604745 = header.getOrDefault("X-Amz-Algorithm")
  valid_604745 = validateParameter(valid_604745, JString, required = false,
                                 default = nil)
  if valid_604745 != nil:
    section.add "X-Amz-Algorithm", valid_604745
  var valid_604746 = header.getOrDefault("X-Amz-Signature")
  valid_604746 = validateParameter(valid_604746, JString, required = false,
                                 default = nil)
  if valid_604746 != nil:
    section.add "X-Amz-Signature", valid_604746
  var valid_604747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604747 = validateParameter(valid_604747, JString, required = false,
                                 default = nil)
  if valid_604747 != nil:
    section.add "X-Amz-SignedHeaders", valid_604747
  var valid_604748 = header.getOrDefault("X-Amz-Credential")
  valid_604748 = validateParameter(valid_604748, JString, required = false,
                                 default = nil)
  if valid_604748 != nil:
    section.add "X-Amz-Credential", valid_604748
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604749 = formData.getOrDefault("PolicyName")
  valid_604749 = validateParameter(valid_604749, JString, required = true,
                                 default = nil)
  if valid_604749 != nil:
    section.add "PolicyName", valid_604749
  var valid_604750 = formData.getOrDefault("GroupName")
  valid_604750 = validateParameter(valid_604750, JString, required = true,
                                 default = nil)
  if valid_604750 != nil:
    section.add "GroupName", valid_604750
  var valid_604751 = formData.getOrDefault("PolicyDocument")
  valid_604751 = validateParameter(valid_604751, JString, required = true,
                                 default = nil)
  if valid_604751 != nil:
    section.add "PolicyDocument", valid_604751
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604752: Call_PostPutGroupPolicy_604737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604752.validator(path, query, header, formData, body)
  let scheme = call_604752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604752.url(scheme.get, call_604752.host, call_604752.base,
                         call_604752.route, valid.getOrDefault("path"))
  result = hook(call_604752, url, valid)

proc call*(call_604753: Call_PostPutGroupPolicy_604737; PolicyName: string;
          GroupName: string; PolicyDocument: string;
          Action: string = "PutGroupPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604754 = newJObject()
  var formData_604755 = newJObject()
  add(formData_604755, "PolicyName", newJString(PolicyName))
  add(formData_604755, "GroupName", newJString(GroupName))
  add(formData_604755, "PolicyDocument", newJString(PolicyDocument))
  add(query_604754, "Action", newJString(Action))
  add(query_604754, "Version", newJString(Version))
  result = call_604753.call(nil, query_604754, nil, formData_604755, nil)

var postPutGroupPolicy* = Call_PostPutGroupPolicy_604737(
    name: "postPutGroupPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutGroupPolicy",
    validator: validate_PostPutGroupPolicy_604738, base: "/",
    url: url_PostPutGroupPolicy_604739, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutGroupPolicy_604719 = ref object of OpenApiRestCall_600426
proc url_GetPutGroupPolicy_604721(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutGroupPolicy_604720(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604722 = query.getOrDefault("Action")
  valid_604722 = validateParameter(valid_604722, JString, required = true,
                                 default = newJString("PutGroupPolicy"))
  if valid_604722 != nil:
    section.add "Action", valid_604722
  var valid_604723 = query.getOrDefault("PolicyDocument")
  valid_604723 = validateParameter(valid_604723, JString, required = true,
                                 default = nil)
  if valid_604723 != nil:
    section.add "PolicyDocument", valid_604723
  var valid_604724 = query.getOrDefault("GroupName")
  valid_604724 = validateParameter(valid_604724, JString, required = true,
                                 default = nil)
  if valid_604724 != nil:
    section.add "GroupName", valid_604724
  var valid_604725 = query.getOrDefault("Version")
  valid_604725 = validateParameter(valid_604725, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604725 != nil:
    section.add "Version", valid_604725
  var valid_604726 = query.getOrDefault("PolicyName")
  valid_604726 = validateParameter(valid_604726, JString, required = true,
                                 default = nil)
  if valid_604726 != nil:
    section.add "PolicyName", valid_604726
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604727 = header.getOrDefault("X-Amz-Date")
  valid_604727 = validateParameter(valid_604727, JString, required = false,
                                 default = nil)
  if valid_604727 != nil:
    section.add "X-Amz-Date", valid_604727
  var valid_604728 = header.getOrDefault("X-Amz-Security-Token")
  valid_604728 = validateParameter(valid_604728, JString, required = false,
                                 default = nil)
  if valid_604728 != nil:
    section.add "X-Amz-Security-Token", valid_604728
  var valid_604729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604729 = validateParameter(valid_604729, JString, required = false,
                                 default = nil)
  if valid_604729 != nil:
    section.add "X-Amz-Content-Sha256", valid_604729
  var valid_604730 = header.getOrDefault("X-Amz-Algorithm")
  valid_604730 = validateParameter(valid_604730, JString, required = false,
                                 default = nil)
  if valid_604730 != nil:
    section.add "X-Amz-Algorithm", valid_604730
  var valid_604731 = header.getOrDefault("X-Amz-Signature")
  valid_604731 = validateParameter(valid_604731, JString, required = false,
                                 default = nil)
  if valid_604731 != nil:
    section.add "X-Amz-Signature", valid_604731
  var valid_604732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604732 = validateParameter(valid_604732, JString, required = false,
                                 default = nil)
  if valid_604732 != nil:
    section.add "X-Amz-SignedHeaders", valid_604732
  var valid_604733 = header.getOrDefault("X-Amz-Credential")
  valid_604733 = validateParameter(valid_604733, JString, required = false,
                                 default = nil)
  if valid_604733 != nil:
    section.add "X-Amz-Credential", valid_604733
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604734: Call_GetPutGroupPolicy_604719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604734.validator(path, query, header, formData, body)
  let scheme = call_604734.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604734.url(scheme.get, call_604734.host, call_604734.base,
                         call_604734.route, valid.getOrDefault("path"))
  result = hook(call_604734, url, valid)

proc call*(call_604735: Call_GetPutGroupPolicy_604719; PolicyDocument: string;
          GroupName: string; PolicyName: string; Action: string = "PutGroupPolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutGroupPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_604736 = newJObject()
  add(query_604736, "Action", newJString(Action))
  add(query_604736, "PolicyDocument", newJString(PolicyDocument))
  add(query_604736, "GroupName", newJString(GroupName))
  add(query_604736, "Version", newJString(Version))
  add(query_604736, "PolicyName", newJString(PolicyName))
  result = call_604735.call(nil, query_604736, nil, nil, nil)

var getPutGroupPolicy* = Call_GetPutGroupPolicy_604719(name: "getPutGroupPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutGroupPolicy", validator: validate_GetPutGroupPolicy_604720,
    base: "/", url: url_GetPutGroupPolicy_604721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePermissionsBoundary_604773 = ref object of OpenApiRestCall_600426
proc url_PostPutRolePermissionsBoundary_604775(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePermissionsBoundary_604774(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604776 = query.getOrDefault("Action")
  valid_604776 = validateParameter(valid_604776, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_604776 != nil:
    section.add "Action", valid_604776
  var valid_604777 = query.getOrDefault("Version")
  valid_604777 = validateParameter(valid_604777, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604777 != nil:
    section.add "Version", valid_604777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604778 = header.getOrDefault("X-Amz-Date")
  valid_604778 = validateParameter(valid_604778, JString, required = false,
                                 default = nil)
  if valid_604778 != nil:
    section.add "X-Amz-Date", valid_604778
  var valid_604779 = header.getOrDefault("X-Amz-Security-Token")
  valid_604779 = validateParameter(valid_604779, JString, required = false,
                                 default = nil)
  if valid_604779 != nil:
    section.add "X-Amz-Security-Token", valid_604779
  var valid_604780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604780 = validateParameter(valid_604780, JString, required = false,
                                 default = nil)
  if valid_604780 != nil:
    section.add "X-Amz-Content-Sha256", valid_604780
  var valid_604781 = header.getOrDefault("X-Amz-Algorithm")
  valid_604781 = validateParameter(valid_604781, JString, required = false,
                                 default = nil)
  if valid_604781 != nil:
    section.add "X-Amz-Algorithm", valid_604781
  var valid_604782 = header.getOrDefault("X-Amz-Signature")
  valid_604782 = validateParameter(valid_604782, JString, required = false,
                                 default = nil)
  if valid_604782 != nil:
    section.add "X-Amz-Signature", valid_604782
  var valid_604783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604783 = validateParameter(valid_604783, JString, required = false,
                                 default = nil)
  if valid_604783 != nil:
    section.add "X-Amz-SignedHeaders", valid_604783
  var valid_604784 = header.getOrDefault("X-Amz-Credential")
  valid_604784 = validateParameter(valid_604784, JString, required = false,
                                 default = nil)
  if valid_604784 != nil:
    section.add "X-Amz-Credential", valid_604784
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604785 = formData.getOrDefault("RoleName")
  valid_604785 = validateParameter(valid_604785, JString, required = true,
                                 default = nil)
  if valid_604785 != nil:
    section.add "RoleName", valid_604785
  var valid_604786 = formData.getOrDefault("PermissionsBoundary")
  valid_604786 = validateParameter(valid_604786, JString, required = true,
                                 default = nil)
  if valid_604786 != nil:
    section.add "PermissionsBoundary", valid_604786
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604787: Call_PostPutRolePermissionsBoundary_604773; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_604787.validator(path, query, header, formData, body)
  let scheme = call_604787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604787.url(scheme.get, call_604787.host, call_604787.base,
                         call_604787.route, valid.getOrDefault("path"))
  result = hook(call_604787, url, valid)

proc call*(call_604788: Call_PostPutRolePermissionsBoundary_604773;
          RoleName: string; PermissionsBoundary: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604789 = newJObject()
  var formData_604790 = newJObject()
  add(formData_604790, "RoleName", newJString(RoleName))
  add(formData_604790, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_604789, "Action", newJString(Action))
  add(query_604789, "Version", newJString(Version))
  result = call_604788.call(nil, query_604789, nil, formData_604790, nil)

var postPutRolePermissionsBoundary* = Call_PostPutRolePermissionsBoundary_604773(
    name: "postPutRolePermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_PostPutRolePermissionsBoundary_604774, base: "/",
    url: url_PostPutRolePermissionsBoundary_604775,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePermissionsBoundary_604756 = ref object of OpenApiRestCall_600426
proc url_GetPutRolePermissionsBoundary_604758(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePermissionsBoundary_604757(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604759 = query.getOrDefault("Action")
  valid_604759 = validateParameter(valid_604759, JString, required = true, default = newJString(
      "PutRolePermissionsBoundary"))
  if valid_604759 != nil:
    section.add "Action", valid_604759
  var valid_604760 = query.getOrDefault("PermissionsBoundary")
  valid_604760 = validateParameter(valid_604760, JString, required = true,
                                 default = nil)
  if valid_604760 != nil:
    section.add "PermissionsBoundary", valid_604760
  var valid_604761 = query.getOrDefault("RoleName")
  valid_604761 = validateParameter(valid_604761, JString, required = true,
                                 default = nil)
  if valid_604761 != nil:
    section.add "RoleName", valid_604761
  var valid_604762 = query.getOrDefault("Version")
  valid_604762 = validateParameter(valid_604762, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604762 != nil:
    section.add "Version", valid_604762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604763 = header.getOrDefault("X-Amz-Date")
  valid_604763 = validateParameter(valid_604763, JString, required = false,
                                 default = nil)
  if valid_604763 != nil:
    section.add "X-Amz-Date", valid_604763
  var valid_604764 = header.getOrDefault("X-Amz-Security-Token")
  valid_604764 = validateParameter(valid_604764, JString, required = false,
                                 default = nil)
  if valid_604764 != nil:
    section.add "X-Amz-Security-Token", valid_604764
  var valid_604765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604765 = validateParameter(valid_604765, JString, required = false,
                                 default = nil)
  if valid_604765 != nil:
    section.add "X-Amz-Content-Sha256", valid_604765
  var valid_604766 = header.getOrDefault("X-Amz-Algorithm")
  valid_604766 = validateParameter(valid_604766, JString, required = false,
                                 default = nil)
  if valid_604766 != nil:
    section.add "X-Amz-Algorithm", valid_604766
  var valid_604767 = header.getOrDefault("X-Amz-Signature")
  valid_604767 = validateParameter(valid_604767, JString, required = false,
                                 default = nil)
  if valid_604767 != nil:
    section.add "X-Amz-Signature", valid_604767
  var valid_604768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604768 = validateParameter(valid_604768, JString, required = false,
                                 default = nil)
  if valid_604768 != nil:
    section.add "X-Amz-SignedHeaders", valid_604768
  var valid_604769 = header.getOrDefault("X-Amz-Credential")
  valid_604769 = validateParameter(valid_604769, JString, required = false,
                                 default = nil)
  if valid_604769 != nil:
    section.add "X-Amz-Credential", valid_604769
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604770: Call_GetPutRolePermissionsBoundary_604756; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_604770.validator(path, query, header, formData, body)
  let scheme = call_604770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604770.url(scheme.get, call_604770.host, call_604770.base,
                         call_604770.route, valid.getOrDefault("path"))
  result = hook(call_604770, url, valid)

proc call*(call_604771: Call_GetPutRolePermissionsBoundary_604756;
          PermissionsBoundary: string; RoleName: string;
          Action: string = "PutRolePermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role. </p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   RoleName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.
  ##   Version: string (required)
  var query_604772 = newJObject()
  add(query_604772, "Action", newJString(Action))
  add(query_604772, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_604772, "RoleName", newJString(RoleName))
  add(query_604772, "Version", newJString(Version))
  result = call_604771.call(nil, query_604772, nil, nil, nil)

var getPutRolePermissionsBoundary* = Call_GetPutRolePermissionsBoundary_604756(
    name: "getPutRolePermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutRolePermissionsBoundary",
    validator: validate_GetPutRolePermissionsBoundary_604757, base: "/",
    url: url_GetPutRolePermissionsBoundary_604758,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutRolePolicy_604809 = ref object of OpenApiRestCall_600426
proc url_PostPutRolePolicy_604811(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutRolePolicy_604810(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604812 = query.getOrDefault("Action")
  valid_604812 = validateParameter(valid_604812, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_604812 != nil:
    section.add "Action", valid_604812
  var valid_604813 = query.getOrDefault("Version")
  valid_604813 = validateParameter(valid_604813, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604813 != nil:
    section.add "Version", valid_604813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604814 = header.getOrDefault("X-Amz-Date")
  valid_604814 = validateParameter(valid_604814, JString, required = false,
                                 default = nil)
  if valid_604814 != nil:
    section.add "X-Amz-Date", valid_604814
  var valid_604815 = header.getOrDefault("X-Amz-Security-Token")
  valid_604815 = validateParameter(valid_604815, JString, required = false,
                                 default = nil)
  if valid_604815 != nil:
    section.add "X-Amz-Security-Token", valid_604815
  var valid_604816 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604816 = validateParameter(valid_604816, JString, required = false,
                                 default = nil)
  if valid_604816 != nil:
    section.add "X-Amz-Content-Sha256", valid_604816
  var valid_604817 = header.getOrDefault("X-Amz-Algorithm")
  valid_604817 = validateParameter(valid_604817, JString, required = false,
                                 default = nil)
  if valid_604817 != nil:
    section.add "X-Amz-Algorithm", valid_604817
  var valid_604818 = header.getOrDefault("X-Amz-Signature")
  valid_604818 = validateParameter(valid_604818, JString, required = false,
                                 default = nil)
  if valid_604818 != nil:
    section.add "X-Amz-Signature", valid_604818
  var valid_604819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604819 = validateParameter(valid_604819, JString, required = false,
                                 default = nil)
  if valid_604819 != nil:
    section.add "X-Amz-SignedHeaders", valid_604819
  var valid_604820 = header.getOrDefault("X-Amz-Credential")
  valid_604820 = validateParameter(valid_604820, JString, required = false,
                                 default = nil)
  if valid_604820 != nil:
    section.add "X-Amz-Credential", valid_604820
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604821 = formData.getOrDefault("PolicyName")
  valid_604821 = validateParameter(valid_604821, JString, required = true,
                                 default = nil)
  if valid_604821 != nil:
    section.add "PolicyName", valid_604821
  var valid_604822 = formData.getOrDefault("RoleName")
  valid_604822 = validateParameter(valid_604822, JString, required = true,
                                 default = nil)
  if valid_604822 != nil:
    section.add "RoleName", valid_604822
  var valid_604823 = formData.getOrDefault("PolicyDocument")
  valid_604823 = validateParameter(valid_604823, JString, required = true,
                                 default = nil)
  if valid_604823 != nil:
    section.add "PolicyDocument", valid_604823
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604824: Call_PostPutRolePolicy_604809; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604824.validator(path, query, header, formData, body)
  let scheme = call_604824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604824.url(scheme.get, call_604824.host, call_604824.base,
                         call_604824.route, valid.getOrDefault("path"))
  result = hook(call_604824, url, valid)

proc call*(call_604825: Call_PostPutRolePolicy_604809; PolicyName: string;
          RoleName: string; PolicyDocument: string;
          Action: string = "PutRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604826 = newJObject()
  var formData_604827 = newJObject()
  add(formData_604827, "PolicyName", newJString(PolicyName))
  add(formData_604827, "RoleName", newJString(RoleName))
  add(formData_604827, "PolicyDocument", newJString(PolicyDocument))
  add(query_604826, "Action", newJString(Action))
  add(query_604826, "Version", newJString(Version))
  result = call_604825.call(nil, query_604826, nil, formData_604827, nil)

var postPutRolePolicy* = Call_PostPutRolePolicy_604809(name: "postPutRolePolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_PostPutRolePolicy_604810,
    base: "/", url: url_PostPutRolePolicy_604811,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutRolePolicy_604791 = ref object of OpenApiRestCall_600426
proc url_GetPutRolePolicy_604793(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutRolePolicy_604792(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604794 = query.getOrDefault("Action")
  valid_604794 = validateParameter(valid_604794, JString, required = true,
                                 default = newJString("PutRolePolicy"))
  if valid_604794 != nil:
    section.add "Action", valid_604794
  var valid_604795 = query.getOrDefault("PolicyDocument")
  valid_604795 = validateParameter(valid_604795, JString, required = true,
                                 default = nil)
  if valid_604795 != nil:
    section.add "PolicyDocument", valid_604795
  var valid_604796 = query.getOrDefault("RoleName")
  valid_604796 = validateParameter(valid_604796, JString, required = true,
                                 default = nil)
  if valid_604796 != nil:
    section.add "RoleName", valid_604796
  var valid_604797 = query.getOrDefault("Version")
  valid_604797 = validateParameter(valid_604797, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604797 != nil:
    section.add "Version", valid_604797
  var valid_604798 = query.getOrDefault("PolicyName")
  valid_604798 = validateParameter(valid_604798, JString, required = true,
                                 default = nil)
  if valid_604798 != nil:
    section.add "PolicyName", valid_604798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604799 = header.getOrDefault("X-Amz-Date")
  valid_604799 = validateParameter(valid_604799, JString, required = false,
                                 default = nil)
  if valid_604799 != nil:
    section.add "X-Amz-Date", valid_604799
  var valid_604800 = header.getOrDefault("X-Amz-Security-Token")
  valid_604800 = validateParameter(valid_604800, JString, required = false,
                                 default = nil)
  if valid_604800 != nil:
    section.add "X-Amz-Security-Token", valid_604800
  var valid_604801 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604801 = validateParameter(valid_604801, JString, required = false,
                                 default = nil)
  if valid_604801 != nil:
    section.add "X-Amz-Content-Sha256", valid_604801
  var valid_604802 = header.getOrDefault("X-Amz-Algorithm")
  valid_604802 = validateParameter(valid_604802, JString, required = false,
                                 default = nil)
  if valid_604802 != nil:
    section.add "X-Amz-Algorithm", valid_604802
  var valid_604803 = header.getOrDefault("X-Amz-Signature")
  valid_604803 = validateParameter(valid_604803, JString, required = false,
                                 default = nil)
  if valid_604803 != nil:
    section.add "X-Amz-Signature", valid_604803
  var valid_604804 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604804 = validateParameter(valid_604804, JString, required = false,
                                 default = nil)
  if valid_604804 != nil:
    section.add "X-Amz-SignedHeaders", valid_604804
  var valid_604805 = header.getOrDefault("X-Amz-Credential")
  valid_604805 = validateParameter(valid_604805, JString, required = false,
                                 default = nil)
  if valid_604805 != nil:
    section.add "X-Amz-Credential", valid_604805
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604806: Call_GetPutRolePolicy_604791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604806.validator(path, query, header, formData, body)
  let scheme = call_604806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604806.url(scheme.get, call_604806.host, call_604806.base,
                         call_604806.route, valid.getOrDefault("path"))
  result = hook(call_604806, url, valid)

proc call*(call_604807: Call_GetPutRolePolicy_604791; PolicyDocument: string;
          RoleName: string; PolicyName: string; Action: string = "PutRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## getPutRolePolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_604808 = newJObject()
  add(query_604808, "Action", newJString(Action))
  add(query_604808, "PolicyDocument", newJString(PolicyDocument))
  add(query_604808, "RoleName", newJString(RoleName))
  add(query_604808, "Version", newJString(Version))
  add(query_604808, "PolicyName", newJString(PolicyName))
  result = call_604807.call(nil, query_604808, nil, nil, nil)

var getPutRolePolicy* = Call_GetPutRolePolicy_604791(name: "getPutRolePolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutRolePolicy", validator: validate_GetPutRolePolicy_604792,
    base: "/", url: url_GetPutRolePolicy_604793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPermissionsBoundary_604845 = ref object of OpenApiRestCall_600426
proc url_PostPutUserPermissionsBoundary_604847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPermissionsBoundary_604846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604848 = query.getOrDefault("Action")
  valid_604848 = validateParameter(valid_604848, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_604848 != nil:
    section.add "Action", valid_604848
  var valid_604849 = query.getOrDefault("Version")
  valid_604849 = validateParameter(valid_604849, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604849 != nil:
    section.add "Version", valid_604849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604850 = header.getOrDefault("X-Amz-Date")
  valid_604850 = validateParameter(valid_604850, JString, required = false,
                                 default = nil)
  if valid_604850 != nil:
    section.add "X-Amz-Date", valid_604850
  var valid_604851 = header.getOrDefault("X-Amz-Security-Token")
  valid_604851 = validateParameter(valid_604851, JString, required = false,
                                 default = nil)
  if valid_604851 != nil:
    section.add "X-Amz-Security-Token", valid_604851
  var valid_604852 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604852 = validateParameter(valid_604852, JString, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "X-Amz-Content-Sha256", valid_604852
  var valid_604853 = header.getOrDefault("X-Amz-Algorithm")
  valid_604853 = validateParameter(valid_604853, JString, required = false,
                                 default = nil)
  if valid_604853 != nil:
    section.add "X-Amz-Algorithm", valid_604853
  var valid_604854 = header.getOrDefault("X-Amz-Signature")
  valid_604854 = validateParameter(valid_604854, JString, required = false,
                                 default = nil)
  if valid_604854 != nil:
    section.add "X-Amz-Signature", valid_604854
  var valid_604855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604855 = validateParameter(valid_604855, JString, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "X-Amz-SignedHeaders", valid_604855
  var valid_604856 = header.getOrDefault("X-Amz-Credential")
  valid_604856 = validateParameter(valid_604856, JString, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "X-Amz-Credential", valid_604856
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604857 = formData.getOrDefault("UserName")
  valid_604857 = validateParameter(valid_604857, JString, required = true,
                                 default = nil)
  if valid_604857 != nil:
    section.add "UserName", valid_604857
  var valid_604858 = formData.getOrDefault("PermissionsBoundary")
  valid_604858 = validateParameter(valid_604858, JString, required = true,
                                 default = nil)
  if valid_604858 != nil:
    section.add "PermissionsBoundary", valid_604858
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604859: Call_PostPutUserPermissionsBoundary_604845; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_604859.validator(path, query, header, formData, body)
  let scheme = call_604859.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604859.url(scheme.get, call_604859.host, call_604859.base,
                         call_604859.route, valid.getOrDefault("path"))
  result = hook(call_604859, url, valid)

proc call*(call_604860: Call_PostPutUserPermissionsBoundary_604845;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## postPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604861 = newJObject()
  var formData_604862 = newJObject()
  add(formData_604862, "UserName", newJString(UserName))
  add(formData_604862, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_604861, "Action", newJString(Action))
  add(query_604861, "Version", newJString(Version))
  result = call_604860.call(nil, query_604861, nil, formData_604862, nil)

var postPutUserPermissionsBoundary* = Call_PostPutUserPermissionsBoundary_604845(
    name: "postPutUserPermissionsBoundary", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_PostPutUserPermissionsBoundary_604846, base: "/",
    url: url_PostPutUserPermissionsBoundary_604847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPermissionsBoundary_604828 = ref object of OpenApiRestCall_600426
proc url_GetPutUserPermissionsBoundary_604830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPermissionsBoundary_604829(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: JString (required)
  ##   PermissionsBoundary: JString (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604831 = query.getOrDefault("UserName")
  valid_604831 = validateParameter(valid_604831, JString, required = true,
                                 default = nil)
  if valid_604831 != nil:
    section.add "UserName", valid_604831
  var valid_604832 = query.getOrDefault("Action")
  valid_604832 = validateParameter(valid_604832, JString, required = true, default = newJString(
      "PutUserPermissionsBoundary"))
  if valid_604832 != nil:
    section.add "Action", valid_604832
  var valid_604833 = query.getOrDefault("PermissionsBoundary")
  valid_604833 = validateParameter(valid_604833, JString, required = true,
                                 default = nil)
  if valid_604833 != nil:
    section.add "PermissionsBoundary", valid_604833
  var valid_604834 = query.getOrDefault("Version")
  valid_604834 = validateParameter(valid_604834, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604834 != nil:
    section.add "Version", valid_604834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604835 = header.getOrDefault("X-Amz-Date")
  valid_604835 = validateParameter(valid_604835, JString, required = false,
                                 default = nil)
  if valid_604835 != nil:
    section.add "X-Amz-Date", valid_604835
  var valid_604836 = header.getOrDefault("X-Amz-Security-Token")
  valid_604836 = validateParameter(valid_604836, JString, required = false,
                                 default = nil)
  if valid_604836 != nil:
    section.add "X-Amz-Security-Token", valid_604836
  var valid_604837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "X-Amz-Content-Sha256", valid_604837
  var valid_604838 = header.getOrDefault("X-Amz-Algorithm")
  valid_604838 = validateParameter(valid_604838, JString, required = false,
                                 default = nil)
  if valid_604838 != nil:
    section.add "X-Amz-Algorithm", valid_604838
  var valid_604839 = header.getOrDefault("X-Amz-Signature")
  valid_604839 = validateParameter(valid_604839, JString, required = false,
                                 default = nil)
  if valid_604839 != nil:
    section.add "X-Amz-Signature", valid_604839
  var valid_604840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604840 = validateParameter(valid_604840, JString, required = false,
                                 default = nil)
  if valid_604840 != nil:
    section.add "X-Amz-SignedHeaders", valid_604840
  var valid_604841 = header.getOrDefault("X-Amz-Credential")
  valid_604841 = validateParameter(valid_604841, JString, required = false,
                                 default = nil)
  if valid_604841 != nil:
    section.add "X-Amz-Credential", valid_604841
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604842: Call_GetPutUserPermissionsBoundary_604828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ## 
  let valid = call_604842.validator(path, query, header, formData, body)
  let scheme = call_604842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604842.url(scheme.get, call_604842.host, call_604842.base,
                         call_604842.route, valid.getOrDefault("path"))
  result = hook(call_604842, url, valid)

proc call*(call_604843: Call_GetPutUserPermissionsBoundary_604828;
          UserName: string; PermissionsBoundary: string;
          Action: string = "PutUserPermissionsBoundary";
          Version: string = "2010-05-08"): Recallable =
  ## getPutUserPermissionsBoundary
  ## <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an AWS managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON Policy Evaluation Logic</a> in the IAM User Guide. </p> </important>
  ##   UserName: string (required)
  ##           : The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.
  ##   Action: string (required)
  ##   PermissionsBoundary: string (required)
  ##                      : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_604844 = newJObject()
  add(query_604844, "UserName", newJString(UserName))
  add(query_604844, "Action", newJString(Action))
  add(query_604844, "PermissionsBoundary", newJString(PermissionsBoundary))
  add(query_604844, "Version", newJString(Version))
  result = call_604843.call(nil, query_604844, nil, nil, nil)

var getPutUserPermissionsBoundary* = Call_GetPutUserPermissionsBoundary_604828(
    name: "getPutUserPermissionsBoundary", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=PutUserPermissionsBoundary",
    validator: validate_GetPutUserPermissionsBoundary_604829, base: "/",
    url: url_GetPutUserPermissionsBoundary_604830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPutUserPolicy_604881 = ref object of OpenApiRestCall_600426
proc url_PostPutUserPolicy_604883(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPutUserPolicy_604882(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604884 = query.getOrDefault("Action")
  valid_604884 = validateParameter(valid_604884, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_604884 != nil:
    section.add "Action", valid_604884
  var valid_604885 = query.getOrDefault("Version")
  valid_604885 = validateParameter(valid_604885, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604885 != nil:
    section.add "Version", valid_604885
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604886 = header.getOrDefault("X-Amz-Date")
  valid_604886 = validateParameter(valid_604886, JString, required = false,
                                 default = nil)
  if valid_604886 != nil:
    section.add "X-Amz-Date", valid_604886
  var valid_604887 = header.getOrDefault("X-Amz-Security-Token")
  valid_604887 = validateParameter(valid_604887, JString, required = false,
                                 default = nil)
  if valid_604887 != nil:
    section.add "X-Amz-Security-Token", valid_604887
  var valid_604888 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604888 = validateParameter(valid_604888, JString, required = false,
                                 default = nil)
  if valid_604888 != nil:
    section.add "X-Amz-Content-Sha256", valid_604888
  var valid_604889 = header.getOrDefault("X-Amz-Algorithm")
  valid_604889 = validateParameter(valid_604889, JString, required = false,
                                 default = nil)
  if valid_604889 != nil:
    section.add "X-Amz-Algorithm", valid_604889
  var valid_604890 = header.getOrDefault("X-Amz-Signature")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "X-Amz-Signature", valid_604890
  var valid_604891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604891 = validateParameter(valid_604891, JString, required = false,
                                 default = nil)
  if valid_604891 != nil:
    section.add "X-Amz-SignedHeaders", valid_604891
  var valid_604892 = header.getOrDefault("X-Amz-Credential")
  valid_604892 = validateParameter(valid_604892, JString, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "X-Amz-Credential", valid_604892
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyName` field"
  var valid_604893 = formData.getOrDefault("PolicyName")
  valid_604893 = validateParameter(valid_604893, JString, required = true,
                                 default = nil)
  if valid_604893 != nil:
    section.add "PolicyName", valid_604893
  var valid_604894 = formData.getOrDefault("UserName")
  valid_604894 = validateParameter(valid_604894, JString, required = true,
                                 default = nil)
  if valid_604894 != nil:
    section.add "UserName", valid_604894
  var valid_604895 = formData.getOrDefault("PolicyDocument")
  valid_604895 = validateParameter(valid_604895, JString, required = true,
                                 default = nil)
  if valid_604895 != nil:
    section.add "PolicyDocument", valid_604895
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604896: Call_PostPutUserPolicy_604881; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604896.validator(path, query, header, formData, body)
  let scheme = call_604896.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604896.url(scheme.get, call_604896.host, call_604896.base,
                         call_604896.route, valid.getOrDefault("path"))
  result = hook(call_604896, url, valid)

proc call*(call_604897: Call_PostPutUserPolicy_604881; PolicyName: string;
          UserName: string; PolicyDocument: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## postPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604898 = newJObject()
  var formData_604899 = newJObject()
  add(formData_604899, "PolicyName", newJString(PolicyName))
  add(formData_604899, "UserName", newJString(UserName))
  add(formData_604899, "PolicyDocument", newJString(PolicyDocument))
  add(query_604898, "Action", newJString(Action))
  add(query_604898, "Version", newJString(Version))
  result = call_604897.call(nil, query_604898, nil, formData_604899, nil)

var postPutUserPolicy* = Call_PostPutUserPolicy_604881(name: "postPutUserPolicy",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_PostPutUserPolicy_604882,
    base: "/", url: url_PostPutUserPolicy_604883,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPutUserPolicy_604863 = ref object of OpenApiRestCall_600426
proc url_GetPutUserPolicy_604865(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPutUserPolicy_604864(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  ##   PolicyName: JString (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604866 = query.getOrDefault("UserName")
  valid_604866 = validateParameter(valid_604866, JString, required = true,
                                 default = nil)
  if valid_604866 != nil:
    section.add "UserName", valid_604866
  var valid_604867 = query.getOrDefault("Action")
  valid_604867 = validateParameter(valid_604867, JString, required = true,
                                 default = newJString("PutUserPolicy"))
  if valid_604867 != nil:
    section.add "Action", valid_604867
  var valid_604868 = query.getOrDefault("PolicyDocument")
  valid_604868 = validateParameter(valid_604868, JString, required = true,
                                 default = nil)
  if valid_604868 != nil:
    section.add "PolicyDocument", valid_604868
  var valid_604869 = query.getOrDefault("Version")
  valid_604869 = validateParameter(valid_604869, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604869 != nil:
    section.add "Version", valid_604869
  var valid_604870 = query.getOrDefault("PolicyName")
  valid_604870 = validateParameter(valid_604870, JString, required = true,
                                 default = nil)
  if valid_604870 != nil:
    section.add "PolicyName", valid_604870
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604871 = header.getOrDefault("X-Amz-Date")
  valid_604871 = validateParameter(valid_604871, JString, required = false,
                                 default = nil)
  if valid_604871 != nil:
    section.add "X-Amz-Date", valid_604871
  var valid_604872 = header.getOrDefault("X-Amz-Security-Token")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Security-Token", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-Content-Sha256", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-Algorithm")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-Algorithm", valid_604874
  var valid_604875 = header.getOrDefault("X-Amz-Signature")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-Signature", valid_604875
  var valid_604876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604876 = validateParameter(valid_604876, JString, required = false,
                                 default = nil)
  if valid_604876 != nil:
    section.add "X-Amz-SignedHeaders", valid_604876
  var valid_604877 = header.getOrDefault("X-Amz-Credential")
  valid_604877 = validateParameter(valid_604877, JString, required = false,
                                 default = nil)
  if valid_604877 != nil:
    section.add "X-Amz-Credential", valid_604877
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604878: Call_GetPutUserPolicy_604863; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_604878.validator(path, query, header, formData, body)
  let scheme = call_604878.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604878.url(scheme.get, call_604878.host, call_604878.base,
                         call_604878.route, valid.getOrDefault("path"))
  result = hook(call_604878, url, valid)

proc call*(call_604879: Call_GetPutUserPolicy_604863; UserName: string;
          PolicyDocument: string; PolicyName: string;
          Action: string = "PutUserPolicy"; Version: string = "2010-05-08"): Recallable =
  ## getPutUserPolicy
  ## <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   UserName: string (required)
  ##           : <p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   PolicyName: string (required)
  ##             : <p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  var query_604880 = newJObject()
  add(query_604880, "UserName", newJString(UserName))
  add(query_604880, "Action", newJString(Action))
  add(query_604880, "PolicyDocument", newJString(PolicyDocument))
  add(query_604880, "Version", newJString(Version))
  add(query_604880, "PolicyName", newJString(PolicyName))
  result = call_604879.call(nil, query_604880, nil, nil, nil)

var getPutUserPolicy* = Call_GetPutUserPolicy_604863(name: "getPutUserPolicy",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=PutUserPolicy", validator: validate_GetPutUserPolicy_604864,
    base: "/", url: url_GetPutUserPolicy_604865,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveClientIDFromOpenIDConnectProvider_604917 = ref object of OpenApiRestCall_600426
proc url_PostRemoveClientIDFromOpenIDConnectProvider_604919(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveClientIDFromOpenIDConnectProvider_604918(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604920 = query.getOrDefault("Action")
  valid_604920 = validateParameter(valid_604920, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_604920 != nil:
    section.add "Action", valid_604920
  var valid_604921 = query.getOrDefault("Version")
  valid_604921 = validateParameter(valid_604921, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604921 != nil:
    section.add "Version", valid_604921
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604922 = header.getOrDefault("X-Amz-Date")
  valid_604922 = validateParameter(valid_604922, JString, required = false,
                                 default = nil)
  if valid_604922 != nil:
    section.add "X-Amz-Date", valid_604922
  var valid_604923 = header.getOrDefault("X-Amz-Security-Token")
  valid_604923 = validateParameter(valid_604923, JString, required = false,
                                 default = nil)
  if valid_604923 != nil:
    section.add "X-Amz-Security-Token", valid_604923
  var valid_604924 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604924 = validateParameter(valid_604924, JString, required = false,
                                 default = nil)
  if valid_604924 != nil:
    section.add "X-Amz-Content-Sha256", valid_604924
  var valid_604925 = header.getOrDefault("X-Amz-Algorithm")
  valid_604925 = validateParameter(valid_604925, JString, required = false,
                                 default = nil)
  if valid_604925 != nil:
    section.add "X-Amz-Algorithm", valid_604925
  var valid_604926 = header.getOrDefault("X-Amz-Signature")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-Signature", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-SignedHeaders", valid_604927
  var valid_604928 = header.getOrDefault("X-Amz-Credential")
  valid_604928 = validateParameter(valid_604928, JString, required = false,
                                 default = nil)
  if valid_604928 != nil:
    section.add "X-Amz-Credential", valid_604928
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_604929 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_604929 = validateParameter(valid_604929, JString, required = true,
                                 default = nil)
  if valid_604929 != nil:
    section.add "OpenIDConnectProviderArn", valid_604929
  var valid_604930 = formData.getOrDefault("ClientID")
  valid_604930 = validateParameter(valid_604930, JString, required = true,
                                 default = nil)
  if valid_604930 != nil:
    section.add "ClientID", valid_604930
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604931: Call_PostRemoveClientIDFromOpenIDConnectProvider_604917;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_604931.validator(path, query, header, formData, body)
  let scheme = call_604931.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604931.url(scheme.get, call_604931.host, call_604931.base,
                         call_604931.route, valid.getOrDefault("path"))
  result = hook(call_604931, url, valid)

proc call*(call_604932: Call_PostRemoveClientIDFromOpenIDConnectProvider_604917;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  var query_604933 = newJObject()
  var formData_604934 = newJObject()
  add(formData_604934, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_604933, "Action", newJString(Action))
  add(query_604933, "Version", newJString(Version))
  add(formData_604934, "ClientID", newJString(ClientID))
  result = call_604932.call(nil, query_604933, nil, formData_604934, nil)

var postRemoveClientIDFromOpenIDConnectProvider* = Call_PostRemoveClientIDFromOpenIDConnectProvider_604917(
    name: "postRemoveClientIDFromOpenIDConnectProvider",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_PostRemoveClientIDFromOpenIDConnectProvider_604918,
    base: "/", url: url_PostRemoveClientIDFromOpenIDConnectProvider_604919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveClientIDFromOpenIDConnectProvider_604900 = ref object of OpenApiRestCall_600426
proc url_GetRemoveClientIDFromOpenIDConnectProvider_604902(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveClientIDFromOpenIDConnectProvider_604901(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ClientID: JString (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_604903 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_604903 = validateParameter(valid_604903, JString, required = true,
                                 default = nil)
  if valid_604903 != nil:
    section.add "OpenIDConnectProviderArn", valid_604903
  var valid_604904 = query.getOrDefault("Action")
  valid_604904 = validateParameter(valid_604904, JString, required = true, default = newJString(
      "RemoveClientIDFromOpenIDConnectProvider"))
  if valid_604904 != nil:
    section.add "Action", valid_604904
  var valid_604905 = query.getOrDefault("ClientID")
  valid_604905 = validateParameter(valid_604905, JString, required = true,
                                 default = nil)
  if valid_604905 != nil:
    section.add "ClientID", valid_604905
  var valid_604906 = query.getOrDefault("Version")
  valid_604906 = validateParameter(valid_604906, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604906 != nil:
    section.add "Version", valid_604906
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604907 = header.getOrDefault("X-Amz-Date")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "X-Amz-Date", valid_604907
  var valid_604908 = header.getOrDefault("X-Amz-Security-Token")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "X-Amz-Security-Token", valid_604908
  var valid_604909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604909 = validateParameter(valid_604909, JString, required = false,
                                 default = nil)
  if valid_604909 != nil:
    section.add "X-Amz-Content-Sha256", valid_604909
  var valid_604910 = header.getOrDefault("X-Amz-Algorithm")
  valid_604910 = validateParameter(valid_604910, JString, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "X-Amz-Algorithm", valid_604910
  var valid_604911 = header.getOrDefault("X-Amz-Signature")
  valid_604911 = validateParameter(valid_604911, JString, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "X-Amz-Signature", valid_604911
  var valid_604912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604912 = validateParameter(valid_604912, JString, required = false,
                                 default = nil)
  if valid_604912 != nil:
    section.add "X-Amz-SignedHeaders", valid_604912
  var valid_604913 = header.getOrDefault("X-Amz-Credential")
  valid_604913 = validateParameter(valid_604913, JString, required = false,
                                 default = nil)
  if valid_604913 != nil:
    section.add "X-Amz-Credential", valid_604913
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604914: Call_GetRemoveClientIDFromOpenIDConnectProvider_604900;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ## 
  let valid = call_604914.validator(path, query, header, formData, body)
  let scheme = call_604914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604914.url(scheme.get, call_604914.host, call_604914.base,
                         call_604914.route, valid.getOrDefault("path"))
  result = hook(call_604914, url, valid)

proc call*(call_604915: Call_GetRemoveClientIDFromOpenIDConnectProvider_604900;
          OpenIDConnectProviderArn: string; ClientID: string;
          Action: string = "RemoveClientIDFromOpenIDConnectProvider";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveClientIDFromOpenIDConnectProvider
  ## <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ClientID: string (required)
  ##           : The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.
  ##   Version: string (required)
  var query_604916 = newJObject()
  add(query_604916, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_604916, "Action", newJString(Action))
  add(query_604916, "ClientID", newJString(ClientID))
  add(query_604916, "Version", newJString(Version))
  result = call_604915.call(nil, query_604916, nil, nil, nil)

var getRemoveClientIDFromOpenIDConnectProvider* = Call_GetRemoveClientIDFromOpenIDConnectProvider_604900(
    name: "getRemoveClientIDFromOpenIDConnectProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=RemoveClientIDFromOpenIDConnectProvider",
    validator: validate_GetRemoveClientIDFromOpenIDConnectProvider_604901,
    base: "/", url: url_GetRemoveClientIDFromOpenIDConnectProvider_604902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromInstanceProfile_604952 = ref object of OpenApiRestCall_600426
proc url_PostRemoveRoleFromInstanceProfile_604954(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveRoleFromInstanceProfile_604953(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604955 = query.getOrDefault("Action")
  valid_604955 = validateParameter(valid_604955, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_604955 != nil:
    section.add "Action", valid_604955
  var valid_604956 = query.getOrDefault("Version")
  valid_604956 = validateParameter(valid_604956, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604956 != nil:
    section.add "Version", valid_604956
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604957 = header.getOrDefault("X-Amz-Date")
  valid_604957 = validateParameter(valid_604957, JString, required = false,
                                 default = nil)
  if valid_604957 != nil:
    section.add "X-Amz-Date", valid_604957
  var valid_604958 = header.getOrDefault("X-Amz-Security-Token")
  valid_604958 = validateParameter(valid_604958, JString, required = false,
                                 default = nil)
  if valid_604958 != nil:
    section.add "X-Amz-Security-Token", valid_604958
  var valid_604959 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604959 = validateParameter(valid_604959, JString, required = false,
                                 default = nil)
  if valid_604959 != nil:
    section.add "X-Amz-Content-Sha256", valid_604959
  var valid_604960 = header.getOrDefault("X-Amz-Algorithm")
  valid_604960 = validateParameter(valid_604960, JString, required = false,
                                 default = nil)
  if valid_604960 != nil:
    section.add "X-Amz-Algorithm", valid_604960
  var valid_604961 = header.getOrDefault("X-Amz-Signature")
  valid_604961 = validateParameter(valid_604961, JString, required = false,
                                 default = nil)
  if valid_604961 != nil:
    section.add "X-Amz-Signature", valid_604961
  var valid_604962 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604962 = validateParameter(valid_604962, JString, required = false,
                                 default = nil)
  if valid_604962 != nil:
    section.add "X-Amz-SignedHeaders", valid_604962
  var valid_604963 = header.getOrDefault("X-Amz-Credential")
  valid_604963 = validateParameter(valid_604963, JString, required = false,
                                 default = nil)
  if valid_604963 != nil:
    section.add "X-Amz-Credential", valid_604963
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_604964 = formData.getOrDefault("RoleName")
  valid_604964 = validateParameter(valid_604964, JString, required = true,
                                 default = nil)
  if valid_604964 != nil:
    section.add "RoleName", valid_604964
  var valid_604965 = formData.getOrDefault("InstanceProfileName")
  valid_604965 = validateParameter(valid_604965, JString, required = true,
                                 default = nil)
  if valid_604965 != nil:
    section.add "InstanceProfileName", valid_604965
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604966: Call_PostRemoveRoleFromInstanceProfile_604952;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_604966.validator(path, query, header, formData, body)
  let scheme = call_604966.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604966.url(scheme.get, call_604966.host, call_604966.base,
                         call_604966.route, valid.getOrDefault("path"))
  result = hook(call_604966, url, valid)

proc call*(call_604967: Call_PostRemoveRoleFromInstanceProfile_604952;
          RoleName: string; InstanceProfileName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604968 = newJObject()
  var formData_604969 = newJObject()
  add(formData_604969, "RoleName", newJString(RoleName))
  add(query_604968, "Action", newJString(Action))
  add(formData_604969, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_604968, "Version", newJString(Version))
  result = call_604967.call(nil, query_604968, nil, formData_604969, nil)

var postRemoveRoleFromInstanceProfile* = Call_PostRemoveRoleFromInstanceProfile_604952(
    name: "postRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_PostRemoveRoleFromInstanceProfile_604953, base: "/",
    url: url_PostRemoveRoleFromInstanceProfile_604954,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromInstanceProfile_604935 = ref object of OpenApiRestCall_600426
proc url_GetRemoveRoleFromInstanceProfile_604937(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveRoleFromInstanceProfile_604936(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstanceProfileName: JString (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstanceProfileName` field"
  var valid_604938 = query.getOrDefault("InstanceProfileName")
  valid_604938 = validateParameter(valid_604938, JString, required = true,
                                 default = nil)
  if valid_604938 != nil:
    section.add "InstanceProfileName", valid_604938
  var valid_604939 = query.getOrDefault("Action")
  valid_604939 = validateParameter(valid_604939, JString, required = true, default = newJString(
      "RemoveRoleFromInstanceProfile"))
  if valid_604939 != nil:
    section.add "Action", valid_604939
  var valid_604940 = query.getOrDefault("RoleName")
  valid_604940 = validateParameter(valid_604940, JString, required = true,
                                 default = nil)
  if valid_604940 != nil:
    section.add "RoleName", valid_604940
  var valid_604941 = query.getOrDefault("Version")
  valid_604941 = validateParameter(valid_604941, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604941 != nil:
    section.add "Version", valid_604941
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604942 = header.getOrDefault("X-Amz-Date")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Date", valid_604942
  var valid_604943 = header.getOrDefault("X-Amz-Security-Token")
  valid_604943 = validateParameter(valid_604943, JString, required = false,
                                 default = nil)
  if valid_604943 != nil:
    section.add "X-Amz-Security-Token", valid_604943
  var valid_604944 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "X-Amz-Content-Sha256", valid_604944
  var valid_604945 = header.getOrDefault("X-Amz-Algorithm")
  valid_604945 = validateParameter(valid_604945, JString, required = false,
                                 default = nil)
  if valid_604945 != nil:
    section.add "X-Amz-Algorithm", valid_604945
  var valid_604946 = header.getOrDefault("X-Amz-Signature")
  valid_604946 = validateParameter(valid_604946, JString, required = false,
                                 default = nil)
  if valid_604946 != nil:
    section.add "X-Amz-Signature", valid_604946
  var valid_604947 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604947 = validateParameter(valid_604947, JString, required = false,
                                 default = nil)
  if valid_604947 != nil:
    section.add "X-Amz-SignedHeaders", valid_604947
  var valid_604948 = header.getOrDefault("X-Amz-Credential")
  valid_604948 = validateParameter(valid_604948, JString, required = false,
                                 default = nil)
  if valid_604948 != nil:
    section.add "X-Amz-Credential", valid_604948
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604949: Call_GetRemoveRoleFromInstanceProfile_604935;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ## 
  let valid = call_604949.validator(path, query, header, formData, body)
  let scheme = call_604949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604949.url(scheme.get, call_604949.host, call_604949.base,
                         call_604949.route, valid.getOrDefault("path"))
  result = hook(call_604949, url, valid)

proc call*(call_604950: Call_GetRemoveRoleFromInstanceProfile_604935;
          InstanceProfileName: string; RoleName: string;
          Action: string = "RemoveRoleFromInstanceProfile";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveRoleFromInstanceProfile
  ## <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>
  ##   InstanceProfileName: string (required)
  ##                      : <p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604951 = newJObject()
  add(query_604951, "InstanceProfileName", newJString(InstanceProfileName))
  add(query_604951, "Action", newJString(Action))
  add(query_604951, "RoleName", newJString(RoleName))
  add(query_604951, "Version", newJString(Version))
  result = call_604950.call(nil, query_604951, nil, nil, nil)

var getRemoveRoleFromInstanceProfile* = Call_GetRemoveRoleFromInstanceProfile_604935(
    name: "getRemoveRoleFromInstanceProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveRoleFromInstanceProfile",
    validator: validate_GetRemoveRoleFromInstanceProfile_604936, base: "/",
    url: url_GetRemoveRoleFromInstanceProfile_604937,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveUserFromGroup_604987 = ref object of OpenApiRestCall_600426
proc url_PostRemoveUserFromGroup_604989(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveUserFromGroup_604988(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604990 = query.getOrDefault("Action")
  valid_604990 = validateParameter(valid_604990, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_604990 != nil:
    section.add "Action", valid_604990
  var valid_604991 = query.getOrDefault("Version")
  valid_604991 = validateParameter(valid_604991, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604991 != nil:
    section.add "Version", valid_604991
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604992 = header.getOrDefault("X-Amz-Date")
  valid_604992 = validateParameter(valid_604992, JString, required = false,
                                 default = nil)
  if valid_604992 != nil:
    section.add "X-Amz-Date", valid_604992
  var valid_604993 = header.getOrDefault("X-Amz-Security-Token")
  valid_604993 = validateParameter(valid_604993, JString, required = false,
                                 default = nil)
  if valid_604993 != nil:
    section.add "X-Amz-Security-Token", valid_604993
  var valid_604994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604994 = validateParameter(valid_604994, JString, required = false,
                                 default = nil)
  if valid_604994 != nil:
    section.add "X-Amz-Content-Sha256", valid_604994
  var valid_604995 = header.getOrDefault("X-Amz-Algorithm")
  valid_604995 = validateParameter(valid_604995, JString, required = false,
                                 default = nil)
  if valid_604995 != nil:
    section.add "X-Amz-Algorithm", valid_604995
  var valid_604996 = header.getOrDefault("X-Amz-Signature")
  valid_604996 = validateParameter(valid_604996, JString, required = false,
                                 default = nil)
  if valid_604996 != nil:
    section.add "X-Amz-Signature", valid_604996
  var valid_604997 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604997 = validateParameter(valid_604997, JString, required = false,
                                 default = nil)
  if valid_604997 != nil:
    section.add "X-Amz-SignedHeaders", valid_604997
  var valid_604998 = header.getOrDefault("X-Amz-Credential")
  valid_604998 = validateParameter(valid_604998, JString, required = false,
                                 default = nil)
  if valid_604998 != nil:
    section.add "X-Amz-Credential", valid_604998
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_604999 = formData.getOrDefault("UserName")
  valid_604999 = validateParameter(valid_604999, JString, required = true,
                                 default = nil)
  if valid_604999 != nil:
    section.add "UserName", valid_604999
  var valid_605000 = formData.getOrDefault("GroupName")
  valid_605000 = validateParameter(valid_605000, JString, required = true,
                                 default = nil)
  if valid_605000 != nil:
    section.add "GroupName", valid_605000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605001: Call_PostRemoveUserFromGroup_604987; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_605001.validator(path, query, header, formData, body)
  let scheme = call_605001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605001.url(scheme.get, call_605001.host, call_605001.base,
                         call_605001.route, valid.getOrDefault("path"))
  result = hook(call_605001, url, valid)

proc call*(call_605002: Call_PostRemoveUserFromGroup_604987; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## postRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605003 = newJObject()
  var formData_605004 = newJObject()
  add(formData_605004, "UserName", newJString(UserName))
  add(formData_605004, "GroupName", newJString(GroupName))
  add(query_605003, "Action", newJString(Action))
  add(query_605003, "Version", newJString(Version))
  result = call_605002.call(nil, query_605003, nil, formData_605004, nil)

var postRemoveUserFromGroup* = Call_PostRemoveUserFromGroup_604987(
    name: "postRemoveUserFromGroup", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_PostRemoveUserFromGroup_604988, base: "/",
    url: url_PostRemoveUserFromGroup_604989, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveUserFromGroup_604970 = ref object of OpenApiRestCall_600426
proc url_GetRemoveUserFromGroup_604972(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveUserFromGroup_604971(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified user from the specified group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_604973 = query.getOrDefault("UserName")
  valid_604973 = validateParameter(valid_604973, JString, required = true,
                                 default = nil)
  if valid_604973 != nil:
    section.add "UserName", valid_604973
  var valid_604974 = query.getOrDefault("Action")
  valid_604974 = validateParameter(valid_604974, JString, required = true,
                                 default = newJString("RemoveUserFromGroup"))
  if valid_604974 != nil:
    section.add "Action", valid_604974
  var valid_604975 = query.getOrDefault("GroupName")
  valid_604975 = validateParameter(valid_604975, JString, required = true,
                                 default = nil)
  if valid_604975 != nil:
    section.add "GroupName", valid_604975
  var valid_604976 = query.getOrDefault("Version")
  valid_604976 = validateParameter(valid_604976, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_604976 != nil:
    section.add "Version", valid_604976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604977 = header.getOrDefault("X-Amz-Date")
  valid_604977 = validateParameter(valid_604977, JString, required = false,
                                 default = nil)
  if valid_604977 != nil:
    section.add "X-Amz-Date", valid_604977
  var valid_604978 = header.getOrDefault("X-Amz-Security-Token")
  valid_604978 = validateParameter(valid_604978, JString, required = false,
                                 default = nil)
  if valid_604978 != nil:
    section.add "X-Amz-Security-Token", valid_604978
  var valid_604979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604979 = validateParameter(valid_604979, JString, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "X-Amz-Content-Sha256", valid_604979
  var valid_604980 = header.getOrDefault("X-Amz-Algorithm")
  valid_604980 = validateParameter(valid_604980, JString, required = false,
                                 default = nil)
  if valid_604980 != nil:
    section.add "X-Amz-Algorithm", valid_604980
  var valid_604981 = header.getOrDefault("X-Amz-Signature")
  valid_604981 = validateParameter(valid_604981, JString, required = false,
                                 default = nil)
  if valid_604981 != nil:
    section.add "X-Amz-Signature", valid_604981
  var valid_604982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604982 = validateParameter(valid_604982, JString, required = false,
                                 default = nil)
  if valid_604982 != nil:
    section.add "X-Amz-SignedHeaders", valid_604982
  var valid_604983 = header.getOrDefault("X-Amz-Credential")
  valid_604983 = validateParameter(valid_604983, JString, required = false,
                                 default = nil)
  if valid_604983 != nil:
    section.add "X-Amz-Credential", valid_604983
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604984: Call_GetRemoveUserFromGroup_604970; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified user from the specified group.
  ## 
  let valid = call_604984.validator(path, query, header, formData, body)
  let scheme = call_604984.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604984.url(scheme.get, call_604984.host, call_604984.base,
                         call_604984.route, valid.getOrDefault("path"))
  result = hook(call_604984, url, valid)

proc call*(call_604985: Call_GetRemoveUserFromGroup_604970; UserName: string;
          GroupName: string; Action: string = "RemoveUserFromGroup";
          Version: string = "2010-05-08"): Recallable =
  ## getRemoveUserFromGroup
  ## Removes the specified user from the specified group.
  ##   UserName: string (required)
  ##           : <p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_604986 = newJObject()
  add(query_604986, "UserName", newJString(UserName))
  add(query_604986, "Action", newJString(Action))
  add(query_604986, "GroupName", newJString(GroupName))
  add(query_604986, "Version", newJString(Version))
  result = call_604985.call(nil, query_604986, nil, nil, nil)

var getRemoveUserFromGroup* = Call_GetRemoveUserFromGroup_604970(
    name: "getRemoveUserFromGroup", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=RemoveUserFromGroup",
    validator: validate_GetRemoveUserFromGroup_604971, base: "/",
    url: url_GetRemoveUserFromGroup_604972, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetServiceSpecificCredential_605022 = ref object of OpenApiRestCall_600426
proc url_PostResetServiceSpecificCredential_605024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetServiceSpecificCredential_605023(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605025 = query.getOrDefault("Action")
  valid_605025 = validateParameter(valid_605025, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_605025 != nil:
    section.add "Action", valid_605025
  var valid_605026 = query.getOrDefault("Version")
  valid_605026 = validateParameter(valid_605026, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605026 != nil:
    section.add "Version", valid_605026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605027 = header.getOrDefault("X-Amz-Date")
  valid_605027 = validateParameter(valid_605027, JString, required = false,
                                 default = nil)
  if valid_605027 != nil:
    section.add "X-Amz-Date", valid_605027
  var valid_605028 = header.getOrDefault("X-Amz-Security-Token")
  valid_605028 = validateParameter(valid_605028, JString, required = false,
                                 default = nil)
  if valid_605028 != nil:
    section.add "X-Amz-Security-Token", valid_605028
  var valid_605029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605029 = validateParameter(valid_605029, JString, required = false,
                                 default = nil)
  if valid_605029 != nil:
    section.add "X-Amz-Content-Sha256", valid_605029
  var valid_605030 = header.getOrDefault("X-Amz-Algorithm")
  valid_605030 = validateParameter(valid_605030, JString, required = false,
                                 default = nil)
  if valid_605030 != nil:
    section.add "X-Amz-Algorithm", valid_605030
  var valid_605031 = header.getOrDefault("X-Amz-Signature")
  valid_605031 = validateParameter(valid_605031, JString, required = false,
                                 default = nil)
  if valid_605031 != nil:
    section.add "X-Amz-Signature", valid_605031
  var valid_605032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605032 = validateParameter(valid_605032, JString, required = false,
                                 default = nil)
  if valid_605032 != nil:
    section.add "X-Amz-SignedHeaders", valid_605032
  var valid_605033 = header.getOrDefault("X-Amz-Credential")
  valid_605033 = validateParameter(valid_605033, JString, required = false,
                                 default = nil)
  if valid_605033 != nil:
    section.add "X-Amz-Credential", valid_605033
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_605034 = formData.getOrDefault("UserName")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "UserName", valid_605034
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_605035 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_605035 = validateParameter(valid_605035, JString, required = true,
                                 default = nil)
  if valid_605035 != nil:
    section.add "ServiceSpecificCredentialId", valid_605035
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605036: Call_PostResetServiceSpecificCredential_605022;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_605036.validator(path, query, header, formData, body)
  let scheme = call_605036.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605036.url(scheme.get, call_605036.host, call_605036.base,
                         call_605036.route, valid.getOrDefault("path"))
  result = hook(call_605036, url, valid)

proc call*(call_605037: Call_PostResetServiceSpecificCredential_605022;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605038 = newJObject()
  var formData_605039 = newJObject()
  add(formData_605039, "UserName", newJString(UserName))
  add(formData_605039, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_605038, "Action", newJString(Action))
  add(query_605038, "Version", newJString(Version))
  result = call_605037.call(nil, query_605038, nil, formData_605039, nil)

var postResetServiceSpecificCredential* = Call_PostResetServiceSpecificCredential_605022(
    name: "postResetServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_PostResetServiceSpecificCredential_605023, base: "/",
    url: url_PostResetServiceSpecificCredential_605024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetServiceSpecificCredential_605005 = ref object of OpenApiRestCall_600426
proc url_GetResetServiceSpecificCredential_605007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetServiceSpecificCredential_605006(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605008 = query.getOrDefault("UserName")
  valid_605008 = validateParameter(valid_605008, JString, required = false,
                                 default = nil)
  if valid_605008 != nil:
    section.add "UserName", valid_605008
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605009 = query.getOrDefault("Action")
  valid_605009 = validateParameter(valid_605009, JString, required = true, default = newJString(
      "ResetServiceSpecificCredential"))
  if valid_605009 != nil:
    section.add "Action", valid_605009
  var valid_605010 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_605010 = validateParameter(valid_605010, JString, required = true,
                                 default = nil)
  if valid_605010 != nil:
    section.add "ServiceSpecificCredentialId", valid_605010
  var valid_605011 = query.getOrDefault("Version")
  valid_605011 = validateParameter(valid_605011, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605011 != nil:
    section.add "Version", valid_605011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605012 = header.getOrDefault("X-Amz-Date")
  valid_605012 = validateParameter(valid_605012, JString, required = false,
                                 default = nil)
  if valid_605012 != nil:
    section.add "X-Amz-Date", valid_605012
  var valid_605013 = header.getOrDefault("X-Amz-Security-Token")
  valid_605013 = validateParameter(valid_605013, JString, required = false,
                                 default = nil)
  if valid_605013 != nil:
    section.add "X-Amz-Security-Token", valid_605013
  var valid_605014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Content-Sha256", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-Algorithm")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-Algorithm", valid_605015
  var valid_605016 = header.getOrDefault("X-Amz-Signature")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-Signature", valid_605016
  var valid_605017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605017 = validateParameter(valid_605017, JString, required = false,
                                 default = nil)
  if valid_605017 != nil:
    section.add "X-Amz-SignedHeaders", valid_605017
  var valid_605018 = header.getOrDefault("X-Amz-Credential")
  valid_605018 = validateParameter(valid_605018, JString, required = false,
                                 default = nil)
  if valid_605018 != nil:
    section.add "X-Amz-Credential", valid_605018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605019: Call_GetResetServiceSpecificCredential_605005;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ## 
  let valid = call_605019.validator(path, query, header, formData, body)
  let scheme = call_605019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605019.url(scheme.get, call_605019.host, call_605019.base,
                         call_605019.route, valid.getOrDefault("path"))
  result = hook(call_605019, url, valid)

proc call*(call_605020: Call_GetResetServiceSpecificCredential_605005;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Action: string = "ResetServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getResetServiceSpecificCredential
  ## Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_605021 = newJObject()
  add(query_605021, "UserName", newJString(UserName))
  add(query_605021, "Action", newJString(Action))
  add(query_605021, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_605021, "Version", newJString(Version))
  result = call_605020.call(nil, query_605021, nil, nil, nil)

var getResetServiceSpecificCredential* = Call_GetResetServiceSpecificCredential_605005(
    name: "getResetServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=ResetServiceSpecificCredential",
    validator: validate_GetResetServiceSpecificCredential_605006, base: "/",
    url: url_GetResetServiceSpecificCredential_605007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResyncMFADevice_605059 = ref object of OpenApiRestCall_600426
proc url_PostResyncMFADevice_605061(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResyncMFADevice_605060(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605062 = query.getOrDefault("Action")
  valid_605062 = validateParameter(valid_605062, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_605062 != nil:
    section.add "Action", valid_605062
  var valid_605063 = query.getOrDefault("Version")
  valid_605063 = validateParameter(valid_605063, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605063 != nil:
    section.add "Version", valid_605063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605064 = header.getOrDefault("X-Amz-Date")
  valid_605064 = validateParameter(valid_605064, JString, required = false,
                                 default = nil)
  if valid_605064 != nil:
    section.add "X-Amz-Date", valid_605064
  var valid_605065 = header.getOrDefault("X-Amz-Security-Token")
  valid_605065 = validateParameter(valid_605065, JString, required = false,
                                 default = nil)
  if valid_605065 != nil:
    section.add "X-Amz-Security-Token", valid_605065
  var valid_605066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605066 = validateParameter(valid_605066, JString, required = false,
                                 default = nil)
  if valid_605066 != nil:
    section.add "X-Amz-Content-Sha256", valid_605066
  var valid_605067 = header.getOrDefault("X-Amz-Algorithm")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "X-Amz-Algorithm", valid_605067
  var valid_605068 = header.getOrDefault("X-Amz-Signature")
  valid_605068 = validateParameter(valid_605068, JString, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "X-Amz-Signature", valid_605068
  var valid_605069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605069 = validateParameter(valid_605069, JString, required = false,
                                 default = nil)
  if valid_605069 != nil:
    section.add "X-Amz-SignedHeaders", valid_605069
  var valid_605070 = header.getOrDefault("X-Amz-Credential")
  valid_605070 = validateParameter(valid_605070, JString, required = false,
                                 default = nil)
  if valid_605070 != nil:
    section.add "X-Amz-Credential", valid_605070
  result.add "header", section
  ## parameters in `formData` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SerialNumber` field"
  var valid_605071 = formData.getOrDefault("SerialNumber")
  valid_605071 = validateParameter(valid_605071, JString, required = true,
                                 default = nil)
  if valid_605071 != nil:
    section.add "SerialNumber", valid_605071
  var valid_605072 = formData.getOrDefault("UserName")
  valid_605072 = validateParameter(valid_605072, JString, required = true,
                                 default = nil)
  if valid_605072 != nil:
    section.add "UserName", valid_605072
  var valid_605073 = formData.getOrDefault("AuthenticationCode2")
  valid_605073 = validateParameter(valid_605073, JString, required = true,
                                 default = nil)
  if valid_605073 != nil:
    section.add "AuthenticationCode2", valid_605073
  var valid_605074 = formData.getOrDefault("AuthenticationCode1")
  valid_605074 = validateParameter(valid_605074, JString, required = true,
                                 default = nil)
  if valid_605074 != nil:
    section.add "AuthenticationCode1", valid_605074
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605075: Call_PostResyncMFADevice_605059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605075.validator(path, query, header, formData, body)
  let scheme = call_605075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605075.url(scheme.get, call_605075.host, call_605075.base,
                         call_605075.route, valid.getOrDefault("path"))
  result = hook(call_605075, url, valid)

proc call*(call_605076: Call_PostResyncMFADevice_605059; SerialNumber: string;
          UserName: string; AuthenticationCode2: string;
          AuthenticationCode1: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## postResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Action: string (required)
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   Version: string (required)
  var query_605077 = newJObject()
  var formData_605078 = newJObject()
  add(formData_605078, "SerialNumber", newJString(SerialNumber))
  add(formData_605078, "UserName", newJString(UserName))
  add(formData_605078, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_605077, "Action", newJString(Action))
  add(formData_605078, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_605077, "Version", newJString(Version))
  result = call_605076.call(nil, query_605077, nil, formData_605078, nil)

var postResyncMFADevice* = Call_PostResyncMFADevice_605059(
    name: "postResyncMFADevice", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=ResyncMFADevice",
    validator: validate_PostResyncMFADevice_605060, base: "/",
    url: url_PostResyncMFADevice_605061, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResyncMFADevice_605040 = ref object of OpenApiRestCall_600426
proc url_GetResyncMFADevice_605042(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResyncMFADevice_605041(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SerialNumber: JString (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: JString (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: JString (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SerialNumber` field"
  var valid_605043 = query.getOrDefault("SerialNumber")
  valid_605043 = validateParameter(valid_605043, JString, required = true,
                                 default = nil)
  if valid_605043 != nil:
    section.add "SerialNumber", valid_605043
  var valid_605044 = query.getOrDefault("AuthenticationCode2")
  valid_605044 = validateParameter(valid_605044, JString, required = true,
                                 default = nil)
  if valid_605044 != nil:
    section.add "AuthenticationCode2", valid_605044
  var valid_605045 = query.getOrDefault("AuthenticationCode1")
  valid_605045 = validateParameter(valid_605045, JString, required = true,
                                 default = nil)
  if valid_605045 != nil:
    section.add "AuthenticationCode1", valid_605045
  var valid_605046 = query.getOrDefault("UserName")
  valid_605046 = validateParameter(valid_605046, JString, required = true,
                                 default = nil)
  if valid_605046 != nil:
    section.add "UserName", valid_605046
  var valid_605047 = query.getOrDefault("Action")
  valid_605047 = validateParameter(valid_605047, JString, required = true,
                                 default = newJString("ResyncMFADevice"))
  if valid_605047 != nil:
    section.add "Action", valid_605047
  var valid_605048 = query.getOrDefault("Version")
  valid_605048 = validateParameter(valid_605048, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605048 != nil:
    section.add "Version", valid_605048
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605049 = header.getOrDefault("X-Amz-Date")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Date", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Security-Token")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Security-Token", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Content-Sha256", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-Algorithm")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-Algorithm", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Signature")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Signature", valid_605053
  var valid_605054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605054 = validateParameter(valid_605054, JString, required = false,
                                 default = nil)
  if valid_605054 != nil:
    section.add "X-Amz-SignedHeaders", valid_605054
  var valid_605055 = header.getOrDefault("X-Amz-Credential")
  valid_605055 = validateParameter(valid_605055, JString, required = false,
                                 default = nil)
  if valid_605055 != nil:
    section.add "X-Amz-Credential", valid_605055
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605056: Call_GetResyncMFADevice_605040; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605056.validator(path, query, header, formData, body)
  let scheme = call_605056.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605056.url(scheme.get, call_605056.host, call_605056.base,
                         call_605056.route, valid.getOrDefault("path"))
  result = hook(call_605056, url, valid)

proc call*(call_605057: Call_GetResyncMFADevice_605040; SerialNumber: string;
          AuthenticationCode2: string; AuthenticationCode1: string;
          UserName: string; Action: string = "ResyncMFADevice";
          Version: string = "2010-05-08"): Recallable =
  ## getResyncMFADevice
  ## <p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>
  ##   SerialNumber: string (required)
  ##               : <p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AuthenticationCode2: string (required)
  ##                      : <p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   AuthenticationCode1: string (required)
  ##                      : <p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605058 = newJObject()
  add(query_605058, "SerialNumber", newJString(SerialNumber))
  add(query_605058, "AuthenticationCode2", newJString(AuthenticationCode2))
  add(query_605058, "AuthenticationCode1", newJString(AuthenticationCode1))
  add(query_605058, "UserName", newJString(UserName))
  add(query_605058, "Action", newJString(Action))
  add(query_605058, "Version", newJString(Version))
  result = call_605057.call(nil, query_605058, nil, nil, nil)

var getResyncMFADevice* = Call_GetResyncMFADevice_605040(
    name: "getResyncMFADevice", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=ResyncMFADevice", validator: validate_GetResyncMFADevice_605041,
    base: "/", url: url_GetResyncMFADevice_605042,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetDefaultPolicyVersion_605096 = ref object of OpenApiRestCall_600426
proc url_PostSetDefaultPolicyVersion_605098(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetDefaultPolicyVersion_605097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605099 = query.getOrDefault("Action")
  valid_605099 = validateParameter(valid_605099, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_605099 != nil:
    section.add "Action", valid_605099
  var valid_605100 = query.getOrDefault("Version")
  valid_605100 = validateParameter(valid_605100, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605100 != nil:
    section.add "Version", valid_605100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605101 = header.getOrDefault("X-Amz-Date")
  valid_605101 = validateParameter(valid_605101, JString, required = false,
                                 default = nil)
  if valid_605101 != nil:
    section.add "X-Amz-Date", valid_605101
  var valid_605102 = header.getOrDefault("X-Amz-Security-Token")
  valid_605102 = validateParameter(valid_605102, JString, required = false,
                                 default = nil)
  if valid_605102 != nil:
    section.add "X-Amz-Security-Token", valid_605102
  var valid_605103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Content-Sha256", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-Algorithm")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-Algorithm", valid_605104
  var valid_605105 = header.getOrDefault("X-Amz-Signature")
  valid_605105 = validateParameter(valid_605105, JString, required = false,
                                 default = nil)
  if valid_605105 != nil:
    section.add "X-Amz-Signature", valid_605105
  var valid_605106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605106 = validateParameter(valid_605106, JString, required = false,
                                 default = nil)
  if valid_605106 != nil:
    section.add "X-Amz-SignedHeaders", valid_605106
  var valid_605107 = header.getOrDefault("X-Amz-Credential")
  valid_605107 = validateParameter(valid_605107, JString, required = false,
                                 default = nil)
  if valid_605107 != nil:
    section.add "X-Amz-Credential", valid_605107
  result.add "header", section
  ## parameters in `formData` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `PolicyArn` field"
  var valid_605108 = formData.getOrDefault("PolicyArn")
  valid_605108 = validateParameter(valid_605108, JString, required = true,
                                 default = nil)
  if valid_605108 != nil:
    section.add "PolicyArn", valid_605108
  var valid_605109 = formData.getOrDefault("VersionId")
  valid_605109 = validateParameter(valid_605109, JString, required = true,
                                 default = nil)
  if valid_605109 != nil:
    section.add "VersionId", valid_605109
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605110: Call_PostSetDefaultPolicyVersion_605096; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605110.validator(path, query, header, formData, body)
  let scheme = call_605110.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605110.url(scheme.get, call_605110.host, call_605110.base,
                         call_605110.route, valid.getOrDefault("path"))
  result = hook(call_605110, url, valid)

proc call*(call_605111: Call_PostSetDefaultPolicyVersion_605096; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## postSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  var query_605112 = newJObject()
  var formData_605113 = newJObject()
  add(formData_605113, "PolicyArn", newJString(PolicyArn))
  add(query_605112, "Action", newJString(Action))
  add(query_605112, "Version", newJString(Version))
  add(formData_605113, "VersionId", newJString(VersionId))
  result = call_605111.call(nil, query_605112, nil, formData_605113, nil)

var postSetDefaultPolicyVersion* = Call_PostSetDefaultPolicyVersion_605096(
    name: "postSetDefaultPolicyVersion", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_PostSetDefaultPolicyVersion_605097, base: "/",
    url: url_PostSetDefaultPolicyVersion_605098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetDefaultPolicyVersion_605079 = ref object of OpenApiRestCall_600426
proc url_GetSetDefaultPolicyVersion_605081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetDefaultPolicyVersion_605080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PolicyArn: JString (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: JString (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `PolicyArn` field"
  var valid_605082 = query.getOrDefault("PolicyArn")
  valid_605082 = validateParameter(valid_605082, JString, required = true,
                                 default = nil)
  if valid_605082 != nil:
    section.add "PolicyArn", valid_605082
  var valid_605083 = query.getOrDefault("VersionId")
  valid_605083 = validateParameter(valid_605083, JString, required = true,
                                 default = nil)
  if valid_605083 != nil:
    section.add "VersionId", valid_605083
  var valid_605084 = query.getOrDefault("Action")
  valid_605084 = validateParameter(valid_605084, JString, required = true, default = newJString(
      "SetDefaultPolicyVersion"))
  if valid_605084 != nil:
    section.add "Action", valid_605084
  var valid_605085 = query.getOrDefault("Version")
  valid_605085 = validateParameter(valid_605085, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605085 != nil:
    section.add "Version", valid_605085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605086 = header.getOrDefault("X-Amz-Date")
  valid_605086 = validateParameter(valid_605086, JString, required = false,
                                 default = nil)
  if valid_605086 != nil:
    section.add "X-Amz-Date", valid_605086
  var valid_605087 = header.getOrDefault("X-Amz-Security-Token")
  valid_605087 = validateParameter(valid_605087, JString, required = false,
                                 default = nil)
  if valid_605087 != nil:
    section.add "X-Amz-Security-Token", valid_605087
  var valid_605088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Content-Sha256", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-Algorithm")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-Algorithm", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Signature")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Signature", valid_605090
  var valid_605091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605091 = validateParameter(valid_605091, JString, required = false,
                                 default = nil)
  if valid_605091 != nil:
    section.add "X-Amz-SignedHeaders", valid_605091
  var valid_605092 = header.getOrDefault("X-Amz-Credential")
  valid_605092 = validateParameter(valid_605092, JString, required = false,
                                 default = nil)
  if valid_605092 != nil:
    section.add "X-Amz-Credential", valid_605092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605093: Call_GetSetDefaultPolicyVersion_605079; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605093.validator(path, query, header, formData, body)
  let scheme = call_605093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605093.url(scheme.get, call_605093.host, call_605093.base,
                         call_605093.route, valid.getOrDefault("path"))
  result = hook(call_605093, url, valid)

proc call*(call_605094: Call_GetSetDefaultPolicyVersion_605079; PolicyArn: string;
          VersionId: string; Action: string = "SetDefaultPolicyVersion";
          Version: string = "2010-05-08"): Recallable =
  ## getSetDefaultPolicyVersion
  ## <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   PolicyArn: string (required)
  ##            : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   VersionId: string (required)
  ##            : <p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605095 = newJObject()
  add(query_605095, "PolicyArn", newJString(PolicyArn))
  add(query_605095, "VersionId", newJString(VersionId))
  add(query_605095, "Action", newJString(Action))
  add(query_605095, "Version", newJString(Version))
  result = call_605094.call(nil, query_605095, nil, nil, nil)

var getSetDefaultPolicyVersion* = Call_GetSetDefaultPolicyVersion_605079(
    name: "getSetDefaultPolicyVersion", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SetDefaultPolicyVersion",
    validator: validate_GetSetDefaultPolicyVersion_605080, base: "/",
    url: url_GetSetDefaultPolicyVersion_605081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSetSecurityTokenServicePreferences_605130 = ref object of OpenApiRestCall_600426
proc url_PostSetSecurityTokenServicePreferences_605132(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSetSecurityTokenServicePreferences_605131(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605133 = query.getOrDefault("Action")
  valid_605133 = validateParameter(valid_605133, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_605133 != nil:
    section.add "Action", valid_605133
  var valid_605134 = query.getOrDefault("Version")
  valid_605134 = validateParameter(valid_605134, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605134 != nil:
    section.add "Version", valid_605134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605135 = header.getOrDefault("X-Amz-Date")
  valid_605135 = validateParameter(valid_605135, JString, required = false,
                                 default = nil)
  if valid_605135 != nil:
    section.add "X-Amz-Date", valid_605135
  var valid_605136 = header.getOrDefault("X-Amz-Security-Token")
  valid_605136 = validateParameter(valid_605136, JString, required = false,
                                 default = nil)
  if valid_605136 != nil:
    section.add "X-Amz-Security-Token", valid_605136
  var valid_605137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605137 = validateParameter(valid_605137, JString, required = false,
                                 default = nil)
  if valid_605137 != nil:
    section.add "X-Amz-Content-Sha256", valid_605137
  var valid_605138 = header.getOrDefault("X-Amz-Algorithm")
  valid_605138 = validateParameter(valid_605138, JString, required = false,
                                 default = nil)
  if valid_605138 != nil:
    section.add "X-Amz-Algorithm", valid_605138
  var valid_605139 = header.getOrDefault("X-Amz-Signature")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "X-Amz-Signature", valid_605139
  var valid_605140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "X-Amz-SignedHeaders", valid_605140
  var valid_605141 = header.getOrDefault("X-Amz-Credential")
  valid_605141 = validateParameter(valid_605141, JString, required = false,
                                 default = nil)
  if valid_605141 != nil:
    section.add "X-Amz-Credential", valid_605141
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalEndpointTokenVersion` field"
  var valid_605142 = formData.getOrDefault("GlobalEndpointTokenVersion")
  valid_605142 = validateParameter(valid_605142, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_605142 != nil:
    section.add "GlobalEndpointTokenVersion", valid_605142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605143: Call_PostSetSecurityTokenServicePreferences_605130;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_605143.validator(path, query, header, formData, body)
  let scheme = call_605143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605143.url(scheme.get, call_605143.host, call_605143.base,
                         call_605143.route, valid.getOrDefault("path"))
  result = hook(call_605143, url, valid)

proc call*(call_605144: Call_PostSetSecurityTokenServicePreferences_605130;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## postSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_605145 = newJObject()
  var formData_605146 = newJObject()
  add(query_605145, "Action", newJString(Action))
  add(formData_605146, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_605145, "Version", newJString(Version))
  result = call_605144.call(nil, query_605145, nil, formData_605146, nil)

var postSetSecurityTokenServicePreferences* = Call_PostSetSecurityTokenServicePreferences_605130(
    name: "postSetSecurityTokenServicePreferences", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_PostSetSecurityTokenServicePreferences_605131, base: "/",
    url: url_PostSetSecurityTokenServicePreferences_605132,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSetSecurityTokenServicePreferences_605114 = ref object of OpenApiRestCall_600426
proc url_GetSetSecurityTokenServicePreferences_605116(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSetSecurityTokenServicePreferences_605115(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalEndpointTokenVersion: JString (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605117 = query.getOrDefault("Action")
  valid_605117 = validateParameter(valid_605117, JString, required = true, default = newJString(
      "SetSecurityTokenServicePreferences"))
  if valid_605117 != nil:
    section.add "Action", valid_605117
  var valid_605118 = query.getOrDefault("GlobalEndpointTokenVersion")
  valid_605118 = validateParameter(valid_605118, JString, required = true,
                                 default = newJString("v1Token"))
  if valid_605118 != nil:
    section.add "GlobalEndpointTokenVersion", valid_605118
  var valid_605119 = query.getOrDefault("Version")
  valid_605119 = validateParameter(valid_605119, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605119 != nil:
    section.add "Version", valid_605119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605120 = header.getOrDefault("X-Amz-Date")
  valid_605120 = validateParameter(valid_605120, JString, required = false,
                                 default = nil)
  if valid_605120 != nil:
    section.add "X-Amz-Date", valid_605120
  var valid_605121 = header.getOrDefault("X-Amz-Security-Token")
  valid_605121 = validateParameter(valid_605121, JString, required = false,
                                 default = nil)
  if valid_605121 != nil:
    section.add "X-Amz-Security-Token", valid_605121
  var valid_605122 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605122 = validateParameter(valid_605122, JString, required = false,
                                 default = nil)
  if valid_605122 != nil:
    section.add "X-Amz-Content-Sha256", valid_605122
  var valid_605123 = header.getOrDefault("X-Amz-Algorithm")
  valid_605123 = validateParameter(valid_605123, JString, required = false,
                                 default = nil)
  if valid_605123 != nil:
    section.add "X-Amz-Algorithm", valid_605123
  var valid_605124 = header.getOrDefault("X-Amz-Signature")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "X-Amz-Signature", valid_605124
  var valid_605125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605125 = validateParameter(valid_605125, JString, required = false,
                                 default = nil)
  if valid_605125 != nil:
    section.add "X-Amz-SignedHeaders", valid_605125
  var valid_605126 = header.getOrDefault("X-Amz-Credential")
  valid_605126 = validateParameter(valid_605126, JString, required = false,
                                 default = nil)
  if valid_605126 != nil:
    section.add "X-Amz-Credential", valid_605126
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605127: Call_GetSetSecurityTokenServicePreferences_605114;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ## 
  let valid = call_605127.validator(path, query, header, formData, body)
  let scheme = call_605127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605127.url(scheme.get, call_605127.host, call_605127.base,
                         call_605127.route, valid.getOrDefault("path"))
  result = hook(call_605127, url, valid)

proc call*(call_605128: Call_GetSetSecurityTokenServicePreferences_605114;
          Action: string = "SetSecurityTokenServicePreferences";
          GlobalEndpointTokenVersion: string = "v1Token";
          Version: string = "2010-05-08"): Recallable =
  ## getSetSecurityTokenServicePreferences
  ## <p>Sets the specified version of the global endpoint token as the token version used for the AWS account.</p> <p>By default, AWS Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. AWS recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region">AWS Regions and Endpoints</a> in the <i>AWS General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
  ##   Action: string (required)
  ##   GlobalEndpointTokenVersion: string (required)
  ##                             : <p>The version of the global endpoint token. Version 1 tokens are valid only in AWS Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and Deactivating STS in an AWS Region</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  var query_605129 = newJObject()
  add(query_605129, "Action", newJString(Action))
  add(query_605129, "GlobalEndpointTokenVersion",
      newJString(GlobalEndpointTokenVersion))
  add(query_605129, "Version", newJString(Version))
  result = call_605128.call(nil, query_605129, nil, nil, nil)

var getSetSecurityTokenServicePreferences* = Call_GetSetSecurityTokenServicePreferences_605114(
    name: "getSetSecurityTokenServicePreferences", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=SetSecurityTokenServicePreferences",
    validator: validate_GetSetSecurityTokenServicePreferences_605115, base: "/",
    url: url_GetSetSecurityTokenServicePreferences_605116,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulateCustomPolicy_605172 = ref object of OpenApiRestCall_600426
proc url_PostSimulateCustomPolicy_605174(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulateCustomPolicy_605173(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605175 = query.getOrDefault("Action")
  valid_605175 = validateParameter(valid_605175, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_605175 != nil:
    section.add "Action", valid_605175
  var valid_605176 = query.getOrDefault("Version")
  valid_605176 = validateParameter(valid_605176, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605176 != nil:
    section.add "Version", valid_605176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605177 = header.getOrDefault("X-Amz-Date")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-Date", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-Security-Token")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-Security-Token", valid_605178
  var valid_605179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605179 = validateParameter(valid_605179, JString, required = false,
                                 default = nil)
  if valid_605179 != nil:
    section.add "X-Amz-Content-Sha256", valid_605179
  var valid_605180 = header.getOrDefault("X-Amz-Algorithm")
  valid_605180 = validateParameter(valid_605180, JString, required = false,
                                 default = nil)
  if valid_605180 != nil:
    section.add "X-Amz-Algorithm", valid_605180
  var valid_605181 = header.getOrDefault("X-Amz-Signature")
  valid_605181 = validateParameter(valid_605181, JString, required = false,
                                 default = nil)
  if valid_605181 != nil:
    section.add "X-Amz-Signature", valid_605181
  var valid_605182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605182 = validateParameter(valid_605182, JString, required = false,
                                 default = nil)
  if valid_605182 != nil:
    section.add "X-Amz-SignedHeaders", valid_605182
  var valid_605183 = header.getOrDefault("X-Amz-Credential")
  valid_605183 = validateParameter(valid_605183, JString, required = false,
                                 default = nil)
  if valid_605183 != nil:
    section.add "X-Amz-Credential", valid_605183
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_605184 = formData.getOrDefault("ResourceArns")
  valid_605184 = validateParameter(valid_605184, JArray, required = false,
                                 default = nil)
  if valid_605184 != nil:
    section.add "ResourceArns", valid_605184
  var valid_605185 = formData.getOrDefault("ContextEntries")
  valid_605185 = validateParameter(valid_605185, JArray, required = false,
                                 default = nil)
  if valid_605185 != nil:
    section.add "ContextEntries", valid_605185
  var valid_605186 = formData.getOrDefault("CallerArn")
  valid_605186 = validateParameter(valid_605186, JString, required = false,
                                 default = nil)
  if valid_605186 != nil:
    section.add "CallerArn", valid_605186
  var valid_605187 = formData.getOrDefault("ResourceOwner")
  valid_605187 = validateParameter(valid_605187, JString, required = false,
                                 default = nil)
  if valid_605187 != nil:
    section.add "ResourceOwner", valid_605187
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_605188 = formData.getOrDefault("ActionNames")
  valid_605188 = validateParameter(valid_605188, JArray, required = true, default = nil)
  if valid_605188 != nil:
    section.add "ActionNames", valid_605188
  var valid_605189 = formData.getOrDefault("Marker")
  valid_605189 = validateParameter(valid_605189, JString, required = false,
                                 default = nil)
  if valid_605189 != nil:
    section.add "Marker", valid_605189
  var valid_605190 = formData.getOrDefault("PolicyInputList")
  valid_605190 = validateParameter(valid_605190, JArray, required = true, default = nil)
  if valid_605190 != nil:
    section.add "PolicyInputList", valid_605190
  var valid_605191 = formData.getOrDefault("ResourceHandlingOption")
  valid_605191 = validateParameter(valid_605191, JString, required = false,
                                 default = nil)
  if valid_605191 != nil:
    section.add "ResourceHandlingOption", valid_605191
  var valid_605192 = formData.getOrDefault("MaxItems")
  valid_605192 = validateParameter(valid_605192, JInt, required = false, default = nil)
  if valid_605192 != nil:
    section.add "MaxItems", valid_605192
  var valid_605193 = formData.getOrDefault("ResourcePolicy")
  valid_605193 = validateParameter(valid_605193, JString, required = false,
                                 default = nil)
  if valid_605193 != nil:
    section.add "ResourcePolicy", valid_605193
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605194: Call_PostSimulateCustomPolicy_605172; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_605194.validator(path, query, header, formData, body)
  let scheme = call_605194.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605194.url(scheme.get, call_605194.host, call_605194.base,
                         call_605194.route, valid.getOrDefault("path"))
  result = hook(call_605194, url, valid)

proc call*(call_605195: Call_PostSimulateCustomPolicy_605172;
          ActionNames: JsonNode; PolicyInputList: JsonNode;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulateCustomPolicy";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_605196 = newJObject()
  var formData_605197 = newJObject()
  if ResourceArns != nil:
    formData_605197.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_605197.add "ContextEntries", ContextEntries
  add(formData_605197, "CallerArn", newJString(CallerArn))
  add(formData_605197, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_605197.add "ActionNames", ActionNames
  add(formData_605197, "Marker", newJString(Marker))
  add(query_605196, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_605197.add "PolicyInputList", PolicyInputList
  add(formData_605197, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_605197, "MaxItems", newJInt(MaxItems))
  add(formData_605197, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_605196, "Version", newJString(Version))
  result = call_605195.call(nil, query_605196, nil, formData_605197, nil)

var postSimulateCustomPolicy* = Call_PostSimulateCustomPolicy_605172(
    name: "postSimulateCustomPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_PostSimulateCustomPolicy_605173, base: "/",
    url: url_PostSimulateCustomPolicy_605174, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulateCustomPolicy_605147 = ref object of OpenApiRestCall_600426
proc url_GetSimulateCustomPolicy_605149(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulateCustomPolicy_605148(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605150 = query.getOrDefault("ContextEntries")
  valid_605150 = validateParameter(valid_605150, JArray, required = false,
                                 default = nil)
  if valid_605150 != nil:
    section.add "ContextEntries", valid_605150
  var valid_605151 = query.getOrDefault("ResourcePolicy")
  valid_605151 = validateParameter(valid_605151, JString, required = false,
                                 default = nil)
  if valid_605151 != nil:
    section.add "ResourcePolicy", valid_605151
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_605152 = query.getOrDefault("ActionNames")
  valid_605152 = validateParameter(valid_605152, JArray, required = true, default = nil)
  if valid_605152 != nil:
    section.add "ActionNames", valid_605152
  var valid_605153 = query.getOrDefault("PolicyInputList")
  valid_605153 = validateParameter(valid_605153, JArray, required = true, default = nil)
  if valid_605153 != nil:
    section.add "PolicyInputList", valid_605153
  var valid_605154 = query.getOrDefault("Action")
  valid_605154 = validateParameter(valid_605154, JString, required = true,
                                 default = newJString("SimulateCustomPolicy"))
  if valid_605154 != nil:
    section.add "Action", valid_605154
  var valid_605155 = query.getOrDefault("ResourceArns")
  valid_605155 = validateParameter(valid_605155, JArray, required = false,
                                 default = nil)
  if valid_605155 != nil:
    section.add "ResourceArns", valid_605155
  var valid_605156 = query.getOrDefault("Marker")
  valid_605156 = validateParameter(valid_605156, JString, required = false,
                                 default = nil)
  if valid_605156 != nil:
    section.add "Marker", valid_605156
  var valid_605157 = query.getOrDefault("ResourceOwner")
  valid_605157 = validateParameter(valid_605157, JString, required = false,
                                 default = nil)
  if valid_605157 != nil:
    section.add "ResourceOwner", valid_605157
  var valid_605158 = query.getOrDefault("CallerArn")
  valid_605158 = validateParameter(valid_605158, JString, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "CallerArn", valid_605158
  var valid_605159 = query.getOrDefault("ResourceHandlingOption")
  valid_605159 = validateParameter(valid_605159, JString, required = false,
                                 default = nil)
  if valid_605159 != nil:
    section.add "ResourceHandlingOption", valid_605159
  var valid_605160 = query.getOrDefault("MaxItems")
  valid_605160 = validateParameter(valid_605160, JInt, required = false, default = nil)
  if valid_605160 != nil:
    section.add "MaxItems", valid_605160
  var valid_605161 = query.getOrDefault("Version")
  valid_605161 = validateParameter(valid_605161, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605161 != nil:
    section.add "Version", valid_605161
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605162 = header.getOrDefault("X-Amz-Date")
  valid_605162 = validateParameter(valid_605162, JString, required = false,
                                 default = nil)
  if valid_605162 != nil:
    section.add "X-Amz-Date", valid_605162
  var valid_605163 = header.getOrDefault("X-Amz-Security-Token")
  valid_605163 = validateParameter(valid_605163, JString, required = false,
                                 default = nil)
  if valid_605163 != nil:
    section.add "X-Amz-Security-Token", valid_605163
  var valid_605164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605164 = validateParameter(valid_605164, JString, required = false,
                                 default = nil)
  if valid_605164 != nil:
    section.add "X-Amz-Content-Sha256", valid_605164
  var valid_605165 = header.getOrDefault("X-Amz-Algorithm")
  valid_605165 = validateParameter(valid_605165, JString, required = false,
                                 default = nil)
  if valid_605165 != nil:
    section.add "X-Amz-Algorithm", valid_605165
  var valid_605166 = header.getOrDefault("X-Amz-Signature")
  valid_605166 = validateParameter(valid_605166, JString, required = false,
                                 default = nil)
  if valid_605166 != nil:
    section.add "X-Amz-Signature", valid_605166
  var valid_605167 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605167 = validateParameter(valid_605167, JString, required = false,
                                 default = nil)
  if valid_605167 != nil:
    section.add "X-Amz-SignedHeaders", valid_605167
  var valid_605168 = header.getOrDefault("X-Amz-Credential")
  valid_605168 = validateParameter(valid_605168, JString, required = false,
                                 default = nil)
  if valid_605168 != nil:
    section.add "X-Amz-Credential", valid_605168
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605169: Call_GetSimulateCustomPolicy_605147; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_605169.validator(path, query, header, formData, body)
  let scheme = call_605169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605169.url(scheme.get, call_605169.host, call_605169.base,
                         call_605169.route, valid.getOrDefault("path"))
  result = hook(call_605169, url, valid)

proc call*(call_605170: Call_GetSimulateCustomPolicy_605147; ActionNames: JsonNode;
          PolicyInputList: JsonNode; ContextEntries: JsonNode = nil;
          ResourcePolicy: string = ""; Action: string = "SimulateCustomPolicy";
          ResourceArns: JsonNode = nil; Marker: string = ""; ResourceOwner: string = "";
          CallerArn: string = ""; ResourceHandlingOption: string = "";
          MaxItems: int = 0; Version: string = "2010-05-08"): Recallable =
  ## getSimulateCustomPolicy
  ## <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and AWS resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.
  ##   PolicyInputList: JArray (required)
  ##                  : <p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : <p>An ARN representing the AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p>
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security-group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security-group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security-group, network-interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security-group, network-interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security-group, network-interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605171 = newJObject()
  if ContextEntries != nil:
    query_605171.add "ContextEntries", ContextEntries
  add(query_605171, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_605171.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_605171.add "PolicyInputList", PolicyInputList
  add(query_605171, "Action", newJString(Action))
  if ResourceArns != nil:
    query_605171.add "ResourceArns", ResourceArns
  add(query_605171, "Marker", newJString(Marker))
  add(query_605171, "ResourceOwner", newJString(ResourceOwner))
  add(query_605171, "CallerArn", newJString(CallerArn))
  add(query_605171, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_605171, "MaxItems", newJInt(MaxItems))
  add(query_605171, "Version", newJString(Version))
  result = call_605170.call(nil, query_605171, nil, nil, nil)

var getSimulateCustomPolicy* = Call_GetSimulateCustomPolicy_605147(
    name: "getSimulateCustomPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulateCustomPolicy",
    validator: validate_GetSimulateCustomPolicy_605148, base: "/",
    url: url_GetSimulateCustomPolicy_605149, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostSimulatePrincipalPolicy_605224 = ref object of OpenApiRestCall_600426
proc url_PostSimulatePrincipalPolicy_605226(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostSimulatePrincipalPolicy_605225(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605227 = query.getOrDefault("Action")
  valid_605227 = validateParameter(valid_605227, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_605227 != nil:
    section.add "Action", valid_605227
  var valid_605228 = query.getOrDefault("Version")
  valid_605228 = validateParameter(valid_605228, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605228 != nil:
    section.add "Version", valid_605228
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605229 = header.getOrDefault("X-Amz-Date")
  valid_605229 = validateParameter(valid_605229, JString, required = false,
                                 default = nil)
  if valid_605229 != nil:
    section.add "X-Amz-Date", valid_605229
  var valid_605230 = header.getOrDefault("X-Amz-Security-Token")
  valid_605230 = validateParameter(valid_605230, JString, required = false,
                                 default = nil)
  if valid_605230 != nil:
    section.add "X-Amz-Security-Token", valid_605230
  var valid_605231 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605231 = validateParameter(valid_605231, JString, required = false,
                                 default = nil)
  if valid_605231 != nil:
    section.add "X-Amz-Content-Sha256", valid_605231
  var valid_605232 = header.getOrDefault("X-Amz-Algorithm")
  valid_605232 = validateParameter(valid_605232, JString, required = false,
                                 default = nil)
  if valid_605232 != nil:
    section.add "X-Amz-Algorithm", valid_605232
  var valid_605233 = header.getOrDefault("X-Amz-Signature")
  valid_605233 = validateParameter(valid_605233, JString, required = false,
                                 default = nil)
  if valid_605233 != nil:
    section.add "X-Amz-Signature", valid_605233
  var valid_605234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605234 = validateParameter(valid_605234, JString, required = false,
                                 default = nil)
  if valid_605234 != nil:
    section.add "X-Amz-SignedHeaders", valid_605234
  var valid_605235 = header.getOrDefault("X-Amz-Credential")
  valid_605235 = validateParameter(valid_605235, JString, required = false,
                                 default = nil)
  if valid_605235 != nil:
    section.add "X-Amz-Credential", valid_605235
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  var valid_605236 = formData.getOrDefault("ResourceArns")
  valid_605236 = validateParameter(valid_605236, JArray, required = false,
                                 default = nil)
  if valid_605236 != nil:
    section.add "ResourceArns", valid_605236
  var valid_605237 = formData.getOrDefault("ContextEntries")
  valid_605237 = validateParameter(valid_605237, JArray, required = false,
                                 default = nil)
  if valid_605237 != nil:
    section.add "ContextEntries", valid_605237
  var valid_605238 = formData.getOrDefault("CallerArn")
  valid_605238 = validateParameter(valid_605238, JString, required = false,
                                 default = nil)
  if valid_605238 != nil:
    section.add "CallerArn", valid_605238
  var valid_605239 = formData.getOrDefault("ResourceOwner")
  valid_605239 = validateParameter(valid_605239, JString, required = false,
                                 default = nil)
  if valid_605239 != nil:
    section.add "ResourceOwner", valid_605239
  assert formData != nil,
        "formData argument is necessary due to required `ActionNames` field"
  var valid_605240 = formData.getOrDefault("ActionNames")
  valid_605240 = validateParameter(valid_605240, JArray, required = true, default = nil)
  if valid_605240 != nil:
    section.add "ActionNames", valid_605240
  var valid_605241 = formData.getOrDefault("Marker")
  valid_605241 = validateParameter(valid_605241, JString, required = false,
                                 default = nil)
  if valid_605241 != nil:
    section.add "Marker", valid_605241
  var valid_605242 = formData.getOrDefault("PolicyInputList")
  valid_605242 = validateParameter(valid_605242, JArray, required = false,
                                 default = nil)
  if valid_605242 != nil:
    section.add "PolicyInputList", valid_605242
  var valid_605243 = formData.getOrDefault("ResourceHandlingOption")
  valid_605243 = validateParameter(valid_605243, JString, required = false,
                                 default = nil)
  if valid_605243 != nil:
    section.add "ResourceHandlingOption", valid_605243
  var valid_605244 = formData.getOrDefault("PolicySourceArn")
  valid_605244 = validateParameter(valid_605244, JString, required = true,
                                 default = nil)
  if valid_605244 != nil:
    section.add "PolicySourceArn", valid_605244
  var valid_605245 = formData.getOrDefault("MaxItems")
  valid_605245 = validateParameter(valid_605245, JInt, required = false, default = nil)
  if valid_605245 != nil:
    section.add "MaxItems", valid_605245
  var valid_605246 = formData.getOrDefault("ResourcePolicy")
  valid_605246 = validateParameter(valid_605246, JString, required = false,
                                 default = nil)
  if valid_605246 != nil:
    section.add "ResourcePolicy", valid_605246
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605247: Call_PostSimulatePrincipalPolicy_605224; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_605247.validator(path, query, header, formData, body)
  let scheme = call_605247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605247.url(scheme.get, call_605247.host, call_605247.base,
                         call_605247.route, valid.getOrDefault("path"))
  result = hook(call_605247, url, valid)

proc call*(call_605248: Call_PostSimulatePrincipalPolicy_605224;
          ActionNames: JsonNode; PolicySourceArn: string;
          ResourceArns: JsonNode = nil; ContextEntries: JsonNode = nil;
          CallerArn: string = ""; ResourceOwner: string = ""; Marker: string = "";
          Action: string = "SimulatePrincipalPolicy";
          PolicyInputList: JsonNode = nil; ResourceHandlingOption: string = "";
          MaxItems: int = 0; ResourcePolicy: string = ""; Version: string = "2010-05-08"): Recallable =
  ## postSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   Action: string (required)
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_605249 = newJObject()
  var formData_605250 = newJObject()
  if ResourceArns != nil:
    formData_605250.add "ResourceArns", ResourceArns
  if ContextEntries != nil:
    formData_605250.add "ContextEntries", ContextEntries
  add(formData_605250, "CallerArn", newJString(CallerArn))
  add(formData_605250, "ResourceOwner", newJString(ResourceOwner))
  if ActionNames != nil:
    formData_605250.add "ActionNames", ActionNames
  add(formData_605250, "Marker", newJString(Marker))
  add(query_605249, "Action", newJString(Action))
  if PolicyInputList != nil:
    formData_605250.add "PolicyInputList", PolicyInputList
  add(formData_605250, "ResourceHandlingOption",
      newJString(ResourceHandlingOption))
  add(formData_605250, "PolicySourceArn", newJString(PolicySourceArn))
  add(formData_605250, "MaxItems", newJInt(MaxItems))
  add(formData_605250, "ResourcePolicy", newJString(ResourcePolicy))
  add(query_605249, "Version", newJString(Version))
  result = call_605248.call(nil, query_605249, nil, formData_605250, nil)

var postSimulatePrincipalPolicy* = Call_PostSimulatePrincipalPolicy_605224(
    name: "postSimulatePrincipalPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_PostSimulatePrincipalPolicy_605225, base: "/",
    url: url_PostSimulatePrincipalPolicy_605226,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetSimulatePrincipalPolicy_605198 = ref object of OpenApiRestCall_600426
proc url_GetSimulatePrincipalPolicy_605200(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetSimulatePrincipalPolicy_605199(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: JString
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: JString
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: JString
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: JString
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: JString
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: JInt
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605201 = query.getOrDefault("ContextEntries")
  valid_605201 = validateParameter(valid_605201, JArray, required = false,
                                 default = nil)
  if valid_605201 != nil:
    section.add "ContextEntries", valid_605201
  var valid_605202 = query.getOrDefault("ResourcePolicy")
  valid_605202 = validateParameter(valid_605202, JString, required = false,
                                 default = nil)
  if valid_605202 != nil:
    section.add "ResourcePolicy", valid_605202
  assert query != nil,
        "query argument is necessary due to required `ActionNames` field"
  var valid_605203 = query.getOrDefault("ActionNames")
  valid_605203 = validateParameter(valid_605203, JArray, required = true, default = nil)
  if valid_605203 != nil:
    section.add "ActionNames", valid_605203
  var valid_605204 = query.getOrDefault("PolicyInputList")
  valid_605204 = validateParameter(valid_605204, JArray, required = false,
                                 default = nil)
  if valid_605204 != nil:
    section.add "PolicyInputList", valid_605204
  var valid_605205 = query.getOrDefault("PolicySourceArn")
  valid_605205 = validateParameter(valid_605205, JString, required = true,
                                 default = nil)
  if valid_605205 != nil:
    section.add "PolicySourceArn", valid_605205
  var valid_605206 = query.getOrDefault("Action")
  valid_605206 = validateParameter(valid_605206, JString, required = true, default = newJString(
      "SimulatePrincipalPolicy"))
  if valid_605206 != nil:
    section.add "Action", valid_605206
  var valid_605207 = query.getOrDefault("ResourceArns")
  valid_605207 = validateParameter(valid_605207, JArray, required = false,
                                 default = nil)
  if valid_605207 != nil:
    section.add "ResourceArns", valid_605207
  var valid_605208 = query.getOrDefault("Marker")
  valid_605208 = validateParameter(valid_605208, JString, required = false,
                                 default = nil)
  if valid_605208 != nil:
    section.add "Marker", valid_605208
  var valid_605209 = query.getOrDefault("ResourceOwner")
  valid_605209 = validateParameter(valid_605209, JString, required = false,
                                 default = nil)
  if valid_605209 != nil:
    section.add "ResourceOwner", valid_605209
  var valid_605210 = query.getOrDefault("CallerArn")
  valid_605210 = validateParameter(valid_605210, JString, required = false,
                                 default = nil)
  if valid_605210 != nil:
    section.add "CallerArn", valid_605210
  var valid_605211 = query.getOrDefault("ResourceHandlingOption")
  valid_605211 = validateParameter(valid_605211, JString, required = false,
                                 default = nil)
  if valid_605211 != nil:
    section.add "ResourceHandlingOption", valid_605211
  var valid_605212 = query.getOrDefault("MaxItems")
  valid_605212 = validateParameter(valid_605212, JInt, required = false, default = nil)
  if valid_605212 != nil:
    section.add "MaxItems", valid_605212
  var valid_605213 = query.getOrDefault("Version")
  valid_605213 = validateParameter(valid_605213, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605213 != nil:
    section.add "Version", valid_605213
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605214 = header.getOrDefault("X-Amz-Date")
  valid_605214 = validateParameter(valid_605214, JString, required = false,
                                 default = nil)
  if valid_605214 != nil:
    section.add "X-Amz-Date", valid_605214
  var valid_605215 = header.getOrDefault("X-Amz-Security-Token")
  valid_605215 = validateParameter(valid_605215, JString, required = false,
                                 default = nil)
  if valid_605215 != nil:
    section.add "X-Amz-Security-Token", valid_605215
  var valid_605216 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605216 = validateParameter(valid_605216, JString, required = false,
                                 default = nil)
  if valid_605216 != nil:
    section.add "X-Amz-Content-Sha256", valid_605216
  var valid_605217 = header.getOrDefault("X-Amz-Algorithm")
  valid_605217 = validateParameter(valid_605217, JString, required = false,
                                 default = nil)
  if valid_605217 != nil:
    section.add "X-Amz-Algorithm", valid_605217
  var valid_605218 = header.getOrDefault("X-Amz-Signature")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Signature", valid_605218
  var valid_605219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605219 = validateParameter(valid_605219, JString, required = false,
                                 default = nil)
  if valid_605219 != nil:
    section.add "X-Amz-SignedHeaders", valid_605219
  var valid_605220 = header.getOrDefault("X-Amz-Credential")
  valid_605220 = validateParameter(valid_605220, JString, required = false,
                                 default = nil)
  if valid_605220 != nil:
    section.add "X-Amz-Credential", valid_605220
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605221: Call_GetSimulatePrincipalPolicy_605198; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ## 
  let valid = call_605221.validator(path, query, header, formData, body)
  let scheme = call_605221.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605221.url(scheme.get, call_605221.host, call_605221.base,
                         call_605221.route, valid.getOrDefault("path"))
  result = hook(call_605221, url, valid)

proc call*(call_605222: Call_GetSimulatePrincipalPolicy_605198;
          ActionNames: JsonNode; PolicySourceArn: string;
          ContextEntries: JsonNode = nil; ResourcePolicy: string = "";
          PolicyInputList: JsonNode = nil;
          Action: string = "SimulatePrincipalPolicy"; ResourceArns: JsonNode = nil;
          Marker: string = ""; ResourceOwner: string = ""; CallerArn: string = "";
          ResourceHandlingOption: string = ""; MaxItems: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## getSimulatePrincipalPolicy
  ## <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and AWS resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>
  ##   ContextEntries: JArray
  ##                 : A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
  ##   ResourcePolicy: string
  ##                 : <p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ActionNames: JArray (required)
  ##              : A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.
  ##   PolicyInputList: JArray
  ##                  : <p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   PolicySourceArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   ResourceArns: JArray
  ##               : <p>A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   Marker: string
  ##         : Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.
  ##   ResourceOwner: string
  ##                : An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.
  ##   CallerArn: string
  ##            : <p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>.</p>
  ##   ResourceHandlingOption: string
  ##                         : <p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a 
  ## href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-Classic-InstanceStore</b> </p> <p>instance, image, security group</p> </li> <li> <p> <b>EC2-Classic-EBS</b> </p> <p>instance, image, security group, volume</p> </li> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul>
  ##   MaxItems: int
  ##           : <p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p>
  ##   Version: string (required)
  var query_605223 = newJObject()
  if ContextEntries != nil:
    query_605223.add "ContextEntries", ContextEntries
  add(query_605223, "ResourcePolicy", newJString(ResourcePolicy))
  if ActionNames != nil:
    query_605223.add "ActionNames", ActionNames
  if PolicyInputList != nil:
    query_605223.add "PolicyInputList", PolicyInputList
  add(query_605223, "PolicySourceArn", newJString(PolicySourceArn))
  add(query_605223, "Action", newJString(Action))
  if ResourceArns != nil:
    query_605223.add "ResourceArns", ResourceArns
  add(query_605223, "Marker", newJString(Marker))
  add(query_605223, "ResourceOwner", newJString(ResourceOwner))
  add(query_605223, "CallerArn", newJString(CallerArn))
  add(query_605223, "ResourceHandlingOption", newJString(ResourceHandlingOption))
  add(query_605223, "MaxItems", newJInt(MaxItems))
  add(query_605223, "Version", newJString(Version))
  result = call_605222.call(nil, query_605223, nil, nil, nil)

var getSimulatePrincipalPolicy* = Call_GetSimulatePrincipalPolicy_605198(
    name: "getSimulatePrincipalPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=SimulatePrincipalPolicy",
    validator: validate_GetSimulatePrincipalPolicy_605199, base: "/",
    url: url_GetSimulatePrincipalPolicy_605200,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagRole_605268 = ref object of OpenApiRestCall_600426
proc url_PostTagRole_605270(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagRole_605269(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605271 = query.getOrDefault("Action")
  valid_605271 = validateParameter(valid_605271, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_605271 != nil:
    section.add "Action", valid_605271
  var valid_605272 = query.getOrDefault("Version")
  valid_605272 = validateParameter(valid_605272, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605272 != nil:
    section.add "Version", valid_605272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605273 = header.getOrDefault("X-Amz-Date")
  valid_605273 = validateParameter(valid_605273, JString, required = false,
                                 default = nil)
  if valid_605273 != nil:
    section.add "X-Amz-Date", valid_605273
  var valid_605274 = header.getOrDefault("X-Amz-Security-Token")
  valid_605274 = validateParameter(valid_605274, JString, required = false,
                                 default = nil)
  if valid_605274 != nil:
    section.add "X-Amz-Security-Token", valid_605274
  var valid_605275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605275 = validateParameter(valid_605275, JString, required = false,
                                 default = nil)
  if valid_605275 != nil:
    section.add "X-Amz-Content-Sha256", valid_605275
  var valid_605276 = header.getOrDefault("X-Amz-Algorithm")
  valid_605276 = validateParameter(valid_605276, JString, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "X-Amz-Algorithm", valid_605276
  var valid_605277 = header.getOrDefault("X-Amz-Signature")
  valid_605277 = validateParameter(valid_605277, JString, required = false,
                                 default = nil)
  if valid_605277 != nil:
    section.add "X-Amz-Signature", valid_605277
  var valid_605278 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605278 = validateParameter(valid_605278, JString, required = false,
                                 default = nil)
  if valid_605278 != nil:
    section.add "X-Amz-SignedHeaders", valid_605278
  var valid_605279 = header.getOrDefault("X-Amz-Credential")
  valid_605279 = validateParameter(valid_605279, JString, required = false,
                                 default = nil)
  if valid_605279 != nil:
    section.add "X-Amz-Credential", valid_605279
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605280 = formData.getOrDefault("RoleName")
  valid_605280 = validateParameter(valid_605280, JString, required = true,
                                 default = nil)
  if valid_605280 != nil:
    section.add "RoleName", valid_605280
  var valid_605281 = formData.getOrDefault("Tags")
  valid_605281 = validateParameter(valid_605281, JArray, required = true, default = nil)
  if valid_605281 != nil:
    section.add "Tags", valid_605281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605282: Call_PostTagRole_605268; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605282.validator(path, query, header, formData, body)
  let scheme = call_605282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605282.url(scheme.get, call_605282.host, call_605282.base,
                         call_605282.route, valid.getOrDefault("path"))
  result = hook(call_605282, url, valid)

proc call*(call_605283: Call_PostTagRole_605268; RoleName: string; Tags: JsonNode;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## postTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605284 = newJObject()
  var formData_605285 = newJObject()
  add(formData_605285, "RoleName", newJString(RoleName))
  if Tags != nil:
    formData_605285.add "Tags", Tags
  add(query_605284, "Action", newJString(Action))
  add(query_605284, "Version", newJString(Version))
  result = call_605283.call(nil, query_605284, nil, formData_605285, nil)

var postTagRole* = Call_PostTagRole_605268(name: "postTagRole",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagRole",
                                        validator: validate_PostTagRole_605269,
                                        base: "/", url: url_PostTagRole_605270,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagRole_605251 = ref object of OpenApiRestCall_600426
proc url_GetTagRole_605253(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagRole_605252(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_605254 = query.getOrDefault("Tags")
  valid_605254 = validateParameter(valid_605254, JArray, required = true, default = nil)
  if valid_605254 != nil:
    section.add "Tags", valid_605254
  var valid_605255 = query.getOrDefault("Action")
  valid_605255 = validateParameter(valid_605255, JString, required = true,
                                 default = newJString("TagRole"))
  if valid_605255 != nil:
    section.add "Action", valid_605255
  var valid_605256 = query.getOrDefault("RoleName")
  valid_605256 = validateParameter(valid_605256, JString, required = true,
                                 default = nil)
  if valid_605256 != nil:
    section.add "RoleName", valid_605256
  var valid_605257 = query.getOrDefault("Version")
  valid_605257 = validateParameter(valid_605257, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605257 != nil:
    section.add "Version", valid_605257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605258 = header.getOrDefault("X-Amz-Date")
  valid_605258 = validateParameter(valid_605258, JString, required = false,
                                 default = nil)
  if valid_605258 != nil:
    section.add "X-Amz-Date", valid_605258
  var valid_605259 = header.getOrDefault("X-Amz-Security-Token")
  valid_605259 = validateParameter(valid_605259, JString, required = false,
                                 default = nil)
  if valid_605259 != nil:
    section.add "X-Amz-Security-Token", valid_605259
  var valid_605260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605260 = validateParameter(valid_605260, JString, required = false,
                                 default = nil)
  if valid_605260 != nil:
    section.add "X-Amz-Content-Sha256", valid_605260
  var valid_605261 = header.getOrDefault("X-Amz-Algorithm")
  valid_605261 = validateParameter(valid_605261, JString, required = false,
                                 default = nil)
  if valid_605261 != nil:
    section.add "X-Amz-Algorithm", valid_605261
  var valid_605262 = header.getOrDefault("X-Amz-Signature")
  valid_605262 = validateParameter(valid_605262, JString, required = false,
                                 default = nil)
  if valid_605262 != nil:
    section.add "X-Amz-Signature", valid_605262
  var valid_605263 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605263 = validateParameter(valid_605263, JString, required = false,
                                 default = nil)
  if valid_605263 != nil:
    section.add "X-Amz-SignedHeaders", valid_605263
  var valid_605264 = header.getOrDefault("X-Amz-Credential")
  valid_605264 = validateParameter(valid_605264, JString, required = false,
                                 default = nil)
  if valid_605264 != nil:
    section.add "X-Amz-Credential", valid_605264
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605265: Call_GetTagRole_605251; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605265.validator(path, query, header, formData, body)
  let scheme = call_605265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605265.url(scheme.get, call_605265.host, call_605265.base,
                         call_605265.route, valid.getOrDefault("path"))
  result = hook(call_605265, url, valid)

proc call*(call_605266: Call_GetTagRole_605251; Tags: JsonNode; RoleName: string;
          Action: string = "TagRole"; Version: string = "2010-05-08"): Recallable =
  ## getTagRole
  ## <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM user or role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the role. Each tag consists of a key name and an associated value. You can specify this with a JSON string.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : <p>The name of the role that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605267 = newJObject()
  if Tags != nil:
    query_605267.add "Tags", Tags
  add(query_605267, "Action", newJString(Action))
  add(query_605267, "RoleName", newJString(RoleName))
  add(query_605267, "Version", newJString(Version))
  result = call_605266.call(nil, query_605267, nil, nil, nil)

var getTagRole* = Call_GetTagRole_605251(name: "getTagRole",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagRole",
                                      validator: validate_GetTagRole_605252,
                                      base: "/", url: url_GetTagRole_605253,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTagUser_605303 = ref object of OpenApiRestCall_600426
proc url_PostTagUser_605305(protocol: Scheme; host: string; base: string;
                           route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTagUser_605304(path: JsonNode; query: JsonNode; header: JsonNode;
                                formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605306 = query.getOrDefault("Action")
  valid_605306 = validateParameter(valid_605306, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_605306 != nil:
    section.add "Action", valid_605306
  var valid_605307 = query.getOrDefault("Version")
  valid_605307 = validateParameter(valid_605307, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605307 != nil:
    section.add "Version", valid_605307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605308 = header.getOrDefault("X-Amz-Date")
  valid_605308 = validateParameter(valid_605308, JString, required = false,
                                 default = nil)
  if valid_605308 != nil:
    section.add "X-Amz-Date", valid_605308
  var valid_605309 = header.getOrDefault("X-Amz-Security-Token")
  valid_605309 = validateParameter(valid_605309, JString, required = false,
                                 default = nil)
  if valid_605309 != nil:
    section.add "X-Amz-Security-Token", valid_605309
  var valid_605310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605310 = validateParameter(valid_605310, JString, required = false,
                                 default = nil)
  if valid_605310 != nil:
    section.add "X-Amz-Content-Sha256", valid_605310
  var valid_605311 = header.getOrDefault("X-Amz-Algorithm")
  valid_605311 = validateParameter(valid_605311, JString, required = false,
                                 default = nil)
  if valid_605311 != nil:
    section.add "X-Amz-Algorithm", valid_605311
  var valid_605312 = header.getOrDefault("X-Amz-Signature")
  valid_605312 = validateParameter(valid_605312, JString, required = false,
                                 default = nil)
  if valid_605312 != nil:
    section.add "X-Amz-Signature", valid_605312
  var valid_605313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605313 = validateParameter(valid_605313, JString, required = false,
                                 default = nil)
  if valid_605313 != nil:
    section.add "X-Amz-SignedHeaders", valid_605313
  var valid_605314 = header.getOrDefault("X-Amz-Credential")
  valid_605314 = validateParameter(valid_605314, JString, required = false,
                                 default = nil)
  if valid_605314 != nil:
    section.add "X-Amz-Credential", valid_605314
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605315 = formData.getOrDefault("UserName")
  valid_605315 = validateParameter(valid_605315, JString, required = true,
                                 default = nil)
  if valid_605315 != nil:
    section.add "UserName", valid_605315
  var valid_605316 = formData.getOrDefault("Tags")
  valid_605316 = validateParameter(valid_605316, JArray, required = true, default = nil)
  if valid_605316 != nil:
    section.add "Tags", valid_605316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605317: Call_PostTagUser_605303; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605317.validator(path, query, header, formData, body)
  let scheme = call_605317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605317.url(scheme.get, call_605317.host, call_605317.base,
                         call_605317.route, valid.getOrDefault("path"))
  result = hook(call_605317, url, valid)

proc call*(call_605318: Call_PostTagUser_605303; UserName: string; Tags: JsonNode;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## postTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605319 = newJObject()
  var formData_605320 = newJObject()
  add(formData_605320, "UserName", newJString(UserName))
  if Tags != nil:
    formData_605320.add "Tags", Tags
  add(query_605319, "Action", newJString(Action))
  add(query_605319, "Version", newJString(Version))
  result = call_605318.call(nil, query_605319, nil, formData_605320, nil)

var postTagUser* = Call_PostTagUser_605303(name: "postTagUser",
                                        meth: HttpMethod.HttpPost,
                                        host: "iam.amazonaws.com",
                                        route: "/#Action=TagUser",
                                        validator: validate_PostTagUser_605304,
                                        base: "/", url: url_PostTagUser_605305,
                                        schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTagUser_605286 = ref object of OpenApiRestCall_600426
proc url_GetTagUser_605288(protocol: Scheme; host: string; base: string; route: string;
                          path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTagUser_605287(path: JsonNode; query: JsonNode; header: JsonNode;
                               formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: JString (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_605289 = query.getOrDefault("Tags")
  valid_605289 = validateParameter(valid_605289, JArray, required = true, default = nil)
  if valid_605289 != nil:
    section.add "Tags", valid_605289
  var valid_605290 = query.getOrDefault("UserName")
  valid_605290 = validateParameter(valid_605290, JString, required = true,
                                 default = nil)
  if valid_605290 != nil:
    section.add "UserName", valid_605290
  var valid_605291 = query.getOrDefault("Action")
  valid_605291 = validateParameter(valid_605291, JString, required = true,
                                 default = newJString("TagUser"))
  if valid_605291 != nil:
    section.add "Action", valid_605291
  var valid_605292 = query.getOrDefault("Version")
  valid_605292 = validateParameter(valid_605292, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605292 != nil:
    section.add "Version", valid_605292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605293 = header.getOrDefault("X-Amz-Date")
  valid_605293 = validateParameter(valid_605293, JString, required = false,
                                 default = nil)
  if valid_605293 != nil:
    section.add "X-Amz-Date", valid_605293
  var valid_605294 = header.getOrDefault("X-Amz-Security-Token")
  valid_605294 = validateParameter(valid_605294, JString, required = false,
                                 default = nil)
  if valid_605294 != nil:
    section.add "X-Amz-Security-Token", valid_605294
  var valid_605295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605295 = validateParameter(valid_605295, JString, required = false,
                                 default = nil)
  if valid_605295 != nil:
    section.add "X-Amz-Content-Sha256", valid_605295
  var valid_605296 = header.getOrDefault("X-Amz-Algorithm")
  valid_605296 = validateParameter(valid_605296, JString, required = false,
                                 default = nil)
  if valid_605296 != nil:
    section.add "X-Amz-Algorithm", valid_605296
  var valid_605297 = header.getOrDefault("X-Amz-Signature")
  valid_605297 = validateParameter(valid_605297, JString, required = false,
                                 default = nil)
  if valid_605297 != nil:
    section.add "X-Amz-Signature", valid_605297
  var valid_605298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605298 = validateParameter(valid_605298, JString, required = false,
                                 default = nil)
  if valid_605298 != nil:
    section.add "X-Amz-SignedHeaders", valid_605298
  var valid_605299 = header.getOrDefault("X-Amz-Credential")
  valid_605299 = validateParameter(valid_605299, JString, required = false,
                                 default = nil)
  if valid_605299 != nil:
    section.add "X-Amz-Credential", valid_605299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605300: Call_GetTagUser_605286; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605300.validator(path, query, header, formData, body)
  let scheme = call_605300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605300.url(scheme.get, call_605300.host, call_605300.base,
                         call_605300.route, valid.getOrDefault("path"))
  result = hook(call_605300, url, valid)

proc call*(call_605301: Call_GetTagUser_605286; Tags: JsonNode; UserName: string;
          Action: string = "TagUser"; Version: string = "2010-05-08"): Recallable =
  ## getTagUser
  ## <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Reference tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user or to a role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control Access Using IAM Tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which AWS resources.</p> </li> </ul> <note> <ul> <li> <p>Make sure that you have no invalid tags and that you do not exceed the allowed number of tags per role. In either case, the entire request fails and <i>no</i> tags are added to the role.</p> </li> <li> <p>AWS always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : The list of tags that you want to attach to the user. Each tag consists of a key name and an associated value.
  ##   UserName: string (required)
  ##           : <p>The name of the user that you want to add tags to.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605302 = newJObject()
  if Tags != nil:
    query_605302.add "Tags", Tags
  add(query_605302, "UserName", newJString(UserName))
  add(query_605302, "Action", newJString(Action))
  add(query_605302, "Version", newJString(Version))
  result = call_605301.call(nil, query_605302, nil, nil, nil)

var getTagUser* = Call_GetTagUser_605286(name: "getTagUser",
                                      meth: HttpMethod.HttpGet,
                                      host: "iam.amazonaws.com",
                                      route: "/#Action=TagUser",
                                      validator: validate_GetTagUser_605287,
                                      base: "/", url: url_GetTagUser_605288,
                                      schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagRole_605338 = ref object of OpenApiRestCall_600426
proc url_PostUntagRole_605340(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagRole_605339(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605341 = query.getOrDefault("Action")
  valid_605341 = validateParameter(valid_605341, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_605341 != nil:
    section.add "Action", valid_605341
  var valid_605342 = query.getOrDefault("Version")
  valid_605342 = validateParameter(valid_605342, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605342 != nil:
    section.add "Version", valid_605342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605343 = header.getOrDefault("X-Amz-Date")
  valid_605343 = validateParameter(valid_605343, JString, required = false,
                                 default = nil)
  if valid_605343 != nil:
    section.add "X-Amz-Date", valid_605343
  var valid_605344 = header.getOrDefault("X-Amz-Security-Token")
  valid_605344 = validateParameter(valid_605344, JString, required = false,
                                 default = nil)
  if valid_605344 != nil:
    section.add "X-Amz-Security-Token", valid_605344
  var valid_605345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605345 = validateParameter(valid_605345, JString, required = false,
                                 default = nil)
  if valid_605345 != nil:
    section.add "X-Amz-Content-Sha256", valid_605345
  var valid_605346 = header.getOrDefault("X-Amz-Algorithm")
  valid_605346 = validateParameter(valid_605346, JString, required = false,
                                 default = nil)
  if valid_605346 != nil:
    section.add "X-Amz-Algorithm", valid_605346
  var valid_605347 = header.getOrDefault("X-Amz-Signature")
  valid_605347 = validateParameter(valid_605347, JString, required = false,
                                 default = nil)
  if valid_605347 != nil:
    section.add "X-Amz-Signature", valid_605347
  var valid_605348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605348 = validateParameter(valid_605348, JString, required = false,
                                 default = nil)
  if valid_605348 != nil:
    section.add "X-Amz-SignedHeaders", valid_605348
  var valid_605349 = header.getOrDefault("X-Amz-Credential")
  valid_605349 = validateParameter(valid_605349, JString, required = false,
                                 default = nil)
  if valid_605349 != nil:
    section.add "X-Amz-Credential", valid_605349
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605350 = formData.getOrDefault("RoleName")
  valid_605350 = validateParameter(valid_605350, JString, required = true,
                                 default = nil)
  if valid_605350 != nil:
    section.add "RoleName", valid_605350
  var valid_605351 = formData.getOrDefault("TagKeys")
  valid_605351 = validateParameter(valid_605351, JArray, required = true, default = nil)
  if valid_605351 != nil:
    section.add "TagKeys", valid_605351
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605352: Call_PostUntagRole_605338; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605352.validator(path, query, header, formData, body)
  let scheme = call_605352.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605352.url(scheme.get, call_605352.host, call_605352.base,
                         call_605352.route, valid.getOrDefault("path"))
  result = hook(call_605352, url, valid)

proc call*(call_605353: Call_PostUntagRole_605338; RoleName: string;
          TagKeys: JsonNode; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   Version: string (required)
  var query_605354 = newJObject()
  var formData_605355 = newJObject()
  add(formData_605355, "RoleName", newJString(RoleName))
  add(query_605354, "Action", newJString(Action))
  if TagKeys != nil:
    formData_605355.add "TagKeys", TagKeys
  add(query_605354, "Version", newJString(Version))
  result = call_605353.call(nil, query_605354, nil, formData_605355, nil)

var postUntagRole* = Call_PostUntagRole_605338(name: "postUntagRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_PostUntagRole_605339,
    base: "/", url: url_PostUntagRole_605340, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagRole_605321 = ref object of OpenApiRestCall_600426
proc url_GetUntagRole_605323(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagRole_605322(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: JString (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605324 = query.getOrDefault("Action")
  valid_605324 = validateParameter(valid_605324, JString, required = true,
                                 default = newJString("UntagRole"))
  if valid_605324 != nil:
    section.add "Action", valid_605324
  var valid_605325 = query.getOrDefault("TagKeys")
  valid_605325 = validateParameter(valid_605325, JArray, required = true, default = nil)
  if valid_605325 != nil:
    section.add "TagKeys", valid_605325
  var valid_605326 = query.getOrDefault("RoleName")
  valid_605326 = validateParameter(valid_605326, JString, required = true,
                                 default = nil)
  if valid_605326 != nil:
    section.add "RoleName", valid_605326
  var valid_605327 = query.getOrDefault("Version")
  valid_605327 = validateParameter(valid_605327, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605327 != nil:
    section.add "Version", valid_605327
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605328 = header.getOrDefault("X-Amz-Date")
  valid_605328 = validateParameter(valid_605328, JString, required = false,
                                 default = nil)
  if valid_605328 != nil:
    section.add "X-Amz-Date", valid_605328
  var valid_605329 = header.getOrDefault("X-Amz-Security-Token")
  valid_605329 = validateParameter(valid_605329, JString, required = false,
                                 default = nil)
  if valid_605329 != nil:
    section.add "X-Amz-Security-Token", valid_605329
  var valid_605330 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605330 = validateParameter(valid_605330, JString, required = false,
                                 default = nil)
  if valid_605330 != nil:
    section.add "X-Amz-Content-Sha256", valid_605330
  var valid_605331 = header.getOrDefault("X-Amz-Algorithm")
  valid_605331 = validateParameter(valid_605331, JString, required = false,
                                 default = nil)
  if valid_605331 != nil:
    section.add "X-Amz-Algorithm", valid_605331
  var valid_605332 = header.getOrDefault("X-Amz-Signature")
  valid_605332 = validateParameter(valid_605332, JString, required = false,
                                 default = nil)
  if valid_605332 != nil:
    section.add "X-Amz-Signature", valid_605332
  var valid_605333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605333 = validateParameter(valid_605333, JString, required = false,
                                 default = nil)
  if valid_605333 != nil:
    section.add "X-Amz-SignedHeaders", valid_605333
  var valid_605334 = header.getOrDefault("X-Amz-Credential")
  valid_605334 = validateParameter(valid_605334, JString, required = false,
                                 default = nil)
  if valid_605334 != nil:
    section.add "X-Amz-Credential", valid_605334
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605335: Call_GetUntagRole_605321; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605335.validator(path, query, header, formData, body)
  let scheme = call_605335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605335.url(scheme.get, call_605335.host, call_605335.base,
                         call_605335.route, valid.getOrDefault("path"))
  result = hook(call_605335, url, valid)

proc call*(call_605336: Call_GetUntagRole_605321; TagKeys: JsonNode;
          RoleName: string; Action: string = "UntagRole";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagRole
  ## Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.
  ##   RoleName: string (required)
  ##           : <p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605337 = newJObject()
  add(query_605337, "Action", newJString(Action))
  if TagKeys != nil:
    query_605337.add "TagKeys", TagKeys
  add(query_605337, "RoleName", newJString(RoleName))
  add(query_605337, "Version", newJString(Version))
  result = call_605336.call(nil, query_605337, nil, nil, nil)

var getUntagRole* = Call_GetUntagRole_605321(name: "getUntagRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagRole", validator: validate_GetUntagRole_605322, base: "/",
    url: url_GetUntagRole_605323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUntagUser_605373 = ref object of OpenApiRestCall_600426
proc url_PostUntagUser_605375(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUntagUser_605374(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605376 = query.getOrDefault("Action")
  valid_605376 = validateParameter(valid_605376, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_605376 != nil:
    section.add "Action", valid_605376
  var valid_605377 = query.getOrDefault("Version")
  valid_605377 = validateParameter(valid_605377, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605377 != nil:
    section.add "Version", valid_605377
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605378 = header.getOrDefault("X-Amz-Date")
  valid_605378 = validateParameter(valid_605378, JString, required = false,
                                 default = nil)
  if valid_605378 != nil:
    section.add "X-Amz-Date", valid_605378
  var valid_605379 = header.getOrDefault("X-Amz-Security-Token")
  valid_605379 = validateParameter(valid_605379, JString, required = false,
                                 default = nil)
  if valid_605379 != nil:
    section.add "X-Amz-Security-Token", valid_605379
  var valid_605380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605380 = validateParameter(valid_605380, JString, required = false,
                                 default = nil)
  if valid_605380 != nil:
    section.add "X-Amz-Content-Sha256", valid_605380
  var valid_605381 = header.getOrDefault("X-Amz-Algorithm")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "X-Amz-Algorithm", valid_605381
  var valid_605382 = header.getOrDefault("X-Amz-Signature")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "X-Amz-Signature", valid_605382
  var valid_605383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "X-Amz-SignedHeaders", valid_605383
  var valid_605384 = header.getOrDefault("X-Amz-Credential")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "X-Amz-Credential", valid_605384
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605385 = formData.getOrDefault("UserName")
  valid_605385 = validateParameter(valid_605385, JString, required = true,
                                 default = nil)
  if valid_605385 != nil:
    section.add "UserName", valid_605385
  var valid_605386 = formData.getOrDefault("TagKeys")
  valid_605386 = validateParameter(valid_605386, JArray, required = true, default = nil)
  if valid_605386 != nil:
    section.add "TagKeys", valid_605386
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605387: Call_PostUntagUser_605373; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605387.validator(path, query, header, formData, body)
  let scheme = call_605387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605387.url(scheme.get, call_605387.host, call_605387.base,
                         call_605387.route, valid.getOrDefault("path"))
  result = hook(call_605387, url, valid)

proc call*(call_605388: Call_PostUntagUser_605373; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## postUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_605389 = newJObject()
  var formData_605390 = newJObject()
  add(formData_605390, "UserName", newJString(UserName))
  add(query_605389, "Action", newJString(Action))
  if TagKeys != nil:
    formData_605390.add "TagKeys", TagKeys
  add(query_605389, "Version", newJString(Version))
  result = call_605388.call(nil, query_605389, nil, formData_605390, nil)

var postUntagUser* = Call_PostUntagUser_605373(name: "postUntagUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_PostUntagUser_605374,
    base: "/", url: url_PostUntagUser_605375, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUntagUser_605356 = ref object of OpenApiRestCall_600426
proc url_GetUntagUser_605358(protocol: Scheme; host: string; base: string;
                            route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUntagUser_605357(path: JsonNode; query: JsonNode; header: JsonNode;
                                 formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605359 = query.getOrDefault("UserName")
  valid_605359 = validateParameter(valid_605359, JString, required = true,
                                 default = nil)
  if valid_605359 != nil:
    section.add "UserName", valid_605359
  var valid_605360 = query.getOrDefault("Action")
  valid_605360 = validateParameter(valid_605360, JString, required = true,
                                 default = newJString("UntagUser"))
  if valid_605360 != nil:
    section.add "Action", valid_605360
  var valid_605361 = query.getOrDefault("TagKeys")
  valid_605361 = validateParameter(valid_605361, JArray, required = true, default = nil)
  if valid_605361 != nil:
    section.add "TagKeys", valid_605361
  var valid_605362 = query.getOrDefault("Version")
  valid_605362 = validateParameter(valid_605362, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605362 != nil:
    section.add "Version", valid_605362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605363 = header.getOrDefault("X-Amz-Date")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "X-Amz-Date", valid_605363
  var valid_605364 = header.getOrDefault("X-Amz-Security-Token")
  valid_605364 = validateParameter(valid_605364, JString, required = false,
                                 default = nil)
  if valid_605364 != nil:
    section.add "X-Amz-Security-Token", valid_605364
  var valid_605365 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605365 = validateParameter(valid_605365, JString, required = false,
                                 default = nil)
  if valid_605365 != nil:
    section.add "X-Amz-Content-Sha256", valid_605365
  var valid_605366 = header.getOrDefault("X-Amz-Algorithm")
  valid_605366 = validateParameter(valid_605366, JString, required = false,
                                 default = nil)
  if valid_605366 != nil:
    section.add "X-Amz-Algorithm", valid_605366
  var valid_605367 = header.getOrDefault("X-Amz-Signature")
  valid_605367 = validateParameter(valid_605367, JString, required = false,
                                 default = nil)
  if valid_605367 != nil:
    section.add "X-Amz-Signature", valid_605367
  var valid_605368 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605368 = validateParameter(valid_605368, JString, required = false,
                                 default = nil)
  if valid_605368 != nil:
    section.add "X-Amz-SignedHeaders", valid_605368
  var valid_605369 = header.getOrDefault("X-Amz-Credential")
  valid_605369 = validateParameter(valid_605369, JString, required = false,
                                 default = nil)
  if valid_605369 != nil:
    section.add "X-Amz-Credential", valid_605369
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605370: Call_GetUntagUser_605356; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ## 
  let valid = call_605370.validator(path, query, header, formData, body)
  let scheme = call_605370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605370.url(scheme.get, call_605370.host, call_605370.base,
                         call_605370.route, valid.getOrDefault("path"))
  result = hook(call_605370, url, valid)

proc call*(call_605371: Call_GetUntagUser_605356; UserName: string;
          TagKeys: JsonNode; Action: string = "UntagUser";
          Version: string = "2010-05-08"): Recallable =
  ## getUntagUser
  ## Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM Identities</a> in the <i>IAM User Guide</i>.
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.
  ##   Version: string (required)
  var query_605372 = newJObject()
  add(query_605372, "UserName", newJString(UserName))
  add(query_605372, "Action", newJString(Action))
  if TagKeys != nil:
    query_605372.add "TagKeys", TagKeys
  add(query_605372, "Version", newJString(Version))
  result = call_605371.call(nil, query_605372, nil, nil, nil)

var getUntagUser* = Call_GetUntagUser_605356(name: "getUntagUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UntagUser", validator: validate_GetUntagUser_605357, base: "/",
    url: url_GetUntagUser_605358, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccessKey_605409 = ref object of OpenApiRestCall_600426
proc url_PostUpdateAccessKey_605411(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccessKey_605410(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605412 = query.getOrDefault("Action")
  valid_605412 = validateParameter(valid_605412, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_605412 != nil:
    section.add "Action", valid_605412
  var valid_605413 = query.getOrDefault("Version")
  valid_605413 = validateParameter(valid_605413, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605413 != nil:
    section.add "Version", valid_605413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605414 = header.getOrDefault("X-Amz-Date")
  valid_605414 = validateParameter(valid_605414, JString, required = false,
                                 default = nil)
  if valid_605414 != nil:
    section.add "X-Amz-Date", valid_605414
  var valid_605415 = header.getOrDefault("X-Amz-Security-Token")
  valid_605415 = validateParameter(valid_605415, JString, required = false,
                                 default = nil)
  if valid_605415 != nil:
    section.add "X-Amz-Security-Token", valid_605415
  var valid_605416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605416 = validateParameter(valid_605416, JString, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "X-Amz-Content-Sha256", valid_605416
  var valid_605417 = header.getOrDefault("X-Amz-Algorithm")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "X-Amz-Algorithm", valid_605417
  var valid_605418 = header.getOrDefault("X-Amz-Signature")
  valid_605418 = validateParameter(valid_605418, JString, required = false,
                                 default = nil)
  if valid_605418 != nil:
    section.add "X-Amz-Signature", valid_605418
  var valid_605419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605419 = validateParameter(valid_605419, JString, required = false,
                                 default = nil)
  if valid_605419 != nil:
    section.add "X-Amz-SignedHeaders", valid_605419
  var valid_605420 = header.getOrDefault("X-Amz-Credential")
  valid_605420 = validateParameter(valid_605420, JString, required = false,
                                 default = nil)
  if valid_605420 != nil:
    section.add "X-Amz-Credential", valid_605420
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  var valid_605421 = formData.getOrDefault("UserName")
  valid_605421 = validateParameter(valid_605421, JString, required = false,
                                 default = nil)
  if valid_605421 != nil:
    section.add "UserName", valid_605421
  assert formData != nil,
        "formData argument is necessary due to required `AccessKeyId` field"
  var valid_605422 = formData.getOrDefault("AccessKeyId")
  valid_605422 = validateParameter(valid_605422, JString, required = true,
                                 default = nil)
  if valid_605422 != nil:
    section.add "AccessKeyId", valid_605422
  var valid_605423 = formData.getOrDefault("Status")
  valid_605423 = validateParameter(valid_605423, JString, required = true,
                                 default = newJString("Active"))
  if valid_605423 != nil:
    section.add "Status", valid_605423
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605424: Call_PostUpdateAccessKey_605409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605424.validator(path, query, header, formData, body)
  let scheme = call_605424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605424.url(scheme.get, call_605424.host, call_605424.base,
                         call_605424.route, valid.getOrDefault("path"))
  result = hook(call_605424, url, valid)

proc call*(call_605425: Call_PostUpdateAccessKey_605409; AccessKeyId: string;
          UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605426 = newJObject()
  var formData_605427 = newJObject()
  add(formData_605427, "UserName", newJString(UserName))
  add(formData_605427, "AccessKeyId", newJString(AccessKeyId))
  add(formData_605427, "Status", newJString(Status))
  add(query_605426, "Action", newJString(Action))
  add(query_605426, "Version", newJString(Version))
  result = call_605425.call(nil, query_605426, nil, formData_605427, nil)

var postUpdateAccessKey* = Call_PostUpdateAccessKey_605409(
    name: "postUpdateAccessKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccessKey",
    validator: validate_PostUpdateAccessKey_605410, base: "/",
    url: url_PostUpdateAccessKey_605411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccessKey_605391 = ref object of OpenApiRestCall_600426
proc url_GetUpdateAccessKey_605393(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccessKey_605392(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: JString (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_605394 = query.getOrDefault("Status")
  valid_605394 = validateParameter(valid_605394, JString, required = true,
                                 default = newJString("Active"))
  if valid_605394 != nil:
    section.add "Status", valid_605394
  var valid_605395 = query.getOrDefault("AccessKeyId")
  valid_605395 = validateParameter(valid_605395, JString, required = true,
                                 default = nil)
  if valid_605395 != nil:
    section.add "AccessKeyId", valid_605395
  var valid_605396 = query.getOrDefault("UserName")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "UserName", valid_605396
  var valid_605397 = query.getOrDefault("Action")
  valid_605397 = validateParameter(valid_605397, JString, required = true,
                                 default = newJString("UpdateAccessKey"))
  if valid_605397 != nil:
    section.add "Action", valid_605397
  var valid_605398 = query.getOrDefault("Version")
  valid_605398 = validateParameter(valid_605398, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605398 != nil:
    section.add "Version", valid_605398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605399 = header.getOrDefault("X-Amz-Date")
  valid_605399 = validateParameter(valid_605399, JString, required = false,
                                 default = nil)
  if valid_605399 != nil:
    section.add "X-Amz-Date", valid_605399
  var valid_605400 = header.getOrDefault("X-Amz-Security-Token")
  valid_605400 = validateParameter(valid_605400, JString, required = false,
                                 default = nil)
  if valid_605400 != nil:
    section.add "X-Amz-Security-Token", valid_605400
  var valid_605401 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605401 = validateParameter(valid_605401, JString, required = false,
                                 default = nil)
  if valid_605401 != nil:
    section.add "X-Amz-Content-Sha256", valid_605401
  var valid_605402 = header.getOrDefault("X-Amz-Algorithm")
  valid_605402 = validateParameter(valid_605402, JString, required = false,
                                 default = nil)
  if valid_605402 != nil:
    section.add "X-Amz-Algorithm", valid_605402
  var valid_605403 = header.getOrDefault("X-Amz-Signature")
  valid_605403 = validateParameter(valid_605403, JString, required = false,
                                 default = nil)
  if valid_605403 != nil:
    section.add "X-Amz-Signature", valid_605403
  var valid_605404 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605404 = validateParameter(valid_605404, JString, required = false,
                                 default = nil)
  if valid_605404 != nil:
    section.add "X-Amz-SignedHeaders", valid_605404
  var valid_605405 = header.getOrDefault("X-Amz-Credential")
  valid_605405 = validateParameter(valid_605405, JString, required = false,
                                 default = nil)
  if valid_605405 != nil:
    section.add "X-Amz-Credential", valid_605405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605406: Call_GetUpdateAccessKey_605391; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605406.validator(path, query, header, formData, body)
  let scheme = call_605406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605406.url(scheme.get, call_605406.host, call_605406.base,
                         call_605406.route, valid.getOrDefault("path"))
  result = hook(call_605406, url, valid)

proc call*(call_605407: Call_GetUpdateAccessKey_605391; AccessKeyId: string;
          Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateAccessKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAccessKey
  ## <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for API calls to AWS, while <code>Inactive</code> means that the key cannot be used.
  ##   AccessKeyId: string (required)
  ##              : <p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605408 = newJObject()
  add(query_605408, "Status", newJString(Status))
  add(query_605408, "AccessKeyId", newJString(AccessKeyId))
  add(query_605408, "UserName", newJString(UserName))
  add(query_605408, "Action", newJString(Action))
  add(query_605408, "Version", newJString(Version))
  result = call_605407.call(nil, query_605408, nil, nil, nil)

var getUpdateAccessKey* = Call_GetUpdateAccessKey_605391(
    name: "getUpdateAccessKey", meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateAccessKey", validator: validate_GetUpdateAccessKey_605392,
    base: "/", url: url_GetUpdateAccessKey_605393,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAccountPasswordPolicy_605452 = ref object of OpenApiRestCall_600426
proc url_PostUpdateAccountPasswordPolicy_605454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAccountPasswordPolicy_605453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605455 = query.getOrDefault("Action")
  valid_605455 = validateParameter(valid_605455, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_605455 != nil:
    section.add "Action", valid_605455
  var valid_605456 = query.getOrDefault("Version")
  valid_605456 = validateParameter(valid_605456, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605456 != nil:
    section.add "Version", valid_605456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605457 = header.getOrDefault("X-Amz-Date")
  valid_605457 = validateParameter(valid_605457, JString, required = false,
                                 default = nil)
  if valid_605457 != nil:
    section.add "X-Amz-Date", valid_605457
  var valid_605458 = header.getOrDefault("X-Amz-Security-Token")
  valid_605458 = validateParameter(valid_605458, JString, required = false,
                                 default = nil)
  if valid_605458 != nil:
    section.add "X-Amz-Security-Token", valid_605458
  var valid_605459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605459 = validateParameter(valid_605459, JString, required = false,
                                 default = nil)
  if valid_605459 != nil:
    section.add "X-Amz-Content-Sha256", valid_605459
  var valid_605460 = header.getOrDefault("X-Amz-Algorithm")
  valid_605460 = validateParameter(valid_605460, JString, required = false,
                                 default = nil)
  if valid_605460 != nil:
    section.add "X-Amz-Algorithm", valid_605460
  var valid_605461 = header.getOrDefault("X-Amz-Signature")
  valid_605461 = validateParameter(valid_605461, JString, required = false,
                                 default = nil)
  if valid_605461 != nil:
    section.add "X-Amz-Signature", valid_605461
  var valid_605462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605462 = validateParameter(valid_605462, JString, required = false,
                                 default = nil)
  if valid_605462 != nil:
    section.add "X-Amz-SignedHeaders", valid_605462
  var valid_605463 = header.getOrDefault("X-Amz-Credential")
  valid_605463 = validateParameter(valid_605463, JString, required = false,
                                 default = nil)
  if valid_605463 != nil:
    section.add "X-Amz-Credential", valid_605463
  result.add "header", section
  ## parameters in `formData` object:
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  section = newJObject()
  var valid_605464 = formData.getOrDefault("RequireNumbers")
  valid_605464 = validateParameter(valid_605464, JBool, required = false, default = nil)
  if valid_605464 != nil:
    section.add "RequireNumbers", valid_605464
  var valid_605465 = formData.getOrDefault("RequireSymbols")
  valid_605465 = validateParameter(valid_605465, JBool, required = false, default = nil)
  if valid_605465 != nil:
    section.add "RequireSymbols", valid_605465
  var valid_605466 = formData.getOrDefault("RequireUppercaseCharacters")
  valid_605466 = validateParameter(valid_605466, JBool, required = false, default = nil)
  if valid_605466 != nil:
    section.add "RequireUppercaseCharacters", valid_605466
  var valid_605467 = formData.getOrDefault("MinimumPasswordLength")
  valid_605467 = validateParameter(valid_605467, JInt, required = false, default = nil)
  if valid_605467 != nil:
    section.add "MinimumPasswordLength", valid_605467
  var valid_605468 = formData.getOrDefault("RequireLowercaseCharacters")
  valid_605468 = validateParameter(valid_605468, JBool, required = false, default = nil)
  if valid_605468 != nil:
    section.add "RequireLowercaseCharacters", valid_605468
  var valid_605469 = formData.getOrDefault("PasswordReusePrevention")
  valid_605469 = validateParameter(valid_605469, JInt, required = false, default = nil)
  if valid_605469 != nil:
    section.add "PasswordReusePrevention", valid_605469
  var valid_605470 = formData.getOrDefault("HardExpiry")
  valid_605470 = validateParameter(valid_605470, JBool, required = false, default = nil)
  if valid_605470 != nil:
    section.add "HardExpiry", valid_605470
  var valid_605471 = formData.getOrDefault("AllowUsersToChangePassword")
  valid_605471 = validateParameter(valid_605471, JBool, required = false, default = nil)
  if valid_605471 != nil:
    section.add "AllowUsersToChangePassword", valid_605471
  var valid_605472 = formData.getOrDefault("MaxPasswordAge")
  valid_605472 = validateParameter(valid_605472, JInt, required = false, default = nil)
  if valid_605472 != nil:
    section.add "MaxPasswordAge", valid_605472
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605473: Call_PostUpdateAccountPasswordPolicy_605452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605473.validator(path, query, header, formData, body)
  let scheme = call_605473.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605473.url(scheme.get, call_605473.host, call_605473.base,
                         call_605473.route, valid.getOrDefault("path"))
  result = hook(call_605473, url, valid)

proc call*(call_605474: Call_PostUpdateAccountPasswordPolicy_605452;
          RequireNumbers: bool = false; RequireSymbols: bool = false;
          RequireUppercaseCharacters: bool = false; MinimumPasswordLength: int = 0;
          RequireLowercaseCharacters: bool = false;
          PasswordReusePrevention: int = 0;
          Action: string = "UpdateAccountPasswordPolicy"; HardExpiry: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   Action: string (required)
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  var query_605475 = newJObject()
  var formData_605476 = newJObject()
  add(formData_605476, "RequireNumbers", newJBool(RequireNumbers))
  add(formData_605476, "RequireSymbols", newJBool(RequireSymbols))
  add(formData_605476, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(formData_605476, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  add(formData_605476, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(formData_605476, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_605475, "Action", newJString(Action))
  add(formData_605476, "HardExpiry", newJBool(HardExpiry))
  add(formData_605476, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(formData_605476, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_605475, "Version", newJString(Version))
  result = call_605474.call(nil, query_605475, nil, formData_605476, nil)

var postUpdateAccountPasswordPolicy* = Call_PostUpdateAccountPasswordPolicy_605452(
    name: "postUpdateAccountPasswordPolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_PostUpdateAccountPasswordPolicy_605453, base: "/",
    url: url_PostUpdateAccountPasswordPolicy_605454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAccountPasswordPolicy_605428 = ref object of OpenApiRestCall_600426
proc url_GetUpdateAccountPasswordPolicy_605430(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAccountPasswordPolicy_605429(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RequireLowercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: JBool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: JBool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: JString (required)
  ##   PasswordReusePrevention: JInt
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: JBool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: JBool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: JInt
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: JString (required)
  ##   MinimumPasswordLength: JInt
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  section = newJObject()
  var valid_605431 = query.getOrDefault("RequireLowercaseCharacters")
  valid_605431 = validateParameter(valid_605431, JBool, required = false, default = nil)
  if valid_605431 != nil:
    section.add "RequireLowercaseCharacters", valid_605431
  var valid_605432 = query.getOrDefault("RequireSymbols")
  valid_605432 = validateParameter(valid_605432, JBool, required = false, default = nil)
  if valid_605432 != nil:
    section.add "RequireSymbols", valid_605432
  var valid_605433 = query.getOrDefault("RequireNumbers")
  valid_605433 = validateParameter(valid_605433, JBool, required = false, default = nil)
  if valid_605433 != nil:
    section.add "RequireNumbers", valid_605433
  var valid_605434 = query.getOrDefault("HardExpiry")
  valid_605434 = validateParameter(valid_605434, JBool, required = false, default = nil)
  if valid_605434 != nil:
    section.add "HardExpiry", valid_605434
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605435 = query.getOrDefault("Action")
  valid_605435 = validateParameter(valid_605435, JString, required = true, default = newJString(
      "UpdateAccountPasswordPolicy"))
  if valid_605435 != nil:
    section.add "Action", valid_605435
  var valid_605436 = query.getOrDefault("PasswordReusePrevention")
  valid_605436 = validateParameter(valid_605436, JInt, required = false, default = nil)
  if valid_605436 != nil:
    section.add "PasswordReusePrevention", valid_605436
  var valid_605437 = query.getOrDefault("RequireUppercaseCharacters")
  valid_605437 = validateParameter(valid_605437, JBool, required = false, default = nil)
  if valid_605437 != nil:
    section.add "RequireUppercaseCharacters", valid_605437
  var valid_605438 = query.getOrDefault("AllowUsersToChangePassword")
  valid_605438 = validateParameter(valid_605438, JBool, required = false, default = nil)
  if valid_605438 != nil:
    section.add "AllowUsersToChangePassword", valid_605438
  var valid_605439 = query.getOrDefault("MaxPasswordAge")
  valid_605439 = validateParameter(valid_605439, JInt, required = false, default = nil)
  if valid_605439 != nil:
    section.add "MaxPasswordAge", valid_605439
  var valid_605440 = query.getOrDefault("Version")
  valid_605440 = validateParameter(valid_605440, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605440 != nil:
    section.add "Version", valid_605440
  var valid_605441 = query.getOrDefault("MinimumPasswordLength")
  valid_605441 = validateParameter(valid_605441, JInt, required = false, default = nil)
  if valid_605441 != nil:
    section.add "MinimumPasswordLength", valid_605441
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605442 = header.getOrDefault("X-Amz-Date")
  valid_605442 = validateParameter(valid_605442, JString, required = false,
                                 default = nil)
  if valid_605442 != nil:
    section.add "X-Amz-Date", valid_605442
  var valid_605443 = header.getOrDefault("X-Amz-Security-Token")
  valid_605443 = validateParameter(valid_605443, JString, required = false,
                                 default = nil)
  if valid_605443 != nil:
    section.add "X-Amz-Security-Token", valid_605443
  var valid_605444 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605444 = validateParameter(valid_605444, JString, required = false,
                                 default = nil)
  if valid_605444 != nil:
    section.add "X-Amz-Content-Sha256", valid_605444
  var valid_605445 = header.getOrDefault("X-Amz-Algorithm")
  valid_605445 = validateParameter(valid_605445, JString, required = false,
                                 default = nil)
  if valid_605445 != nil:
    section.add "X-Amz-Algorithm", valid_605445
  var valid_605446 = header.getOrDefault("X-Amz-Signature")
  valid_605446 = validateParameter(valid_605446, JString, required = false,
                                 default = nil)
  if valid_605446 != nil:
    section.add "X-Amz-Signature", valid_605446
  var valid_605447 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605447 = validateParameter(valid_605447, JString, required = false,
                                 default = nil)
  if valid_605447 != nil:
    section.add "X-Amz-SignedHeaders", valid_605447
  var valid_605448 = header.getOrDefault("X-Amz-Credential")
  valid_605448 = validateParameter(valid_605448, JString, required = false,
                                 default = nil)
  if valid_605448 != nil:
    section.add "X-Amz-Credential", valid_605448
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605449: Call_GetUpdateAccountPasswordPolicy_605428; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605449.validator(path, query, header, formData, body)
  let scheme = call_605449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605449.url(scheme.get, call_605449.host, call_605449.base,
                         call_605449.route, valid.getOrDefault("path"))
  result = hook(call_605449, url, valid)

proc call*(call_605450: Call_GetUpdateAccountPasswordPolicy_605428;
          RequireLowercaseCharacters: bool = false; RequireSymbols: bool = false;
          RequireNumbers: bool = false; HardExpiry: bool = false;
          Action: string = "UpdateAccountPasswordPolicy";
          PasswordReusePrevention: int = 0;
          RequireUppercaseCharacters: bool = false;
          AllowUsersToChangePassword: bool = false; MaxPasswordAge: int = 0;
          Version: string = "2010-05-08"; MinimumPasswordLength: int = 0): Recallable =
  ## getUpdateAccountPasswordPolicy
  ## <p>Updates the password policy settings for the AWS account.</p> <note> <ul> <li> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </li> </ul> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>
  ##   RequireLowercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
  ##   RequireSymbols: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
  ##   RequireNumbers: bool
  ##                 : <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
  ##   HardExpiry: bool
  ##             : <p>Prevents IAM users from setting a new password after their password has expired. The IAM user cannot be accessed until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p>
  ##   Action: string (required)
  ##   PasswordReusePrevention: int
  ##                          : <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
  ##   RequireUppercaseCharacters: bool
  ##                             : <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
  ##   AllowUsersToChangePassword: bool
  ##                             : <p> Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/HowToPwdIAMUser.html">Letting IAM Users Change Their Own Passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
  ##   MaxPasswordAge: int
  ##                 : <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
  ##   Version: string (required)
  ##   MinimumPasswordLength: int
  ##                        : <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
  var query_605451 = newJObject()
  add(query_605451, "RequireLowercaseCharacters",
      newJBool(RequireLowercaseCharacters))
  add(query_605451, "RequireSymbols", newJBool(RequireSymbols))
  add(query_605451, "RequireNumbers", newJBool(RequireNumbers))
  add(query_605451, "HardExpiry", newJBool(HardExpiry))
  add(query_605451, "Action", newJString(Action))
  add(query_605451, "PasswordReusePrevention", newJInt(PasswordReusePrevention))
  add(query_605451, "RequireUppercaseCharacters",
      newJBool(RequireUppercaseCharacters))
  add(query_605451, "AllowUsersToChangePassword",
      newJBool(AllowUsersToChangePassword))
  add(query_605451, "MaxPasswordAge", newJInt(MaxPasswordAge))
  add(query_605451, "Version", newJString(Version))
  add(query_605451, "MinimumPasswordLength", newJInt(MinimumPasswordLength))
  result = call_605450.call(nil, query_605451, nil, nil, nil)

var getUpdateAccountPasswordPolicy* = Call_GetUpdateAccountPasswordPolicy_605428(
    name: "getUpdateAccountPasswordPolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAccountPasswordPolicy",
    validator: validate_GetUpdateAccountPasswordPolicy_605429, base: "/",
    url: url_GetUpdateAccountPasswordPolicy_605430,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateAssumeRolePolicy_605494 = ref object of OpenApiRestCall_600426
proc url_PostUpdateAssumeRolePolicy_605496(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateAssumeRolePolicy_605495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605497 = query.getOrDefault("Action")
  valid_605497 = validateParameter(valid_605497, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_605497 != nil:
    section.add "Action", valid_605497
  var valid_605498 = query.getOrDefault("Version")
  valid_605498 = validateParameter(valid_605498, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605498 != nil:
    section.add "Version", valid_605498
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605499 = header.getOrDefault("X-Amz-Date")
  valid_605499 = validateParameter(valid_605499, JString, required = false,
                                 default = nil)
  if valid_605499 != nil:
    section.add "X-Amz-Date", valid_605499
  var valid_605500 = header.getOrDefault("X-Amz-Security-Token")
  valid_605500 = validateParameter(valid_605500, JString, required = false,
                                 default = nil)
  if valid_605500 != nil:
    section.add "X-Amz-Security-Token", valid_605500
  var valid_605501 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605501 = validateParameter(valid_605501, JString, required = false,
                                 default = nil)
  if valid_605501 != nil:
    section.add "X-Amz-Content-Sha256", valid_605501
  var valid_605502 = header.getOrDefault("X-Amz-Algorithm")
  valid_605502 = validateParameter(valid_605502, JString, required = false,
                                 default = nil)
  if valid_605502 != nil:
    section.add "X-Amz-Algorithm", valid_605502
  var valid_605503 = header.getOrDefault("X-Amz-Signature")
  valid_605503 = validateParameter(valid_605503, JString, required = false,
                                 default = nil)
  if valid_605503 != nil:
    section.add "X-Amz-Signature", valid_605503
  var valid_605504 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605504 = validateParameter(valid_605504, JString, required = false,
                                 default = nil)
  if valid_605504 != nil:
    section.add "X-Amz-SignedHeaders", valid_605504
  var valid_605505 = header.getOrDefault("X-Amz-Credential")
  valid_605505 = validateParameter(valid_605505, JString, required = false,
                                 default = nil)
  if valid_605505 != nil:
    section.add "X-Amz-Credential", valid_605505
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605506 = formData.getOrDefault("RoleName")
  valid_605506 = validateParameter(valid_605506, JString, required = true,
                                 default = nil)
  if valid_605506 != nil:
    section.add "RoleName", valid_605506
  var valid_605507 = formData.getOrDefault("PolicyDocument")
  valid_605507 = validateParameter(valid_605507, JString, required = true,
                                 default = nil)
  if valid_605507 != nil:
    section.add "PolicyDocument", valid_605507
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605508: Call_PostUpdateAssumeRolePolicy_605494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_605508.validator(path, query, header, formData, body)
  let scheme = call_605508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605508.url(scheme.get, call_605508.host, call_605508.base,
                         call_605508.route, valid.getOrDefault("path"))
  result = hook(call_605508, url, valid)

proc call*(call_605509: Call_PostUpdateAssumeRolePolicy_605494; RoleName: string;
          PolicyDocument: string; Action: string = "UpdateAssumeRolePolicy";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605510 = newJObject()
  var formData_605511 = newJObject()
  add(formData_605511, "RoleName", newJString(RoleName))
  add(formData_605511, "PolicyDocument", newJString(PolicyDocument))
  add(query_605510, "Action", newJString(Action))
  add(query_605510, "Version", newJString(Version))
  result = call_605509.call(nil, query_605510, nil, formData_605511, nil)

var postUpdateAssumeRolePolicy* = Call_PostUpdateAssumeRolePolicy_605494(
    name: "postUpdateAssumeRolePolicy", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_PostUpdateAssumeRolePolicy_605495, base: "/",
    url: url_PostUpdateAssumeRolePolicy_605496,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateAssumeRolePolicy_605477 = ref object of OpenApiRestCall_600426
proc url_GetUpdateAssumeRolePolicy_605479(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateAssumeRolePolicy_605478(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   PolicyDocument: JString (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: JString (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605480 = query.getOrDefault("Action")
  valid_605480 = validateParameter(valid_605480, JString, required = true,
                                 default = newJString("UpdateAssumeRolePolicy"))
  if valid_605480 != nil:
    section.add "Action", valid_605480
  var valid_605481 = query.getOrDefault("PolicyDocument")
  valid_605481 = validateParameter(valid_605481, JString, required = true,
                                 default = nil)
  if valid_605481 != nil:
    section.add "PolicyDocument", valid_605481
  var valid_605482 = query.getOrDefault("RoleName")
  valid_605482 = validateParameter(valid_605482, JString, required = true,
                                 default = nil)
  if valid_605482 != nil:
    section.add "RoleName", valid_605482
  var valid_605483 = query.getOrDefault("Version")
  valid_605483 = validateParameter(valid_605483, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605483 != nil:
    section.add "Version", valid_605483
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605484 = header.getOrDefault("X-Amz-Date")
  valid_605484 = validateParameter(valid_605484, JString, required = false,
                                 default = nil)
  if valid_605484 != nil:
    section.add "X-Amz-Date", valid_605484
  var valid_605485 = header.getOrDefault("X-Amz-Security-Token")
  valid_605485 = validateParameter(valid_605485, JString, required = false,
                                 default = nil)
  if valid_605485 != nil:
    section.add "X-Amz-Security-Token", valid_605485
  var valid_605486 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605486 = validateParameter(valid_605486, JString, required = false,
                                 default = nil)
  if valid_605486 != nil:
    section.add "X-Amz-Content-Sha256", valid_605486
  var valid_605487 = header.getOrDefault("X-Amz-Algorithm")
  valid_605487 = validateParameter(valid_605487, JString, required = false,
                                 default = nil)
  if valid_605487 != nil:
    section.add "X-Amz-Algorithm", valid_605487
  var valid_605488 = header.getOrDefault("X-Amz-Signature")
  valid_605488 = validateParameter(valid_605488, JString, required = false,
                                 default = nil)
  if valid_605488 != nil:
    section.add "X-Amz-Signature", valid_605488
  var valid_605489 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605489 = validateParameter(valid_605489, JString, required = false,
                                 default = nil)
  if valid_605489 != nil:
    section.add "X-Amz-SignedHeaders", valid_605489
  var valid_605490 = header.getOrDefault("X-Amz-Credential")
  valid_605490 = validateParameter(valid_605490, JString, required = false,
                                 default = nil)
  if valid_605490 != nil:
    section.add "X-Amz-Credential", valid_605490
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605491: Call_GetUpdateAssumeRolePolicy_605477; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ## 
  let valid = call_605491.validator(path, query, header, formData, body)
  let scheme = call_605491.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605491.url(scheme.get, call_605491.host, call_605491.base,
                         call_605491.route, valid.getOrDefault("path"))
  result = hook(call_605491, url, valid)

proc call*(call_605492: Call_GetUpdateAssumeRolePolicy_605477;
          PolicyDocument: string; RoleName: string;
          Action: string = "UpdateAssumeRolePolicy"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateAssumeRolePolicy
  ## Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.
  ##   Action: string (required)
  ##   PolicyDocument: string (required)
  ##                 : <p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for AWS CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. AWS CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   RoleName: string (required)
  ##           : <p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  var query_605493 = newJObject()
  add(query_605493, "Action", newJString(Action))
  add(query_605493, "PolicyDocument", newJString(PolicyDocument))
  add(query_605493, "RoleName", newJString(RoleName))
  add(query_605493, "Version", newJString(Version))
  result = call_605492.call(nil, query_605493, nil, nil, nil)

var getUpdateAssumeRolePolicy* = Call_GetUpdateAssumeRolePolicy_605477(
    name: "getUpdateAssumeRolePolicy", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateAssumeRolePolicy",
    validator: validate_GetUpdateAssumeRolePolicy_605478, base: "/",
    url: url_GetUpdateAssumeRolePolicy_605479,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateGroup_605530 = ref object of OpenApiRestCall_600426
proc url_PostUpdateGroup_605532(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateGroup_605531(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605533 = query.getOrDefault("Action")
  valid_605533 = validateParameter(valid_605533, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_605533 != nil:
    section.add "Action", valid_605533
  var valid_605534 = query.getOrDefault("Version")
  valid_605534 = validateParameter(valid_605534, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605534 != nil:
    section.add "Version", valid_605534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605535 = header.getOrDefault("X-Amz-Date")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "X-Amz-Date", valid_605535
  var valid_605536 = header.getOrDefault("X-Amz-Security-Token")
  valid_605536 = validateParameter(valid_605536, JString, required = false,
                                 default = nil)
  if valid_605536 != nil:
    section.add "X-Amz-Security-Token", valid_605536
  var valid_605537 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605537 = validateParameter(valid_605537, JString, required = false,
                                 default = nil)
  if valid_605537 != nil:
    section.add "X-Amz-Content-Sha256", valid_605537
  var valid_605538 = header.getOrDefault("X-Amz-Algorithm")
  valid_605538 = validateParameter(valid_605538, JString, required = false,
                                 default = nil)
  if valid_605538 != nil:
    section.add "X-Amz-Algorithm", valid_605538
  var valid_605539 = header.getOrDefault("X-Amz-Signature")
  valid_605539 = validateParameter(valid_605539, JString, required = false,
                                 default = nil)
  if valid_605539 != nil:
    section.add "X-Amz-Signature", valid_605539
  var valid_605540 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605540 = validateParameter(valid_605540, JString, required = false,
                                 default = nil)
  if valid_605540 != nil:
    section.add "X-Amz-SignedHeaders", valid_605540
  var valid_605541 = header.getOrDefault("X-Amz-Credential")
  valid_605541 = validateParameter(valid_605541, JString, required = false,
                                 default = nil)
  if valid_605541 != nil:
    section.add "X-Amz-Credential", valid_605541
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  var valid_605542 = formData.getOrDefault("NewGroupName")
  valid_605542 = validateParameter(valid_605542, JString, required = false,
                                 default = nil)
  if valid_605542 != nil:
    section.add "NewGroupName", valid_605542
  assert formData != nil,
        "formData argument is necessary due to required `GroupName` field"
  var valid_605543 = formData.getOrDefault("GroupName")
  valid_605543 = validateParameter(valid_605543, JString, required = true,
                                 default = nil)
  if valid_605543 != nil:
    section.add "GroupName", valid_605543
  var valid_605544 = formData.getOrDefault("NewPath")
  valid_605544 = validateParameter(valid_605544, JString, required = false,
                                 default = nil)
  if valid_605544 != nil:
    section.add "NewPath", valid_605544
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605545: Call_PostUpdateGroup_605530; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_605545.validator(path, query, header, formData, body)
  let scheme = call_605545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605545.url(scheme.get, call_605545.host, call_605545.base,
                         call_605545.route, valid.getOrDefault("path"))
  result = hook(call_605545, url, valid)

proc call*(call_605546: Call_PostUpdateGroup_605530; GroupName: string;
          NewGroupName: string = ""; Action: string = "UpdateGroup";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_605547 = newJObject()
  var formData_605548 = newJObject()
  add(formData_605548, "NewGroupName", newJString(NewGroupName))
  add(formData_605548, "GroupName", newJString(GroupName))
  add(query_605547, "Action", newJString(Action))
  add(query_605547, "Version", newJString(Version))
  add(formData_605548, "NewPath", newJString(NewPath))
  result = call_605546.call(nil, query_605547, nil, formData_605548, nil)

var postUpdateGroup* = Call_PostUpdateGroup_605530(name: "postUpdateGroup",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_PostUpdateGroup_605531,
    base: "/", url: url_PostUpdateGroup_605532, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateGroup_605512 = ref object of OpenApiRestCall_600426
proc url_GetUpdateGroup_605514(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateGroup_605513(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GroupName: JString (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: JString
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605515 = query.getOrDefault("Action")
  valid_605515 = validateParameter(valid_605515, JString, required = true,
                                 default = newJString("UpdateGroup"))
  if valid_605515 != nil:
    section.add "Action", valid_605515
  var valid_605516 = query.getOrDefault("GroupName")
  valid_605516 = validateParameter(valid_605516, JString, required = true,
                                 default = nil)
  if valid_605516 != nil:
    section.add "GroupName", valid_605516
  var valid_605517 = query.getOrDefault("NewGroupName")
  valid_605517 = validateParameter(valid_605517, JString, required = false,
                                 default = nil)
  if valid_605517 != nil:
    section.add "NewGroupName", valid_605517
  var valid_605518 = query.getOrDefault("NewPath")
  valid_605518 = validateParameter(valid_605518, JString, required = false,
                                 default = nil)
  if valid_605518 != nil:
    section.add "NewPath", valid_605518
  var valid_605519 = query.getOrDefault("Version")
  valid_605519 = validateParameter(valid_605519, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605519 != nil:
    section.add "Version", valid_605519
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605520 = header.getOrDefault("X-Amz-Date")
  valid_605520 = validateParameter(valid_605520, JString, required = false,
                                 default = nil)
  if valid_605520 != nil:
    section.add "X-Amz-Date", valid_605520
  var valid_605521 = header.getOrDefault("X-Amz-Security-Token")
  valid_605521 = validateParameter(valid_605521, JString, required = false,
                                 default = nil)
  if valid_605521 != nil:
    section.add "X-Amz-Security-Token", valid_605521
  var valid_605522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605522 = validateParameter(valid_605522, JString, required = false,
                                 default = nil)
  if valid_605522 != nil:
    section.add "X-Amz-Content-Sha256", valid_605522
  var valid_605523 = header.getOrDefault("X-Amz-Algorithm")
  valid_605523 = validateParameter(valid_605523, JString, required = false,
                                 default = nil)
  if valid_605523 != nil:
    section.add "X-Amz-Algorithm", valid_605523
  var valid_605524 = header.getOrDefault("X-Amz-Signature")
  valid_605524 = validateParameter(valid_605524, JString, required = false,
                                 default = nil)
  if valid_605524 != nil:
    section.add "X-Amz-Signature", valid_605524
  var valid_605525 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605525 = validateParameter(valid_605525, JString, required = false,
                                 default = nil)
  if valid_605525 != nil:
    section.add "X-Amz-SignedHeaders", valid_605525
  var valid_605526 = header.getOrDefault("X-Amz-Credential")
  valid_605526 = validateParameter(valid_605526, JString, required = false,
                                 default = nil)
  if valid_605526 != nil:
    section.add "X-Amz-Credential", valid_605526
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605527: Call_GetUpdateGroup_605512; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ## 
  let valid = call_605527.validator(path, query, header, formData, body)
  let scheme = call_605527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605527.url(scheme.get, call_605527.host, call_605527.base,
                         call_605527.route, valid.getOrDefault("path"))
  result = hook(call_605527, url, valid)

proc call*(call_605528: Call_GetUpdateGroup_605512; GroupName: string;
          Action: string = "UpdateGroup"; NewGroupName: string = "";
          NewPath: string = ""; Version: string = "2010-05-08"): Recallable =
  ## getUpdateGroup
  ## <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a>. </p> </note>
  ##   Action: string (required)
  ##   GroupName: string (required)
  ##            : <p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewGroupName: string
  ##               : <p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_605529 = newJObject()
  add(query_605529, "Action", newJString(Action))
  add(query_605529, "GroupName", newJString(GroupName))
  add(query_605529, "NewGroupName", newJString(NewGroupName))
  add(query_605529, "NewPath", newJString(NewPath))
  add(query_605529, "Version", newJString(Version))
  result = call_605528.call(nil, query_605529, nil, nil, nil)

var getUpdateGroup* = Call_GetUpdateGroup_605512(name: "getUpdateGroup",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateGroup", validator: validate_GetUpdateGroup_605513,
    base: "/", url: url_GetUpdateGroup_605514, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateLoginProfile_605567 = ref object of OpenApiRestCall_600426
proc url_PostUpdateLoginProfile_605569(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateLoginProfile_605568(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605570 = query.getOrDefault("Action")
  valid_605570 = validateParameter(valid_605570, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_605570 != nil:
    section.add "Action", valid_605570
  var valid_605571 = query.getOrDefault("Version")
  valid_605571 = validateParameter(valid_605571, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605571 != nil:
    section.add "Version", valid_605571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605572 = header.getOrDefault("X-Amz-Date")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "X-Amz-Date", valid_605572
  var valid_605573 = header.getOrDefault("X-Amz-Security-Token")
  valid_605573 = validateParameter(valid_605573, JString, required = false,
                                 default = nil)
  if valid_605573 != nil:
    section.add "X-Amz-Security-Token", valid_605573
  var valid_605574 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605574 = validateParameter(valid_605574, JString, required = false,
                                 default = nil)
  if valid_605574 != nil:
    section.add "X-Amz-Content-Sha256", valid_605574
  var valid_605575 = header.getOrDefault("X-Amz-Algorithm")
  valid_605575 = validateParameter(valid_605575, JString, required = false,
                                 default = nil)
  if valid_605575 != nil:
    section.add "X-Amz-Algorithm", valid_605575
  var valid_605576 = header.getOrDefault("X-Amz-Signature")
  valid_605576 = validateParameter(valid_605576, JString, required = false,
                                 default = nil)
  if valid_605576 != nil:
    section.add "X-Amz-Signature", valid_605576
  var valid_605577 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605577 = validateParameter(valid_605577, JString, required = false,
                                 default = nil)
  if valid_605577 != nil:
    section.add "X-Amz-SignedHeaders", valid_605577
  var valid_605578 = header.getOrDefault("X-Amz-Credential")
  valid_605578 = validateParameter(valid_605578, JString, required = false,
                                 default = nil)
  if valid_605578 != nil:
    section.add "X-Amz-Credential", valid_605578
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605579 = formData.getOrDefault("UserName")
  valid_605579 = validateParameter(valid_605579, JString, required = true,
                                 default = nil)
  if valid_605579 != nil:
    section.add "UserName", valid_605579
  var valid_605580 = formData.getOrDefault("Password")
  valid_605580 = validateParameter(valid_605580, JString, required = false,
                                 default = nil)
  if valid_605580 != nil:
    section.add "Password", valid_605580
  var valid_605581 = formData.getOrDefault("PasswordResetRequired")
  valid_605581 = validateParameter(valid_605581, JBool, required = false, default = nil)
  if valid_605581 != nil:
    section.add "PasswordResetRequired", valid_605581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605582: Call_PostUpdateLoginProfile_605567; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605582.validator(path, query, header, formData, body)
  let scheme = call_605582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605582.url(scheme.get, call_605582.host, call_605582.base,
                         call_605582.route, valid.getOrDefault("path"))
  result = hook(call_605582, url, valid)

proc call*(call_605583: Call_PostUpdateLoginProfile_605567; UserName: string;
          Password: string = ""; PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605584 = newJObject()
  var formData_605585 = newJObject()
  add(formData_605585, "UserName", newJString(UserName))
  add(formData_605585, "Password", newJString(Password))
  add(formData_605585, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_605584, "Action", newJString(Action))
  add(query_605584, "Version", newJString(Version))
  result = call_605583.call(nil, query_605584, nil, formData_605585, nil)

var postUpdateLoginProfile* = Call_PostUpdateLoginProfile_605567(
    name: "postUpdateLoginProfile", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_PostUpdateLoginProfile_605568, base: "/",
    url: url_PostUpdateLoginProfile_605569, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateLoginProfile_605549 = ref object of OpenApiRestCall_600426
proc url_GetUpdateLoginProfile_605551(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateLoginProfile_605550(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: JBool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: JString (required)
  ##   Password: JString
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605552 = query.getOrDefault("UserName")
  valid_605552 = validateParameter(valid_605552, JString, required = true,
                                 default = nil)
  if valid_605552 != nil:
    section.add "UserName", valid_605552
  var valid_605553 = query.getOrDefault("PasswordResetRequired")
  valid_605553 = validateParameter(valid_605553, JBool, required = false, default = nil)
  if valid_605553 != nil:
    section.add "PasswordResetRequired", valid_605553
  var valid_605554 = query.getOrDefault("Action")
  valid_605554 = validateParameter(valid_605554, JString, required = true,
                                 default = newJString("UpdateLoginProfile"))
  if valid_605554 != nil:
    section.add "Action", valid_605554
  var valid_605555 = query.getOrDefault("Password")
  valid_605555 = validateParameter(valid_605555, JString, required = false,
                                 default = nil)
  if valid_605555 != nil:
    section.add "Password", valid_605555
  var valid_605556 = query.getOrDefault("Version")
  valid_605556 = validateParameter(valid_605556, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605556 != nil:
    section.add "Version", valid_605556
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605557 = header.getOrDefault("X-Amz-Date")
  valid_605557 = validateParameter(valid_605557, JString, required = false,
                                 default = nil)
  if valid_605557 != nil:
    section.add "X-Amz-Date", valid_605557
  var valid_605558 = header.getOrDefault("X-Amz-Security-Token")
  valid_605558 = validateParameter(valid_605558, JString, required = false,
                                 default = nil)
  if valid_605558 != nil:
    section.add "X-Amz-Security-Token", valid_605558
  var valid_605559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605559 = validateParameter(valid_605559, JString, required = false,
                                 default = nil)
  if valid_605559 != nil:
    section.add "X-Amz-Content-Sha256", valid_605559
  var valid_605560 = header.getOrDefault("X-Amz-Algorithm")
  valid_605560 = validateParameter(valid_605560, JString, required = false,
                                 default = nil)
  if valid_605560 != nil:
    section.add "X-Amz-Algorithm", valid_605560
  var valid_605561 = header.getOrDefault("X-Amz-Signature")
  valid_605561 = validateParameter(valid_605561, JString, required = false,
                                 default = nil)
  if valid_605561 != nil:
    section.add "X-Amz-Signature", valid_605561
  var valid_605562 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605562 = validateParameter(valid_605562, JString, required = false,
                                 default = nil)
  if valid_605562 != nil:
    section.add "X-Amz-SignedHeaders", valid_605562
  var valid_605563 = header.getOrDefault("X-Amz-Credential")
  valid_605563 = validateParameter(valid_605563, JString, required = false,
                                 default = nil)
  if valid_605563 != nil:
    section.add "X-Amz-Credential", valid_605563
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605564: Call_GetUpdateLoginProfile_605549; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ## 
  let valid = call_605564.validator(path, query, header, formData, body)
  let scheme = call_605564.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605564.url(scheme.get, call_605564.host, call_605564.base,
                         call_605564.route, valid.getOrDefault("path"))
  result = hook(call_605564, url, valid)

proc call*(call_605565: Call_GetUpdateLoginProfile_605549; UserName: string;
          PasswordResetRequired: bool = false;
          Action: string = "UpdateLoginProfile"; Password: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateLoginProfile
  ## <p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PasswordResetRequired: bool
  ##                        : Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
  ##   Action: string (required)
  ##   Password: string
  ##           : <p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
  ##   Version: string (required)
  var query_605566 = newJObject()
  add(query_605566, "UserName", newJString(UserName))
  add(query_605566, "PasswordResetRequired", newJBool(PasswordResetRequired))
  add(query_605566, "Action", newJString(Action))
  add(query_605566, "Password", newJString(Password))
  add(query_605566, "Version", newJString(Version))
  result = call_605565.call(nil, query_605566, nil, nil, nil)

var getUpdateLoginProfile* = Call_GetUpdateLoginProfile_605549(
    name: "getUpdateLoginProfile", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateLoginProfile",
    validator: validate_GetUpdateLoginProfile_605550, base: "/",
    url: url_GetUpdateLoginProfile_605551, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateOpenIDConnectProviderThumbprint_605603 = ref object of OpenApiRestCall_600426
proc url_PostUpdateOpenIDConnectProviderThumbprint_605605(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateOpenIDConnectProviderThumbprint_605604(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605606 = query.getOrDefault("Action")
  valid_605606 = validateParameter(valid_605606, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_605606 != nil:
    section.add "Action", valid_605606
  var valid_605607 = query.getOrDefault("Version")
  valid_605607 = validateParameter(valid_605607, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605607 != nil:
    section.add "Version", valid_605607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605608 = header.getOrDefault("X-Amz-Date")
  valid_605608 = validateParameter(valid_605608, JString, required = false,
                                 default = nil)
  if valid_605608 != nil:
    section.add "X-Amz-Date", valid_605608
  var valid_605609 = header.getOrDefault("X-Amz-Security-Token")
  valid_605609 = validateParameter(valid_605609, JString, required = false,
                                 default = nil)
  if valid_605609 != nil:
    section.add "X-Amz-Security-Token", valid_605609
  var valid_605610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605610 = validateParameter(valid_605610, JString, required = false,
                                 default = nil)
  if valid_605610 != nil:
    section.add "X-Amz-Content-Sha256", valid_605610
  var valid_605611 = header.getOrDefault("X-Amz-Algorithm")
  valid_605611 = validateParameter(valid_605611, JString, required = false,
                                 default = nil)
  if valid_605611 != nil:
    section.add "X-Amz-Algorithm", valid_605611
  var valid_605612 = header.getOrDefault("X-Amz-Signature")
  valid_605612 = validateParameter(valid_605612, JString, required = false,
                                 default = nil)
  if valid_605612 != nil:
    section.add "X-Amz-Signature", valid_605612
  var valid_605613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605613 = validateParameter(valid_605613, JString, required = false,
                                 default = nil)
  if valid_605613 != nil:
    section.add "X-Amz-SignedHeaders", valid_605613
  var valid_605614 = header.getOrDefault("X-Amz-Credential")
  valid_605614 = validateParameter(valid_605614, JString, required = false,
                                 default = nil)
  if valid_605614 != nil:
    section.add "X-Amz-Credential", valid_605614
  result.add "header", section
  ## parameters in `formData` object:
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OpenIDConnectProviderArn` field"
  var valid_605615 = formData.getOrDefault("OpenIDConnectProviderArn")
  valid_605615 = validateParameter(valid_605615, JString, required = true,
                                 default = nil)
  if valid_605615 != nil:
    section.add "OpenIDConnectProviderArn", valid_605615
  var valid_605616 = formData.getOrDefault("ThumbprintList")
  valid_605616 = validateParameter(valid_605616, JArray, required = true, default = nil)
  if valid_605616 != nil:
    section.add "ThumbprintList", valid_605616
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605617: Call_PostUpdateOpenIDConnectProviderThumbprint_605603;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_605617.validator(path, query, header, formData, body)
  let scheme = call_605617.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605617.url(scheme.get, call_605617.host, call_605617.base,
                         call_605617.route, valid.getOrDefault("path"))
  result = hook(call_605617, url, valid)

proc call*(call_605618: Call_PostUpdateOpenIDConnectProviderThumbprint_605603;
          OpenIDConnectProviderArn: string; ThumbprintList: JsonNode;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605619 = newJObject()
  var formData_605620 = newJObject()
  add(formData_605620, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  if ThumbprintList != nil:
    formData_605620.add "ThumbprintList", ThumbprintList
  add(query_605619, "Action", newJString(Action))
  add(query_605619, "Version", newJString(Version))
  result = call_605618.call(nil, query_605619, nil, formData_605620, nil)

var postUpdateOpenIDConnectProviderThumbprint* = Call_PostUpdateOpenIDConnectProviderThumbprint_605603(
    name: "postUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_PostUpdateOpenIDConnectProviderThumbprint_605604,
    base: "/", url: url_PostUpdateOpenIDConnectProviderThumbprint_605605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateOpenIDConnectProviderThumbprint_605586 = ref object of OpenApiRestCall_600426
proc url_GetUpdateOpenIDConnectProviderThumbprint_605588(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateOpenIDConnectProviderThumbprint_605587(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: JString (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ThumbprintList` field"
  var valid_605589 = query.getOrDefault("ThumbprintList")
  valid_605589 = validateParameter(valid_605589, JArray, required = true, default = nil)
  if valid_605589 != nil:
    section.add "ThumbprintList", valid_605589
  var valid_605590 = query.getOrDefault("OpenIDConnectProviderArn")
  valid_605590 = validateParameter(valid_605590, JString, required = true,
                                 default = nil)
  if valid_605590 != nil:
    section.add "OpenIDConnectProviderArn", valid_605590
  var valid_605591 = query.getOrDefault("Action")
  valid_605591 = validateParameter(valid_605591, JString, required = true, default = newJString(
      "UpdateOpenIDConnectProviderThumbprint"))
  if valid_605591 != nil:
    section.add "Action", valid_605591
  var valid_605592 = query.getOrDefault("Version")
  valid_605592 = validateParameter(valid_605592, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605592 != nil:
    section.add "Version", valid_605592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605593 = header.getOrDefault("X-Amz-Date")
  valid_605593 = validateParameter(valid_605593, JString, required = false,
                                 default = nil)
  if valid_605593 != nil:
    section.add "X-Amz-Date", valid_605593
  var valid_605594 = header.getOrDefault("X-Amz-Security-Token")
  valid_605594 = validateParameter(valid_605594, JString, required = false,
                                 default = nil)
  if valid_605594 != nil:
    section.add "X-Amz-Security-Token", valid_605594
  var valid_605595 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605595 = validateParameter(valid_605595, JString, required = false,
                                 default = nil)
  if valid_605595 != nil:
    section.add "X-Amz-Content-Sha256", valid_605595
  var valid_605596 = header.getOrDefault("X-Amz-Algorithm")
  valid_605596 = validateParameter(valid_605596, JString, required = false,
                                 default = nil)
  if valid_605596 != nil:
    section.add "X-Amz-Algorithm", valid_605596
  var valid_605597 = header.getOrDefault("X-Amz-Signature")
  valid_605597 = validateParameter(valid_605597, JString, required = false,
                                 default = nil)
  if valid_605597 != nil:
    section.add "X-Amz-Signature", valid_605597
  var valid_605598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605598 = validateParameter(valid_605598, JString, required = false,
                                 default = nil)
  if valid_605598 != nil:
    section.add "X-Amz-SignedHeaders", valid_605598
  var valid_605599 = header.getOrDefault("X-Amz-Credential")
  valid_605599 = validateParameter(valid_605599, JString, required = false,
                                 default = nil)
  if valid_605599 != nil:
    section.add "X-Amz-Credential", valid_605599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605600: Call_GetUpdateOpenIDConnectProviderThumbprint_605586;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ## 
  let valid = call_605600.validator(path, query, header, formData, body)
  let scheme = call_605600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605600.url(scheme.get, call_605600.host, call_605600.base,
                         call_605600.route, valid.getOrDefault("path"))
  result = hook(call_605600, url, valid)

proc call*(call_605601: Call_GetUpdateOpenIDConnectProviderThumbprint_605586;
          ThumbprintList: JsonNode; OpenIDConnectProviderArn: string;
          Action: string = "UpdateOpenIDConnectProviderThumbprint";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateOpenIDConnectProviderThumbprint
  ## <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Trust for the OIDC provider is derived from the provider's certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
  ##   ThumbprintList: JArray (required)
  ##                 : Contains a list of thumbprints of identity provider server certificates.
  ##   OpenIDConnectProviderArn: string (required)
  ##                           : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605602 = newJObject()
  if ThumbprintList != nil:
    query_605602.add "ThumbprintList", ThumbprintList
  add(query_605602, "OpenIDConnectProviderArn",
      newJString(OpenIDConnectProviderArn))
  add(query_605602, "Action", newJString(Action))
  add(query_605602, "Version", newJString(Version))
  result = call_605601.call(nil, query_605602, nil, nil, nil)

var getUpdateOpenIDConnectProviderThumbprint* = Call_GetUpdateOpenIDConnectProviderThumbprint_605586(
    name: "getUpdateOpenIDConnectProviderThumbprint", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com",
    route: "/#Action=UpdateOpenIDConnectProviderThumbprint",
    validator: validate_GetUpdateOpenIDConnectProviderThumbprint_605587,
    base: "/", url: url_GetUpdateOpenIDConnectProviderThumbprint_605588,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRole_605639 = ref object of OpenApiRestCall_600426
proc url_PostUpdateRole_605641(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRole_605640(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605642 = query.getOrDefault("Action")
  valid_605642 = validateParameter(valid_605642, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_605642 != nil:
    section.add "Action", valid_605642
  var valid_605643 = query.getOrDefault("Version")
  valid_605643 = validateParameter(valid_605643, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605643 != nil:
    section.add "Version", valid_605643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605644 = header.getOrDefault("X-Amz-Date")
  valid_605644 = validateParameter(valid_605644, JString, required = false,
                                 default = nil)
  if valid_605644 != nil:
    section.add "X-Amz-Date", valid_605644
  var valid_605645 = header.getOrDefault("X-Amz-Security-Token")
  valid_605645 = validateParameter(valid_605645, JString, required = false,
                                 default = nil)
  if valid_605645 != nil:
    section.add "X-Amz-Security-Token", valid_605645
  var valid_605646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605646 = validateParameter(valid_605646, JString, required = false,
                                 default = nil)
  if valid_605646 != nil:
    section.add "X-Amz-Content-Sha256", valid_605646
  var valid_605647 = header.getOrDefault("X-Amz-Algorithm")
  valid_605647 = validateParameter(valid_605647, JString, required = false,
                                 default = nil)
  if valid_605647 != nil:
    section.add "X-Amz-Algorithm", valid_605647
  var valid_605648 = header.getOrDefault("X-Amz-Signature")
  valid_605648 = validateParameter(valid_605648, JString, required = false,
                                 default = nil)
  if valid_605648 != nil:
    section.add "X-Amz-Signature", valid_605648
  var valid_605649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605649 = validateParameter(valid_605649, JString, required = false,
                                 default = nil)
  if valid_605649 != nil:
    section.add "X-Amz-SignedHeaders", valid_605649
  var valid_605650 = header.getOrDefault("X-Amz-Credential")
  valid_605650 = validateParameter(valid_605650, JString, required = false,
                                 default = nil)
  if valid_605650 != nil:
    section.add "X-Amz-Credential", valid_605650
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605651 = formData.getOrDefault("RoleName")
  valid_605651 = validateParameter(valid_605651, JString, required = true,
                                 default = nil)
  if valid_605651 != nil:
    section.add "RoleName", valid_605651
  var valid_605652 = formData.getOrDefault("MaxSessionDuration")
  valid_605652 = validateParameter(valid_605652, JInt, required = false, default = nil)
  if valid_605652 != nil:
    section.add "MaxSessionDuration", valid_605652
  var valid_605653 = formData.getOrDefault("Description")
  valid_605653 = validateParameter(valid_605653, JString, required = false,
                                 default = nil)
  if valid_605653 != nil:
    section.add "Description", valid_605653
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605654: Call_PostUpdateRole_605639; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_605654.validator(path, query, header, formData, body)
  let scheme = call_605654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605654.url(scheme.get, call_605654.host, call_605654.base,
                         call_605654.route, valid.getOrDefault("path"))
  result = hook(call_605654, url, valid)

proc call*(call_605655: Call_PostUpdateRole_605639; RoleName: string;
          Action: string = "UpdateRole"; MaxSessionDuration: int = 0;
          Version: string = "2010-05-08"; Description: string = ""): Recallable =
  ## postUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Version: string (required)
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  var query_605656 = newJObject()
  var formData_605657 = newJObject()
  add(formData_605657, "RoleName", newJString(RoleName))
  add(query_605656, "Action", newJString(Action))
  add(formData_605657, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_605656, "Version", newJString(Version))
  add(formData_605657, "Description", newJString(Description))
  result = call_605655.call(nil, query_605656, nil, formData_605657, nil)

var postUpdateRole* = Call_PostUpdateRole_605639(name: "postUpdateRole",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_PostUpdateRole_605640,
    base: "/", url: url_PostUpdateRole_605641, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRole_605621 = ref object of OpenApiRestCall_600426
proc url_GetUpdateRole_605623(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRole_605622(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: JInt
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605624 = query.getOrDefault("Description")
  valid_605624 = validateParameter(valid_605624, JString, required = false,
                                 default = nil)
  if valid_605624 != nil:
    section.add "Description", valid_605624
  var valid_605625 = query.getOrDefault("MaxSessionDuration")
  valid_605625 = validateParameter(valid_605625, JInt, required = false, default = nil)
  if valid_605625 != nil:
    section.add "MaxSessionDuration", valid_605625
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605626 = query.getOrDefault("Action")
  valid_605626 = validateParameter(valid_605626, JString, required = true,
                                 default = newJString("UpdateRole"))
  if valid_605626 != nil:
    section.add "Action", valid_605626
  var valid_605627 = query.getOrDefault("RoleName")
  valid_605627 = validateParameter(valid_605627, JString, required = true,
                                 default = nil)
  if valid_605627 != nil:
    section.add "RoleName", valid_605627
  var valid_605628 = query.getOrDefault("Version")
  valid_605628 = validateParameter(valid_605628, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605628 != nil:
    section.add "Version", valid_605628
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605629 = header.getOrDefault("X-Amz-Date")
  valid_605629 = validateParameter(valid_605629, JString, required = false,
                                 default = nil)
  if valid_605629 != nil:
    section.add "X-Amz-Date", valid_605629
  var valid_605630 = header.getOrDefault("X-Amz-Security-Token")
  valid_605630 = validateParameter(valid_605630, JString, required = false,
                                 default = nil)
  if valid_605630 != nil:
    section.add "X-Amz-Security-Token", valid_605630
  var valid_605631 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605631 = validateParameter(valid_605631, JString, required = false,
                                 default = nil)
  if valid_605631 != nil:
    section.add "X-Amz-Content-Sha256", valid_605631
  var valid_605632 = header.getOrDefault("X-Amz-Algorithm")
  valid_605632 = validateParameter(valid_605632, JString, required = false,
                                 default = nil)
  if valid_605632 != nil:
    section.add "X-Amz-Algorithm", valid_605632
  var valid_605633 = header.getOrDefault("X-Amz-Signature")
  valid_605633 = validateParameter(valid_605633, JString, required = false,
                                 default = nil)
  if valid_605633 != nil:
    section.add "X-Amz-Signature", valid_605633
  var valid_605634 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605634 = validateParameter(valid_605634, JString, required = false,
                                 default = nil)
  if valid_605634 != nil:
    section.add "X-Amz-SignedHeaders", valid_605634
  var valid_605635 = header.getOrDefault("X-Amz-Credential")
  valid_605635 = validateParameter(valid_605635, JString, required = false,
                                 default = nil)
  if valid_605635 != nil:
    section.add "X-Amz-Credential", valid_605635
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605636: Call_GetUpdateRole_605621; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Updates the description or maximum session duration setting of a role.
  ## 
  let valid = call_605636.validator(path, query, header, formData, body)
  let scheme = call_605636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605636.url(scheme.get, call_605636.host, call_605636.base,
                         call_605636.route, valid.getOrDefault("path"))
  result = hook(call_605636, url, valid)

proc call*(call_605637: Call_GetUpdateRole_605621; RoleName: string;
          Description: string = ""; MaxSessionDuration: int = 0;
          Action: string = "UpdateRole"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateRole
  ## Updates the description or maximum session duration setting of a role.
  ##   Description: string
  ##              : The new description that you want to apply to the specified role.
  ##   MaxSessionDuration: int
  ##                     : <p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the AWS CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a> in the <i>IAM User Guide</i>.</p>
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_605638 = newJObject()
  add(query_605638, "Description", newJString(Description))
  add(query_605638, "MaxSessionDuration", newJInt(MaxSessionDuration))
  add(query_605638, "Action", newJString(Action))
  add(query_605638, "RoleName", newJString(RoleName))
  add(query_605638, "Version", newJString(Version))
  result = call_605637.call(nil, query_605638, nil, nil, nil)

var getUpdateRole* = Call_GetUpdateRole_605621(name: "getUpdateRole",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateRole", validator: validate_GetUpdateRole_605622,
    base: "/", url: url_GetUpdateRole_605623, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateRoleDescription_605675 = ref object of OpenApiRestCall_600426
proc url_PostUpdateRoleDescription_605677(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateRoleDescription_605676(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605678 = query.getOrDefault("Action")
  valid_605678 = validateParameter(valid_605678, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_605678 != nil:
    section.add "Action", valid_605678
  var valid_605679 = query.getOrDefault("Version")
  valid_605679 = validateParameter(valid_605679, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605679 != nil:
    section.add "Version", valid_605679
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605680 = header.getOrDefault("X-Amz-Date")
  valid_605680 = validateParameter(valid_605680, JString, required = false,
                                 default = nil)
  if valid_605680 != nil:
    section.add "X-Amz-Date", valid_605680
  var valid_605681 = header.getOrDefault("X-Amz-Security-Token")
  valid_605681 = validateParameter(valid_605681, JString, required = false,
                                 default = nil)
  if valid_605681 != nil:
    section.add "X-Amz-Security-Token", valid_605681
  var valid_605682 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605682 = validateParameter(valid_605682, JString, required = false,
                                 default = nil)
  if valid_605682 != nil:
    section.add "X-Amz-Content-Sha256", valid_605682
  var valid_605683 = header.getOrDefault("X-Amz-Algorithm")
  valid_605683 = validateParameter(valid_605683, JString, required = false,
                                 default = nil)
  if valid_605683 != nil:
    section.add "X-Amz-Algorithm", valid_605683
  var valid_605684 = header.getOrDefault("X-Amz-Signature")
  valid_605684 = validateParameter(valid_605684, JString, required = false,
                                 default = nil)
  if valid_605684 != nil:
    section.add "X-Amz-Signature", valid_605684
  var valid_605685 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605685 = validateParameter(valid_605685, JString, required = false,
                                 default = nil)
  if valid_605685 != nil:
    section.add "X-Amz-SignedHeaders", valid_605685
  var valid_605686 = header.getOrDefault("X-Amz-Credential")
  valid_605686 = validateParameter(valid_605686, JString, required = false,
                                 default = nil)
  if valid_605686 != nil:
    section.add "X-Amz-Credential", valid_605686
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleName` field"
  var valid_605687 = formData.getOrDefault("RoleName")
  valid_605687 = validateParameter(valid_605687, JString, required = true,
                                 default = nil)
  if valid_605687 != nil:
    section.add "RoleName", valid_605687
  var valid_605688 = formData.getOrDefault("Description")
  valid_605688 = validateParameter(valid_605688, JString, required = true,
                                 default = nil)
  if valid_605688 != nil:
    section.add "Description", valid_605688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605689: Call_PostUpdateRoleDescription_605675; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_605689.validator(path, query, header, formData, body)
  let scheme = call_605689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605689.url(scheme.get, call_605689.host, call_605689.base,
                         call_605689.route, valid.getOrDefault("path"))
  result = hook(call_605689, url, valid)

proc call*(call_605690: Call_PostUpdateRoleDescription_605675; RoleName: string;
          Description: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  var query_605691 = newJObject()
  var formData_605692 = newJObject()
  add(formData_605692, "RoleName", newJString(RoleName))
  add(query_605691, "Action", newJString(Action))
  add(query_605691, "Version", newJString(Version))
  add(formData_605692, "Description", newJString(Description))
  result = call_605690.call(nil, query_605691, nil, formData_605692, nil)

var postUpdateRoleDescription* = Call_PostUpdateRoleDescription_605675(
    name: "postUpdateRoleDescription", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_PostUpdateRoleDescription_605676, base: "/",
    url: url_PostUpdateRoleDescription_605677,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateRoleDescription_605658 = ref object of OpenApiRestCall_600426
proc url_GetUpdateRoleDescription_605660(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateRoleDescription_605659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: JString (required)
  ##   RoleName: JString (required)
  ##           : The name of the role that you want to modify.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_605661 = query.getOrDefault("Description")
  valid_605661 = validateParameter(valid_605661, JString, required = true,
                                 default = nil)
  if valid_605661 != nil:
    section.add "Description", valid_605661
  var valid_605662 = query.getOrDefault("Action")
  valid_605662 = validateParameter(valid_605662, JString, required = true,
                                 default = newJString("UpdateRoleDescription"))
  if valid_605662 != nil:
    section.add "Action", valid_605662
  var valid_605663 = query.getOrDefault("RoleName")
  valid_605663 = validateParameter(valid_605663, JString, required = true,
                                 default = nil)
  if valid_605663 != nil:
    section.add "RoleName", valid_605663
  var valid_605664 = query.getOrDefault("Version")
  valid_605664 = validateParameter(valid_605664, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605664 != nil:
    section.add "Version", valid_605664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605665 = header.getOrDefault("X-Amz-Date")
  valid_605665 = validateParameter(valid_605665, JString, required = false,
                                 default = nil)
  if valid_605665 != nil:
    section.add "X-Amz-Date", valid_605665
  var valid_605666 = header.getOrDefault("X-Amz-Security-Token")
  valid_605666 = validateParameter(valid_605666, JString, required = false,
                                 default = nil)
  if valid_605666 != nil:
    section.add "X-Amz-Security-Token", valid_605666
  var valid_605667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605667 = validateParameter(valid_605667, JString, required = false,
                                 default = nil)
  if valid_605667 != nil:
    section.add "X-Amz-Content-Sha256", valid_605667
  var valid_605668 = header.getOrDefault("X-Amz-Algorithm")
  valid_605668 = validateParameter(valid_605668, JString, required = false,
                                 default = nil)
  if valid_605668 != nil:
    section.add "X-Amz-Algorithm", valid_605668
  var valid_605669 = header.getOrDefault("X-Amz-Signature")
  valid_605669 = validateParameter(valid_605669, JString, required = false,
                                 default = nil)
  if valid_605669 != nil:
    section.add "X-Amz-Signature", valid_605669
  var valid_605670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605670 = validateParameter(valid_605670, JString, required = false,
                                 default = nil)
  if valid_605670 != nil:
    section.add "X-Amz-SignedHeaders", valid_605670
  var valid_605671 = header.getOrDefault("X-Amz-Credential")
  valid_605671 = validateParameter(valid_605671, JString, required = false,
                                 default = nil)
  if valid_605671 != nil:
    section.add "X-Amz-Credential", valid_605671
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605672: Call_GetUpdateRoleDescription_605658; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ## 
  let valid = call_605672.validator(path, query, header, formData, body)
  let scheme = call_605672.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605672.url(scheme.get, call_605672.host, call_605672.base,
                         call_605672.route, valid.getOrDefault("path"))
  result = hook(call_605672, url, valid)

proc call*(call_605673: Call_GetUpdateRoleDescription_605658; Description: string;
          RoleName: string; Action: string = "UpdateRoleDescription";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateRoleDescription
  ## <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
  ##   Description: string (required)
  ##              : The new description that you want to apply to the specified role.
  ##   Action: string (required)
  ##   RoleName: string (required)
  ##           : The name of the role that you want to modify.
  ##   Version: string (required)
  var query_605674 = newJObject()
  add(query_605674, "Description", newJString(Description))
  add(query_605674, "Action", newJString(Action))
  add(query_605674, "RoleName", newJString(RoleName))
  add(query_605674, "Version", newJString(Version))
  result = call_605673.call(nil, query_605674, nil, nil, nil)

var getUpdateRoleDescription* = Call_GetUpdateRoleDescription_605658(
    name: "getUpdateRoleDescription", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateRoleDescription",
    validator: validate_GetUpdateRoleDescription_605659, base: "/",
    url: url_GetUpdateRoleDescription_605660, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSAMLProvider_605710 = ref object of OpenApiRestCall_600426
proc url_PostUpdateSAMLProvider_605712(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSAMLProvider_605711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605713 = query.getOrDefault("Action")
  valid_605713 = validateParameter(valid_605713, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_605713 != nil:
    section.add "Action", valid_605713
  var valid_605714 = query.getOrDefault("Version")
  valid_605714 = validateParameter(valid_605714, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605714 != nil:
    section.add "Version", valid_605714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605715 = header.getOrDefault("X-Amz-Date")
  valid_605715 = validateParameter(valid_605715, JString, required = false,
                                 default = nil)
  if valid_605715 != nil:
    section.add "X-Amz-Date", valid_605715
  var valid_605716 = header.getOrDefault("X-Amz-Security-Token")
  valid_605716 = validateParameter(valid_605716, JString, required = false,
                                 default = nil)
  if valid_605716 != nil:
    section.add "X-Amz-Security-Token", valid_605716
  var valid_605717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605717 = validateParameter(valid_605717, JString, required = false,
                                 default = nil)
  if valid_605717 != nil:
    section.add "X-Amz-Content-Sha256", valid_605717
  var valid_605718 = header.getOrDefault("X-Amz-Algorithm")
  valid_605718 = validateParameter(valid_605718, JString, required = false,
                                 default = nil)
  if valid_605718 != nil:
    section.add "X-Amz-Algorithm", valid_605718
  var valid_605719 = header.getOrDefault("X-Amz-Signature")
  valid_605719 = validateParameter(valid_605719, JString, required = false,
                                 default = nil)
  if valid_605719 != nil:
    section.add "X-Amz-Signature", valid_605719
  var valid_605720 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605720 = validateParameter(valid_605720, JString, required = false,
                                 default = nil)
  if valid_605720 != nil:
    section.add "X-Amz-SignedHeaders", valid_605720
  var valid_605721 = header.getOrDefault("X-Amz-Credential")
  valid_605721 = validateParameter(valid_605721, JString, required = false,
                                 default = nil)
  if valid_605721 != nil:
    section.add "X-Amz-Credential", valid_605721
  result.add "header", section
  ## parameters in `formData` object:
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SAMLProviderArn` field"
  var valid_605722 = formData.getOrDefault("SAMLProviderArn")
  valid_605722 = validateParameter(valid_605722, JString, required = true,
                                 default = nil)
  if valid_605722 != nil:
    section.add "SAMLProviderArn", valid_605722
  var valid_605723 = formData.getOrDefault("SAMLMetadataDocument")
  valid_605723 = validateParameter(valid_605723, JString, required = true,
                                 default = nil)
  if valid_605723 != nil:
    section.add "SAMLMetadataDocument", valid_605723
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605724: Call_PostUpdateSAMLProvider_605710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_605724.validator(path, query, header, formData, body)
  let scheme = call_605724.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605724.url(scheme.get, call_605724.host, call_605724.base,
                         call_605724.route, valid.getOrDefault("path"))
  result = hook(call_605724, url, valid)

proc call*(call_605725: Call_PostUpdateSAMLProvider_605710;
          SAMLProviderArn: string; SAMLMetadataDocument: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Action: string (required)
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Version: string (required)
  var query_605726 = newJObject()
  var formData_605727 = newJObject()
  add(formData_605727, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_605726, "Action", newJString(Action))
  add(formData_605727, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_605726, "Version", newJString(Version))
  result = call_605725.call(nil, query_605726, nil, formData_605727, nil)

var postUpdateSAMLProvider* = Call_PostUpdateSAMLProvider_605710(
    name: "postUpdateSAMLProvider", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_PostUpdateSAMLProvider_605711, base: "/",
    url: url_PostUpdateSAMLProvider_605712, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSAMLProvider_605693 = ref object of OpenApiRestCall_600426
proc url_GetUpdateSAMLProvider_605695(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSAMLProvider_605694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SAMLMetadataDocument: JString (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: JString (required)
  ##   SAMLProviderArn: JString (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SAMLMetadataDocument` field"
  var valid_605696 = query.getOrDefault("SAMLMetadataDocument")
  valid_605696 = validateParameter(valid_605696, JString, required = true,
                                 default = nil)
  if valid_605696 != nil:
    section.add "SAMLMetadataDocument", valid_605696
  var valid_605697 = query.getOrDefault("Action")
  valid_605697 = validateParameter(valid_605697, JString, required = true,
                                 default = newJString("UpdateSAMLProvider"))
  if valid_605697 != nil:
    section.add "Action", valid_605697
  var valid_605698 = query.getOrDefault("SAMLProviderArn")
  valid_605698 = validateParameter(valid_605698, JString, required = true,
                                 default = nil)
  if valid_605698 != nil:
    section.add "SAMLProviderArn", valid_605698
  var valid_605699 = query.getOrDefault("Version")
  valid_605699 = validateParameter(valid_605699, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605699 != nil:
    section.add "Version", valid_605699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605700 = header.getOrDefault("X-Amz-Date")
  valid_605700 = validateParameter(valid_605700, JString, required = false,
                                 default = nil)
  if valid_605700 != nil:
    section.add "X-Amz-Date", valid_605700
  var valid_605701 = header.getOrDefault("X-Amz-Security-Token")
  valid_605701 = validateParameter(valid_605701, JString, required = false,
                                 default = nil)
  if valid_605701 != nil:
    section.add "X-Amz-Security-Token", valid_605701
  var valid_605702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605702 = validateParameter(valid_605702, JString, required = false,
                                 default = nil)
  if valid_605702 != nil:
    section.add "X-Amz-Content-Sha256", valid_605702
  var valid_605703 = header.getOrDefault("X-Amz-Algorithm")
  valid_605703 = validateParameter(valid_605703, JString, required = false,
                                 default = nil)
  if valid_605703 != nil:
    section.add "X-Amz-Algorithm", valid_605703
  var valid_605704 = header.getOrDefault("X-Amz-Signature")
  valid_605704 = validateParameter(valid_605704, JString, required = false,
                                 default = nil)
  if valid_605704 != nil:
    section.add "X-Amz-Signature", valid_605704
  var valid_605705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605705 = validateParameter(valid_605705, JString, required = false,
                                 default = nil)
  if valid_605705 != nil:
    section.add "X-Amz-SignedHeaders", valid_605705
  var valid_605706 = header.getOrDefault("X-Amz-Credential")
  valid_605706 = validateParameter(valid_605706, JString, required = false,
                                 default = nil)
  if valid_605706 != nil:
    section.add "X-Amz-Credential", valid_605706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605707: Call_GetUpdateSAMLProvider_605693; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ## 
  let valid = call_605707.validator(path, query, header, formData, body)
  let scheme = call_605707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605707.url(scheme.get, call_605707.host, call_605707.base,
                         call_605707.route, valid.getOrDefault("path"))
  result = hook(call_605707, url, valid)

proc call*(call_605708: Call_GetUpdateSAMLProvider_605693;
          SAMLMetadataDocument: string; SAMLProviderArn: string;
          Action: string = "UpdateSAMLProvider"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSAMLProvider
  ## <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
  ##   SAMLMetadataDocument: string (required)
  ##                       : An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
  ##   Action: string (required)
  ##   SAMLProviderArn: string (required)
  ##                  : <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>
  ##   Version: string (required)
  var query_605709 = newJObject()
  add(query_605709, "SAMLMetadataDocument", newJString(SAMLMetadataDocument))
  add(query_605709, "Action", newJString(Action))
  add(query_605709, "SAMLProviderArn", newJString(SAMLProviderArn))
  add(query_605709, "Version", newJString(Version))
  result = call_605708.call(nil, query_605709, nil, nil, nil)

var getUpdateSAMLProvider* = Call_GetUpdateSAMLProvider_605693(
    name: "getUpdateSAMLProvider", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSAMLProvider",
    validator: validate_GetUpdateSAMLProvider_605694, base: "/",
    url: url_GetUpdateSAMLProvider_605695, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSSHPublicKey_605746 = ref object of OpenApiRestCall_600426
proc url_PostUpdateSSHPublicKey_605748(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSSHPublicKey_605747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605749 = query.getOrDefault("Action")
  valid_605749 = validateParameter(valid_605749, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_605749 != nil:
    section.add "Action", valid_605749
  var valid_605750 = query.getOrDefault("Version")
  valid_605750 = validateParameter(valid_605750, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605750 != nil:
    section.add "Version", valid_605750
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605751 = header.getOrDefault("X-Amz-Date")
  valid_605751 = validateParameter(valid_605751, JString, required = false,
                                 default = nil)
  if valid_605751 != nil:
    section.add "X-Amz-Date", valid_605751
  var valid_605752 = header.getOrDefault("X-Amz-Security-Token")
  valid_605752 = validateParameter(valid_605752, JString, required = false,
                                 default = nil)
  if valid_605752 != nil:
    section.add "X-Amz-Security-Token", valid_605752
  var valid_605753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605753 = validateParameter(valid_605753, JString, required = false,
                                 default = nil)
  if valid_605753 != nil:
    section.add "X-Amz-Content-Sha256", valid_605753
  var valid_605754 = header.getOrDefault("X-Amz-Algorithm")
  valid_605754 = validateParameter(valid_605754, JString, required = false,
                                 default = nil)
  if valid_605754 != nil:
    section.add "X-Amz-Algorithm", valid_605754
  var valid_605755 = header.getOrDefault("X-Amz-Signature")
  valid_605755 = validateParameter(valid_605755, JString, required = false,
                                 default = nil)
  if valid_605755 != nil:
    section.add "X-Amz-Signature", valid_605755
  var valid_605756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605756 = validateParameter(valid_605756, JString, required = false,
                                 default = nil)
  if valid_605756 != nil:
    section.add "X-Amz-SignedHeaders", valid_605756
  var valid_605757 = header.getOrDefault("X-Amz-Credential")
  valid_605757 = validateParameter(valid_605757, JString, required = false,
                                 default = nil)
  if valid_605757 != nil:
    section.add "X-Amz-Credential", valid_605757
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605758 = formData.getOrDefault("UserName")
  valid_605758 = validateParameter(valid_605758, JString, required = true,
                                 default = nil)
  if valid_605758 != nil:
    section.add "UserName", valid_605758
  var valid_605759 = formData.getOrDefault("SSHPublicKeyId")
  valid_605759 = validateParameter(valid_605759, JString, required = true,
                                 default = nil)
  if valid_605759 != nil:
    section.add "SSHPublicKeyId", valid_605759
  var valid_605760 = formData.getOrDefault("Status")
  valid_605760 = validateParameter(valid_605760, JString, required = true,
                                 default = newJString("Active"))
  if valid_605760 != nil:
    section.add "Status", valid_605760
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605761: Call_PostUpdateSSHPublicKey_605746; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605761.validator(path, query, header, formData, body)
  let scheme = call_605761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605761.url(scheme.get, call_605761.host, call_605761.base,
                         call_605761.route, valid.getOrDefault("path"))
  result = hook(call_605761, url, valid)

proc call*(call_605762: Call_PostUpdateSSHPublicKey_605746; UserName: string;
          SSHPublicKeyId: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## postUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605763 = newJObject()
  var formData_605764 = newJObject()
  add(formData_605764, "UserName", newJString(UserName))
  add(formData_605764, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(formData_605764, "Status", newJString(Status))
  add(query_605763, "Action", newJString(Action))
  add(query_605763, "Version", newJString(Version))
  result = call_605762.call(nil, query_605763, nil, formData_605764, nil)

var postUpdateSSHPublicKey* = Call_PostUpdateSSHPublicKey_605746(
    name: "postUpdateSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_PostUpdateSSHPublicKey_605747, base: "/",
    url: url_PostUpdateSSHPublicKey_605748, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSSHPublicKey_605728 = ref object of OpenApiRestCall_600426
proc url_GetUpdateSSHPublicKey_605730(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSSHPublicKey_605729(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: JString (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_605731 = query.getOrDefault("Status")
  valid_605731 = validateParameter(valid_605731, JString, required = true,
                                 default = newJString("Active"))
  if valid_605731 != nil:
    section.add "Status", valid_605731
  var valid_605732 = query.getOrDefault("SSHPublicKeyId")
  valid_605732 = validateParameter(valid_605732, JString, required = true,
                                 default = nil)
  if valid_605732 != nil:
    section.add "SSHPublicKeyId", valid_605732
  var valid_605733 = query.getOrDefault("UserName")
  valid_605733 = validateParameter(valid_605733, JString, required = true,
                                 default = nil)
  if valid_605733 != nil:
    section.add "UserName", valid_605733
  var valid_605734 = query.getOrDefault("Action")
  valid_605734 = validateParameter(valid_605734, JString, required = true,
                                 default = newJString("UpdateSSHPublicKey"))
  if valid_605734 != nil:
    section.add "Action", valid_605734
  var valid_605735 = query.getOrDefault("Version")
  valid_605735 = validateParameter(valid_605735, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605735 != nil:
    section.add "Version", valid_605735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605736 = header.getOrDefault("X-Amz-Date")
  valid_605736 = validateParameter(valid_605736, JString, required = false,
                                 default = nil)
  if valid_605736 != nil:
    section.add "X-Amz-Date", valid_605736
  var valid_605737 = header.getOrDefault("X-Amz-Security-Token")
  valid_605737 = validateParameter(valid_605737, JString, required = false,
                                 default = nil)
  if valid_605737 != nil:
    section.add "X-Amz-Security-Token", valid_605737
  var valid_605738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605738 = validateParameter(valid_605738, JString, required = false,
                                 default = nil)
  if valid_605738 != nil:
    section.add "X-Amz-Content-Sha256", valid_605738
  var valid_605739 = header.getOrDefault("X-Amz-Algorithm")
  valid_605739 = validateParameter(valid_605739, JString, required = false,
                                 default = nil)
  if valid_605739 != nil:
    section.add "X-Amz-Algorithm", valid_605739
  var valid_605740 = header.getOrDefault("X-Amz-Signature")
  valid_605740 = validateParameter(valid_605740, JString, required = false,
                                 default = nil)
  if valid_605740 != nil:
    section.add "X-Amz-Signature", valid_605740
  var valid_605741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605741 = validateParameter(valid_605741, JString, required = false,
                                 default = nil)
  if valid_605741 != nil:
    section.add "X-Amz-SignedHeaders", valid_605741
  var valid_605742 = header.getOrDefault("X-Amz-Credential")
  valid_605742 = validateParameter(valid_605742, JString, required = false,
                                 default = nil)
  if valid_605742 != nil:
    section.add "X-Amz-Credential", valid_605742
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605743: Call_GetUpdateSSHPublicKey_605728; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605743.validator(path, query, header, formData, body)
  let scheme = call_605743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605743.url(scheme.get, call_605743.host, call_605743.base,
                         call_605743.route, valid.getOrDefault("path"))
  result = hook(call_605743, url, valid)

proc call*(call_605744: Call_GetUpdateSSHPublicKey_605728; SSHPublicKeyId: string;
          UserName: string; Status: string = "Active";
          Action: string = "UpdateSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUpdateSSHPublicKey
  ## <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   Status: string (required)
  ##         : The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an AWS CodeCommit repository. <code>Inactive</code> means that the key cannot be used.
  ##   SSHPublicKeyId: string (required)
  ##                 : <p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605745 = newJObject()
  add(query_605745, "Status", newJString(Status))
  add(query_605745, "SSHPublicKeyId", newJString(SSHPublicKeyId))
  add(query_605745, "UserName", newJString(UserName))
  add(query_605745, "Action", newJString(Action))
  add(query_605745, "Version", newJString(Version))
  result = call_605744.call(nil, query_605745, nil, nil, nil)

var getUpdateSSHPublicKey* = Call_GetUpdateSSHPublicKey_605728(
    name: "getUpdateSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSSHPublicKey",
    validator: validate_GetUpdateSSHPublicKey_605729, base: "/",
    url: url_GetUpdateSSHPublicKey_605730, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServerCertificate_605783 = ref object of OpenApiRestCall_600426
proc url_PostUpdateServerCertificate_605785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServerCertificate_605784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605786 = query.getOrDefault("Action")
  valid_605786 = validateParameter(valid_605786, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_605786 != nil:
    section.add "Action", valid_605786
  var valid_605787 = query.getOrDefault("Version")
  valid_605787 = validateParameter(valid_605787, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605787 != nil:
    section.add "Version", valid_605787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605788 = header.getOrDefault("X-Amz-Date")
  valid_605788 = validateParameter(valid_605788, JString, required = false,
                                 default = nil)
  if valid_605788 != nil:
    section.add "X-Amz-Date", valid_605788
  var valid_605789 = header.getOrDefault("X-Amz-Security-Token")
  valid_605789 = validateParameter(valid_605789, JString, required = false,
                                 default = nil)
  if valid_605789 != nil:
    section.add "X-Amz-Security-Token", valid_605789
  var valid_605790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605790 = validateParameter(valid_605790, JString, required = false,
                                 default = nil)
  if valid_605790 != nil:
    section.add "X-Amz-Content-Sha256", valid_605790
  var valid_605791 = header.getOrDefault("X-Amz-Algorithm")
  valid_605791 = validateParameter(valid_605791, JString, required = false,
                                 default = nil)
  if valid_605791 != nil:
    section.add "X-Amz-Algorithm", valid_605791
  var valid_605792 = header.getOrDefault("X-Amz-Signature")
  valid_605792 = validateParameter(valid_605792, JString, required = false,
                                 default = nil)
  if valid_605792 != nil:
    section.add "X-Amz-Signature", valid_605792
  var valid_605793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605793 = validateParameter(valid_605793, JString, required = false,
                                 default = nil)
  if valid_605793 != nil:
    section.add "X-Amz-SignedHeaders", valid_605793
  var valid_605794 = header.getOrDefault("X-Amz-Credential")
  valid_605794 = validateParameter(valid_605794, JString, required = false,
                                 default = nil)
  if valid_605794 != nil:
    section.add "X-Amz-Credential", valid_605794
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServerCertificateName` field"
  var valid_605795 = formData.getOrDefault("ServerCertificateName")
  valid_605795 = validateParameter(valid_605795, JString, required = true,
                                 default = nil)
  if valid_605795 != nil:
    section.add "ServerCertificateName", valid_605795
  var valid_605796 = formData.getOrDefault("NewServerCertificateName")
  valid_605796 = validateParameter(valid_605796, JString, required = false,
                                 default = nil)
  if valid_605796 != nil:
    section.add "NewServerCertificateName", valid_605796
  var valid_605797 = formData.getOrDefault("NewPath")
  valid_605797 = validateParameter(valid_605797, JString, required = false,
                                 default = nil)
  if valid_605797 != nil:
    section.add "NewPath", valid_605797
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605798: Call_PostUpdateServerCertificate_605783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_605798.validator(path, query, header, formData, body)
  let scheme = call_605798.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605798.url(scheme.get, call_605798.host, call_605798.base,
                         call_605798.route, valid.getOrDefault("path"))
  result = hook(call_605798, url, valid)

proc call*(call_605799: Call_PostUpdateServerCertificate_605783;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; Version: string = "2010-05-08";
          NewPath: string = ""): Recallable =
  ## postUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_605800 = newJObject()
  var formData_605801 = newJObject()
  add(formData_605801, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605800, "Action", newJString(Action))
  add(formData_605801, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_605800, "Version", newJString(Version))
  add(formData_605801, "NewPath", newJString(NewPath))
  result = call_605799.call(nil, query_605800, nil, formData_605801, nil)

var postUpdateServerCertificate* = Call_PostUpdateServerCertificate_605783(
    name: "postUpdateServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_PostUpdateServerCertificate_605784, base: "/",
    url: url_PostUpdateServerCertificate_605785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServerCertificate_605765 = ref object of OpenApiRestCall_600426
proc url_GetUpdateServerCertificate_605767(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServerCertificate_605766(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewServerCertificateName: JString
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: JString
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_605768 = query.getOrDefault("ServerCertificateName")
  valid_605768 = validateParameter(valid_605768, JString, required = true,
                                 default = nil)
  if valid_605768 != nil:
    section.add "ServerCertificateName", valid_605768
  var valid_605769 = query.getOrDefault("Action")
  valid_605769 = validateParameter(valid_605769, JString, required = true, default = newJString(
      "UpdateServerCertificate"))
  if valid_605769 != nil:
    section.add "Action", valid_605769
  var valid_605770 = query.getOrDefault("NewServerCertificateName")
  valid_605770 = validateParameter(valid_605770, JString, required = false,
                                 default = nil)
  if valid_605770 != nil:
    section.add "NewServerCertificateName", valid_605770
  var valid_605771 = query.getOrDefault("NewPath")
  valid_605771 = validateParameter(valid_605771, JString, required = false,
                                 default = nil)
  if valid_605771 != nil:
    section.add "NewPath", valid_605771
  var valid_605772 = query.getOrDefault("Version")
  valid_605772 = validateParameter(valid_605772, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605772 != nil:
    section.add "Version", valid_605772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605773 = header.getOrDefault("X-Amz-Date")
  valid_605773 = validateParameter(valid_605773, JString, required = false,
                                 default = nil)
  if valid_605773 != nil:
    section.add "X-Amz-Date", valid_605773
  var valid_605774 = header.getOrDefault("X-Amz-Security-Token")
  valid_605774 = validateParameter(valid_605774, JString, required = false,
                                 default = nil)
  if valid_605774 != nil:
    section.add "X-Amz-Security-Token", valid_605774
  var valid_605775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605775 = validateParameter(valid_605775, JString, required = false,
                                 default = nil)
  if valid_605775 != nil:
    section.add "X-Amz-Content-Sha256", valid_605775
  var valid_605776 = header.getOrDefault("X-Amz-Algorithm")
  valid_605776 = validateParameter(valid_605776, JString, required = false,
                                 default = nil)
  if valid_605776 != nil:
    section.add "X-Amz-Algorithm", valid_605776
  var valid_605777 = header.getOrDefault("X-Amz-Signature")
  valid_605777 = validateParameter(valid_605777, JString, required = false,
                                 default = nil)
  if valid_605777 != nil:
    section.add "X-Amz-Signature", valid_605777
  var valid_605778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605778 = validateParameter(valid_605778, JString, required = false,
                                 default = nil)
  if valid_605778 != nil:
    section.add "X-Amz-SignedHeaders", valid_605778
  var valid_605779 = header.getOrDefault("X-Amz-Credential")
  valid_605779 = validateParameter(valid_605779, JString, required = false,
                                 default = nil)
  if valid_605779 != nil:
    section.add "X-Amz-Credential", valid_605779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605780: Call_GetUpdateServerCertificate_605765; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_605780.validator(path, query, header, formData, body)
  let scheme = call_605780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605780.url(scheme.get, call_605780.host, call_605780.base,
                         call_605780.route, valid.getOrDefault("path"))
  result = hook(call_605780, url, valid)

proc call*(call_605781: Call_GetUpdateServerCertificate_605765;
          ServerCertificateName: string;
          Action: string = "UpdateServerCertificate";
          NewServerCertificateName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServerCertificate
  ## <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewServerCertificateName: string
  ##                           : <p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewPath: string
  ##          : <p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_605782 = newJObject()
  add(query_605782, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605782, "Action", newJString(Action))
  add(query_605782, "NewServerCertificateName",
      newJString(NewServerCertificateName))
  add(query_605782, "NewPath", newJString(NewPath))
  add(query_605782, "Version", newJString(Version))
  result = call_605781.call(nil, query_605782, nil, nil, nil)

var getUpdateServerCertificate* = Call_GetUpdateServerCertificate_605765(
    name: "getUpdateServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServerCertificate",
    validator: validate_GetUpdateServerCertificate_605766, base: "/",
    url: url_GetUpdateServerCertificate_605767,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateServiceSpecificCredential_605820 = ref object of OpenApiRestCall_600426
proc url_PostUpdateServiceSpecificCredential_605822(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateServiceSpecificCredential_605821(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605823 = query.getOrDefault("Action")
  valid_605823 = validateParameter(valid_605823, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_605823 != nil:
    section.add "Action", valid_605823
  var valid_605824 = query.getOrDefault("Version")
  valid_605824 = validateParameter(valid_605824, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605824 != nil:
    section.add "Version", valid_605824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605825 = header.getOrDefault("X-Amz-Date")
  valid_605825 = validateParameter(valid_605825, JString, required = false,
                                 default = nil)
  if valid_605825 != nil:
    section.add "X-Amz-Date", valid_605825
  var valid_605826 = header.getOrDefault("X-Amz-Security-Token")
  valid_605826 = validateParameter(valid_605826, JString, required = false,
                                 default = nil)
  if valid_605826 != nil:
    section.add "X-Amz-Security-Token", valid_605826
  var valid_605827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605827 = validateParameter(valid_605827, JString, required = false,
                                 default = nil)
  if valid_605827 != nil:
    section.add "X-Amz-Content-Sha256", valid_605827
  var valid_605828 = header.getOrDefault("X-Amz-Algorithm")
  valid_605828 = validateParameter(valid_605828, JString, required = false,
                                 default = nil)
  if valid_605828 != nil:
    section.add "X-Amz-Algorithm", valid_605828
  var valid_605829 = header.getOrDefault("X-Amz-Signature")
  valid_605829 = validateParameter(valid_605829, JString, required = false,
                                 default = nil)
  if valid_605829 != nil:
    section.add "X-Amz-Signature", valid_605829
  var valid_605830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605830 = validateParameter(valid_605830, JString, required = false,
                                 default = nil)
  if valid_605830 != nil:
    section.add "X-Amz-SignedHeaders", valid_605830
  var valid_605831 = header.getOrDefault("X-Amz-Credential")
  valid_605831 = validateParameter(valid_605831, JString, required = false,
                                 default = nil)
  if valid_605831 != nil:
    section.add "X-Amz-Credential", valid_605831
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  section = newJObject()
  var valid_605832 = formData.getOrDefault("UserName")
  valid_605832 = validateParameter(valid_605832, JString, required = false,
                                 default = nil)
  if valid_605832 != nil:
    section.add "UserName", valid_605832
  assert formData != nil, "formData argument is necessary due to required `ServiceSpecificCredentialId` field"
  var valid_605833 = formData.getOrDefault("ServiceSpecificCredentialId")
  valid_605833 = validateParameter(valid_605833, JString, required = true,
                                 default = nil)
  if valid_605833 != nil:
    section.add "ServiceSpecificCredentialId", valid_605833
  var valid_605834 = formData.getOrDefault("Status")
  valid_605834 = validateParameter(valid_605834, JString, required = true,
                                 default = newJString("Active"))
  if valid_605834 != nil:
    section.add "Status", valid_605834
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605835: Call_PostUpdateServiceSpecificCredential_605820;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_605835.validator(path, query, header, formData, body)
  let scheme = call_605835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605835.url(scheme.get, call_605835.host, call_605835.base,
                         call_605835.route, valid.getOrDefault("path"))
  result = hook(call_605835, url, valid)

proc call*(call_605836: Call_PostUpdateServiceSpecificCredential_605820;
          ServiceSpecificCredentialId: string; UserName: string = "";
          Status: string = "Active";
          Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605837 = newJObject()
  var formData_605838 = newJObject()
  add(formData_605838, "UserName", newJString(UserName))
  add(formData_605838, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(formData_605838, "Status", newJString(Status))
  add(query_605837, "Action", newJString(Action))
  add(query_605837, "Version", newJString(Version))
  result = call_605836.call(nil, query_605837, nil, formData_605838, nil)

var postUpdateServiceSpecificCredential* = Call_PostUpdateServiceSpecificCredential_605820(
    name: "postUpdateServiceSpecificCredential", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_PostUpdateServiceSpecificCredential_605821, base: "/",
    url: url_PostUpdateServiceSpecificCredential_605822,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateServiceSpecificCredential_605802 = ref object of OpenApiRestCall_600426
proc url_GetUpdateServiceSpecificCredential_605804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateServiceSpecificCredential_605803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: JString
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   ServiceSpecificCredentialId: JString (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_605805 = query.getOrDefault("Status")
  valid_605805 = validateParameter(valid_605805, JString, required = true,
                                 default = newJString("Active"))
  if valid_605805 != nil:
    section.add "Status", valid_605805
  var valid_605806 = query.getOrDefault("UserName")
  valid_605806 = validateParameter(valid_605806, JString, required = false,
                                 default = nil)
  if valid_605806 != nil:
    section.add "UserName", valid_605806
  var valid_605807 = query.getOrDefault("Action")
  valid_605807 = validateParameter(valid_605807, JString, required = true, default = newJString(
      "UpdateServiceSpecificCredential"))
  if valid_605807 != nil:
    section.add "Action", valid_605807
  var valid_605808 = query.getOrDefault("ServiceSpecificCredentialId")
  valid_605808 = validateParameter(valid_605808, JString, required = true,
                                 default = nil)
  if valid_605808 != nil:
    section.add "ServiceSpecificCredentialId", valid_605808
  var valid_605809 = query.getOrDefault("Version")
  valid_605809 = validateParameter(valid_605809, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605809 != nil:
    section.add "Version", valid_605809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605810 = header.getOrDefault("X-Amz-Date")
  valid_605810 = validateParameter(valid_605810, JString, required = false,
                                 default = nil)
  if valid_605810 != nil:
    section.add "X-Amz-Date", valid_605810
  var valid_605811 = header.getOrDefault("X-Amz-Security-Token")
  valid_605811 = validateParameter(valid_605811, JString, required = false,
                                 default = nil)
  if valid_605811 != nil:
    section.add "X-Amz-Security-Token", valid_605811
  var valid_605812 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605812 = validateParameter(valid_605812, JString, required = false,
                                 default = nil)
  if valid_605812 != nil:
    section.add "X-Amz-Content-Sha256", valid_605812
  var valid_605813 = header.getOrDefault("X-Amz-Algorithm")
  valid_605813 = validateParameter(valid_605813, JString, required = false,
                                 default = nil)
  if valid_605813 != nil:
    section.add "X-Amz-Algorithm", valid_605813
  var valid_605814 = header.getOrDefault("X-Amz-Signature")
  valid_605814 = validateParameter(valid_605814, JString, required = false,
                                 default = nil)
  if valid_605814 != nil:
    section.add "X-Amz-Signature", valid_605814
  var valid_605815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605815 = validateParameter(valid_605815, JString, required = false,
                                 default = nil)
  if valid_605815 != nil:
    section.add "X-Amz-SignedHeaders", valid_605815
  var valid_605816 = header.getOrDefault("X-Amz-Credential")
  valid_605816 = validateParameter(valid_605816, JString, required = false,
                                 default = nil)
  if valid_605816 != nil:
    section.add "X-Amz-Credential", valid_605816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605817: Call_GetUpdateServiceSpecificCredential_605802;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ## 
  let valid = call_605817.validator(path, query, header, formData, body)
  let scheme = call_605817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605817.url(scheme.get, call_605817.host, call_605817.base,
                         call_605817.route, valid.getOrDefault("path"))
  result = hook(call_605817, url, valid)

proc call*(call_605818: Call_GetUpdateServiceSpecificCredential_605802;
          ServiceSpecificCredentialId: string; Status: string = "Active";
          UserName: string = ""; Action: string = "UpdateServiceSpecificCredential";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateServiceSpecificCredential
  ## Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
  ##   Status: string (required)
  ##         : The status to be assigned to the service-specific credential.
  ##   UserName: string
  ##           : <p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   ServiceSpecificCredentialId: string (required)
  ##                              : <p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Version: string (required)
  var query_605819 = newJObject()
  add(query_605819, "Status", newJString(Status))
  add(query_605819, "UserName", newJString(UserName))
  add(query_605819, "Action", newJString(Action))
  add(query_605819, "ServiceSpecificCredentialId",
      newJString(ServiceSpecificCredentialId))
  add(query_605819, "Version", newJString(Version))
  result = call_605818.call(nil, query_605819, nil, nil, nil)

var getUpdateServiceSpecificCredential* = Call_GetUpdateServiceSpecificCredential_605802(
    name: "getUpdateServiceSpecificCredential", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateServiceSpecificCredential",
    validator: validate_GetUpdateServiceSpecificCredential_605803, base: "/",
    url: url_GetUpdateServiceSpecificCredential_605804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateSigningCertificate_605857 = ref object of OpenApiRestCall_600426
proc url_PostUpdateSigningCertificate_605859(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateSigningCertificate_605858(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605860 = query.getOrDefault("Action")
  valid_605860 = validateParameter(valid_605860, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_605860 != nil:
    section.add "Action", valid_605860
  var valid_605861 = query.getOrDefault("Version")
  valid_605861 = validateParameter(valid_605861, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605861 != nil:
    section.add "Version", valid_605861
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605862 = header.getOrDefault("X-Amz-Date")
  valid_605862 = validateParameter(valid_605862, JString, required = false,
                                 default = nil)
  if valid_605862 != nil:
    section.add "X-Amz-Date", valid_605862
  var valid_605863 = header.getOrDefault("X-Amz-Security-Token")
  valid_605863 = validateParameter(valid_605863, JString, required = false,
                                 default = nil)
  if valid_605863 != nil:
    section.add "X-Amz-Security-Token", valid_605863
  var valid_605864 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605864 = validateParameter(valid_605864, JString, required = false,
                                 default = nil)
  if valid_605864 != nil:
    section.add "X-Amz-Content-Sha256", valid_605864
  var valid_605865 = header.getOrDefault("X-Amz-Algorithm")
  valid_605865 = validateParameter(valid_605865, JString, required = false,
                                 default = nil)
  if valid_605865 != nil:
    section.add "X-Amz-Algorithm", valid_605865
  var valid_605866 = header.getOrDefault("X-Amz-Signature")
  valid_605866 = validateParameter(valid_605866, JString, required = false,
                                 default = nil)
  if valid_605866 != nil:
    section.add "X-Amz-Signature", valid_605866
  var valid_605867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605867 = validateParameter(valid_605867, JString, required = false,
                                 default = nil)
  if valid_605867 != nil:
    section.add "X-Amz-SignedHeaders", valid_605867
  var valid_605868 = header.getOrDefault("X-Amz-Credential")
  valid_605868 = validateParameter(valid_605868, JString, required = false,
                                 default = nil)
  if valid_605868 != nil:
    section.add "X-Amz-Credential", valid_605868
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  section = newJObject()
  var valid_605869 = formData.getOrDefault("UserName")
  valid_605869 = validateParameter(valid_605869, JString, required = false,
                                 default = nil)
  if valid_605869 != nil:
    section.add "UserName", valid_605869
  assert formData != nil,
        "formData argument is necessary due to required `Status` field"
  var valid_605870 = formData.getOrDefault("Status")
  valid_605870 = validateParameter(valid_605870, JString, required = true,
                                 default = newJString("Active"))
  if valid_605870 != nil:
    section.add "Status", valid_605870
  var valid_605871 = formData.getOrDefault("CertificateId")
  valid_605871 = validateParameter(valid_605871, JString, required = true,
                                 default = nil)
  if valid_605871 != nil:
    section.add "CertificateId", valid_605871
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605872: Call_PostUpdateSigningCertificate_605857; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_605872.validator(path, query, header, formData, body)
  let scheme = call_605872.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605872.url(scheme.get, call_605872.host, call_605872.base,
                         call_605872.route, valid.getOrDefault("path"))
  result = hook(call_605872, url, valid)

proc call*(call_605873: Call_PostUpdateSigningCertificate_605857;
          CertificateId: string; UserName: string = ""; Status: string = "Active";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605874 = newJObject()
  var formData_605875 = newJObject()
  add(formData_605875, "UserName", newJString(UserName))
  add(formData_605875, "Status", newJString(Status))
  add(formData_605875, "CertificateId", newJString(CertificateId))
  add(query_605874, "Action", newJString(Action))
  add(query_605874, "Version", newJString(Version))
  result = call_605873.call(nil, query_605874, nil, formData_605875, nil)

var postUpdateSigningCertificate* = Call_PostUpdateSigningCertificate_605857(
    name: "postUpdateSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_PostUpdateSigningCertificate_605858, base: "/",
    url: url_PostUpdateSigningCertificate_605859,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateSigningCertificate_605839 = ref object of OpenApiRestCall_600426
proc url_GetUpdateSigningCertificate_605841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateSigningCertificate_605840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Status: JString (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: JString (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: JString
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Status` field"
  var valid_605842 = query.getOrDefault("Status")
  valid_605842 = validateParameter(valid_605842, JString, required = true,
                                 default = newJString("Active"))
  if valid_605842 != nil:
    section.add "Status", valid_605842
  var valid_605843 = query.getOrDefault("CertificateId")
  valid_605843 = validateParameter(valid_605843, JString, required = true,
                                 default = nil)
  if valid_605843 != nil:
    section.add "CertificateId", valid_605843
  var valid_605844 = query.getOrDefault("UserName")
  valid_605844 = validateParameter(valid_605844, JString, required = false,
                                 default = nil)
  if valid_605844 != nil:
    section.add "UserName", valid_605844
  var valid_605845 = query.getOrDefault("Action")
  valid_605845 = validateParameter(valid_605845, JString, required = true, default = newJString(
      "UpdateSigningCertificate"))
  if valid_605845 != nil:
    section.add "Action", valid_605845
  var valid_605846 = query.getOrDefault("Version")
  valid_605846 = validateParameter(valid_605846, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605846 != nil:
    section.add "Version", valid_605846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605847 = header.getOrDefault("X-Amz-Date")
  valid_605847 = validateParameter(valid_605847, JString, required = false,
                                 default = nil)
  if valid_605847 != nil:
    section.add "X-Amz-Date", valid_605847
  var valid_605848 = header.getOrDefault("X-Amz-Security-Token")
  valid_605848 = validateParameter(valid_605848, JString, required = false,
                                 default = nil)
  if valid_605848 != nil:
    section.add "X-Amz-Security-Token", valid_605848
  var valid_605849 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605849 = validateParameter(valid_605849, JString, required = false,
                                 default = nil)
  if valid_605849 != nil:
    section.add "X-Amz-Content-Sha256", valid_605849
  var valid_605850 = header.getOrDefault("X-Amz-Algorithm")
  valid_605850 = validateParameter(valid_605850, JString, required = false,
                                 default = nil)
  if valid_605850 != nil:
    section.add "X-Amz-Algorithm", valid_605850
  var valid_605851 = header.getOrDefault("X-Amz-Signature")
  valid_605851 = validateParameter(valid_605851, JString, required = false,
                                 default = nil)
  if valid_605851 != nil:
    section.add "X-Amz-Signature", valid_605851
  var valid_605852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605852 = validateParameter(valid_605852, JString, required = false,
                                 default = nil)
  if valid_605852 != nil:
    section.add "X-Amz-SignedHeaders", valid_605852
  var valid_605853 = header.getOrDefault("X-Amz-Credential")
  valid_605853 = validateParameter(valid_605853, JString, required = false,
                                 default = nil)
  if valid_605853 != nil:
    section.add "X-Amz-Credential", valid_605853
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605854: Call_GetUpdateSigningCertificate_605839; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ## 
  let valid = call_605854.validator(path, query, header, formData, body)
  let scheme = call_605854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605854.url(scheme.get, call_605854.host, call_605854.base,
                         call_605854.route, valid.getOrDefault("path"))
  result = hook(call_605854, url, valid)

proc call*(call_605855: Call_GetUpdateSigningCertificate_605839;
          CertificateId: string; Status: string = "Active"; UserName: string = "";
          Action: string = "UpdateSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateSigningCertificate
  ## <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p>
  ##   Status: string (required)
  ##         :  The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for API calls to AWS <code>Inactive</code> means that the certificate cannot be used.
  ##   CertificateId: string (required)
  ##                : <p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p>
  ##   UserName: string
  ##           : <p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605856 = newJObject()
  add(query_605856, "Status", newJString(Status))
  add(query_605856, "CertificateId", newJString(CertificateId))
  add(query_605856, "UserName", newJString(UserName))
  add(query_605856, "Action", newJString(Action))
  add(query_605856, "Version", newJString(Version))
  result = call_605855.call(nil, query_605856, nil, nil, nil)

var getUpdateSigningCertificate* = Call_GetUpdateSigningCertificate_605839(
    name: "getUpdateSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UpdateSigningCertificate",
    validator: validate_GetUpdateSigningCertificate_605840, base: "/",
    url: url_GetUpdateSigningCertificate_605841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUpdateUser_605894 = ref object of OpenApiRestCall_600426
proc url_PostUpdateUser_605896(protocol: Scheme; host: string; base: string;
                              route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUpdateUser_605895(path: JsonNode; query: JsonNode;
                                   header: JsonNode; formData: JsonNode;
                                   body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605897 = query.getOrDefault("Action")
  valid_605897 = validateParameter(valid_605897, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_605897 != nil:
    section.add "Action", valid_605897
  var valid_605898 = query.getOrDefault("Version")
  valid_605898 = validateParameter(valid_605898, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605898 != nil:
    section.add "Version", valid_605898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605899 = header.getOrDefault("X-Amz-Date")
  valid_605899 = validateParameter(valid_605899, JString, required = false,
                                 default = nil)
  if valid_605899 != nil:
    section.add "X-Amz-Date", valid_605899
  var valid_605900 = header.getOrDefault("X-Amz-Security-Token")
  valid_605900 = validateParameter(valid_605900, JString, required = false,
                                 default = nil)
  if valid_605900 != nil:
    section.add "X-Amz-Security-Token", valid_605900
  var valid_605901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605901 = validateParameter(valid_605901, JString, required = false,
                                 default = nil)
  if valid_605901 != nil:
    section.add "X-Amz-Content-Sha256", valid_605901
  var valid_605902 = header.getOrDefault("X-Amz-Algorithm")
  valid_605902 = validateParameter(valid_605902, JString, required = false,
                                 default = nil)
  if valid_605902 != nil:
    section.add "X-Amz-Algorithm", valid_605902
  var valid_605903 = header.getOrDefault("X-Amz-Signature")
  valid_605903 = validateParameter(valid_605903, JString, required = false,
                                 default = nil)
  if valid_605903 != nil:
    section.add "X-Amz-Signature", valid_605903
  var valid_605904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605904 = validateParameter(valid_605904, JString, required = false,
                                 default = nil)
  if valid_605904 != nil:
    section.add "X-Amz-SignedHeaders", valid_605904
  var valid_605905 = header.getOrDefault("X-Amz-Credential")
  valid_605905 = validateParameter(valid_605905, JString, required = false,
                                 default = nil)
  if valid_605905 != nil:
    section.add "X-Amz-Credential", valid_605905
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605906 = formData.getOrDefault("UserName")
  valid_605906 = validateParameter(valid_605906, JString, required = true,
                                 default = nil)
  if valid_605906 != nil:
    section.add "UserName", valid_605906
  var valid_605907 = formData.getOrDefault("NewUserName")
  valid_605907 = validateParameter(valid_605907, JString, required = false,
                                 default = nil)
  if valid_605907 != nil:
    section.add "NewUserName", valid_605907
  var valid_605908 = formData.getOrDefault("NewPath")
  valid_605908 = validateParameter(valid_605908, JString, required = false,
                                 default = nil)
  if valid_605908 != nil:
    section.add "NewPath", valid_605908
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605909: Call_PostUpdateUser_605894; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_605909.validator(path, query, header, formData, body)
  let scheme = call_605909.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605909.url(scheme.get, call_605909.host, call_605909.base,
                         call_605909.route, valid.getOrDefault("path"))
  result = hook(call_605909, url, valid)

proc call*(call_605910: Call_PostUpdateUser_605894; UserName: string;
          NewUserName: string = ""; Action: string = "UpdateUser";
          Version: string = "2010-05-08"; NewPath: string = ""): Recallable =
  ## postUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  var query_605911 = newJObject()
  var formData_605912 = newJObject()
  add(formData_605912, "UserName", newJString(UserName))
  add(formData_605912, "NewUserName", newJString(NewUserName))
  add(query_605911, "Action", newJString(Action))
  add(query_605911, "Version", newJString(Version))
  add(formData_605912, "NewPath", newJString(NewPath))
  result = call_605910.call(nil, query_605911, nil, formData_605912, nil)

var postUpdateUser* = Call_PostUpdateUser_605894(name: "postUpdateUser",
    meth: HttpMethod.HttpPost, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_PostUpdateUser_605895,
    base: "/", url: url_PostUpdateUser_605896, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUpdateUser_605876 = ref object of OpenApiRestCall_600426
proc url_GetUpdateUser_605878(protocol: Scheme; host: string; base: string;
                             route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUpdateUser_605877(path: JsonNode; query: JsonNode; header: JsonNode;
                                  formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UserName: JString (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   NewUserName: JString
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: JString
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `UserName` field"
  var valid_605879 = query.getOrDefault("UserName")
  valid_605879 = validateParameter(valid_605879, JString, required = true,
                                 default = nil)
  if valid_605879 != nil:
    section.add "UserName", valid_605879
  var valid_605880 = query.getOrDefault("Action")
  valid_605880 = validateParameter(valid_605880, JString, required = true,
                                 default = newJString("UpdateUser"))
  if valid_605880 != nil:
    section.add "Action", valid_605880
  var valid_605881 = query.getOrDefault("NewUserName")
  valid_605881 = validateParameter(valid_605881, JString, required = false,
                                 default = nil)
  if valid_605881 != nil:
    section.add "NewUserName", valid_605881
  var valid_605882 = query.getOrDefault("NewPath")
  valid_605882 = validateParameter(valid_605882, JString, required = false,
                                 default = nil)
  if valid_605882 != nil:
    section.add "NewPath", valid_605882
  var valid_605883 = query.getOrDefault("Version")
  valid_605883 = validateParameter(valid_605883, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605883 != nil:
    section.add "Version", valid_605883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605884 = header.getOrDefault("X-Amz-Date")
  valid_605884 = validateParameter(valid_605884, JString, required = false,
                                 default = nil)
  if valid_605884 != nil:
    section.add "X-Amz-Date", valid_605884
  var valid_605885 = header.getOrDefault("X-Amz-Security-Token")
  valid_605885 = validateParameter(valid_605885, JString, required = false,
                                 default = nil)
  if valid_605885 != nil:
    section.add "X-Amz-Security-Token", valid_605885
  var valid_605886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605886 = validateParameter(valid_605886, JString, required = false,
                                 default = nil)
  if valid_605886 != nil:
    section.add "X-Amz-Content-Sha256", valid_605886
  var valid_605887 = header.getOrDefault("X-Amz-Algorithm")
  valid_605887 = validateParameter(valid_605887, JString, required = false,
                                 default = nil)
  if valid_605887 != nil:
    section.add "X-Amz-Algorithm", valid_605887
  var valid_605888 = header.getOrDefault("X-Amz-Signature")
  valid_605888 = validateParameter(valid_605888, JString, required = false,
                                 default = nil)
  if valid_605888 != nil:
    section.add "X-Amz-Signature", valid_605888
  var valid_605889 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605889 = validateParameter(valid_605889, JString, required = false,
                                 default = nil)
  if valid_605889 != nil:
    section.add "X-Amz-SignedHeaders", valid_605889
  var valid_605890 = header.getOrDefault("X-Amz-Credential")
  valid_605890 = validateParameter(valid_605890, JString, required = false,
                                 default = nil)
  if valid_605890 != nil:
    section.add "X-Amz-Credential", valid_605890
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605891: Call_GetUpdateUser_605876; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ## 
  let valid = call_605891.validator(path, query, header, formData, body)
  let scheme = call_605891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605891.url(scheme.get, call_605891.host, call_605891.base,
                         call_605891.route, valid.getOrDefault("path"))
  result = hook(call_605891, url, valid)

proc call*(call_605892: Call_GetUpdateUser_605876; UserName: string;
          Action: string = "UpdateUser"; NewUserName: string = ""; NewPath: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUpdateUser
  ## <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>
  ##   UserName: string (required)
  ##           : <p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   NewUserName: string
  ##              : <p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
  ##   NewPath: string
  ##          : <p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p>
  ##   Version: string (required)
  var query_605893 = newJObject()
  add(query_605893, "UserName", newJString(UserName))
  add(query_605893, "Action", newJString(Action))
  add(query_605893, "NewUserName", newJString(NewUserName))
  add(query_605893, "NewPath", newJString(NewPath))
  add(query_605893, "Version", newJString(Version))
  result = call_605892.call(nil, query_605893, nil, nil, nil)

var getUpdateUser* = Call_GetUpdateUser_605876(name: "getUpdateUser",
    meth: HttpMethod.HttpGet, host: "iam.amazonaws.com",
    route: "/#Action=UpdateUser", validator: validate_GetUpdateUser_605877,
    base: "/", url: url_GetUpdateUser_605878, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSSHPublicKey_605930 = ref object of OpenApiRestCall_600426
proc url_PostUploadSSHPublicKey_605932(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSSHPublicKey_605931(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605933 = query.getOrDefault("Action")
  valid_605933 = validateParameter(valid_605933, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_605933 != nil:
    section.add "Action", valid_605933
  var valid_605934 = query.getOrDefault("Version")
  valid_605934 = validateParameter(valid_605934, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605934 != nil:
    section.add "Version", valid_605934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605935 = header.getOrDefault("X-Amz-Date")
  valid_605935 = validateParameter(valid_605935, JString, required = false,
                                 default = nil)
  if valid_605935 != nil:
    section.add "X-Amz-Date", valid_605935
  var valid_605936 = header.getOrDefault("X-Amz-Security-Token")
  valid_605936 = validateParameter(valid_605936, JString, required = false,
                                 default = nil)
  if valid_605936 != nil:
    section.add "X-Amz-Security-Token", valid_605936
  var valid_605937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605937 = validateParameter(valid_605937, JString, required = false,
                                 default = nil)
  if valid_605937 != nil:
    section.add "X-Amz-Content-Sha256", valid_605937
  var valid_605938 = header.getOrDefault("X-Amz-Algorithm")
  valid_605938 = validateParameter(valid_605938, JString, required = false,
                                 default = nil)
  if valid_605938 != nil:
    section.add "X-Amz-Algorithm", valid_605938
  var valid_605939 = header.getOrDefault("X-Amz-Signature")
  valid_605939 = validateParameter(valid_605939, JString, required = false,
                                 default = nil)
  if valid_605939 != nil:
    section.add "X-Amz-Signature", valid_605939
  var valid_605940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605940 = validateParameter(valid_605940, JString, required = false,
                                 default = nil)
  if valid_605940 != nil:
    section.add "X-Amz-SignedHeaders", valid_605940
  var valid_605941 = header.getOrDefault("X-Amz-Credential")
  valid_605941 = validateParameter(valid_605941, JString, required = false,
                                 default = nil)
  if valid_605941 != nil:
    section.add "X-Amz-Credential", valid_605941
  result.add "header", section
  ## parameters in `formData` object:
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `UserName` field"
  var valid_605942 = formData.getOrDefault("UserName")
  valid_605942 = validateParameter(valid_605942, JString, required = true,
                                 default = nil)
  if valid_605942 != nil:
    section.add "UserName", valid_605942
  var valid_605943 = formData.getOrDefault("SSHPublicKeyBody")
  valid_605943 = validateParameter(valid_605943, JString, required = true,
                                 default = nil)
  if valid_605943 != nil:
    section.add "SSHPublicKeyBody", valid_605943
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605944: Call_PostUploadSSHPublicKey_605930; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605944.validator(path, query, header, formData, body)
  let scheme = call_605944.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605944.url(scheme.get, call_605944.host, call_605944.base,
                         call_605944.route, valid.getOrDefault("path"))
  result = hook(call_605944, url, valid)

proc call*(call_605945: Call_PostUploadSSHPublicKey_605930; UserName: string;
          SSHPublicKeyBody: string; Action: string = "UploadSSHPublicKey";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605946 = newJObject()
  var formData_605947 = newJObject()
  add(formData_605947, "UserName", newJString(UserName))
  add(formData_605947, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_605946, "Action", newJString(Action))
  add(query_605946, "Version", newJString(Version))
  result = call_605945.call(nil, query_605946, nil, formData_605947, nil)

var postUploadSSHPublicKey* = Call_PostUploadSSHPublicKey_605930(
    name: "postUploadSSHPublicKey", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_PostUploadSSHPublicKey_605931, base: "/",
    url: url_PostUploadSSHPublicKey_605932, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSSHPublicKey_605913 = ref object of OpenApiRestCall_600426
proc url_GetUploadSSHPublicKey_605915(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSSHPublicKey_605914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SSHPublicKeyBody: JString (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SSHPublicKeyBody` field"
  var valid_605916 = query.getOrDefault("SSHPublicKeyBody")
  valid_605916 = validateParameter(valid_605916, JString, required = true,
                                 default = nil)
  if valid_605916 != nil:
    section.add "SSHPublicKeyBody", valid_605916
  var valid_605917 = query.getOrDefault("UserName")
  valid_605917 = validateParameter(valid_605917, JString, required = true,
                                 default = nil)
  if valid_605917 != nil:
    section.add "UserName", valid_605917
  var valid_605918 = query.getOrDefault("Action")
  valid_605918 = validateParameter(valid_605918, JString, required = true,
                                 default = newJString("UploadSSHPublicKey"))
  if valid_605918 != nil:
    section.add "Action", valid_605918
  var valid_605919 = query.getOrDefault("Version")
  valid_605919 = validateParameter(valid_605919, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605919 != nil:
    section.add "Version", valid_605919
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605920 = header.getOrDefault("X-Amz-Date")
  valid_605920 = validateParameter(valid_605920, JString, required = false,
                                 default = nil)
  if valid_605920 != nil:
    section.add "X-Amz-Date", valid_605920
  var valid_605921 = header.getOrDefault("X-Amz-Security-Token")
  valid_605921 = validateParameter(valid_605921, JString, required = false,
                                 default = nil)
  if valid_605921 != nil:
    section.add "X-Amz-Security-Token", valid_605921
  var valid_605922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605922 = validateParameter(valid_605922, JString, required = false,
                                 default = nil)
  if valid_605922 != nil:
    section.add "X-Amz-Content-Sha256", valid_605922
  var valid_605923 = header.getOrDefault("X-Amz-Algorithm")
  valid_605923 = validateParameter(valid_605923, JString, required = false,
                                 default = nil)
  if valid_605923 != nil:
    section.add "X-Amz-Algorithm", valid_605923
  var valid_605924 = header.getOrDefault("X-Amz-Signature")
  valid_605924 = validateParameter(valid_605924, JString, required = false,
                                 default = nil)
  if valid_605924 != nil:
    section.add "X-Amz-Signature", valid_605924
  var valid_605925 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605925 = validateParameter(valid_605925, JString, required = false,
                                 default = nil)
  if valid_605925 != nil:
    section.add "X-Amz-SignedHeaders", valid_605925
  var valid_605926 = header.getOrDefault("X-Amz-Credential")
  valid_605926 = validateParameter(valid_605926, JString, required = false,
                                 default = nil)
  if valid_605926 != nil:
    section.add "X-Amz-Credential", valid_605926
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605927: Call_GetUploadSSHPublicKey_605913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ## 
  let valid = call_605927.validator(path, query, header, formData, body)
  let scheme = call_605927.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605927.url(scheme.get, call_605927.host, call_605927.base,
                         call_605927.route, valid.getOrDefault("path"))
  result = hook(call_605927, url, valid)

proc call*(call_605928: Call_GetUploadSSHPublicKey_605913;
          SSHPublicKeyBody: string; UserName: string;
          Action: string = "UploadSSHPublicKey"; Version: string = "2010-05-08"): Recallable =
  ## getUploadSSHPublicKey
  ## <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>
  ##   SSHPublicKeyBody: string (required)
  ##                   : <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string (required)
  ##           : <p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605929 = newJObject()
  add(query_605929, "SSHPublicKeyBody", newJString(SSHPublicKeyBody))
  add(query_605929, "UserName", newJString(UserName))
  add(query_605929, "Action", newJString(Action))
  add(query_605929, "Version", newJString(Version))
  result = call_605928.call(nil, query_605929, nil, nil, nil)

var getUploadSSHPublicKey* = Call_GetUploadSSHPublicKey_605913(
    name: "getUploadSSHPublicKey", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSSHPublicKey",
    validator: validate_GetUploadSSHPublicKey_605914, base: "/",
    url: url_GetUploadSSHPublicKey_605915, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadServerCertificate_605968 = ref object of OpenApiRestCall_600426
proc url_PostUploadServerCertificate_605970(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadServerCertificate_605969(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605971 = query.getOrDefault("Action")
  valid_605971 = validateParameter(valid_605971, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_605971 != nil:
    section.add "Action", valid_605971
  var valid_605972 = query.getOrDefault("Version")
  valid_605972 = validateParameter(valid_605972, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605972 != nil:
    section.add "Version", valid_605972
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605973 = header.getOrDefault("X-Amz-Date")
  valid_605973 = validateParameter(valid_605973, JString, required = false,
                                 default = nil)
  if valid_605973 != nil:
    section.add "X-Amz-Date", valid_605973
  var valid_605974 = header.getOrDefault("X-Amz-Security-Token")
  valid_605974 = validateParameter(valid_605974, JString, required = false,
                                 default = nil)
  if valid_605974 != nil:
    section.add "X-Amz-Security-Token", valid_605974
  var valid_605975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605975 = validateParameter(valid_605975, JString, required = false,
                                 default = nil)
  if valid_605975 != nil:
    section.add "X-Amz-Content-Sha256", valid_605975
  var valid_605976 = header.getOrDefault("X-Amz-Algorithm")
  valid_605976 = validateParameter(valid_605976, JString, required = false,
                                 default = nil)
  if valid_605976 != nil:
    section.add "X-Amz-Algorithm", valid_605976
  var valid_605977 = header.getOrDefault("X-Amz-Signature")
  valid_605977 = validateParameter(valid_605977, JString, required = false,
                                 default = nil)
  if valid_605977 != nil:
    section.add "X-Amz-Signature", valid_605977
  var valid_605978 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605978 = validateParameter(valid_605978, JString, required = false,
                                 default = nil)
  if valid_605978 != nil:
    section.add "X-Amz-SignedHeaders", valid_605978
  var valid_605979 = header.getOrDefault("X-Amz-Credential")
  valid_605979 = validateParameter(valid_605979, JString, required = false,
                                 default = nil)
  if valid_605979 != nil:
    section.add "X-Amz-Credential", valid_605979
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_605980 = formData.getOrDefault("CertificateBody")
  valid_605980 = validateParameter(valid_605980, JString, required = true,
                                 default = nil)
  if valid_605980 != nil:
    section.add "CertificateBody", valid_605980
  var valid_605981 = formData.getOrDefault("ServerCertificateName")
  valid_605981 = validateParameter(valid_605981, JString, required = true,
                                 default = nil)
  if valid_605981 != nil:
    section.add "ServerCertificateName", valid_605981
  var valid_605982 = formData.getOrDefault("PrivateKey")
  valid_605982 = validateParameter(valid_605982, JString, required = true,
                                 default = nil)
  if valid_605982 != nil:
    section.add "PrivateKey", valid_605982
  var valid_605983 = formData.getOrDefault("CertificateChain")
  valid_605983 = validateParameter(valid_605983, JString, required = false,
                                 default = nil)
  if valid_605983 != nil:
    section.add "CertificateChain", valid_605983
  var valid_605984 = formData.getOrDefault("Path")
  valid_605984 = validateParameter(valid_605984, JString, required = false,
                                 default = nil)
  if valid_605984 != nil:
    section.add "Path", valid_605984
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605985: Call_PostUploadServerCertificate_605968; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_605985.validator(path, query, header, formData, body)
  let scheme = call_605985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605985.url(scheme.get, call_605985.host, call_605985.base,
                         call_605985.route, valid.getOrDefault("path"))
  result = hook(call_605985, url, valid)

proc call*(call_605986: Call_PostUploadServerCertificate_605968;
          CertificateBody: string; ServerCertificateName: string;
          PrivateKey: string; Action: string = "UploadServerCertificate";
          CertificateChain: string = ""; Version: string = "2010-05-08";
          Path: string = ""): Recallable =
  ## postUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  var query_605987 = newJObject()
  var formData_605988 = newJObject()
  add(formData_605988, "CertificateBody", newJString(CertificateBody))
  add(formData_605988, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605987, "Action", newJString(Action))
  add(formData_605988, "PrivateKey", newJString(PrivateKey))
  add(formData_605988, "CertificateChain", newJString(CertificateChain))
  add(query_605987, "Version", newJString(Version))
  add(formData_605988, "Path", newJString(Path))
  result = call_605986.call(nil, query_605987, nil, formData_605988, nil)

var postUploadServerCertificate* = Call_PostUploadServerCertificate_605968(
    name: "postUploadServerCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_PostUploadServerCertificate_605969, base: "/",
    url: url_PostUploadServerCertificate_605970,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadServerCertificate_605948 = ref object of OpenApiRestCall_600426
proc url_GetUploadServerCertificate_605950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadServerCertificate_605949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServerCertificateName: JString (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: JString
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: JString (required)
  ##   Path: JString
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: JString (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ServerCertificateName` field"
  var valid_605951 = query.getOrDefault("ServerCertificateName")
  valid_605951 = validateParameter(valid_605951, JString, required = true,
                                 default = nil)
  if valid_605951 != nil:
    section.add "ServerCertificateName", valid_605951
  var valid_605952 = query.getOrDefault("CertificateBody")
  valid_605952 = validateParameter(valid_605952, JString, required = true,
                                 default = nil)
  if valid_605952 != nil:
    section.add "CertificateBody", valid_605952
  var valid_605953 = query.getOrDefault("CertificateChain")
  valid_605953 = validateParameter(valid_605953, JString, required = false,
                                 default = nil)
  if valid_605953 != nil:
    section.add "CertificateChain", valid_605953
  var valid_605954 = query.getOrDefault("Action")
  valid_605954 = validateParameter(valid_605954, JString, required = true, default = newJString(
      "UploadServerCertificate"))
  if valid_605954 != nil:
    section.add "Action", valid_605954
  var valid_605955 = query.getOrDefault("Path")
  valid_605955 = validateParameter(valid_605955, JString, required = false,
                                 default = nil)
  if valid_605955 != nil:
    section.add "Path", valid_605955
  var valid_605956 = query.getOrDefault("PrivateKey")
  valid_605956 = validateParameter(valid_605956, JString, required = true,
                                 default = nil)
  if valid_605956 != nil:
    section.add "PrivateKey", valid_605956
  var valid_605957 = query.getOrDefault("Version")
  valid_605957 = validateParameter(valid_605957, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605957 != nil:
    section.add "Version", valid_605957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605958 = header.getOrDefault("X-Amz-Date")
  valid_605958 = validateParameter(valid_605958, JString, required = false,
                                 default = nil)
  if valid_605958 != nil:
    section.add "X-Amz-Date", valid_605958
  var valid_605959 = header.getOrDefault("X-Amz-Security-Token")
  valid_605959 = validateParameter(valid_605959, JString, required = false,
                                 default = nil)
  if valid_605959 != nil:
    section.add "X-Amz-Security-Token", valid_605959
  var valid_605960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605960 = validateParameter(valid_605960, JString, required = false,
                                 default = nil)
  if valid_605960 != nil:
    section.add "X-Amz-Content-Sha256", valid_605960
  var valid_605961 = header.getOrDefault("X-Amz-Algorithm")
  valid_605961 = validateParameter(valid_605961, JString, required = false,
                                 default = nil)
  if valid_605961 != nil:
    section.add "X-Amz-Algorithm", valid_605961
  var valid_605962 = header.getOrDefault("X-Amz-Signature")
  valid_605962 = validateParameter(valid_605962, JString, required = false,
                                 default = nil)
  if valid_605962 != nil:
    section.add "X-Amz-Signature", valid_605962
  var valid_605963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605963 = validateParameter(valid_605963, JString, required = false,
                                 default = nil)
  if valid_605963 != nil:
    section.add "X-Amz-SignedHeaders", valid_605963
  var valid_605964 = header.getOrDefault("X-Amz-Credential")
  valid_605964 = validateParameter(valid_605964, JString, required = false,
                                 default = nil)
  if valid_605964 != nil:
    section.add "X-Amz-Credential", valid_605964
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605965: Call_GetUploadServerCertificate_605948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_605965.validator(path, query, header, formData, body)
  let scheme = call_605965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605965.url(scheme.get, call_605965.host, call_605965.base,
                         call_605965.route, valid.getOrDefault("path"))
  result = hook(call_605965, url, valid)

proc call*(call_605966: Call_GetUploadServerCertificate_605948;
          ServerCertificateName: string; CertificateBody: string;
          PrivateKey: string; CertificateChain: string = "";
          Action: string = "UploadServerCertificate"; Path: string = "";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadServerCertificate
  ## <p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of AWS services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   ServerCertificateName: string (required)
  ##                        : <p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   CertificateChain: string
  ##                   : <p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Action: string (required)
  ##   Path: string
  ##       : <p>The path for the server certificate. For more information about paths, see <a 
  ## href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note>
  ##   PrivateKey: string (required)
  ##             : <p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   Version: string (required)
  var query_605967 = newJObject()
  add(query_605967, "ServerCertificateName", newJString(ServerCertificateName))
  add(query_605967, "CertificateBody", newJString(CertificateBody))
  add(query_605967, "CertificateChain", newJString(CertificateChain))
  add(query_605967, "Action", newJString(Action))
  add(query_605967, "Path", newJString(Path))
  add(query_605967, "PrivateKey", newJString(PrivateKey))
  add(query_605967, "Version", newJString(Version))
  result = call_605966.call(nil, query_605967, nil, nil, nil)

var getUploadServerCertificate* = Call_GetUploadServerCertificate_605948(
    name: "getUploadServerCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadServerCertificate",
    validator: validate_GetUploadServerCertificate_605949, base: "/",
    url: url_GetUploadServerCertificate_605950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostUploadSigningCertificate_606006 = ref object of OpenApiRestCall_600426
proc url_PostUploadSigningCertificate_606008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostUploadSigningCertificate_606007(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606009 = query.getOrDefault("Action")
  valid_606009 = validateParameter(valid_606009, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_606009 != nil:
    section.add "Action", valid_606009
  var valid_606010 = query.getOrDefault("Version")
  valid_606010 = validateParameter(valid_606010, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_606010 != nil:
    section.add "Version", valid_606010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_606011 = header.getOrDefault("X-Amz-Date")
  valid_606011 = validateParameter(valid_606011, JString, required = false,
                                 default = nil)
  if valid_606011 != nil:
    section.add "X-Amz-Date", valid_606011
  var valid_606012 = header.getOrDefault("X-Amz-Security-Token")
  valid_606012 = validateParameter(valid_606012, JString, required = false,
                                 default = nil)
  if valid_606012 != nil:
    section.add "X-Amz-Security-Token", valid_606012
  var valid_606013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606013 = validateParameter(valid_606013, JString, required = false,
                                 default = nil)
  if valid_606013 != nil:
    section.add "X-Amz-Content-Sha256", valid_606013
  var valid_606014 = header.getOrDefault("X-Amz-Algorithm")
  valid_606014 = validateParameter(valid_606014, JString, required = false,
                                 default = nil)
  if valid_606014 != nil:
    section.add "X-Amz-Algorithm", valid_606014
  var valid_606015 = header.getOrDefault("X-Amz-Signature")
  valid_606015 = validateParameter(valid_606015, JString, required = false,
                                 default = nil)
  if valid_606015 != nil:
    section.add "X-Amz-Signature", valid_606015
  var valid_606016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606016 = validateParameter(valid_606016, JString, required = false,
                                 default = nil)
  if valid_606016 != nil:
    section.add "X-Amz-SignedHeaders", valid_606016
  var valid_606017 = header.getOrDefault("X-Amz-Credential")
  valid_606017 = validateParameter(valid_606017, JString, required = false,
                                 default = nil)
  if valid_606017 != nil:
    section.add "X-Amz-Credential", valid_606017
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CertificateBody` field"
  var valid_606018 = formData.getOrDefault("CertificateBody")
  valid_606018 = validateParameter(valid_606018, JString, required = true,
                                 default = nil)
  if valid_606018 != nil:
    section.add "CertificateBody", valid_606018
  var valid_606019 = formData.getOrDefault("UserName")
  valid_606019 = validateParameter(valid_606019, JString, required = false,
                                 default = nil)
  if valid_606019 != nil:
    section.add "UserName", valid_606019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606020: Call_PostUploadSigningCertificate_606006; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606020.validator(path, query, header, formData, body)
  let scheme = call_606020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606020.url(scheme.get, call_606020.host, call_606020.base,
                         call_606020.route, valid.getOrDefault("path"))
  result = hook(call_606020, url, valid)

proc call*(call_606021: Call_PostUploadSigningCertificate_606006;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## postUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606022 = newJObject()
  var formData_606023 = newJObject()
  add(formData_606023, "CertificateBody", newJString(CertificateBody))
  add(formData_606023, "UserName", newJString(UserName))
  add(query_606022, "Action", newJString(Action))
  add(query_606022, "Version", newJString(Version))
  result = call_606021.call(nil, query_606022, nil, formData_606023, nil)

var postUploadSigningCertificate* = Call_PostUploadSigningCertificate_606006(
    name: "postUploadSigningCertificate", meth: HttpMethod.HttpPost,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_PostUploadSigningCertificate_606007, base: "/",
    url: url_PostUploadSigningCertificate_606008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetUploadSigningCertificate_605989 = ref object of OpenApiRestCall_600426
proc url_GetUploadSigningCertificate_605991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetUploadSigningCertificate_605990(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateBody: JString (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: JString
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CertificateBody` field"
  var valid_605992 = query.getOrDefault("CertificateBody")
  valid_605992 = validateParameter(valid_605992, JString, required = true,
                                 default = nil)
  if valid_605992 != nil:
    section.add "CertificateBody", valid_605992
  var valid_605993 = query.getOrDefault("UserName")
  valid_605993 = validateParameter(valid_605993, JString, required = false,
                                 default = nil)
  if valid_605993 != nil:
    section.add "UserName", valid_605993
  var valid_605994 = query.getOrDefault("Action")
  valid_605994 = validateParameter(valid_605994, JString, required = true, default = newJString(
      "UploadSigningCertificate"))
  if valid_605994 != nil:
    section.add "Action", valid_605994
  var valid_605995 = query.getOrDefault("Version")
  valid_605995 = validateParameter(valid_605995, JString, required = true,
                                 default = newJString("2010-05-08"))
  if valid_605995 != nil:
    section.add "Version", valid_605995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605996 = header.getOrDefault("X-Amz-Date")
  valid_605996 = validateParameter(valid_605996, JString, required = false,
                                 default = nil)
  if valid_605996 != nil:
    section.add "X-Amz-Date", valid_605996
  var valid_605997 = header.getOrDefault("X-Amz-Security-Token")
  valid_605997 = validateParameter(valid_605997, JString, required = false,
                                 default = nil)
  if valid_605997 != nil:
    section.add "X-Amz-Security-Token", valid_605997
  var valid_605998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605998 = validateParameter(valid_605998, JString, required = false,
                                 default = nil)
  if valid_605998 != nil:
    section.add "X-Amz-Content-Sha256", valid_605998
  var valid_605999 = header.getOrDefault("X-Amz-Algorithm")
  valid_605999 = validateParameter(valid_605999, JString, required = false,
                                 default = nil)
  if valid_605999 != nil:
    section.add "X-Amz-Algorithm", valid_605999
  var valid_606000 = header.getOrDefault("X-Amz-Signature")
  valid_606000 = validateParameter(valid_606000, JString, required = false,
                                 default = nil)
  if valid_606000 != nil:
    section.add "X-Amz-Signature", valid_606000
  var valid_606001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606001 = validateParameter(valid_606001, JString, required = false,
                                 default = nil)
  if valid_606001 != nil:
    section.add "X-Amz-SignedHeaders", valid_606001
  var valid_606002 = header.getOrDefault("X-Amz-Credential")
  valid_606002 = validateParameter(valid_606002, JString, required = false,
                                 default = nil)
  if valid_606002 != nil:
    section.add "X-Amz-Credential", valid_606002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606003: Call_GetUploadSigningCertificate_605989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ## 
  let valid = call_606003.validator(path, query, header, formData, body)
  let scheme = call_606003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606003.url(scheme.get, call_606003.host, call_606003.base,
                         call_606003.route, valid.getOrDefault("path"))
  result = hook(call_606003, url, valid)

proc call*(call_606004: Call_GetUploadSigningCertificate_605989;
          CertificateBody: string; UserName: string = "";
          Action: string = "UploadSigningCertificate";
          Version: string = "2010-05-08"): Recallable =
  ## getUploadSigningCertificate
  ## <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. This operation works for access keys under the AWS account. Consequently, you can use this operation to manage AWS account root user credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>
  ##   CertificateBody: string (required)
  ##                  : <p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (\u0020) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF)</p> </li> <li> <p>The special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D)</p> </li> </ul>
  ##   UserName: string
  ##           : <p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606005 = newJObject()
  add(query_606005, "CertificateBody", newJString(CertificateBody))
  add(query_606005, "UserName", newJString(UserName))
  add(query_606005, "Action", newJString(Action))
  add(query_606005, "Version", newJString(Version))
  result = call_606004.call(nil, query_606005, nil, nil, nil)

var getUploadSigningCertificate* = Call_GetUploadSigningCertificate_605989(
    name: "getUploadSigningCertificate", meth: HttpMethod.HttpGet,
    host: "iam.amazonaws.com", route: "/#Action=UploadSigningCertificate",
    validator: validate_GetUploadSigningCertificate_605990, base: "/",
    url: url_GetUploadSigningCertificate_605991,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
